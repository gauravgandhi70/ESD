                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Thu Nov 10 16:15:36 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl __sdcc_external_startup
                             14 	.globl _P5_7
                             15 	.globl _P5_6
                             16 	.globl _P5_5
                             17 	.globl _P5_4
                             18 	.globl _P5_3
                             19 	.globl _P5_2
                             20 	.globl _P5_1
                             21 	.globl _P5_0
                             22 	.globl _P4_7
                             23 	.globl _P4_6
                             24 	.globl _P4_5
                             25 	.globl _P4_4
                             26 	.globl _P4_3
                             27 	.globl _P4_2
                             28 	.globl _P4_1
                             29 	.globl _P4_0
                             30 	.globl _PX0L
                             31 	.globl _PT0L
                             32 	.globl _PX1L
                             33 	.globl _PT1L
                             34 	.globl _PLS
                             35 	.globl _PT2L
                             36 	.globl _PPCL
                             37 	.globl _EC
                             38 	.globl _CCF0
                             39 	.globl _CCF1
                             40 	.globl _CCF2
                             41 	.globl _CCF3
                             42 	.globl _CCF4
                             43 	.globl _CR
                             44 	.globl _CF
                             45 	.globl _TF2
                             46 	.globl _EXF2
                             47 	.globl _RCLK
                             48 	.globl _TCLK
                             49 	.globl _EXEN2
                             50 	.globl _TR2
                             51 	.globl _C_T2
                             52 	.globl _CP_RL2
                             53 	.globl _T2CON_7
                             54 	.globl _T2CON_6
                             55 	.globl _T2CON_5
                             56 	.globl _T2CON_4
                             57 	.globl _T2CON_3
                             58 	.globl _T2CON_2
                             59 	.globl _T2CON_1
                             60 	.globl _T2CON_0
                             61 	.globl _PT2
                             62 	.globl _ET2
                             63 	.globl _CY
                             64 	.globl _AC
                             65 	.globl _F0
                             66 	.globl _RS1
                             67 	.globl _RS0
                             68 	.globl _OV
                             69 	.globl _F1
                             70 	.globl _P
                             71 	.globl _PS
                             72 	.globl _PT1
                             73 	.globl _PX1
                             74 	.globl _PT0
                             75 	.globl _PX0
                             76 	.globl _RD
                             77 	.globl _WR
                             78 	.globl _T1
                             79 	.globl _T0
                             80 	.globl _INT1
                             81 	.globl _INT0
                             82 	.globl _TXD
                             83 	.globl _RXD
                             84 	.globl _P3_7
                             85 	.globl _P3_6
                             86 	.globl _P3_5
                             87 	.globl _P3_4
                             88 	.globl _P3_3
                             89 	.globl _P3_2
                             90 	.globl _P3_1
                             91 	.globl _P3_0
                             92 	.globl _EA
                             93 	.globl _ES
                             94 	.globl _ET1
                             95 	.globl _EX1
                             96 	.globl _ET0
                             97 	.globl _EX0
                             98 	.globl _P2_7
                             99 	.globl _P2_6
                            100 	.globl _P2_5
                            101 	.globl _P2_4
                            102 	.globl _P2_3
                            103 	.globl _P2_2
                            104 	.globl _P2_1
                            105 	.globl _P2_0
                            106 	.globl _SM0
                            107 	.globl _SM1
                            108 	.globl _SM2
                            109 	.globl _REN
                            110 	.globl _TB8
                            111 	.globl _RB8
                            112 	.globl _TI
                            113 	.globl _RI
                            114 	.globl _P1_7
                            115 	.globl _P1_6
                            116 	.globl _P1_5
                            117 	.globl _P1_4
                            118 	.globl _P1_3
                            119 	.globl _P1_2
                            120 	.globl _P1_1
                            121 	.globl _P1_0
                            122 	.globl _TF1
                            123 	.globl _TR1
                            124 	.globl _TF0
                            125 	.globl _TR0
                            126 	.globl _IE1
                            127 	.globl _IT1
                            128 	.globl _IE0
                            129 	.globl _IT0
                            130 	.globl _P0_7
                            131 	.globl _P0_6
                            132 	.globl _P0_5
                            133 	.globl _P0_4
                            134 	.globl _P0_3
                            135 	.globl _P0_2
                            136 	.globl _P0_1
                            137 	.globl _P0_0
                            138 	.globl _EECON
                            139 	.globl _KBF
                            140 	.globl _KBE
                            141 	.globl _KBLS
                            142 	.globl _BRL
                            143 	.globl _BDRCON
                            144 	.globl _T2MOD
                            145 	.globl _SPDAT
                            146 	.globl _SPSTA
                            147 	.globl _SPCON
                            148 	.globl _SADEN
                            149 	.globl _SADDR
                            150 	.globl _WDTPRG
                            151 	.globl _WDTRST
                            152 	.globl _P5
                            153 	.globl _P4
                            154 	.globl _IPH1
                            155 	.globl _IPL1
                            156 	.globl _IPH0
                            157 	.globl _IPL0
                            158 	.globl _IEN1
                            159 	.globl _IEN0
                            160 	.globl _CMOD
                            161 	.globl _CL
                            162 	.globl _CH
                            163 	.globl _CCON
                            164 	.globl _CCAPM4
                            165 	.globl _CCAPM3
                            166 	.globl _CCAPM2
                            167 	.globl _CCAPM1
                            168 	.globl _CCAPM0
                            169 	.globl _CCAP4L
                            170 	.globl _CCAP3L
                            171 	.globl _CCAP2L
                            172 	.globl _CCAP1L
                            173 	.globl _CCAP0L
                            174 	.globl _CCAP4H
                            175 	.globl _CCAP3H
                            176 	.globl _CCAP2H
                            177 	.globl _CCAP1H
                            178 	.globl _CCAP0H
                            179 	.globl _CKCKON1
                            180 	.globl _CKCKON0
                            181 	.globl _CKRL
                            182 	.globl _AUXR1
                            183 	.globl _AUXR
                            184 	.globl _TH2
                            185 	.globl _TL2
                            186 	.globl _RCAP2H
                            187 	.globl _RCAP2L
                            188 	.globl _T2CON
                            189 	.globl _B
                            190 	.globl _ACC
                            191 	.globl _PSW
                            192 	.globl _IP
                            193 	.globl _P3
                            194 	.globl _IE
                            195 	.globl _P2
                            196 	.globl _SBUF
                            197 	.globl _SCON
                            198 	.globl _P1
                            199 	.globl _TH1
                            200 	.globl _TH0
                            201 	.globl _TL1
                            202 	.globl _TL0
                            203 	.globl _TMOD
                            204 	.globl _TCON
                            205 	.globl _PCON
                            206 	.globl _DPH
                            207 	.globl _DPL
                            208 	.globl _SP
                            209 	.globl _P0
                            210 	.globl _read
                            211 	.globl _write
                            212 	.globl _lcd_display_PARM_3
                            213 	.globl _lcd_display_PARM_2
                            214 	.globl _putchar
                            215 	.globl _getchar
                            216 	.globl _uart_init
                            217 	.globl _lcd_display
                            218 	.globl _hex_dump
                            219 	.globl _atoh
                            220 	.globl _atoh_data
                            221 	.globl _DDRAM_dump
                            222 	.globl _CGRAM_dump
                            223 ;--------------------------------------------------------
                            224 ; special function registers
                            225 ;--------------------------------------------------------
                            226 	.area RSEG    (DATA)
                    0080    227 _P0	=	0x0080
                    0081    228 _SP	=	0x0081
                    0082    229 _DPL	=	0x0082
                    0083    230 _DPH	=	0x0083
                    0087    231 _PCON	=	0x0087
                    0088    232 _TCON	=	0x0088
                    0089    233 _TMOD	=	0x0089
                    008A    234 _TL0	=	0x008a
                    008B    235 _TL1	=	0x008b
                    008C    236 _TH0	=	0x008c
                    008D    237 _TH1	=	0x008d
                    0090    238 _P1	=	0x0090
                    0098    239 _SCON	=	0x0098
                    0099    240 _SBUF	=	0x0099
                    00A0    241 _P2	=	0x00a0
                    00A8    242 _IE	=	0x00a8
                    00B0    243 _P3	=	0x00b0
                    00B8    244 _IP	=	0x00b8
                    00D0    245 _PSW	=	0x00d0
                    00E0    246 _ACC	=	0x00e0
                    00F0    247 _B	=	0x00f0
                    00C8    248 _T2CON	=	0x00c8
                    00CA    249 _RCAP2L	=	0x00ca
                    00CB    250 _RCAP2H	=	0x00cb
                    00CC    251 _TL2	=	0x00cc
                    00CD    252 _TH2	=	0x00cd
                    008E    253 _AUXR	=	0x008e
                    00A2    254 _AUXR1	=	0x00a2
                    0097    255 _CKRL	=	0x0097
                    008F    256 _CKCKON0	=	0x008f
                    008F    257 _CKCKON1	=	0x008f
                    00FA    258 _CCAP0H	=	0x00fa
                    00FB    259 _CCAP1H	=	0x00fb
                    00FC    260 _CCAP2H	=	0x00fc
                    00FD    261 _CCAP3H	=	0x00fd
                    00FE    262 _CCAP4H	=	0x00fe
                    00EA    263 _CCAP0L	=	0x00ea
                    00EB    264 _CCAP1L	=	0x00eb
                    00EC    265 _CCAP2L	=	0x00ec
                    00ED    266 _CCAP3L	=	0x00ed
                    00EE    267 _CCAP4L	=	0x00ee
                    00DA    268 _CCAPM0	=	0x00da
                    00DB    269 _CCAPM1	=	0x00db
                    00DC    270 _CCAPM2	=	0x00dc
                    00DD    271 _CCAPM3	=	0x00dd
                    00DE    272 _CCAPM4	=	0x00de
                    00D8    273 _CCON	=	0x00d8
                    00F9    274 _CH	=	0x00f9
                    00E9    275 _CL	=	0x00e9
                    00D9    276 _CMOD	=	0x00d9
                    00A8    277 _IEN0	=	0x00a8
                    00B1    278 _IEN1	=	0x00b1
                    00B8    279 _IPL0	=	0x00b8
                    00B7    280 _IPH0	=	0x00b7
                    00B2    281 _IPL1	=	0x00b2
                    00B3    282 _IPH1	=	0x00b3
                    00C0    283 _P4	=	0x00c0
                    00D8    284 _P5	=	0x00d8
                    00A6    285 _WDTRST	=	0x00a6
                    00A7    286 _WDTPRG	=	0x00a7
                    00A9    287 _SADDR	=	0x00a9
                    00B9    288 _SADEN	=	0x00b9
                    00C3    289 _SPCON	=	0x00c3
                    00C4    290 _SPSTA	=	0x00c4
                    00C5    291 _SPDAT	=	0x00c5
                    00C9    292 _T2MOD	=	0x00c9
                    009B    293 _BDRCON	=	0x009b
                    009A    294 _BRL	=	0x009a
                    009C    295 _KBLS	=	0x009c
                    009D    296 _KBE	=	0x009d
                    009E    297 _KBF	=	0x009e
                    00D2    298 _EECON	=	0x00d2
                            299 ;--------------------------------------------------------
                            300 ; special function bits
                            301 ;--------------------------------------------------------
                            302 	.area RSEG    (DATA)
                    0080    303 _P0_0	=	0x0080
                    0081    304 _P0_1	=	0x0081
                    0082    305 _P0_2	=	0x0082
                    0083    306 _P0_3	=	0x0083
                    0084    307 _P0_4	=	0x0084
                    0085    308 _P0_5	=	0x0085
                    0086    309 _P0_6	=	0x0086
                    0087    310 _P0_7	=	0x0087
                    0088    311 _IT0	=	0x0088
                    0089    312 _IE0	=	0x0089
                    008A    313 _IT1	=	0x008a
                    008B    314 _IE1	=	0x008b
                    008C    315 _TR0	=	0x008c
                    008D    316 _TF0	=	0x008d
                    008E    317 _TR1	=	0x008e
                    008F    318 _TF1	=	0x008f
                    0090    319 _P1_0	=	0x0090
                    0091    320 _P1_1	=	0x0091
                    0092    321 _P1_2	=	0x0092
                    0093    322 _P1_3	=	0x0093
                    0094    323 _P1_4	=	0x0094
                    0095    324 _P1_5	=	0x0095
                    0096    325 _P1_6	=	0x0096
                    0097    326 _P1_7	=	0x0097
                    0098    327 _RI	=	0x0098
                    0099    328 _TI	=	0x0099
                    009A    329 _RB8	=	0x009a
                    009B    330 _TB8	=	0x009b
                    009C    331 _REN	=	0x009c
                    009D    332 _SM2	=	0x009d
                    009E    333 _SM1	=	0x009e
                    009F    334 _SM0	=	0x009f
                    00A0    335 _P2_0	=	0x00a0
                    00A1    336 _P2_1	=	0x00a1
                    00A2    337 _P2_2	=	0x00a2
                    00A3    338 _P2_3	=	0x00a3
                    00A4    339 _P2_4	=	0x00a4
                    00A5    340 _P2_5	=	0x00a5
                    00A6    341 _P2_6	=	0x00a6
                    00A7    342 _P2_7	=	0x00a7
                    00A8    343 _EX0	=	0x00a8
                    00A9    344 _ET0	=	0x00a9
                    00AA    345 _EX1	=	0x00aa
                    00AB    346 _ET1	=	0x00ab
                    00AC    347 _ES	=	0x00ac
                    00AF    348 _EA	=	0x00af
                    00B0    349 _P3_0	=	0x00b0
                    00B1    350 _P3_1	=	0x00b1
                    00B2    351 _P3_2	=	0x00b2
                    00B3    352 _P3_3	=	0x00b3
                    00B4    353 _P3_4	=	0x00b4
                    00B5    354 _P3_5	=	0x00b5
                    00B6    355 _P3_6	=	0x00b6
                    00B7    356 _P3_7	=	0x00b7
                    00B0    357 _RXD	=	0x00b0
                    00B1    358 _TXD	=	0x00b1
                    00B2    359 _INT0	=	0x00b2
                    00B3    360 _INT1	=	0x00b3
                    00B4    361 _T0	=	0x00b4
                    00B5    362 _T1	=	0x00b5
                    00B6    363 _WR	=	0x00b6
                    00B7    364 _RD	=	0x00b7
                    00B8    365 _PX0	=	0x00b8
                    00B9    366 _PT0	=	0x00b9
                    00BA    367 _PX1	=	0x00ba
                    00BB    368 _PT1	=	0x00bb
                    00BC    369 _PS	=	0x00bc
                    00D0    370 _P	=	0x00d0
                    00D1    371 _F1	=	0x00d1
                    00D2    372 _OV	=	0x00d2
                    00D3    373 _RS0	=	0x00d3
                    00D4    374 _RS1	=	0x00d4
                    00D5    375 _F0	=	0x00d5
                    00D6    376 _AC	=	0x00d6
                    00D7    377 _CY	=	0x00d7
                    00AD    378 _ET2	=	0x00ad
                    00BD    379 _PT2	=	0x00bd
                    00C8    380 _T2CON_0	=	0x00c8
                    00C9    381 _T2CON_1	=	0x00c9
                    00CA    382 _T2CON_2	=	0x00ca
                    00CB    383 _T2CON_3	=	0x00cb
                    00CC    384 _T2CON_4	=	0x00cc
                    00CD    385 _T2CON_5	=	0x00cd
                    00CE    386 _T2CON_6	=	0x00ce
                    00CF    387 _T2CON_7	=	0x00cf
                    00C8    388 _CP_RL2	=	0x00c8
                    00C9    389 _C_T2	=	0x00c9
                    00CA    390 _TR2	=	0x00ca
                    00CB    391 _EXEN2	=	0x00cb
                    00CC    392 _TCLK	=	0x00cc
                    00CD    393 _RCLK	=	0x00cd
                    00CE    394 _EXF2	=	0x00ce
                    00CF    395 _TF2	=	0x00cf
                    00DF    396 _CF	=	0x00df
                    00DE    397 _CR	=	0x00de
                    00DC    398 _CCF4	=	0x00dc
                    00DB    399 _CCF3	=	0x00db
                    00DA    400 _CCF2	=	0x00da
                    00D9    401 _CCF1	=	0x00d9
                    00D8    402 _CCF0	=	0x00d8
                    00AE    403 _EC	=	0x00ae
                    00BE    404 _PPCL	=	0x00be
                    00BD    405 _PT2L	=	0x00bd
                    00BC    406 _PLS	=	0x00bc
                    00BB    407 _PT1L	=	0x00bb
                    00BA    408 _PX1L	=	0x00ba
                    00B9    409 _PT0L	=	0x00b9
                    00B8    410 _PX0L	=	0x00b8
                    00C0    411 _P4_0	=	0x00c0
                    00C1    412 _P4_1	=	0x00c1
                    00C2    413 _P4_2	=	0x00c2
                    00C3    414 _P4_3	=	0x00c3
                    00C4    415 _P4_4	=	0x00c4
                    00C5    416 _P4_5	=	0x00c5
                    00C6    417 _P4_6	=	0x00c6
                    00C7    418 _P4_7	=	0x00c7
                    00D8    419 _P5_0	=	0x00d8
                    00D9    420 _P5_1	=	0x00d9
                    00DA    421 _P5_2	=	0x00da
                    00DB    422 _P5_3	=	0x00db
                    00DC    423 _P5_4	=	0x00dc
                    00DD    424 _P5_5	=	0x00dd
                    00DE    425 _P5_6	=	0x00de
                    00DF    426 _P5_7	=	0x00df
                            427 ;--------------------------------------------------------
                            428 ; overlayable register banks
                            429 ;--------------------------------------------------------
                            430 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     431 	.ds 8
                            432 ;--------------------------------------------------------
                            433 ; internal ram data
                            434 ;--------------------------------------------------------
                            435 	.area DSEG    (DATA)
   0000                     436 _main_sloc0_1_0:
   0000                     437 	.ds 2
   0002                     438 _hex_dump_sloc0_1_0:
   0002                     439 	.ds 2
                            440 ;--------------------------------------------------------
                            441 ; overlayable items in internal ram 
                            442 ;--------------------------------------------------------
                            443 	.area OSEG    (OVR,DATA)
                            444 ;--------------------------------------------------------
                            445 ; Stack segment in internal ram 
                            446 ;--------------------------------------------------------
                            447 	.area	SSEG	(DATA)
   0000                     448 __start__stack:
   0000                     449 	.ds	1
                            450 
                            451 ;--------------------------------------------------------
                            452 ; indirectly addressable internal ram data
                            453 ;--------------------------------------------------------
                            454 	.area ISEG    (DATA)
                            455 ;--------------------------------------------------------
                            456 ; bit data
                            457 ;--------------------------------------------------------
                            458 	.area BSEG    (BIT)
                            459 ;--------------------------------------------------------
                            460 ; paged external ram data
                            461 ;--------------------------------------------------------
                            462 	.area PSEG    (PAG,XDATA)
                            463 ;--------------------------------------------------------
                            464 ; external ram data
                            465 ;--------------------------------------------------------
                            466 	.area XSEG    (XDATA)
   0000                     467 _main_ch_1_1:
   0000                     468 	.ds 10
   000A                     469 _main_b_1_1:
   000A                     470 	.ds 10
   0014                     471 _main_d_1_1:
   0014                     472 	.ds 10
   001E                     473 _main_flag_1_1:
   001E                     474 	.ds 2
   0020                     475 _putchar_c_1_1:
   0020                     476 	.ds 1
   0021                     477 _lcd_display_PARM_2:
   0021                     478 	.ds 1
   0022                     479 _lcd_display_PARM_3:
   0022                     480 	.ds 3
   0025                     481 _lcd_display_rd_1_1:
   0025                     482 	.ds 1
   0026                     483 _lcd_display_d_1_1:
   0026                     484 	.ds 5
   002B                     485 _lcd_display_flag_1_1:
   002B                     486 	.ds 2
   002D                     487 _hex_dump_ch_1_1:
   002D                     488 	.ds 10
   0037                     489 _hex_dump_b_1_1:
   0037                     490 	.ds 10
   0041                     491 _hex_dump_d_1_1:
   0041                     492 	.ds 10
   004B                     493 _hex_dump_r_1_1:
   004B                     494 	.ds 17
   005C                     495 _hex_dump_st_addr_1_1:
   005C                     496 	.ds 2
   005E                     497 _hex_dump_flag_1_1:
   005E                     498 	.ds 2
   0060                     499 _hex_dump_j_1_1:
   0060                     500 	.ds 2
   0062                     501 _atoh_c_1_1:
   0062                     502 	.ds 3
   0065                     503 _atoh_result_1_1:
   0065                     504 	.ds 2
   0067                     505 _atoh_data_c_1_1:
   0067                     506 	.ds 3
   006A                     507 _atoh_data_result_1_1:
   006A                     508 	.ds 2
                            509 ;--------------------------------------------------------
                            510 ; external initialized ram data
                            511 ;--------------------------------------------------------
                            512 	.area XISEG   (XDATA)
   0000                     513 _write::
   0000                     514 	.ds 2
   0002                     515 _read::
   0002                     516 	.ds 2
                            517 	.area HOME    (CODE)
                            518 	.area GSINIT0 (CODE)
                            519 	.area GSINIT1 (CODE)
                            520 	.area GSINIT2 (CODE)
                            521 	.area GSINIT3 (CODE)
                            522 	.area GSINIT4 (CODE)
                            523 	.area GSINIT5 (CODE)
                            524 	.area GSINIT  (CODE)
                            525 	.area GSFINAL (CODE)
                            526 	.area CSEG    (CODE)
                            527 ;--------------------------------------------------------
                            528 ; interrupt vector 
                            529 ;--------------------------------------------------------
                            530 	.area HOME    (CODE)
   0000                     531 __interrupt_vect:
   0000 02s00r00            532 	ljmp	__sdcc_gsinit_startup
                            533 ;--------------------------------------------------------
                            534 ; global & static initialisations
                            535 ;--------------------------------------------------------
                            536 	.area HOME    (CODE)
                            537 	.area GSINIT  (CODE)
                            538 	.area GSFINAL (CODE)
                            539 	.area GSINIT  (CODE)
                            540 	.globl __sdcc_gsinit_startup
                            541 	.globl __sdcc_program_startup
                            542 	.globl __start__stack
                            543 	.globl __mcs51_genXINIT
                            544 	.globl __mcs51_genXRAMCLEAR
                            545 	.globl __mcs51_genRAMCLEAR
                            546 	.area GSFINAL (CODE)
   0000 02s00r00            547 	ljmp	__sdcc_program_startup
                            548 ;--------------------------------------------------------
                            549 ; Home
                            550 ;--------------------------------------------------------
                            551 	.area HOME    (CODE)
                            552 	.area CSEG    (CODE)
   0000                     553 __sdcc_program_startup:
   0000 12s00r0C            554 	lcall	_main
                            555 ;	return from main will lock up
   0003 80 FE               556 	sjmp .
                            557 ;--------------------------------------------------------
                            558 ; code
                            559 ;--------------------------------------------------------
                            560 	.area CSEG    (CODE)
                            561 ;------------------------------------------------------------
                            562 ;Allocation info for local variables in function '_sdcc_external_startup'
                            563 ;------------------------------------------------------------
                            564 ;------------------------------------------------------------
                            565 ;	main.c:19: _sdcc_external_startup()
                            566 ;	-----------------------------------------
                            567 ;	 function _sdcc_external_startup
                            568 ;	-----------------------------------------
   0005                     569 __sdcc_external_startup:
                    0002    570 	ar2 = 0x02
                    0003    571 	ar3 = 0x03
                    0004    572 	ar4 = 0x04
                    0005    573 	ar5 = 0x05
                    0006    574 	ar6 = 0x06
                    0007    575 	ar7 = 0x07
                    0000    576 	ar0 = 0x00
                    0001    577 	ar1 = 0x01
                            578 ;	main.c:21: AUXR |= 0xC0;
                            579 ;	genOr
   0005 43 8E C0            580 	orl	_AUXR,#0xC0
                            581 ;	main.c:22: return 0;													// Enables 1 KB RAM	 Before main starts
                            582 ;	genRet
                            583 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            584 	mov	dptr,#0x0000
                            585 ;	Peephole 300	removed redundant label 00101$
   000B 22                  586 	ret
                            587 ;------------------------------------------------------------
                            588 ;Allocation info for local variables in function 'main'
                            589 ;------------------------------------------------------------
                            590 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                            591 ;ch                        Allocated with name '_main_ch_1_1'
                            592 ;b                         Allocated with name '_main_b_1_1'
                            593 ;d                         Allocated with name '_main_d_1_1'
                            594 ;store                     Allocated with name '_main_store_1_1'
                            595 ;rd                        Allocated with name '_main_rd_1_1'
                            596 ;page                      Allocated with name '_main_page_1_1'
                            597 ;addr                      Allocated with name '_main_addr_1_1'
                            598 ;flag                      Allocated with name '_main_flag_1_1'
                            599 ;dat                       Allocated with name '_main_dat_1_1'
                            600 ;aaa                       Allocated with name '_main_aaa_1_1'
                            601 ;------------------------------------------------------------
                            602 ;	main.c:25: void main(void)
                            603 ;	-----------------------------------------
                            604 ;	 function main
                            605 ;	-----------------------------------------
   000C                     606 _main:
                            607 ;	main.c:30: P1_0=1;
                            608 ;	genAssign
   000C D2 90               609 	setb	_P1_0
                            610 ;	main.c:31: lcd_init();
                            611 ;	genCall
   000E 12s00r00            612 	lcall	_lcd_init
                            613 ;	main.c:32: uart_init()	;
                            614 ;	genCall
   0011 12s03r02            615 	lcall	_uart_init
                            616 ;	main.c:33: lcdgotoaddr(0x00);
                            617 ;	genCall
   0014 75 82 00            618 	mov	dpl,#0x00
   0017 12s00r00            619 	lcall	_lcdgotoaddr
                            620 ;	main.c:34: lcdgotoaddr(0x85);
                            621 ;	genCall
   001A 75 82 85            622 	mov	dpl,#0x85
   001D 12s00r00            623 	lcall	_lcdgotoaddr
                            624 ;	main.c:35: lcdputstr("Hi");
                            625 ;	genCall
                            626 ;	Peephole 182.a	used 16 bit load of DPTR
   0020 90s00r00            627 	mov	dptr,#__str_0
   0023 75 F0 80            628 	mov	b,#0x80
   0026 12s00r00            629 	lcall	_lcdputstr
                            630 ;	main.c:37: lcdgotoxy(4,3);
                            631 ;	genAssign
   0029 90s00r00            632 	mov	dptr,#_lcdgotoxy_PARM_2
   002C 74 03               633 	mov	a,#0x03
   002E F0                  634 	movx	@dptr,a
                            635 ;	genCall
   002F 75 82 04            636 	mov	dpl,#0x04
   0032 12s00r00            637 	lcall	_lcdgotoxy
                            638 ;	main.c:38: lcdputstr("Hello World");
                            639 ;	genCall
                            640 ;	Peephole 182.a	used 16 bit load of DPTR
   0035 90s00r03            641 	mov	dptr,#__str_1
   0038 75 F0 80            642 	mov	b,#0x80
   003B 12s00r00            643 	lcall	_lcdputstr
                            644 ;	main.c:40: printf_tiny("\n\rControl Commands: \n\r1. Write Byte \n\r2. Read Byte \n\r3. LCD Display\n\r4. Clear LCD\n\r5. Hex Dump\n\r6. DDRAM Dump\n\r7. CGRAM Dump\t");
                            645 ;	genIpush
   003E 74r0F               646 	mov	a,#__str_2
   0040 C0 E0               647 	push	acc
   0042 74s00               648 	mov	a,#(__str_2 >> 8)
   0044 C0 E0               649 	push	acc
                            650 ;	genCall
   0046 12s00r00            651 	lcall	_printf_tiny
   0049 15 81               652 	dec	sp
   004B 15 81               653 	dec	sp
                            654 ;	main.c:41: while(1)
   004D                     655 00154$:
                            656 ;	genIfx
                            657 ;	genIfxJump
                            658 ;	Peephole 108.d	removed ljmp by inverse jump logic
   004D 30 98 FD            659 	jnb	_RI,00154$
                            660 ;	Peephole 300	removed redundant label 00180$
                            661 ;	main.c:45: store= getchar();
                            662 ;	genCall
   0050 12s02rF8            663 	lcall	_getchar
                            664 ;	main.c:46: putchar(store);
                            665 ;	genCall
   0053 AA 82               666 	mov  r2,dpl
                            667 ;	Peephole 177.a	removed redundant mov
   0055 C0 02               668 	push	ar2
   0057 12s02rE6            669 	lcall	_putchar
   005A D0 02               670 	pop	ar2
                            671 ;	main.c:47: if(store=='1'){printf_tiny("\n\n\r\t\t Write Command"); }
                            672 ;	genCmpEq
                            673 ;	gencjne
                            674 ;	gencjneshort
                            675 ;	Peephole 241.d	optimized compare
   005C E4                  676 	clr	a
   005D BA 31 01            677 	cjne	r2,#0x31,00181$
   0060 04                  678 	inc	a
   0061                     679 00181$:
                            680 ;	Peephole 300	removed redundant label 00182$
                            681 ;	genIfx
   0061 FB                  682 	mov	r3,a
                            683 ;	Peephole 105	removed redundant mov
                            684 ;	genIfxJump
                            685 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0062 60 1A               686 	jz	00113$
                            687 ;	Peephole 300	removed redundant label 00183$
                            688 ;	genIpush
   0064 C0 02               689 	push	ar2
   0066 C0 03               690 	push	ar3
   0068 74r8D               691 	mov	a,#__str_3
   006A C0 E0               692 	push	acc
   006C 74s00               693 	mov	a,#(__str_3 >> 8)
   006E C0 E0               694 	push	acc
                            695 ;	genCall
   0070 12s00r00            696 	lcall	_printf_tiny
   0073 15 81               697 	dec	sp
   0075 15 81               698 	dec	sp
   0077 D0 03               699 	pop	ar3
   0079 D0 02               700 	pop	ar2
   007B 02s00rEC            701 	ljmp	00114$
   007E                     702 00113$:
                            703 ;	main.c:48: else if(store=='2'){printf_tiny("\n\n\r\t\t Read Command"); }
                            704 ;	genCmpEq
                            705 ;	gencjneshort
                            706 ;	Peephole 112.b	changed ljmp to sjmp
                            707 ;	Peephole 198.b	optimized misc jump sequence
   007E BA 32 19            708 	cjne	r2,#0x32,00110$
                            709 ;	Peephole 200.b	removed redundant sjmp
                            710 ;	Peephole 300	removed redundant label 00184$
                            711 ;	Peephole 300	removed redundant label 00185$
                            712 ;	genIpush
   0081 C0 02               713 	push	ar2
   0083 C0 03               714 	push	ar3
   0085 74rA1               715 	mov	a,#__str_4
   0087 C0 E0               716 	push	acc
   0089 74s00               717 	mov	a,#(__str_4 >> 8)
   008B C0 E0               718 	push	acc
                            719 ;	genCall
   008D 12s00r00            720 	lcall	_printf_tiny
   0090 15 81               721 	dec	sp
   0092 15 81               722 	dec	sp
   0094 D0 03               723 	pop	ar3
   0096 D0 02               724 	pop	ar2
                            725 ;	Peephole 112.b	changed ljmp to sjmp
   0098 80 52               726 	sjmp	00114$
   009A                     727 00110$:
                            728 ;	main.c:49: else if(store=='3'){printf_tiny("\n\n\r\t\t LCD DISPLAY"); }
                            729 ;	genCmpEq
                            730 ;	gencjneshort
                            731 ;	Peephole 112.b	changed ljmp to sjmp
                            732 ;	Peephole 198.b	optimized misc jump sequence
   009A BA 33 19            733 	cjne	r2,#0x33,00107$
                            734 ;	Peephole 200.b	removed redundant sjmp
                            735 ;	Peephole 300	removed redundant label 00186$
                            736 ;	Peephole 300	removed redundant label 00187$
                            737 ;	genIpush
   009D C0 02               738 	push	ar2
   009F C0 03               739 	push	ar3
   00A1 74rB4               740 	mov	a,#__str_5
   00A3 C0 E0               741 	push	acc
   00A5 74s00               742 	mov	a,#(__str_5 >> 8)
   00A7 C0 E0               743 	push	acc
                            744 ;	genCall
   00A9 12s00r00            745 	lcall	_printf_tiny
   00AC 15 81               746 	dec	sp
   00AE 15 81               747 	dec	sp
   00B0 D0 03               748 	pop	ar3
   00B2 D0 02               749 	pop	ar2
                            750 ;	Peephole 112.b	changed ljmp to sjmp
   00B4 80 36               751 	sjmp	00114$
   00B6                     752 00107$:
                            753 ;	main.c:50: else if(store=='4'){printf_tiny("\n\n\r\t\t Clear LCD"); }
                            754 ;	genCmpEq
                            755 ;	gencjneshort
                            756 ;	Peephole 112.b	changed ljmp to sjmp
                            757 ;	Peephole 198.b	optimized misc jump sequence
   00B6 BA 34 19            758 	cjne	r2,#0x34,00104$
                            759 ;	Peephole 200.b	removed redundant sjmp
                            760 ;	Peephole 300	removed redundant label 00188$
                            761 ;	Peephole 300	removed redundant label 00189$
                            762 ;	genIpush
   00B9 C0 02               763 	push	ar2
   00BB C0 03               764 	push	ar3
   00BD 74rC6               765 	mov	a,#__str_6
   00BF C0 E0               766 	push	acc
   00C1 74s00               767 	mov	a,#(__str_6 >> 8)
   00C3 C0 E0               768 	push	acc
                            769 ;	genCall
   00C5 12s00r00            770 	lcall	_printf_tiny
   00C8 15 81               771 	dec	sp
   00CA 15 81               772 	dec	sp
   00CC D0 03               773 	pop	ar3
   00CE D0 02               774 	pop	ar2
                            775 ;	Peephole 112.b	changed ljmp to sjmp
   00D0 80 1A               776 	sjmp	00114$
   00D2                     777 00104$:
                            778 ;	main.c:51: else if(store=='5'){printf_tiny("\n\n\r\t\t Hex Dump Command"); }
                            779 ;	genCmpEq
                            780 ;	gencjneshort
                            781 ;	Peephole 112.b	changed ljmp to sjmp
                            782 ;	Peephole 198.b	optimized misc jump sequence
   00D2 BA 35 17            783 	cjne	r2,#0x35,00114$
                            784 ;	Peephole 200.b	removed redundant sjmp
                            785 ;	Peephole 300	removed redundant label 00190$
                            786 ;	Peephole 300	removed redundant label 00191$
                            787 ;	genIpush
   00D5 C0 02               788 	push	ar2
   00D7 C0 03               789 	push	ar3
   00D9 74rD6               790 	mov	a,#__str_7
   00DB C0 E0               791 	push	acc
   00DD 74s00               792 	mov	a,#(__str_7 >> 8)
   00DF C0 E0               793 	push	acc
                            794 ;	genCall
   00E1 12s00r00            795 	lcall	_printf_tiny
   00E4 15 81               796 	dec	sp
   00E6 15 81               797 	dec	sp
   00E8 D0 03               798 	pop	ar3
   00EA D0 02               799 	pop	ar2
   00EC                     800 00114$:
                            801 ;	main.c:52: if(store=='1' || store=='2' || store=='3')
                            802 ;	genIfx
   00EC EB                  803 	mov	a,r3
                            804 ;	genIfxJump
                            805 ;	Peephole 108.b	removed ljmp by inverse jump logic
   00ED 70 0D               806 	jnz	00146$
                            807 ;	Peephole 300	removed redundant label 00192$
                            808 ;	genCmpEq
                            809 ;	gencjneshort
   00EF BA 32 02            810 	cjne	r2,#0x32,00193$
                            811 ;	Peephole 112.b	changed ljmp to sjmp
   00F2 80 08               812 	sjmp	00146$
   00F4                     813 00193$:
                            814 ;	genCmpEq
                            815 ;	gencjneshort
   00F4 BA 33 02            816 	cjne	r2,#0x33,00194$
   00F7 80 03               817 	sjmp	00195$
   00F9                     818 00194$:
   00F9 02s02rB3            819 	ljmp	00147$
   00FC                     820 00195$:
   00FC                     821 00146$:
                            822 ;	main.c:69: printf_tiny("\n\n\r Enter Address in Hex in HHH format between 000 to 7FF: ");
                            823 ;	genIpush
   00FC C0 02               824 	push	ar2
   00FE C0 03               825 	push	ar3
   0100 74rED               826 	mov	a,#__str_8
   0102 C0 E0               827 	push	acc
   0104 74s00               828 	mov	a,#(__str_8 >> 8)
   0106 C0 E0               829 	push	acc
                            830 ;	genCall
   0108 12s00r00            831 	lcall	_printf_tiny
   010B 15 81               832 	dec	sp
   010D 15 81               833 	dec	sp
   010F D0 03               834 	pop	ar3
   0111 D0 02               835 	pop	ar2
                            836 ;	main.c:70: do{
   0113                     837 00118$:
                            838 ;	main.c:71: flag=0;
                            839 ;	genAssign
   0113 90s00r1E            840 	mov	dptr,#_main_flag_1_1
   0116 E4                  841 	clr	a
   0117 F0                  842 	movx	@dptr,a
   0118 A3                  843 	inc	dptr
   0119 F0                  844 	movx	@dptr,a
                            845 ;	main.c:72: gets(b);
                            846 ;	genCall
                            847 ;	Peephole 182.a	used 16 bit load of DPTR
   011A 90s00r0A            848 	mov	dptr,#_main_b_1_1
   011D 75 F0 00            849 	mov	b,#0x00
   0120 C0 02               850 	push	ar2
   0122 C0 03               851 	push	ar3
   0124 12s00r00            852 	lcall	_gets
   0127 D0 03               853 	pop	ar3
   0129 D0 02               854 	pop	ar2
                            855 ;	main.c:73: addr=atoh(b);
                            856 ;	genCall
                            857 ;	Peephole 182.a	used 16 bit load of DPTR
   012B 90s00r0A            858 	mov	dptr,#_main_b_1_1
   012E 75 F0 00            859 	mov	b,#0x00
   0131 C0 02               860 	push	ar2
   0133 C0 03               861 	push	ar3
   0135 12s06r6F            862 	lcall	_atoh
   0138 AC 82               863 	mov	r4,dpl
   013A AD 83               864 	mov	r5,dph
   013C D0 03               865 	pop	ar3
   013E D0 02               866 	pop	ar2
                            867 ;	main.c:74: printf_tiny("Address: %d",addr);
                            868 ;	genIpush
   0140 C0 02               869 	push	ar2
   0142 C0 03               870 	push	ar3
   0144 C0 04               871 	push	ar4
   0146 C0 05               872 	push	ar5
   0148 C0 04               873 	push	ar4
   014A C0 05               874 	push	ar5
                            875 ;	genIpush
   014C 74r29               876 	mov	a,#__str_9
   014E C0 E0               877 	push	acc
   0150 74s01               878 	mov	a,#(__str_9 >> 8)
   0152 C0 E0               879 	push	acc
                            880 ;	genCall
   0154 12s00r00            881 	lcall	_printf_tiny
   0157 E5 81               882 	mov	a,sp
   0159 24 FC               883 	add	a,#0xfc
   015B F5 81               884 	mov	sp,a
   015D D0 05               885 	pop	ar5
   015F D0 04               886 	pop	ar4
   0161 D0 03               887 	pop	ar3
   0163 D0 02               888 	pop	ar2
                            889 ;	main.c:75: if(addr<2048)
                            890 ;	genAssign
   0165 8C 06               891 	mov	ar6,r4
   0167 8D 07               892 	mov	ar7,r5
                            893 ;	genCmpLt
                            894 ;	genCmp
                            895 ;	genIfxJump
                            896 ;	Peephole 108.a	removed ljmp by inverse jump logic
                            897 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0169 74 F8               898 	mov	a,#0x100 - 0x08
   016B 2F                  899 	add	a,r7
   016C 40 0B               900 	jc	00116$
                            901 ;	Peephole 300	removed redundant label 00196$
                            902 ;	main.c:77: flag=1;
                            903 ;	genAssign
   016E 90s00r1E            904 	mov	dptr,#_main_flag_1_1
   0171 74 01               905 	mov	a,#0x01
   0173 F0                  906 	movx	@dptr,a
   0174 E4                  907 	clr	a
   0175 A3                  908 	inc	dptr
   0176 F0                  909 	movx	@dptr,a
                            910 ;	Peephole 112.b	changed ljmp to sjmp
   0177 80 1F               911 	sjmp	00119$
   0179                     912 00116$:
                            913 ;	main.c:82: printf_tiny("\n\n\rEnter valid number Address betweem 000 and 7FF: ");
                            914 ;	genIpush
   0179 C0 02               915 	push	ar2
   017B C0 03               916 	push	ar3
   017D C0 04               917 	push	ar4
   017F C0 05               918 	push	ar5
   0181 74r35               919 	mov	a,#__str_10
   0183 C0 E0               920 	push	acc
   0185 74s01               921 	mov	a,#(__str_10 >> 8)
   0187 C0 E0               922 	push	acc
                            923 ;	genCall
   0189 12s00r00            924 	lcall	_printf_tiny
   018C 15 81               925 	dec	sp
   018E 15 81               926 	dec	sp
   0190 D0 05               927 	pop	ar5
   0192 D0 04               928 	pop	ar4
   0194 D0 03               929 	pop	ar3
   0196 D0 02               930 	pop	ar2
   0198                     931 00119$:
                            932 ;	main.c:84: }while(flag==0);
                            933 ;	genAssign
   0198 90s00r1E            934 	mov	dptr,#_main_flag_1_1
   019B E0                  935 	movx	a,@dptr
   019C FE                  936 	mov	r6,a
   019D A3                  937 	inc	dptr
   019E E0                  938 	movx	a,@dptr
                            939 ;	genIfx
   019F FF                  940 	mov	r7,a
                            941 ;	Peephole 135	removed redundant mov
   01A0 4E                  942 	orl	a,r6
                            943 ;	genIfxJump
   01A1 70 03               944 	jnz	00197$
   01A3 02s01r13            945 	ljmp	00118$
   01A6                     946 00197$:
                            947 ;	main.c:85: page=addr/256;
                            948 ;	genAssign
   01A6 8C 06               949 	mov	ar6,r4
   01A8 8D 07               950 	mov	ar7,r5
                            951 ;	genRightShift
                            952 ;	genRightShiftLiteral
                            953 ;	genrshTwo
   01AA 8F*00               954 	mov	_main_sloc0_1_0,r7
   01AC 75*01 00            955 	mov	(_main_sloc0_1_0 + 1),#0x00
                            956 ;	main.c:86: if(store=='1')
                            957 ;	genIfx
   01AF EB                  958 	mov	a,r3
                            959 ;	genIfxJump
   01B0 70 03               960 	jnz	00198$
   01B2 02s02r4D            961 	ljmp	00133$
   01B5                     962 00198$:
                            963 ;	main.c:90: printf_tiny("\n\n\r Enter Data in Hex in HH format between 00 to FF: ");
                            964 ;	genIpush
   01B5 C0 04               965 	push	ar4
   01B7 C0 05               966 	push	ar5
   01B9 74r69               967 	mov	a,#__str_11
   01BB C0 E0               968 	push	acc
   01BD 74s01               969 	mov	a,#(__str_11 >> 8)
   01BF C0 E0               970 	push	acc
                            971 ;	genCall
   01C1 12s00r00            972 	lcall	_printf_tiny
   01C4 15 81               973 	dec	sp
   01C6 15 81               974 	dec	sp
   01C8 D0 05               975 	pop	ar5
   01CA D0 04               976 	pop	ar4
                            977 ;	main.c:91: do{
   01CC                     978 00124$:
                            979 ;	main.c:92: flag=0;
                            980 ;	genIpush
                            981 ;	genAssign
   01CC 90s00r1E            982 	mov	dptr,#_main_flag_1_1
   01CF E4                  983 	clr	a
   01D0 F0                  984 	movx	@dptr,a
   01D1 A3                  985 	inc	dptr
   01D2 F0                  986 	movx	@dptr,a
                            987 ;	main.c:93: gets(d);
                            988 ;	genCall
                            989 ;	Peephole 182.a	used 16 bit load of DPTR
   01D3 90s00r14            990 	mov	dptr,#_main_d_1_1
   01D6 75 F0 00            991 	mov	b,#0x00
   01D9 C0 04               992 	push	ar4
   01DB C0 05               993 	push	ar5
   01DD 12s00r00            994 	lcall	_gets
   01E0 D0 05               995 	pop	ar5
   01E2 D0 04               996 	pop	ar4
                            997 ;	main.c:94: dat=atoh_data(d);
                            998 ;	genCall
                            999 ;	Peephole 182.a	used 16 bit load of DPTR
   01E4 90s00r14           1000 	mov	dptr,#_main_d_1_1
   01E7 75 F0 00           1001 	mov	b,#0x00
   01EA C0 04              1002 	push	ar4
   01EC C0 05              1003 	push	ar5
   01EE 12s09r03           1004 	lcall	_atoh_data
   01F1 AB 82              1005 	mov	r3,dpl
   01F3 A8 83              1006 	mov	r0,dph
   01F5 D0 05              1007 	pop	ar5
   01F7 D0 04              1008 	pop	ar4
                           1009 ;	main.c:95: if(dat<256)
                           1010 ;	genAssign
   01F9 8B 01              1011 	mov	ar1,r3
   01FB 88 06              1012 	mov	ar6,r0
                           1013 ;	genCmpLt
                           1014 ;	genCmp
                           1015 ;	genIpop
                           1016 ;	genIfx
                           1017 ;	genIfxJump
                           1018 ;	Peephole 108.c	removed ljmp by inverse jump logic
                           1019 ;	Peephole 128	jump optimization
                           1020 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   01FD 74 FF              1021 	mov	a,#0x100 - 0x01
   01FF 2E                 1022 	add	a,r6
   0200 40 0B              1023 	jc	00122$
                           1024 ;	Peephole 300	removed redundant label 00199$
                           1025 ;	main.c:97: flag=1;
                           1026 ;	genAssign
   0202 90s00r1E           1027 	mov	dptr,#_main_flag_1_1
   0205 74 01              1028 	mov	a,#0x01
   0207 F0                 1029 	movx	@dptr,a
   0208 E4                 1030 	clr	a
   0209 A3                 1031 	inc	dptr
   020A F0                 1032 	movx	@dptr,a
                           1033 ;	Peephole 112.b	changed ljmp to sjmp
   020B 80 1F              1034 	sjmp	00125$
   020D                    1035 00122$:
                           1036 ;	main.c:102: printf_tiny("\n\n\rEnter valid data in Hex in HH format between 00 to FF: ");
                           1037 ;	genIpush
   020D C0 03              1038 	push	ar3
   020F C0 04              1039 	push	ar4
   0211 C0 05              1040 	push	ar5
   0213 C0 00              1041 	push	ar0
   0215 74r9F              1042 	mov	a,#__str_12
   0217 C0 E0              1043 	push	acc
   0219 74s01              1044 	mov	a,#(__str_12 >> 8)
   021B C0 E0              1045 	push	acc
                           1046 ;	genCall
   021D 12s00r00           1047 	lcall	_printf_tiny
   0220 15 81              1048 	dec	sp
   0222 15 81              1049 	dec	sp
   0224 D0 00              1050 	pop	ar0
   0226 D0 05              1051 	pop	ar5
   0228 D0 04              1052 	pop	ar4
   022A D0 03              1053 	pop	ar3
   022C                    1054 00125$:
                           1055 ;	main.c:104: }while(flag==0);
                           1056 ;	genAssign
   022C 90s00r1E           1057 	mov	dptr,#_main_flag_1_1
   022F E0                 1058 	movx	a,@dptr
   0230 F9                 1059 	mov	r1,a
   0231 A3                 1060 	inc	dptr
   0232 E0                 1061 	movx	a,@dptr
                           1062 ;	genIfx
   0233 FE                 1063 	mov	r6,a
                           1064 ;	Peephole 135	removed redundant mov
   0234 49                 1065 	orl	a,r1
                           1066 ;	genIfxJump
                           1067 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0235 60 95              1068 	jz	00124$
                           1069 ;	Peephole 300	removed redundant label 00200$
                           1070 ;	main.c:105: EEPROM_WriteByte((addr-page*256),dat,page);
                           1071 ;	genAssign
   0237 8C 06              1072 	mov	ar6,r4
                           1073 ;	genCast
                           1074 ;	genCast
                           1075 ;	peephole 177.f	removed redundant move
   0239 AF*00              1076 	mov	r7,_main_sloc0_1_0
                           1077 ;	genAssign
                           1078 ;	genCast
   023B 90s00r00           1079 	mov	dptr,#_EEPROM_WriteByte_PARM_2
   023E EB                 1080 	mov	a,r3
   023F F0                 1081 	movx	@dptr,a
                           1082 ;	genAssign
   0240 90s00r00           1083 	mov	dptr,#_EEPROM_WriteByte_PARM_3
   0243 EF                 1084 	mov	a,r7
   0244 F0                 1085 	movx	@dptr,a
                           1086 ;	genCall
   0245 8E 82              1087 	mov	dpl,r6
   0247 12s00r00           1088 	lcall	_EEPROM_WriteByte
   024A 02s02rD4           1089 	ljmp	00148$
   024D                    1090 00133$:
                           1091 ;	main.c:107: else if(store=='2')
                           1092 ;	genCmpEq
                           1093 ;	gencjneshort
                           1094 ;	Peephole 112.b	changed ljmp to sjmp
                           1095 ;	Peephole 198.b	optimized misc jump sequence
   024D BA 32 36           1096 	cjne	r2,#0x32,00130$
                           1097 ;	Peephole 200.b	removed redundant sjmp
                           1098 ;	Peephole 300	removed redundant label 00201$
                           1099 ;	Peephole 300	removed redundant label 00202$
                           1100 ;	main.c:109: rd=EEPROM_ReadByte((addr-page*256),page);
                           1101 ;	genAssign
   0250 8C 03              1102 	mov	ar3,r4
   0252 8D 06              1103 	mov	ar6,r5
                           1104 ;	genCast
                           1105 ;	genCast
   0254 90s00r00           1106 	mov	dptr,#_EEPROM_ReadByte_PARM_2
   0257 E5*00              1107 	mov	a,_main_sloc0_1_0
   0259 F0                 1108 	movx	@dptr,a
                           1109 ;	genCall
   025A 8B 82              1110 	mov	dpl,r3
   025C C0 04              1111 	push	ar4
   025E C0 05              1112 	push	ar5
   0260 12s00r00           1113 	lcall	_EEPROM_ReadByte
   0263 AB 82              1114 	mov	r3,dpl
   0265 D0 05              1115 	pop	ar5
   0267 D0 04              1116 	pop	ar4
                           1117 ;	main.c:110: printf_tiny("\n\n\r%x:%x \n",addr,rd);
                           1118 ;	genCast
   0269 7E 00              1119 	mov	r6,#0x00
                           1120 ;	genIpush
   026B C0 03              1121 	push	ar3
   026D C0 06              1122 	push	ar6
                           1123 ;	genIpush
   026F C0 04              1124 	push	ar4
   0271 C0 05              1125 	push	ar5
                           1126 ;	genIpush
   0273 74rDA              1127 	mov	a,#__str_13
   0275 C0 E0              1128 	push	acc
   0277 74s01              1129 	mov	a,#(__str_13 >> 8)
   0279 C0 E0              1130 	push	acc
                           1131 ;	genCall
   027B 12s00r00           1132 	lcall	_printf_tiny
   027E E5 81              1133 	mov	a,sp
   0280 24 FA              1134 	add	a,#0xfa
   0282 F5 81              1135 	mov	sp,a
                           1136 ;	Peephole 112.b	changed ljmp to sjmp
   0284 80 4E              1137 	sjmp	00148$
   0286                    1138 00130$:
                           1139 ;	main.c:112: else if(store=='3')
                           1140 ;	genCmpEq
                           1141 ;	gencjneshort
                           1142 ;	Peephole 112.b	changed ljmp to sjmp
                           1143 ;	Peephole 198.b	optimized misc jump sequence
   0286 BA 33 4B           1144 	cjne	r2,#0x33,00148$
                           1145 ;	Peephole 200.b	removed redundant sjmp
                           1146 ;	Peephole 300	removed redundant label 00203$
                           1147 ;	Peephole 300	removed redundant label 00204$
                           1148 ;	main.c:114: rd=EEPROM_ReadByte((addr-page*256),page);
                           1149 ;	genAssign
                           1150 ;	genCast
                           1151 ;	genCast
   0289 90s00r00           1152 	mov	dptr,#_EEPROM_ReadByte_PARM_2
   028C E5*00              1153 	mov	a,_main_sloc0_1_0
   028E F0                 1154 	movx	@dptr,a
                           1155 ;	genCall
   028F 8C 82              1156 	mov	dpl,r4
   0291 12s00r00           1157 	lcall	_EEPROM_ReadByte
   0294 AB 82              1158 	mov	r3,dpl
                           1159 ;	main.c:115: lcd_display(rd,ch[0],b);
                           1160 ;	genPointerGet
                           1161 ;	genFarPointerGet
   0296 90s00r00           1162 	mov	dptr,#_main_ch_1_1
   0299 E0                 1163 	movx	a,@dptr
                           1164 ;	genAssign
   029A FC                 1165 	mov	r4,a
   029B 90s00r21           1166 	mov	dptr,#_lcd_display_PARM_2
                           1167 ;	Peephole 100	removed redundant mov
   029E F0                 1168 	movx	@dptr,a
                           1169 ;	genAssign
   029F 90s00r22           1170 	mov	dptr,#_lcd_display_PARM_3
   02A2 74r0A              1171 	mov	a,#_main_b_1_1
   02A4 F0                 1172 	movx	@dptr,a
   02A5 A3                 1173 	inc	dptr
   02A6 74s00              1174 	mov	a,#(_main_b_1_1 >> 8)
   02A8 F0                 1175 	movx	@dptr,a
   02A9 A3                 1176 	inc	dptr
                           1177 ;	Peephole 181	changed mov to clr
   02AA E4                 1178 	clr	a
   02AB F0                 1179 	movx	@dptr,a
                           1180 ;	genCall
   02AC 8B 82              1181 	mov	dpl,r3
   02AE 12s03r1B           1182 	lcall	_lcd_display
                           1183 ;	Peephole 112.b	changed ljmp to sjmp
   02B1 80 21              1184 	sjmp	00148$
   02B3                    1185 00147$:
                           1186 ;	main.c:122: else if(store=='4')
                           1187 ;	genCmpEq
                           1188 ;	gencjneshort
                           1189 ;	Peephole 112.b	changed ljmp to sjmp
                           1190 ;	Peephole 198.b	optimized misc jump sequence
   02B3 BA 34 08           1191 	cjne	r2,#0x34,00144$
                           1192 ;	Peephole 200.b	removed redundant sjmp
                           1193 ;	Peephole 300	removed redundant label 00205$
                           1194 ;	Peephole 300	removed redundant label 00206$
                           1195 ;	main.c:124: lcdputcmd(1);
                           1196 ;	genCall
   02B6 75 82 01           1197 	mov	dpl,#0x01
   02B9 12s00r00           1198 	lcall	_lcdputcmd
                           1199 ;	Peephole 112.b	changed ljmp to sjmp
   02BC 80 16              1200 	sjmp	00148$
   02BE                    1201 00144$:
                           1202 ;	main.c:128: else if(store=='5')
                           1203 ;	genCmpEq
                           1204 ;	gencjneshort
                           1205 ;	Peephole 112.b	changed ljmp to sjmp
                           1206 ;	Peephole 198.b	optimized misc jump sequence
   02BE BA 35 05           1207 	cjne	r2,#0x35,00141$
                           1208 ;	Peephole 200.b	removed redundant sjmp
                           1209 ;	Peephole 300	removed redundant label 00207$
                           1210 ;	Peephole 300	removed redundant label 00208$
                           1211 ;	main.c:130: hex_dump();
                           1212 ;	genCall
   02C1 12s03rC2           1213 	lcall	_hex_dump
                           1214 ;	Peephole 112.b	changed ljmp to sjmp
   02C4 80 0E              1215 	sjmp	00148$
   02C6                    1216 00141$:
                           1217 ;	main.c:133: else if(store=='6')
                           1218 ;	genCmpEq
                           1219 ;	gencjneshort
                           1220 ;	Peephole 112.b	changed ljmp to sjmp
                           1221 ;	Peephole 198.b	optimized misc jump sequence
   02C6 BA 36 05           1222 	cjne	r2,#0x36,00138$
                           1223 ;	Peephole 200.b	removed redundant sjmp
                           1224 ;	Peephole 300	removed redundant label 00209$
                           1225 ;	Peephole 300	removed redundant label 00210$
                           1226 ;	main.c:135: DDRAM_dump();
                           1227 ;	genCall
   02C9 12s0Br25           1228 	lcall	_DDRAM_dump
                           1229 ;	Peephole 112.b	changed ljmp to sjmp
   02CC 80 06              1230 	sjmp	00148$
   02CE                    1231 00138$:
                           1232 ;	main.c:138: else if(store=='7')
                           1233 ;	genCmpEq
                           1234 ;	gencjneshort
                           1235 ;	Peephole 112.b	changed ljmp to sjmp
                           1236 ;	Peephole 198.b	optimized misc jump sequence
   02CE BA 37 03           1237 	cjne	r2,#0x37,00148$
                           1238 ;	Peephole 200.b	removed redundant sjmp
                           1239 ;	Peephole 300	removed redundant label 00211$
                           1240 ;	Peephole 300	removed redundant label 00212$
                           1241 ;	main.c:140: CGRAM_dump();
                           1242 ;	genCall
   02D1 12s0BrD1           1243 	lcall	_CGRAM_dump
   02D4                    1244 00148$:
                           1245 ;	main.c:144: printf_tiny("\n\rControl Commands: \n\r1. Write Byte \n\r2. Read Byte \n\r3. LCD Display\n\r4. Clear LCD\n\r5. Hex Dump\n\r6. DDRAM Dump\n\r7. CGRAM Dump\t");
                           1246 ;	genIpush
   02D4 74r0F              1247 	mov	a,#__str_2
   02D6 C0 E0              1248 	push	acc
   02D8 74s00              1249 	mov	a,#(__str_2 >> 8)
   02DA C0 E0              1250 	push	acc
                           1251 ;	genCall
   02DC 12s00r00           1252 	lcall	_printf_tiny
   02DF 15 81              1253 	dec	sp
   02E1 15 81              1254 	dec	sp
   02E3 02s00r4D           1255 	ljmp	00154$
                           1256 ;	Peephole 259.b	removed redundant label 00156$ and ret
                           1257 ;
                           1258 ;------------------------------------------------------------
                           1259 ;Allocation info for local variables in function 'putchar'
                           1260 ;------------------------------------------------------------
                           1261 ;c                         Allocated with name '_putchar_c_1_1'
                           1262 ;------------------------------------------------------------
                           1263 ;	main.c:153: void putchar(char c)											// Putchar function is used to send a single character to the
                           1264 ;	-----------------------------------------
                           1265 ;	 function putchar
                           1266 ;	-----------------------------------------
   02E6                    1267 _putchar:
                           1268 ;	genReceive
   02E6 E5 82              1269 	mov	a,dpl
   02E8 90s00r20           1270 	mov	dptr,#_putchar_c_1_1
   02EB F0                 1271 	movx	@dptr,a
                           1272 ;	main.c:155: while (TI==0);												// wait for tx to be ready and send data and clear TI flag
   02EC                    1273 00101$:
                           1274 ;	genIfx
                           1275 ;	genIfxJump
                           1276 ;	Peephole 108.d	removed ljmp by inverse jump logic
   02EC 30 99 FD           1277 	jnb	_TI,00101$
                           1278 ;	Peephole 300	removed redundant label 00108$
                           1279 ;	main.c:156: SBUF = c;
                           1280 ;	genAssign
   02EF 90s00r20           1281 	mov	dptr,#_putchar_c_1_1
   02F2 E0                 1282 	movx	a,@dptr
   02F3 F5 99              1283 	mov	_SBUF,a
                           1284 ;	main.c:157: TI = 0;
                           1285 ;	genAssign
   02F5 C2 99              1286 	clr	_TI
                           1287 ;	Peephole 300	removed redundant label 00104$
   02F7 22                 1288 	ret
                           1289 ;------------------------------------------------------------
                           1290 ;Allocation info for local variables in function 'getchar'
                           1291 ;------------------------------------------------------------
                           1292 ;------------------------------------------------------------
                           1293 ;	main.c:162: char getchar ()													// getchar function is used to recieve a single character from the
                           1294 ;	-----------------------------------------
                           1295 ;	 function getchar
                           1296 ;	-----------------------------------------
   02F8                    1297 _getchar:
                           1298 ;	main.c:164: while (!RI);
   02F8                    1299 00101$:
                           1300 ;	genIfx
                           1301 ;	genIfxJump
                           1302 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1303 ;	main.c:165: RI = 0;
                           1304 ;	genAssign
                           1305 ;	Peephole 250.a	using atomic test and clear
   02F8 10 98 02           1306 	jbc	_RI,00108$
   02FB 80 FB              1307 	sjmp	00101$
   02FD                    1308 00108$:
                           1309 ;	main.c:166: return SBUF;
                           1310 ;	genAssign
   02FD AA 99              1311 	mov	r2,_SBUF
                           1312 ;	genRet
   02FF 8A 82              1313 	mov	dpl,r2
                           1314 ;	Peephole 300	removed redundant label 00104$
   0301 22                 1315 	ret
                           1316 ;------------------------------------------------------------
                           1317 ;Allocation info for local variables in function 'uart_init'
                           1318 ;------------------------------------------------------------
                           1319 ;------------------------------------------------------------
                           1320 ;	main.c:171: void uart_init()												// UART initialized
                           1321 ;	-----------------------------------------
                           1322 ;	 function uart_init
                           1323 ;	-----------------------------------------
   0302                    1324 _uart_init:
                           1325 ;	main.c:173: T2CON=0;
                           1326 ;	genAssign
   0302 75 C8 00           1327 	mov	_T2CON,#0x00
                           1328 ;	main.c:174: BDRCON=0;
                           1329 ;	genAssign
   0305 75 9B 00           1330 	mov	_BDRCON,#0x00
                           1331 ;	main.c:175: PCON |= 0x00;
                           1332 ;	genAssign
   0308 85 87 87           1333 	mov	_PCON,_PCON
                           1334 ;	main.c:176: TH1  =  0xFD;												// Timer 1 is used in mode 2 auto reload mode
                           1335 ;	genAssign
   030B 75 8D FD           1336 	mov	_TH1,#0xFD
                           1337 ;	main.c:177: TL1  =  0X00;												// Setting baud rate to 9600 by loading FF into TH1
                           1338 ;	genAssign
   030E 75 8B 00           1339 	mov	_TL1,#0x00
                           1340 ;	main.c:178: TCON |= 0x40;
                           1341 ;	genOr
   0311 43 88 40           1342 	orl	_TCON,#0x40
                           1343 ;	main.c:179: SCON |= 0x52;
                           1344 ;	genOr
   0314 43 98 52           1345 	orl	_SCON,#0x52
                           1346 ;	main.c:180: TMOD = 0x20;												// Start timer
                           1347 ;	genAssign
   0317 75 89 20           1348 	mov	_TMOD,#0x20
                           1349 ;	Peephole 300	removed redundant label 00101$
   031A 22                 1350 	ret
                           1351 ;------------------------------------------------------------
                           1352 ;Allocation info for local variables in function 'lcd_display'
                           1353 ;------------------------------------------------------------
                           1354 ;p                         Allocated with name '_lcd_display_PARM_2'
                           1355 ;a                         Allocated with name '_lcd_display_PARM_3'
                           1356 ;rd                        Allocated with name '_lcd_display_rd_1_1'
                           1357 ;d                         Allocated with name '_lcd_display_d_1_1'
                           1358 ;row                       Allocated with name '_lcd_display_row_1_1'
                           1359 ;flag                      Allocated with name '_lcd_display_flag_1_1'
                           1360 ;------------------------------------------------------------
                           1361 ;	main.c:184: void lcd_display(char rd, char p, char *a)
                           1362 ;	-----------------------------------------
                           1363 ;	 function lcd_display
                           1364 ;	-----------------------------------------
   031B                    1365 _lcd_display:
                           1366 ;	genReceive
   031B E5 82              1367 	mov	a,dpl
   031D 90s00r25           1368 	mov	dptr,#_lcd_display_rd_1_1
   0320 F0                 1369 	movx	@dptr,a
                           1370 ;	main.c:189: printf_tiny("\n\n\r Enter Row number between 0 to 3: ");
                           1371 ;	genIpush
   0321 74rE5              1372 	mov	a,#__str_14
   0323 C0 E0              1373 	push	acc
   0325 74s01              1374 	mov	a,#(__str_14 >> 8)
   0327 C0 E0              1375 	push	acc
                           1376 ;	genCall
   0329 12s00r00           1377 	lcall	_printf_tiny
   032C 15 81              1378 	dec	sp
   032E 15 81              1379 	dec	sp
                           1380 ;	main.c:190: do{
   0330                    1381 00104$:
                           1382 ;	main.c:191: flag=0;
                           1383 ;	genAssign
   0330 90s00r2B           1384 	mov	dptr,#_lcd_display_flag_1_1
   0333 E4                 1385 	clr	a
   0334 F0                 1386 	movx	@dptr,a
   0335 A3                 1387 	inc	dptr
   0336 F0                 1388 	movx	@dptr,a
                           1389 ;	main.c:192: gets(d);
                           1390 ;	genCall
                           1391 ;	Peephole 182.a	used 16 bit load of DPTR
   0337 90s00r26           1392 	mov	dptr,#_lcd_display_d_1_1
   033A 75 F0 00           1393 	mov	b,#0x00
   033D 12s00r00           1394 	lcall	_gets
                           1395 ;	main.c:193: row=atoi(d);
                           1396 ;	genCall
                           1397 ;	Peephole 182.a	used 16 bit load of DPTR
   0340 90s00r26           1398 	mov	dptr,#_lcd_display_d_1_1
   0343 75 F0 00           1399 	mov	b,#0x00
   0346 12s00r00           1400 	lcall	_atoi
   0349 AA 82              1401 	mov	r2,dpl
   034B AB 83              1402 	mov	r3,dph
                           1403 ;	main.c:194: if(row<4)
                           1404 ;	genAssign
   034D 8A 04              1405 	mov	ar4,r2
   034F 8B 05              1406 	mov	ar5,r3
                           1407 ;	genCmpLt
                           1408 ;	genCmp
   0351 C3                 1409 	clr	c
   0352 EC                 1410 	mov	a,r4
   0353 94 04              1411 	subb	a,#0x04
   0355 ED                 1412 	mov	a,r5
   0356 94 00              1413 	subb	a,#0x00
                           1414 ;	genIfxJump
                           1415 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0358 50 0B              1416 	jnc	00102$
                           1417 ;	Peephole 300	removed redundant label 00112$
                           1418 ;	main.c:196: flag=1;
                           1419 ;	genAssign
   035A 90s00r2B           1420 	mov	dptr,#_lcd_display_flag_1_1
   035D 74 01              1421 	mov	a,#0x01
   035F F0                 1422 	movx	@dptr,a
   0360 E4                 1423 	clr	a
   0361 A3                 1424 	inc	dptr
   0362 F0                 1425 	movx	@dptr,a
                           1426 ;	Peephole 112.b	changed ljmp to sjmp
   0363 80 17              1427 	sjmp	00105$
   0365                    1428 00102$:
                           1429 ;	main.c:201: printf_tiny("\n\n\r Enter valid row number betweem 0 and 3: ");
                           1430 ;	genIpush
   0365 C0 02              1431 	push	ar2
   0367 C0 03              1432 	push	ar3
   0369 74r0B              1433 	mov	a,#__str_15
   036B C0 E0              1434 	push	acc
   036D 74s02              1435 	mov	a,#(__str_15 >> 8)
   036F C0 E0              1436 	push	acc
                           1437 ;	genCall
   0371 12s00r00           1438 	lcall	_printf_tiny
   0374 15 81              1439 	dec	sp
   0376 15 81              1440 	dec	sp
   0378 D0 03              1441 	pop	ar3
   037A D0 02              1442 	pop	ar2
   037C                    1443 00105$:
                           1444 ;	main.c:203: }while(flag==0);
                           1445 ;	genAssign
   037C 90s00r2B           1446 	mov	dptr,#_lcd_display_flag_1_1
   037F E0                 1447 	movx	a,@dptr
   0380 FC                 1448 	mov	r4,a
   0381 A3                 1449 	inc	dptr
   0382 E0                 1450 	movx	a,@dptr
                           1451 ;	genIfx
   0383 FD                 1452 	mov	r5,a
                           1453 ;	Peephole 135	removed redundant mov
   0384 4C                 1454 	orl	a,r4
                           1455 ;	genIfxJump
                           1456 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0385 60 A9              1457 	jz	00104$
                           1458 ;	Peephole 300	removed redundant label 00113$
                           1459 ;	main.c:205: lcdgotoxy(row+1,1);
                           1460 ;	genAssign
                           1461 ;	genCast
                           1462 ;	genPlus
                           1463 ;     genPlusIncr
   0387 0A                 1464 	inc	r2
                           1465 ;	genAssign
   0388 90s00r00           1466 	mov	dptr,#_lcdgotoxy_PARM_2
   038B 74 01              1467 	mov	a,#0x01
   038D F0                 1468 	movx	@dptr,a
                           1469 ;	genCall
   038E 8A 82              1470 	mov	dpl,r2
   0390 12s00r00           1471 	lcall	_lcdgotoxy
                           1472 ;	main.c:206: lcdputch(p-1);
                           1473 ;	genAssign
   0393 90s00r21           1474 	mov	dptr,#_lcd_display_PARM_2
   0396 E0                 1475 	movx	a,@dptr
   0397 FA                 1476 	mov	r2,a
                           1477 ;	genMinus
                           1478 ;	genMinusDec
   0398 1A                 1479 	dec	r2
                           1480 ;	genCall
   0399 8A 82              1481 	mov	dpl,r2
   039B 12s00r00           1482 	lcall	_lcdputch
                           1483 ;	main.c:207: lcdputstr(a);
                           1484 ;	genAssign
   039E 90s00r22           1485 	mov	dptr,#_lcd_display_PARM_3
   03A1 E0                 1486 	movx	a,@dptr
   03A2 FA                 1487 	mov	r2,a
   03A3 A3                 1488 	inc	dptr
   03A4 E0                 1489 	movx	a,@dptr
   03A5 FB                 1490 	mov	r3,a
   03A6 A3                 1491 	inc	dptr
   03A7 E0                 1492 	movx	a,@dptr
   03A8 FC                 1493 	mov	r4,a
                           1494 ;	genCall
   03A9 8A 82              1495 	mov	dpl,r2
   03AB 8B 83              1496 	mov	dph,r3
   03AD 8C F0              1497 	mov	b,r4
   03AF 12s00r00           1498 	lcall	_lcdputstr
                           1499 ;	main.c:208: lcdputch(':');
                           1500 ;	genCall
   03B2 75 82 3A           1501 	mov	dpl,#0x3A
   03B5 12s00r00           1502 	lcall	_lcdputch
                           1503 ;	main.c:209: lcdputch(rd);
                           1504 ;	genAssign
   03B8 90s00r25           1505 	mov	dptr,#_lcd_display_rd_1_1
   03BB E0                 1506 	movx	a,@dptr
                           1507 ;	genCall
   03BC FA                 1508 	mov	r2,a
                           1509 ;	Peephole 244.c	loading dpl from a instead of r2
   03BD F5 82              1510 	mov	dpl,a
                           1511 ;	Peephole 253.b	replaced lcall/ret with ljmp
   03BF 02s00r00           1512 	ljmp	_lcdputch
                           1513 ;
                           1514 ;------------------------------------------------------------
                           1515 ;Allocation info for local variables in function 'hex_dump'
                           1516 ;------------------------------------------------------------
                           1517 ;sloc0                     Allocated with name '_hex_dump_sloc0_1_0'
                           1518 ;ch                        Allocated with name '_hex_dump_ch_1_1'
                           1519 ;b                         Allocated with name '_hex_dump_b_1_1'
                           1520 ;d                         Allocated with name '_hex_dump_d_1_1'
                           1521 ;r                         Allocated with name '_hex_dump_r_1_1'
                           1522 ;st_addr                   Allocated with name '_hex_dump_st_addr_1_1'
                           1523 ;st_page                   Allocated with name '_hex_dump_st_page_1_1'
                           1524 ;end_addr                  Allocated with name '_hex_dump_end_addr_1_1'
                           1525 ;end_page                  Allocated with name '_hex_dump_end_page_1_1'
                           1526 ;flag                      Allocated with name '_hex_dump_flag_1_1'
                           1527 ;i                         Allocated with name '_hex_dump_i_1_1'
                           1528 ;aaa                       Allocated with name '_hex_dump_aaa_1_1'
                           1529 ;j                         Allocated with name '_hex_dump_j_1_1'
                           1530 ;bytes                     Allocated with name '_hex_dump_bytes_1_1'
                           1531 ;------------------------------------------------------------
                           1532 ;	main.c:213: void hex_dump()
                           1533 ;	-----------------------------------------
                           1534 ;	 function hex_dump
                           1535 ;	-----------------------------------------
   03C2                    1536 _hex_dump:
                           1537 ;	main.c:217: unsigned int st_addr,st_page, end_addr,end_page,flag=0,i,aaa,j=0;
                           1538 ;	genAssign
   03C2 90s00r60           1539 	mov	dptr,#_hex_dump_j_1_1
   03C5 E4                 1540 	clr	a
   03C6 F0                 1541 	movx	@dptr,a
   03C7 A3                 1542 	inc	dptr
   03C8 F0                 1543 	movx	@dptr,a
                           1544 ;	main.c:219: do{
   03C9                    1545 00115$:
                           1546 ;	main.c:235: printf_tiny("\n\n\r Enter Start Address in Hex in HHH format between 000 to 7FF: ");
                           1547 ;	genIpush
   03C9 74r38              1548 	mov	a,#__str_16
   03CB C0 E0              1549 	push	acc
   03CD 74s02              1550 	mov	a,#(__str_16 >> 8)
   03CF C0 E0              1551 	push	acc
                           1552 ;	genCall
   03D1 12s00r00           1553 	lcall	_printf_tiny
   03D4 15 81              1554 	dec	sp
   03D6 15 81              1555 	dec	sp
                           1556 ;	main.c:236: do{
   03D8                    1557 00104$:
                           1558 ;	main.c:237: flag=0;
                           1559 ;	genAssign
   03D8 90s00r5E           1560 	mov	dptr,#_hex_dump_flag_1_1
   03DB E4                 1561 	clr	a
   03DC F0                 1562 	movx	@dptr,a
   03DD A3                 1563 	inc	dptr
   03DE F0                 1564 	movx	@dptr,a
                           1565 ;	main.c:238: gets(b);
                           1566 ;	genCall
                           1567 ;	Peephole 182.a	used 16 bit load of DPTR
   03DF 90s00r37           1568 	mov	dptr,#_hex_dump_b_1_1
   03E2 75 F0 00           1569 	mov	b,#0x00
   03E5 12s00r00           1570 	lcall	_gets
                           1571 ;	main.c:239: st_addr=atoh(b);
                           1572 ;	genCall
                           1573 ;	Peephole 182.a	used 16 bit load of DPTR
   03E8 90s00r37           1574 	mov	dptr,#_hex_dump_b_1_1
   03EB 75 F0 00           1575 	mov	b,#0x00
   03EE 12s06r6F           1576 	lcall	_atoh
   03F1 AA 82              1577 	mov	r2,dpl
   03F3 AB 83              1578 	mov	r3,dph
                           1579 ;	genAssign
   03F5 90s00r5C           1580 	mov	dptr,#_hex_dump_st_addr_1_1
   03F8 EA                 1581 	mov	a,r2
   03F9 F0                 1582 	movx	@dptr,a
   03FA A3                 1583 	inc	dptr
   03FB EB                 1584 	mov	a,r3
   03FC F0                 1585 	movx	@dptr,a
                           1586 ;	main.c:240: if(st_addr<2048)
                           1587 ;	genAssign
   03FD 8A 04              1588 	mov	ar4,r2
   03FF 8B 05              1589 	mov	ar5,r3
                           1590 ;	genCmpLt
                           1591 ;	genCmp
                           1592 ;	genIfxJump
                           1593 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           1594 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0401 74 F8              1595 	mov	a,#0x100 - 0x08
   0403 2D                 1596 	add	a,r5
   0404 40 0B              1597 	jc	00102$
                           1598 ;	Peephole 300	removed redundant label 00140$
                           1599 ;	main.c:242: flag=1;
                           1600 ;	genAssign
   0406 90s00r5E           1601 	mov	dptr,#_hex_dump_flag_1_1
   0409 74 01              1602 	mov	a,#0x01
   040B F0                 1603 	movx	@dptr,a
   040C E4                 1604 	clr	a
   040D A3                 1605 	inc	dptr
   040E F0                 1606 	movx	@dptr,a
                           1607 ;	Peephole 112.b	changed ljmp to sjmp
   040F 80 17              1608 	sjmp	00105$
   0411                    1609 00102$:
                           1610 ;	main.c:247: printf_tiny("\n\n\rEnter valid number Address betweem 000 and 7FF: ");
                           1611 ;	genIpush
   0411 C0 02              1612 	push	ar2
   0413 C0 03              1613 	push	ar3
   0415 74r35              1614 	mov	a,#__str_10
   0417 C0 E0              1615 	push	acc
   0419 74s01              1616 	mov	a,#(__str_10 >> 8)
   041B C0 E0              1617 	push	acc
                           1618 ;	genCall
   041D 12s00r00           1619 	lcall	_printf_tiny
   0420 15 81              1620 	dec	sp
   0422 15 81              1621 	dec	sp
   0424 D0 03              1622 	pop	ar3
   0426 D0 02              1623 	pop	ar2
   0428                    1624 00105$:
                           1625 ;	main.c:249: }while(flag==0);
                           1626 ;	genAssign
   0428 90s00r5E           1627 	mov	dptr,#_hex_dump_flag_1_1
   042B E0                 1628 	movx	a,@dptr
   042C FC                 1629 	mov	r4,a
   042D A3                 1630 	inc	dptr
   042E E0                 1631 	movx	a,@dptr
                           1632 ;	genIfx
   042F FD                 1633 	mov	r5,a
                           1634 ;	Peephole 135	removed redundant mov
   0430 4C                 1635 	orl	a,r4
                           1636 ;	genIfxJump
                           1637 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0431 60 A5              1638 	jz	00104$
                           1639 ;	Peephole 300	removed redundant label 00141$
                           1640 ;	main.c:266: printf_tiny("\n\n\r Enter End Address in Hex in HHH format between 000 to 7FF: ");
                           1641 ;	genIpush
   0433 C0 02              1642 	push	ar2
   0435 C0 03              1643 	push	ar3
   0437 74r7A              1644 	mov	a,#__str_17
   0439 C0 E0              1645 	push	acc
   043B 74s02              1646 	mov	a,#(__str_17 >> 8)
   043D C0 E0              1647 	push	acc
                           1648 ;	genCall
   043F 12s00r00           1649 	lcall	_printf_tiny
   0442 15 81              1650 	dec	sp
   0444 15 81              1651 	dec	sp
   0446 D0 03              1652 	pop	ar3
   0448 D0 02              1653 	pop	ar2
                           1654 ;	main.c:267: do{
   044A                    1655 00110$:
                           1656 ;	main.c:268: flag=0;
                           1657 ;	genAssign
   044A 90s00r5E           1658 	mov	dptr,#_hex_dump_flag_1_1
   044D E4                 1659 	clr	a
   044E F0                 1660 	movx	@dptr,a
   044F A3                 1661 	inc	dptr
   0450 F0                 1662 	movx	@dptr,a
                           1663 ;	main.c:269: gets(d);
                           1664 ;	genCall
                           1665 ;	Peephole 182.a	used 16 bit load of DPTR
   0451 90s00r41           1666 	mov	dptr,#_hex_dump_d_1_1
   0454 75 F0 00           1667 	mov	b,#0x00
   0457 C0 02              1668 	push	ar2
   0459 C0 03              1669 	push	ar3
   045B 12s00r00           1670 	lcall	_gets
   045E D0 03              1671 	pop	ar3
   0460 D0 02              1672 	pop	ar2
                           1673 ;	main.c:270: end_addr=atoh(d);
                           1674 ;	genCall
                           1675 ;	Peephole 182.a	used 16 bit load of DPTR
   0462 90s00r41           1676 	mov	dptr,#_hex_dump_d_1_1
   0465 75 F0 00           1677 	mov	b,#0x00
   0468 C0 02              1678 	push	ar2
   046A C0 03              1679 	push	ar3
   046C 12s06r6F           1680 	lcall	_atoh
   046F AC 82              1681 	mov	r4,dpl
   0471 AD 83              1682 	mov	r5,dph
   0473 D0 03              1683 	pop	ar3
   0475 D0 02              1684 	pop	ar2
                           1685 ;	main.c:271: if(end_addr<2048)
                           1686 ;	genAssign
   0477 8C 06              1687 	mov	ar6,r4
   0479 8D 07              1688 	mov	ar7,r5
                           1689 ;	genCmpLt
                           1690 ;	genCmp
                           1691 ;	genIfxJump
                           1692 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           1693 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   047B 74 F8              1694 	mov	a,#0x100 - 0x08
   047D 2F                 1695 	add	a,r7
   047E 40 0B              1696 	jc	00108$
                           1697 ;	Peephole 300	removed redundant label 00142$
                           1698 ;	main.c:273: flag=1;
                           1699 ;	genAssign
   0480 90s00r5E           1700 	mov	dptr,#_hex_dump_flag_1_1
   0483 74 01              1701 	mov	a,#0x01
   0485 F0                 1702 	movx	@dptr,a
   0486 E4                 1703 	clr	a
   0487 A3                 1704 	inc	dptr
   0488 F0                 1705 	movx	@dptr,a
                           1706 ;	Peephole 112.b	changed ljmp to sjmp
   0489 80 1F              1707 	sjmp	00111$
   048B                    1708 00108$:
                           1709 ;	main.c:278: printf_tiny("\n\n\rEnter valid number Address betweem 000 and 7FF: ");
                           1710 ;	genIpush
   048B C0 02              1711 	push	ar2
   048D C0 03              1712 	push	ar3
   048F C0 04              1713 	push	ar4
   0491 C0 05              1714 	push	ar5
   0493 74r35              1715 	mov	a,#__str_10
   0495 C0 E0              1716 	push	acc
   0497 74s01              1717 	mov	a,#(__str_10 >> 8)
   0499 C0 E0              1718 	push	acc
                           1719 ;	genCall
   049B 12s00r00           1720 	lcall	_printf_tiny
   049E 15 81              1721 	dec	sp
   04A0 15 81              1722 	dec	sp
   04A2 D0 05              1723 	pop	ar5
   04A4 D0 04              1724 	pop	ar4
   04A6 D0 03              1725 	pop	ar3
   04A8 D0 02              1726 	pop	ar2
   04AA                    1727 00111$:
                           1728 ;	main.c:280: }while(flag==0);
                           1729 ;	genAssign
   04AA 90s00r5E           1730 	mov	dptr,#_hex_dump_flag_1_1
   04AD E0                 1731 	movx	a,@dptr
   04AE FE                 1732 	mov	r6,a
   04AF A3                 1733 	inc	dptr
   04B0 E0                 1734 	movx	a,@dptr
                           1735 ;	genIfx
   04B1 FF                 1736 	mov	r7,a
                           1737 ;	Peephole 135	removed redundant mov
   04B2 4E                 1738 	orl	a,r6
                           1739 ;	genIfxJump
                           1740 ;	Peephole 108.c	removed ljmp by inverse jump logic
   04B3 60 95              1741 	jz	00110$
                           1742 ;	Peephole 300	removed redundant label 00143$
                           1743 ;	main.c:281: bytes = end_addr - st_addr;
                           1744 ;	genMinus
   04B5 EC                 1745 	mov	a,r4
   04B6 C3                 1746 	clr	c
                           1747 ;	Peephole 236.l	used r2 instead of ar2
   04B7 9A                 1748 	subb	a,r2
   04B8 FC                 1749 	mov	r4,a
   04B9 ED                 1750 	mov	a,r5
                           1751 ;	Peephole 236.l	used r3 instead of ar3
   04BA 9B                 1752 	subb	a,r3
   04BB FD                 1753 	mov	r5,a
                           1754 ;	main.c:282: printf_tiny("\n\r\tTotal Bytes: %d\n\r",bytes);
                           1755 ;	genIpush
   04BC C0 02              1756 	push	ar2
   04BE C0 03              1757 	push	ar3
   04C0 C0 04              1758 	push	ar4
   04C2 C0 05              1759 	push	ar5
   04C4 C0 04              1760 	push	ar4
   04C6 C0 05              1761 	push	ar5
                           1762 ;	genIpush
   04C8 74rBA              1763 	mov	a,#__str_18
   04CA C0 E0              1764 	push	acc
   04CC 74s02              1765 	mov	a,#(__str_18 >> 8)
   04CE C0 E0              1766 	push	acc
                           1767 ;	genCall
   04D0 12s00r00           1768 	lcall	_printf_tiny
   04D3 E5 81              1769 	mov	a,sp
   04D5 24 FC              1770 	add	a,#0xfc
   04D7 F5 81              1771 	mov	sp,a
   04D9 D0 05              1772 	pop	ar5
   04DB D0 04              1773 	pop	ar4
   04DD D0 03              1774 	pop	ar3
   04DF D0 02              1775 	pop	ar2
                           1776 ;	main.c:283: if(bytes<0){printf_tiny("End address smaller than start address");}
                           1777 ;	genAssign
   04E1 8C 06              1778 	mov	ar6,r4
   04E3 8D 07              1779 	mov	ar7,r5
                           1780 ;	genCmpLt
                           1781 ;	genCmp
   04E5 EF                 1782 	mov	a,r7
                           1783 ;	genIfxJump
                           1784 ;	Peephole 108.d	removed ljmp by inverse jump logic
   04E6 30 E7 1F           1785 	jnb	acc.7,00116$
                           1786 ;	Peephole 300	removed redundant label 00144$
                           1787 ;	genIpush
   04E9 C0 02              1788 	push	ar2
   04EB C0 03              1789 	push	ar3
   04ED C0 04              1790 	push	ar4
   04EF C0 05              1791 	push	ar5
   04F1 74rCF              1792 	mov	a,#__str_19
   04F3 C0 E0              1793 	push	acc
   04F5 74s02              1794 	mov	a,#(__str_19 >> 8)
   04F7 C0 E0              1795 	push	acc
                           1796 ;	genCall
   04F9 12s00r00           1797 	lcall	_printf_tiny
   04FC 15 81              1798 	dec	sp
   04FE 15 81              1799 	dec	sp
   0500 D0 05              1800 	pop	ar5
   0502 D0 04              1801 	pop	ar4
   0504 D0 03              1802 	pop	ar3
   0506 D0 02              1803 	pop	ar2
   0508                    1804 00116$:
                           1805 ;	main.c:284: }while(bytes<=0);
                           1806 ;	genAssign
   0508 8C 06              1807 	mov	ar6,r4
   050A 8D 07              1808 	mov	ar7,r5
                           1809 ;	genCmpGt
                           1810 ;	genCmp
   050C C3                 1811 	clr	c
                           1812 ;	Peephole 181	changed mov to clr
   050D E4                 1813 	clr	a
   050E 9E                 1814 	subb	a,r6
                           1815 ;	Peephole 159	avoided xrl during execution
   050F 74 80              1816 	mov	a,#(0x00 ^ 0x80)
   0511 8F F0              1817 	mov	b,r7
   0513 63 F0 80           1818 	xrl	b,#0x80
   0516 95 F0              1819 	subb	a,b
                           1820 ;	genIfxJump
   0518 40 03              1821 	jc	00145$
   051A 02s03rC9           1822 	ljmp	00115$
   051D                    1823 00145$:
                           1824 ;	main.c:285: printf_tiny("Number Of bytes: %d",bytes);
                           1825 ;	genIpush
   051D C0 02              1826 	push	ar2
   051F C0 03              1827 	push	ar3
   0521 C0 04              1828 	push	ar4
   0523 C0 05              1829 	push	ar5
   0525 C0 04              1830 	push	ar4
   0527 C0 05              1831 	push	ar5
                           1832 ;	genIpush
   0529 74rF6              1833 	mov	a,#__str_20
   052B C0 E0              1834 	push	acc
   052D 74s02              1835 	mov	a,#(__str_20 >> 8)
   052F C0 E0              1836 	push	acc
                           1837 ;	genCall
   0531 12s00r00           1838 	lcall	_printf_tiny
   0534 E5 81              1839 	mov	a,sp
   0536 24 FC              1840 	add	a,#0xfc
   0538 F5 81              1841 	mov	sp,a
   053A D0 05              1842 	pop	ar5
   053C D0 04              1843 	pop	ar4
   053E D0 03              1844 	pop	ar3
   0540 D0 02              1845 	pop	ar2
                           1846 ;	main.c:288: for(i=0;i<=bytes;i++)
                           1847 ;	genAssign
                           1848 ;	genAssign
                           1849 ;	genAssign
   0542 7E 00              1850 	mov	r6,#0x00
   0544 7F 00              1851 	mov	r7,#0x00
   0546                    1852 00121$:
                           1853 ;	genCmpGt
                           1854 ;	genCmp
   0546 C3                 1855 	clr	c
   0547 EC                 1856 	mov	a,r4
   0548 9E                 1857 	subb	a,r6
   0549 ED                 1858 	mov	a,r5
   054A 9F                 1859 	subb	a,r7
                           1860 ;	genIfxJump
   054B 50 01              1861 	jnc	00146$
                           1862 ;	Peephole 251.a	replaced ljmp to ret with ret
   054D 22                 1863 	ret
   054E                    1864 00146$:
                           1865 ;	main.c:290: if(i%16==0)
                           1866 ;	genAnd
   054E EE                 1867 	mov	a,r6
   054F 54 0F              1868 	anl	a,#0x0F
                           1869 ;	Peephole 160.c	removed sjmp by inverse jump logic
   0551 60 03              1870 	jz	00148$
                           1871 ;	Peephole 300	removed redundant label 00147$
   0553 02s05rF6           1872 	ljmp	00119$
   0556                    1873 00148$:
                           1874 ;	main.c:293: printf_tiny("\n\r%x:\t",aaa);
                           1875 ;	genIpush
   0556 C0 04              1876 	push	ar4
   0558 C0 05              1877 	push	ar5
                           1878 ;	genIpush
   055A C0 02              1879 	push	ar2
   055C C0 03              1880 	push	ar3
   055E C0 04              1881 	push	ar4
   0560 C0 05              1882 	push	ar5
   0562 C0 06              1883 	push	ar6
   0564 C0 07              1884 	push	ar7
   0566 C0 02              1885 	push	ar2
   0568 C0 03              1886 	push	ar3
                           1887 ;	genIpush
   056A 74r0A              1888 	mov	a,#__str_21
   056C C0 E0              1889 	push	acc
   056E 74s03              1890 	mov	a,#(__str_21 >> 8)
   0570 C0 E0              1891 	push	acc
                           1892 ;	genCall
   0572 12s00r00           1893 	lcall	_printf_tiny
   0575 E5 81              1894 	mov	a,sp
   0577 24 FC              1895 	add	a,#0xfc
   0579 F5 81              1896 	mov	sp,a
   057B D0 07              1897 	pop	ar7
   057D D0 06              1898 	pop	ar6
   057F D0 05              1899 	pop	ar5
   0581 D0 04              1900 	pop	ar4
   0583 D0 03              1901 	pop	ar3
   0585 D0 02              1902 	pop	ar2
                           1903 ;	main.c:294: aaa+=16;
                           1904 ;	genPlus
                           1905 ;     genPlusIncr
   0587 74 10              1906 	mov	a,#0x10
                           1907 ;	Peephole 236.a	used r2 instead of ar2
   0589 2A                 1908 	add	a,r2
   058A FA                 1909 	mov	r2,a
                           1910 ;	Peephole 181	changed mov to clr
   058B E4                 1911 	clr	a
                           1912 ;	Peephole 236.b	used r3 instead of ar3
   058C 3B                 1913 	addc	a,r3
   058D FB                 1914 	mov	r3,a
                           1915 ;	main.c:295: j=0;
                           1916 ;	genAssign
   058E 90s00r60           1917 	mov	dptr,#_hex_dump_j_1_1
   0591 E4                 1918 	clr	a
   0592 F0                 1919 	movx	@dptr,a
   0593 A3                 1920 	inc	dptr
   0594 F0                 1921 	movx	@dptr,a
                           1922 ;	main.c:296: st_page=st_addr/256;
                           1923 ;	genAssign
   0595 90s00r5C           1924 	mov	dptr,#_hex_dump_st_addr_1_1
   0598 E0                 1925 	movx	a,@dptr
   0599 F8                 1926 	mov	r0,a
   059A A3                 1927 	inc	dptr
   059B E0                 1928 	movx	a,@dptr
   059C F9                 1929 	mov	r1,a
                           1930 ;	genRightShift
                           1931 ;	genRightShiftLiteral
                           1932 ;	genrshTwo
   059D 89*02              1933 	mov	_hex_dump_sloc0_1_0,r1
   059F 75*03 00           1934 	mov	(_hex_dump_sloc0_1_0 + 1),#0x00
                           1935 ;	main.c:297: seq_read(st_addr-st_page*256,st_page,16,r);
                           1936 ;	genCast
   05A2 88 04              1937 	mov	ar4,r0
                           1938 ;	genCast
   05A4 90s00r00           1939 	mov	dptr,#_seq_read_PARM_2
   05A7 E5*02              1940 	mov	a,_hex_dump_sloc0_1_0
   05A9 F0                 1941 	movx	@dptr,a
                           1942 ;	genAssign
   05AA 90s00r00           1943 	mov	dptr,#_seq_read_PARM_3
   05AD 74 10              1944 	mov	a,#0x10
   05AF F0                 1945 	movx	@dptr,a
   05B0 E4                 1946 	clr	a
   05B1 A3                 1947 	inc	dptr
   05B2 F0                 1948 	movx	@dptr,a
                           1949 ;	genAssign
   05B3 90s00r00           1950 	mov	dptr,#_seq_read_PARM_4
   05B6 74r4B              1951 	mov	a,#_hex_dump_r_1_1
   05B8 F0                 1952 	movx	@dptr,a
   05B9 A3                 1953 	inc	dptr
   05BA 74s00              1954 	mov	a,#(_hex_dump_r_1_1 >> 8)
   05BC F0                 1955 	movx	@dptr,a
   05BD A3                 1956 	inc	dptr
                           1957 ;	Peephole 181	changed mov to clr
   05BE E4                 1958 	clr	a
   05BF F0                 1959 	movx	@dptr,a
                           1960 ;	genCall
   05C0 8C 82              1961 	mov	dpl,r4
   05C2 C0 02              1962 	push	ar2
   05C4 C0 03              1963 	push	ar3
   05C6 C0 04              1964 	push	ar4
   05C8 C0 05              1965 	push	ar5
   05CA C0 06              1966 	push	ar6
   05CC C0 07              1967 	push	ar7
   05CE C0 00              1968 	push	ar0
   05D0 C0 01              1969 	push	ar1
   05D2 12s00r00           1970 	lcall	_seq_read
   05D5 D0 01              1971 	pop	ar1
   05D7 D0 00              1972 	pop	ar0
   05D9 D0 07              1973 	pop	ar7
   05DB D0 06              1974 	pop	ar6
   05DD D0 05              1975 	pop	ar5
   05DF D0 04              1976 	pop	ar4
   05E1 D0 03              1977 	pop	ar3
   05E3 D0 02              1978 	pop	ar2
                           1979 ;	main.c:303: st_addr++;
                           1980 ;	genPlus
   05E5 90s00r5C           1981 	mov	dptr,#_hex_dump_st_addr_1_1
                           1982 ;     genPlusIncr
   05E8 74 01              1983 	mov	a,#0x01
                           1984 ;	Peephole 236.a	used r0 instead of ar0
   05EA 28                 1985 	add	a,r0
   05EB F0                 1986 	movx	@dptr,a
                           1987 ;	Peephole 181	changed mov to clr
   05EC E4                 1988 	clr	a
                           1989 ;	Peephole 236.b	used r1 instead of ar1
   05ED 39                 1990 	addc	a,r1
   05EE A3                 1991 	inc	dptr
   05EF F0                 1992 	movx	@dptr,a
                           1993 ;	genIpop
   05F0 D0 05              1994 	pop	ar5
   05F2 D0 04              1995 	pop	ar4
                           1996 ;	Peephole 112.b	changed ljmp to sjmp
   05F4 80 13              1997 	sjmp	00120$
   05F6                    1998 00119$:
                           1999 ;	main.c:314: st_addr++;
                           2000 ;	genAssign
   05F6 90s00r5C           2001 	mov	dptr,#_hex_dump_st_addr_1_1
   05F9 E0                 2002 	movx	a,@dptr
   05FA F8                 2003 	mov	r0,a
   05FB A3                 2004 	inc	dptr
   05FC E0                 2005 	movx	a,@dptr
   05FD F9                 2006 	mov	r1,a
                           2007 ;	genPlus
   05FE 90s00r5C           2008 	mov	dptr,#_hex_dump_st_addr_1_1
                           2009 ;     genPlusIncr
   0601 74 01              2010 	mov	a,#0x01
                           2011 ;	Peephole 236.a	used r0 instead of ar0
   0603 28                 2012 	add	a,r0
   0604 F0                 2013 	movx	@dptr,a
                           2014 ;	Peephole 181	changed mov to clr
   0605 E4                 2015 	clr	a
                           2016 ;	Peephole 236.b	used r1 instead of ar1
   0606 39                 2017 	addc	a,r1
   0607 A3                 2018 	inc	dptr
   0608 F0                 2019 	movx	@dptr,a
   0609                    2020 00120$:
                           2021 ;	main.c:317: printf_tiny("%x\t",r[j]);
                           2022 ;	genIpush
   0609 C0 04              2023 	push	ar4
   060B C0 05              2024 	push	ar5
                           2025 ;	genAssign
   060D 90s00r60           2026 	mov	dptr,#_hex_dump_j_1_1
   0610 E0                 2027 	movx	a,@dptr
   0611 F8                 2028 	mov	r0,a
   0612 A3                 2029 	inc	dptr
   0613 E0                 2030 	movx	a,@dptr
   0614 F9                 2031 	mov	r1,a
                           2032 ;	genPlus
                           2033 ;	Peephole 236.g	used r0 instead of ar0
   0615 E8                 2034 	mov	a,r0
   0616 24r4B              2035 	add	a,#_hex_dump_r_1_1
   0618 F5 82              2036 	mov	dpl,a
                           2037 ;	Peephole 236.g	used r1 instead of ar1
   061A E9                 2038 	mov	a,r1
   061B 34s00              2039 	addc	a,#(_hex_dump_r_1_1 >> 8)
   061D F5 83              2040 	mov	dph,a
                           2041 ;	genPointerGet
                           2042 ;	genFarPointerGet
   061F E0                 2043 	movx	a,@dptr
   0620 FC                 2044 	mov	r4,a
                           2045 ;	genCast
   0621 7D 00              2046 	mov	r5,#0x00
                           2047 ;	genIpush
   0623 C0 02              2048 	push	ar2
   0625 C0 03              2049 	push	ar3
   0627 C0 04              2050 	push	ar4
   0629 C0 05              2051 	push	ar5
   062B C0 06              2052 	push	ar6
   062D C0 07              2053 	push	ar7
   062F C0 00              2054 	push	ar0
   0631 C0 01              2055 	push	ar1
   0633 C0 04              2056 	push	ar4
   0635 C0 05              2057 	push	ar5
                           2058 ;	genIpush
   0637 74r11              2059 	mov	a,#__str_22
   0639 C0 E0              2060 	push	acc
   063B 74s03              2061 	mov	a,#(__str_22 >> 8)
   063D C0 E0              2062 	push	acc
                           2063 ;	genCall
   063F 12s00r00           2064 	lcall	_printf_tiny
   0642 E5 81              2065 	mov	a,sp
   0644 24 FC              2066 	add	a,#0xfc
   0646 F5 81              2067 	mov	sp,a
   0648 D0 01              2068 	pop	ar1
   064A D0 00              2069 	pop	ar0
   064C D0 07              2070 	pop	ar7
   064E D0 06              2071 	pop	ar6
   0650 D0 05              2072 	pop	ar5
   0652 D0 04              2073 	pop	ar4
   0654 D0 03              2074 	pop	ar3
   0656 D0 02              2075 	pop	ar2
                           2076 ;	main.c:318: j++;
                           2077 ;	genPlus
   0658 90s00r60           2078 	mov	dptr,#_hex_dump_j_1_1
                           2079 ;     genPlusIncr
   065B 74 01              2080 	mov	a,#0x01
                           2081 ;	Peephole 236.a	used r0 instead of ar0
   065D 28                 2082 	add	a,r0
   065E F0                 2083 	movx	@dptr,a
                           2084 ;	Peephole 181	changed mov to clr
   065F E4                 2085 	clr	a
                           2086 ;	Peephole 236.b	used r1 instead of ar1
   0660 39                 2087 	addc	a,r1
   0661 A3                 2088 	inc	dptr
   0662 F0                 2089 	movx	@dptr,a
                           2090 ;	main.c:288: for(i=0;i<=bytes;i++)
                           2091 ;	genPlus
                           2092 ;     genPlusIncr
   0663 0E                 2093 	inc	r6
   0664 BE 00 01           2094 	cjne	r6,#0x00,00149$
   0667 0F                 2095 	inc	r7
   0668                    2096 00149$:
                           2097 ;	genIpop
   0668 D0 05              2098 	pop	ar5
   066A D0 04              2099 	pop	ar4
   066C 02s05r46           2100 	ljmp	00121$
                           2101 ;	Peephole 259.b	removed redundant label 00125$ and ret
                           2102 ;
                           2103 ;------------------------------------------------------------
                           2104 ;Allocation info for local variables in function 'atoh'
                           2105 ;------------------------------------------------------------
                           2106 ;c                         Allocated with name '_atoh_c_1_1'
                           2107 ;result                    Allocated with name '_atoh_result_1_1'
                           2108 ;i                         Allocated with name '_atoh_i_1_1'
                           2109 ;------------------------------------------------------------
                           2110 ;	main.c:322: int atoh(char *c)
                           2111 ;	-----------------------------------------
                           2112 ;	 function atoh
                           2113 ;	-----------------------------------------
   066F                    2114 _atoh:
                           2115 ;	genReceive
   066F AA F0              2116 	mov	r2,b
   0671 AB 83              2117 	mov	r3,dph
   0673 E5 82              2118 	mov	a,dpl
   0675 90s00r62           2119 	mov	dptr,#_atoh_c_1_1
   0678 F0                 2120 	movx	@dptr,a
   0679 A3                 2121 	inc	dptr
   067A EB                 2122 	mov	a,r3
   067B F0                 2123 	movx	@dptr,a
   067C A3                 2124 	inc	dptr
   067D EA                 2125 	mov	a,r2
   067E F0                 2126 	movx	@dptr,a
                           2127 ;	main.c:326: if(*(c+3) != '\0')
                           2128 ;	genAssign
   067F 90s00r62           2129 	mov	dptr,#_atoh_c_1_1
   0682 E0                 2130 	movx	a,@dptr
   0683 FA                 2131 	mov	r2,a
   0684 A3                 2132 	inc	dptr
   0685 E0                 2133 	movx	a,@dptr
   0686 FB                 2134 	mov	r3,a
   0687 A3                 2135 	inc	dptr
   0688 E0                 2136 	movx	a,@dptr
   0689 FC                 2137 	mov	r4,a
                           2138 ;	genPlus
                           2139 ;     genPlusIncr
   068A 74 03              2140 	mov	a,#0x03
                           2141 ;	Peephole 236.a	used r2 instead of ar2
   068C 2A                 2142 	add	a,r2
   068D FD                 2143 	mov	r5,a
                           2144 ;	Peephole 181	changed mov to clr
   068E E4                 2145 	clr	a
                           2146 ;	Peephole 236.b	used r3 instead of ar3
   068F 3B                 2147 	addc	a,r3
   0690 FE                 2148 	mov	r6,a
   0691 8C 07              2149 	mov	ar7,r4
                           2150 ;	genPointerGet
                           2151 ;	genGenPointerGet
   0693 8D 82              2152 	mov	dpl,r5
   0695 8E 83              2153 	mov	dph,r6
   0697 8F F0              2154 	mov	b,r7
   0699 12s00r00           2155 	lcall	__gptrget
                           2156 ;	genCmpEq
                           2157 ;	gencjneshort
                           2158 ;	Peephole 112.b	changed ljmp to sjmp
   069C FD                 2159 	mov	r5,a
                           2160 ;	Peephole 115.b	jump optimization
   069D 60 04              2161 	jz	00102$
                           2162 ;	Peephole 300	removed redundant label 00148$
                           2163 ;	main.c:328: return 2100;
                           2164 ;	genRet
                           2165 ;	Peephole 182.b	used 16 bit load of dptr
   069F 90 08 34           2166 	mov	dptr,#0x0834
                           2167 ;	Peephole 251.a	replaced ljmp to ret with ret
   06A2 22                 2168 	ret
   06A3                    2169 00102$:
                           2170 ;	main.c:331: if(*(c)>=48 && *(c)<=55 )
                           2171 ;	genPointerGet
                           2172 ;	genGenPointerGet
   06A3 8A 82              2173 	mov	dpl,r2
   06A5 8B 83              2174 	mov	dph,r3
   06A7 8C F0              2175 	mov	b,r4
   06A9 12s00r00           2176 	lcall	__gptrget
                           2177 ;	genCmpLt
                           2178 ;	genCmp
   06AC FD                 2179 	mov	r5,a
   06AD C3                 2180 	clr	c
                           2181 ;	Peephole 106	removed redundant mov
   06AE 64 80              2182 	xrl	a,#0x80
   06B0 94 B0              2183 	subb	a,#0xb0
                           2184 ;	genIfxJump
                           2185 ;	Peephole 112.b	changed ljmp to sjmp
                           2186 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2187 ;	genCmpGt
                           2188 ;	genCmp
   06B2 40 33              2189 	jc	00104$
                           2190 ;	Peephole 300	removed redundant label 00149$
                           2191 ;	Peephole 256.a	removed redundant clr c
                           2192 ;	Peephole 159	avoided xrl during execution
   06B4 74 B7              2193 	mov	a,#(0x37 ^ 0x80)
   06B6 8D F0              2194 	mov	b,r5
   06B8 63 F0 80           2195 	xrl	b,#0x80
   06BB 95 F0              2196 	subb	a,b
                           2197 ;	genIfxJump
                           2198 ;	Peephole 112.b	changed ljmp to sjmp
                           2199 ;	Peephole 160.a	removed sjmp by inverse jump logic
   06BD 40 28              2200 	jc	00104$
                           2201 ;	Peephole 300	removed redundant label 00150$
                           2202 ;	main.c:333: result = (*c-48)*256;
                           2203 ;	genCast
   06BF ED                 2204 	mov	a,r5
   06C0 33                 2205 	rlc	a
   06C1 95 E0              2206 	subb	a,acc
   06C3 FE                 2207 	mov	r6,a
                           2208 ;	genMinus
   06C4 ED                 2209 	mov	a,r5
   06C5 24 D0              2210 	add	a,#0xd0
   06C7 FD                 2211 	mov	r5,a
   06C8 EE                 2212 	mov	a,r6
   06C9 34 FF              2213 	addc	a,#0xff
                           2214 ;	genLeftShift
                           2215 ;	genLeftShiftLiteral
                           2216 ;	genlshTwo
                           2217 ;	peephole 177.e	removed redundant move
   06CB 8D 06              2218 	mov	ar6,r5
   06CD 7D 00              2219 	mov	r5,#0x00
                           2220 ;	genAssign
   06CF 90s00r65           2221 	mov	dptr,#_atoh_result_1_1
   06D2 ED                 2222 	mov	a,r5
   06D3 F0                 2223 	movx	@dptr,a
   06D4 A3                 2224 	inc	dptr
   06D5 EE                 2225 	mov	a,r6
   06D6 F0                 2226 	movx	@dptr,a
                           2227 ;	main.c:334: c++;
                           2228 ;	genPlus
   06D7 90s00r62           2229 	mov	dptr,#_atoh_c_1_1
                           2230 ;     genPlusIncr
   06DA 74 01              2231 	mov	a,#0x01
                           2232 ;	Peephole 236.a	used r2 instead of ar2
   06DC 2A                 2233 	add	a,r2
   06DD F0                 2234 	movx	@dptr,a
                           2235 ;	Peephole 181	changed mov to clr
   06DE E4                 2236 	clr	a
                           2237 ;	Peephole 236.b	used r3 instead of ar3
   06DF 3B                 2238 	addc	a,r3
   06E0 A3                 2239 	inc	dptr
   06E1 F0                 2240 	movx	@dptr,a
   06E2 A3                 2241 	inc	dptr
   06E3 EC                 2242 	mov	a,r4
   06E4 F0                 2243 	movx	@dptr,a
                           2244 ;	Peephole 112.b	changed ljmp to sjmp
   06E5 80 04              2245 	sjmp	00105$
   06E7                    2246 00104$:
                           2247 ;	main.c:336: else{return 2103;}
                           2248 ;	genRet
                           2249 ;	Peephole 182.b	used 16 bit load of dptr
   06E7 90 08 37           2250 	mov	dptr,#0x0837
                           2251 ;	Peephole 251.a	replaced ljmp to ret with ret
   06EA 22                 2252 	ret
   06EB                    2253 00105$:
                           2254 ;	main.c:339: if(*(c)>=48 && *(c)<=57 )
                           2255 ;	genAssign
   06EB 90s00r62           2256 	mov	dptr,#_atoh_c_1_1
   06EE E0                 2257 	movx	a,@dptr
   06EF FA                 2258 	mov	r2,a
   06F0 A3                 2259 	inc	dptr
   06F1 E0                 2260 	movx	a,@dptr
   06F2 FB                 2261 	mov	r3,a
   06F3 A3                 2262 	inc	dptr
   06F4 E0                 2263 	movx	a,@dptr
   06F5 FC                 2264 	mov	r4,a
                           2265 ;	genPointerGet
                           2266 ;	genGenPointerGet
   06F6 8A 82              2267 	mov	dpl,r2
   06F8 8B 83              2268 	mov	dph,r3
   06FA 8C F0              2269 	mov	b,r4
   06FC 12s00r00           2270 	lcall	__gptrget
                           2271 ;	genCmpLt
                           2272 ;	genCmp
   06FF FD                 2273 	mov	r5,a
   0700 C3                 2274 	clr	c
                           2275 ;	Peephole 106	removed redundant mov
   0701 64 80              2276 	xrl	a,#0x80
   0703 94 B0              2277 	subb	a,#0xb0
                           2278 ;	genIfxJump
                           2279 ;	Peephole 112.b	changed ljmp to sjmp
                           2280 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2281 ;	genCmpGt
                           2282 ;	genCmp
   0705 40 48              2283 	jc	00116$
                           2284 ;	Peephole 300	removed redundant label 00151$
                           2285 ;	Peephole 256.a	removed redundant clr c
                           2286 ;	Peephole 159	avoided xrl during execution
   0707 74 B9              2287 	mov	a,#(0x39 ^ 0x80)
   0709 8D F0              2288 	mov	b,r5
   070B 63 F0 80           2289 	xrl	b,#0x80
   070E 95 F0              2290 	subb	a,b
                           2291 ;	genIfxJump
                           2292 ;	Peephole 112.b	changed ljmp to sjmp
                           2293 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0710 40 3D              2294 	jc	00116$
                           2295 ;	Peephole 300	removed redundant label 00152$
                           2296 ;	main.c:341: result += (*c-48)*16;
                           2297 ;	genCast
   0712 ED                 2298 	mov	a,r5
   0713 33                 2299 	rlc	a
   0714 95 E0              2300 	subb	a,acc
   0716 FE                 2301 	mov	r6,a
                           2302 ;	genMinus
   0717 ED                 2303 	mov	a,r5
   0718 24 D0              2304 	add	a,#0xd0
   071A FD                 2305 	mov	r5,a
   071B EE                 2306 	mov	a,r6
   071C 34 FF              2307 	addc	a,#0xff
                           2308 ;	genLeftShift
                           2309 ;	genLeftShiftLiteral
                           2310 ;	genlshTwo
   071E FE                 2311 	mov	r6,a
                           2312 ;	Peephole 105	removed redundant mov
   071F C4                 2313 	swap	a
   0720 54 F0              2314 	anl	a,#0xf0
   0722 CD                 2315 	xch	a,r5
   0723 C4                 2316 	swap	a
   0724 CD                 2317 	xch	a,r5
   0725 6D                 2318 	xrl	a,r5
   0726 CD                 2319 	xch	a,r5
   0727 54 F0              2320 	anl	a,#0xf0
   0729 CD                 2321 	xch	a,r5
   072A 6D                 2322 	xrl	a,r5
   072B FE                 2323 	mov	r6,a
                           2324 ;	genAssign
   072C 90s00r65           2325 	mov	dptr,#_atoh_result_1_1
   072F E0                 2326 	movx	a,@dptr
   0730 FF                 2327 	mov	r7,a
   0731 A3                 2328 	inc	dptr
   0732 E0                 2329 	movx	a,@dptr
   0733 F8                 2330 	mov	r0,a
                           2331 ;	genPlus
   0734 90s00r65           2332 	mov	dptr,#_atoh_result_1_1
                           2333 ;	Peephole 236.g	used r5 instead of ar5
   0737 ED                 2334 	mov	a,r5
                           2335 ;	Peephole 236.a	used r7 instead of ar7
   0738 2F                 2336 	add	a,r7
   0739 F0                 2337 	movx	@dptr,a
                           2338 ;	Peephole 236.g	used r6 instead of ar6
   073A EE                 2339 	mov	a,r6
                           2340 ;	Peephole 236.b	used r0 instead of ar0
   073B 38                 2341 	addc	a,r0
   073C A3                 2342 	inc	dptr
   073D F0                 2343 	movx	@dptr,a
                           2344 ;	main.c:342: c++;
                           2345 ;	genPlus
   073E 90s00r62           2346 	mov	dptr,#_atoh_c_1_1
                           2347 ;     genPlusIncr
   0741 74 01              2348 	mov	a,#0x01
                           2349 ;	Peephole 236.a	used r2 instead of ar2
   0743 2A                 2350 	add	a,r2
   0744 F0                 2351 	movx	@dptr,a
                           2352 ;	Peephole 181	changed mov to clr
   0745 E4                 2353 	clr	a
                           2354 ;	Peephole 236.b	used r3 instead of ar3
   0746 3B                 2355 	addc	a,r3
   0747 A3                 2356 	inc	dptr
   0748 F0                 2357 	movx	@dptr,a
   0749 A3                 2358 	inc	dptr
   074A EC                 2359 	mov	a,r4
   074B F0                 2360 	movx	@dptr,a
   074C 02s08r1A           2361 	ljmp	00117$
   074F                    2362 00116$:
                           2363 ;	main.c:344: else if(*(c)>=97 && *(c)<=102)
                           2364 ;	genAssign
   074F 90s00r62           2365 	mov	dptr,#_atoh_c_1_1
   0752 E0                 2366 	movx	a,@dptr
   0753 FA                 2367 	mov	r2,a
   0754 A3                 2368 	inc	dptr
   0755 E0                 2369 	movx	a,@dptr
   0756 FB                 2370 	mov	r3,a
   0757 A3                 2371 	inc	dptr
   0758 E0                 2372 	movx	a,@dptr
   0759 FC                 2373 	mov	r4,a
                           2374 ;	genPointerGet
                           2375 ;	genGenPointerGet
   075A 8A 82              2376 	mov	dpl,r2
   075C 8B 83              2377 	mov	dph,r3
   075E 8C F0              2378 	mov	b,r4
   0760 12s00r00           2379 	lcall	__gptrget
                           2380 ;	genCmpLt
                           2381 ;	genCmp
   0763 FD                 2382 	mov	r5,a
   0764 C3                 2383 	clr	c
                           2384 ;	Peephole 106	removed redundant mov
   0765 64 80              2385 	xrl	a,#0x80
   0767 94 E1              2386 	subb	a,#0xe1
                           2387 ;	genIfxJump
                           2388 ;	Peephole 112.b	changed ljmp to sjmp
                           2389 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2390 ;	genCmpGt
                           2391 ;	genCmp
   0769 40 48              2392 	jc	00112$
                           2393 ;	Peephole 300	removed redundant label 00153$
                           2394 ;	Peephole 256.a	removed redundant clr c
                           2395 ;	Peephole 159	avoided xrl during execution
   076B 74 E6              2396 	mov	a,#(0x66 ^ 0x80)
   076D 8D F0              2397 	mov	b,r5
   076F 63 F0 80           2398 	xrl	b,#0x80
   0772 95 F0              2399 	subb	a,b
                           2400 ;	genIfxJump
                           2401 ;	Peephole 112.b	changed ljmp to sjmp
                           2402 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0774 40 3D              2403 	jc	00112$
                           2404 ;	Peephole 300	removed redundant label 00154$
                           2405 ;	main.c:346: result += (*c - 87)*16;
                           2406 ;	genCast
   0776 ED                 2407 	mov	a,r5
   0777 33                 2408 	rlc	a
   0778 95 E0              2409 	subb	a,acc
   077A FE                 2410 	mov	r6,a
                           2411 ;	genMinus
   077B ED                 2412 	mov	a,r5
   077C 24 A9              2413 	add	a,#0xa9
   077E FD                 2414 	mov	r5,a
   077F EE                 2415 	mov	a,r6
   0780 34 FF              2416 	addc	a,#0xff
                           2417 ;	genLeftShift
                           2418 ;	genLeftShiftLiteral
                           2419 ;	genlshTwo
   0782 FE                 2420 	mov	r6,a
                           2421 ;	Peephole 105	removed redundant mov
   0783 C4                 2422 	swap	a
   0784 54 F0              2423 	anl	a,#0xf0
   0786 CD                 2424 	xch	a,r5
   0787 C4                 2425 	swap	a
   0788 CD                 2426 	xch	a,r5
   0789 6D                 2427 	xrl	a,r5
   078A CD                 2428 	xch	a,r5
   078B 54 F0              2429 	anl	a,#0xf0
   078D CD                 2430 	xch	a,r5
   078E 6D                 2431 	xrl	a,r5
   078F FE                 2432 	mov	r6,a
                           2433 ;	genAssign
   0790 90s00r65           2434 	mov	dptr,#_atoh_result_1_1
   0793 E0                 2435 	movx	a,@dptr
   0794 FF                 2436 	mov	r7,a
   0795 A3                 2437 	inc	dptr
   0796 E0                 2438 	movx	a,@dptr
   0797 F8                 2439 	mov	r0,a
                           2440 ;	genPlus
   0798 90s00r65           2441 	mov	dptr,#_atoh_result_1_1
                           2442 ;	Peephole 236.g	used r5 instead of ar5
   079B ED                 2443 	mov	a,r5
                           2444 ;	Peephole 236.a	used r7 instead of ar7
   079C 2F                 2445 	add	a,r7
   079D F0                 2446 	movx	@dptr,a
                           2447 ;	Peephole 236.g	used r6 instead of ar6
   079E EE                 2448 	mov	a,r6
                           2449 ;	Peephole 236.b	used r0 instead of ar0
   079F 38                 2450 	addc	a,r0
   07A0 A3                 2451 	inc	dptr
   07A1 F0                 2452 	movx	@dptr,a
                           2453 ;	main.c:347: c++;
                           2454 ;	genPlus
   07A2 90s00r62           2455 	mov	dptr,#_atoh_c_1_1
                           2456 ;     genPlusIncr
   07A5 74 01              2457 	mov	a,#0x01
                           2458 ;	Peephole 236.a	used r2 instead of ar2
   07A7 2A                 2459 	add	a,r2
   07A8 F0                 2460 	movx	@dptr,a
                           2461 ;	Peephole 181	changed mov to clr
   07A9 E4                 2462 	clr	a
                           2463 ;	Peephole 236.b	used r3 instead of ar3
   07AA 3B                 2464 	addc	a,r3
   07AB A3                 2465 	inc	dptr
   07AC F0                 2466 	movx	@dptr,a
   07AD A3                 2467 	inc	dptr
   07AE EC                 2468 	mov	a,r4
   07AF F0                 2469 	movx	@dptr,a
   07B0 02s08r1A           2470 	ljmp	00117$
   07B3                    2471 00112$:
                           2472 ;	main.c:349: else if(*(c)>=65 && *(c)<=70)
                           2473 ;	genAssign
   07B3 90s00r62           2474 	mov	dptr,#_atoh_c_1_1
   07B6 E0                 2475 	movx	a,@dptr
   07B7 FA                 2476 	mov	r2,a
   07B8 A3                 2477 	inc	dptr
   07B9 E0                 2478 	movx	a,@dptr
   07BA FB                 2479 	mov	r3,a
   07BB A3                 2480 	inc	dptr
   07BC E0                 2481 	movx	a,@dptr
   07BD FC                 2482 	mov	r4,a
                           2483 ;	genPointerGet
                           2484 ;	genGenPointerGet
   07BE 8A 82              2485 	mov	dpl,r2
   07C0 8B 83              2486 	mov	dph,r3
   07C2 8C F0              2487 	mov	b,r4
   07C4 12s00r00           2488 	lcall	__gptrget
                           2489 ;	genCmpLt
                           2490 ;	genCmp
   07C7 FD                 2491 	mov	r5,a
   07C8 C3                 2492 	clr	c
                           2493 ;	Peephole 106	removed redundant mov
   07C9 64 80              2494 	xrl	a,#0x80
   07CB 94 C1              2495 	subb	a,#0xc1
                           2496 ;	genIfxJump
                           2497 ;	Peephole 112.b	changed ljmp to sjmp
                           2498 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2499 ;	genCmpGt
                           2500 ;	genCmp
   07CD 40 47              2501 	jc	00108$
                           2502 ;	Peephole 300	removed redundant label 00155$
                           2503 ;	Peephole 256.a	removed redundant clr c
                           2504 ;	Peephole 159	avoided xrl during execution
   07CF 74 C6              2505 	mov	a,#(0x46 ^ 0x80)
   07D1 8D F0              2506 	mov	b,r5
   07D3 63 F0 80           2507 	xrl	b,#0x80
   07D6 95 F0              2508 	subb	a,b
                           2509 ;	genIfxJump
                           2510 ;	Peephole 112.b	changed ljmp to sjmp
                           2511 ;	Peephole 160.a	removed sjmp by inverse jump logic
   07D8 40 3C              2512 	jc	00108$
                           2513 ;	Peephole 300	removed redundant label 00156$
                           2514 ;	main.c:351: result += (*c - 55)*16;
                           2515 ;	genCast
   07DA ED                 2516 	mov	a,r5
   07DB 33                 2517 	rlc	a
   07DC 95 E0              2518 	subb	a,acc
   07DE FE                 2519 	mov	r6,a
                           2520 ;	genMinus
   07DF ED                 2521 	mov	a,r5
   07E0 24 C9              2522 	add	a,#0xc9
   07E2 FD                 2523 	mov	r5,a
   07E3 EE                 2524 	mov	a,r6
   07E4 34 FF              2525 	addc	a,#0xff
                           2526 ;	genLeftShift
                           2527 ;	genLeftShiftLiteral
                           2528 ;	genlshTwo
   07E6 FE                 2529 	mov	r6,a
                           2530 ;	Peephole 105	removed redundant mov
   07E7 C4                 2531 	swap	a
   07E8 54 F0              2532 	anl	a,#0xf0
   07EA CD                 2533 	xch	a,r5
   07EB C4                 2534 	swap	a
   07EC CD                 2535 	xch	a,r5
   07ED 6D                 2536 	xrl	a,r5
   07EE CD                 2537 	xch	a,r5
   07EF 54 F0              2538 	anl	a,#0xf0
   07F1 CD                 2539 	xch	a,r5
   07F2 6D                 2540 	xrl	a,r5
   07F3 FE                 2541 	mov	r6,a
                           2542 ;	genAssign
   07F4 90s00r65           2543 	mov	dptr,#_atoh_result_1_1
   07F7 E0                 2544 	movx	a,@dptr
   07F8 FF                 2545 	mov	r7,a
   07F9 A3                 2546 	inc	dptr
   07FA E0                 2547 	movx	a,@dptr
   07FB F8                 2548 	mov	r0,a
                           2549 ;	genPlus
   07FC 90s00r65           2550 	mov	dptr,#_atoh_result_1_1
                           2551 ;	Peephole 236.g	used r5 instead of ar5
   07FF ED                 2552 	mov	a,r5
                           2553 ;	Peephole 236.a	used r7 instead of ar7
   0800 2F                 2554 	add	a,r7
   0801 F0                 2555 	movx	@dptr,a
                           2556 ;	Peephole 236.g	used r6 instead of ar6
   0802 EE                 2557 	mov	a,r6
                           2558 ;	Peephole 236.b	used r0 instead of ar0
   0803 38                 2559 	addc	a,r0
   0804 A3                 2560 	inc	dptr
   0805 F0                 2561 	movx	@dptr,a
                           2562 ;	main.c:352: c++;
                           2563 ;	genPlus
   0806 90s00r62           2564 	mov	dptr,#_atoh_c_1_1
                           2565 ;     genPlusIncr
   0809 74 01              2566 	mov	a,#0x01
                           2567 ;	Peephole 236.a	used r2 instead of ar2
   080B 2A                 2568 	add	a,r2
   080C F0                 2569 	movx	@dptr,a
                           2570 ;	Peephole 181	changed mov to clr
   080D E4                 2571 	clr	a
                           2572 ;	Peephole 236.b	used r3 instead of ar3
   080E 3B                 2573 	addc	a,r3
   080F A3                 2574 	inc	dptr
   0810 F0                 2575 	movx	@dptr,a
   0811 A3                 2576 	inc	dptr
   0812 EC                 2577 	mov	a,r4
   0813 F0                 2578 	movx	@dptr,a
                           2579 ;	Peephole 112.b	changed ljmp to sjmp
   0814 80 04              2580 	sjmp	00117$
   0816                    2581 00108$:
                           2582 ;	main.c:356: return 2101;
                           2583 ;	genRet
                           2584 ;	Peephole 182.b	used 16 bit load of dptr
   0816 90 08 35           2585 	mov	dptr,#0x0835
                           2586 ;	Peephole 251.a	replaced ljmp to ret with ret
   0819 22                 2587 	ret
   081A                    2588 00117$:
                           2589 ;	main.c:361: if(*(c)>=48 && *(c)<=57)
                           2590 ;	genAssign
   081A 90s00r62           2591 	mov	dptr,#_atoh_c_1_1
   081D E0                 2592 	movx	a,@dptr
   081E FA                 2593 	mov	r2,a
   081F A3                 2594 	inc	dptr
   0820 E0                 2595 	movx	a,@dptr
   0821 FB                 2596 	mov	r3,a
   0822 A3                 2597 	inc	dptr
   0823 E0                 2598 	movx	a,@dptr
   0824 FC                 2599 	mov	r4,a
                           2600 ;	genPointerGet
                           2601 ;	genGenPointerGet
   0825 8A 82              2602 	mov	dpl,r2
   0827 8B 83              2603 	mov	dph,r3
   0829 8C F0              2604 	mov	b,r4
   082B 12s00r00           2605 	lcall	__gptrget
                           2606 ;	genCmpLt
                           2607 ;	genCmp
   082E FA                 2608 	mov	r2,a
   082F C3                 2609 	clr	c
                           2610 ;	Peephole 106	removed redundant mov
   0830 64 80              2611 	xrl	a,#0x80
   0832 94 B0              2612 	subb	a,#0xb0
                           2613 ;	genIfxJump
                           2614 ;	Peephole 112.b	changed ljmp to sjmp
                           2615 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2616 ;	genCmpGt
                           2617 ;	genCmp
   0834 40 2D              2618 	jc	00128$
                           2619 ;	Peephole 300	removed redundant label 00157$
                           2620 ;	Peephole 256.a	removed redundant clr c
                           2621 ;	Peephole 159	avoided xrl during execution
   0836 74 B9              2622 	mov	a,#(0x39 ^ 0x80)
   0838 8A F0              2623 	mov	b,r2
   083A 63 F0 80           2624 	xrl	b,#0x80
   083D 95 F0              2625 	subb	a,b
                           2626 ;	genIfxJump
                           2627 ;	Peephole 112.b	changed ljmp to sjmp
                           2628 ;	Peephole 160.a	removed sjmp by inverse jump logic
   083F 40 22              2629 	jc	00128$
                           2630 ;	Peephole 300	removed redundant label 00158$
                           2631 ;	main.c:363: result += (*c - 48);
                           2632 ;	genCast
   0841 EA                 2633 	mov	a,r2
   0842 33                 2634 	rlc	a
   0843 95 E0              2635 	subb	a,acc
   0845 FB                 2636 	mov	r3,a
                           2637 ;	genMinus
   0846 EA                 2638 	mov	a,r2
   0847 24 D0              2639 	add	a,#0xd0
   0849 FA                 2640 	mov	r2,a
   084A EB                 2641 	mov	a,r3
   084B 34 FF              2642 	addc	a,#0xff
   084D FB                 2643 	mov	r3,a
                           2644 ;	genAssign
   084E 90s00r65           2645 	mov	dptr,#_atoh_result_1_1
   0851 E0                 2646 	movx	a,@dptr
   0852 FC                 2647 	mov	r4,a
   0853 A3                 2648 	inc	dptr
   0854 E0                 2649 	movx	a,@dptr
   0855 FD                 2650 	mov	r5,a
                           2651 ;	genPlus
   0856 90s00r65           2652 	mov	dptr,#_atoh_result_1_1
                           2653 ;	Peephole 236.g	used r2 instead of ar2
   0859 EA                 2654 	mov	a,r2
                           2655 ;	Peephole 236.a	used r4 instead of ar4
   085A 2C                 2656 	add	a,r4
   085B F0                 2657 	movx	@dptr,a
                           2658 ;	Peephole 236.g	used r3 instead of ar3
   085C EB                 2659 	mov	a,r3
                           2660 ;	Peephole 236.b	used r5 instead of ar5
   085D 3D                 2661 	addc	a,r5
   085E A3                 2662 	inc	dptr
   085F F0                 2663 	movx	@dptr,a
   0860 02s08rF7           2664 	ljmp	00129$
   0863                    2665 00128$:
                           2666 ;	main.c:365: else if(*(c)>=97 && *(c)<=102)
                           2667 ;	genAssign
   0863 90s00r62           2668 	mov	dptr,#_atoh_c_1_1
   0866 E0                 2669 	movx	a,@dptr
   0867 FA                 2670 	mov	r2,a
   0868 A3                 2671 	inc	dptr
   0869 E0                 2672 	movx	a,@dptr
   086A FB                 2673 	mov	r3,a
   086B A3                 2674 	inc	dptr
   086C E0                 2675 	movx	a,@dptr
   086D FC                 2676 	mov	r4,a
                           2677 ;	genPointerGet
                           2678 ;	genGenPointerGet
   086E 8A 82              2679 	mov	dpl,r2
   0870 8B 83              2680 	mov	dph,r3
   0872 8C F0              2681 	mov	b,r4
   0874 12s00r00           2682 	lcall	__gptrget
                           2683 ;	genCmpLt
                           2684 ;	genCmp
   0877 FA                 2685 	mov	r2,a
   0878 C3                 2686 	clr	c
                           2687 ;	Peephole 106	removed redundant mov
   0879 64 80              2688 	xrl	a,#0x80
   087B 94 E1              2689 	subb	a,#0xe1
                           2690 ;	genIfxJump
                           2691 ;	Peephole 112.b	changed ljmp to sjmp
                           2692 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2693 ;	genCmpGt
                           2694 ;	genCmp
   087D 40 2C              2695 	jc	00124$
                           2696 ;	Peephole 300	removed redundant label 00159$
                           2697 ;	Peephole 256.a	removed redundant clr c
                           2698 ;	Peephole 159	avoided xrl during execution
   087F 74 E6              2699 	mov	a,#(0x66 ^ 0x80)
   0881 8A F0              2700 	mov	b,r2
   0883 63 F0 80           2701 	xrl	b,#0x80
   0886 95 F0              2702 	subb	a,b
                           2703 ;	genIfxJump
                           2704 ;	Peephole 112.b	changed ljmp to sjmp
                           2705 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0888 40 21              2706 	jc	00124$
                           2707 ;	Peephole 300	removed redundant label 00160$
                           2708 ;	main.c:367: result += (*c - 87);
                           2709 ;	genCast
   088A EA                 2710 	mov	a,r2
   088B 33                 2711 	rlc	a
   088C 95 E0              2712 	subb	a,acc
   088E FB                 2713 	mov	r3,a
                           2714 ;	genMinus
   088F EA                 2715 	mov	a,r2
   0890 24 A9              2716 	add	a,#0xa9
   0892 FA                 2717 	mov	r2,a
   0893 EB                 2718 	mov	a,r3
   0894 34 FF              2719 	addc	a,#0xff
   0896 FB                 2720 	mov	r3,a
                           2721 ;	genAssign
   0897 90s00r65           2722 	mov	dptr,#_atoh_result_1_1
   089A E0                 2723 	movx	a,@dptr
   089B FC                 2724 	mov	r4,a
   089C A3                 2725 	inc	dptr
   089D E0                 2726 	movx	a,@dptr
   089E FD                 2727 	mov	r5,a
                           2728 ;	genPlus
   089F 90s00r65           2729 	mov	dptr,#_atoh_result_1_1
                           2730 ;	Peephole 236.g	used r2 instead of ar2
   08A2 EA                 2731 	mov	a,r2
                           2732 ;	Peephole 236.a	used r4 instead of ar4
   08A3 2C                 2733 	add	a,r4
   08A4 F0                 2734 	movx	@dptr,a
                           2735 ;	Peephole 236.g	used r3 instead of ar3
   08A5 EB                 2736 	mov	a,r3
                           2737 ;	Peephole 236.b	used r5 instead of ar5
   08A6 3D                 2738 	addc	a,r5
   08A7 A3                 2739 	inc	dptr
   08A8 F0                 2740 	movx	@dptr,a
                           2741 ;	Peephole 112.b	changed ljmp to sjmp
   08A9 80 4C              2742 	sjmp	00129$
   08AB                    2743 00124$:
                           2744 ;	main.c:369: else if(*(c)>=65 && *(c)<=70)
                           2745 ;	genAssign
   08AB 90s00r62           2746 	mov	dptr,#_atoh_c_1_1
   08AE E0                 2747 	movx	a,@dptr
   08AF FA                 2748 	mov	r2,a
   08B0 A3                 2749 	inc	dptr
   08B1 E0                 2750 	movx	a,@dptr
   08B2 FB                 2751 	mov	r3,a
   08B3 A3                 2752 	inc	dptr
   08B4 E0                 2753 	movx	a,@dptr
   08B5 FC                 2754 	mov	r4,a
                           2755 ;	genPointerGet
                           2756 ;	genGenPointerGet
   08B6 8A 82              2757 	mov	dpl,r2
   08B8 8B 83              2758 	mov	dph,r3
   08BA 8C F0              2759 	mov	b,r4
   08BC 12s00r00           2760 	lcall	__gptrget
                           2761 ;	genCmpLt
                           2762 ;	genCmp
   08BF FA                 2763 	mov	r2,a
   08C0 C3                 2764 	clr	c
                           2765 ;	Peephole 106	removed redundant mov
   08C1 64 80              2766 	xrl	a,#0x80
   08C3 94 C1              2767 	subb	a,#0xc1
                           2768 ;	genIfxJump
                           2769 ;	Peephole 112.b	changed ljmp to sjmp
                           2770 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2771 ;	genCmpGt
                           2772 ;	genCmp
   08C5 40 2C              2773 	jc	00120$
                           2774 ;	Peephole 300	removed redundant label 00161$
                           2775 ;	Peephole 256.a	removed redundant clr c
                           2776 ;	Peephole 159	avoided xrl during execution
   08C7 74 C6              2777 	mov	a,#(0x46 ^ 0x80)
   08C9 8A F0              2778 	mov	b,r2
   08CB 63 F0 80           2779 	xrl	b,#0x80
   08CE 95 F0              2780 	subb	a,b
                           2781 ;	genIfxJump
                           2782 ;	Peephole 112.b	changed ljmp to sjmp
                           2783 ;	Peephole 160.a	removed sjmp by inverse jump logic
   08D0 40 21              2784 	jc	00120$
                           2785 ;	Peephole 300	removed redundant label 00162$
                           2786 ;	main.c:371: result += (*c - 55);
                           2787 ;	genCast
   08D2 EA                 2788 	mov	a,r2
   08D3 33                 2789 	rlc	a
   08D4 95 E0              2790 	subb	a,acc
   08D6 FB                 2791 	mov	r3,a
                           2792 ;	genMinus
   08D7 EA                 2793 	mov	a,r2
   08D8 24 C9              2794 	add	a,#0xc9
   08DA FA                 2795 	mov	r2,a
   08DB EB                 2796 	mov	a,r3
   08DC 34 FF              2797 	addc	a,#0xff
   08DE FB                 2798 	mov	r3,a
                           2799 ;	genAssign
   08DF 90s00r65           2800 	mov	dptr,#_atoh_result_1_1
   08E2 E0                 2801 	movx	a,@dptr
   08E3 FC                 2802 	mov	r4,a
   08E4 A3                 2803 	inc	dptr
   08E5 E0                 2804 	movx	a,@dptr
   08E6 FD                 2805 	mov	r5,a
                           2806 ;	genPlus
   08E7 90s00r65           2807 	mov	dptr,#_atoh_result_1_1
                           2808 ;	Peephole 236.g	used r2 instead of ar2
   08EA EA                 2809 	mov	a,r2
                           2810 ;	Peephole 236.a	used r4 instead of ar4
   08EB 2C                 2811 	add	a,r4
   08EC F0                 2812 	movx	@dptr,a
                           2813 ;	Peephole 236.g	used r3 instead of ar3
   08ED EB                 2814 	mov	a,r3
                           2815 ;	Peephole 236.b	used r5 instead of ar5
   08EE 3D                 2816 	addc	a,r5
   08EF A3                 2817 	inc	dptr
   08F0 F0                 2818 	movx	@dptr,a
                           2819 ;	Peephole 112.b	changed ljmp to sjmp
   08F1 80 04              2820 	sjmp	00129$
   08F3                    2821 00120$:
                           2822 ;	main.c:375: return 2102;
                           2823 ;	genRet
                           2824 ;	Peephole 182.b	used 16 bit load of dptr
   08F3 90 08 36           2825 	mov	dptr,#0x0836
                           2826 ;	Peephole 112.b	changed ljmp to sjmp
                           2827 ;	Peephole 251.b	replaced sjmp to ret with ret
   08F6 22                 2828 	ret
   08F7                    2829 00129$:
                           2830 ;	main.c:381: return result;
                           2831 ;	genAssign
   08F7 90s00r65           2832 	mov	dptr,#_atoh_result_1_1
   08FA E0                 2833 	movx	a,@dptr
   08FB FA                 2834 	mov	r2,a
   08FC A3                 2835 	inc	dptr
   08FD E0                 2836 	movx	a,@dptr
                           2837 ;	genRet
                           2838 ;	Peephole 234.b	loading dph directly from a(ccumulator), r3 not set
   08FE 8A 82              2839 	mov	dpl,r2
   0900 F5 83              2840 	mov	dph,a
                           2841 ;	Peephole 300	removed redundant label 00131$
   0902 22                 2842 	ret
                           2843 ;------------------------------------------------------------
                           2844 ;Allocation info for local variables in function 'atoh_data'
                           2845 ;------------------------------------------------------------
                           2846 ;c                         Allocated with name '_atoh_data_c_1_1'
                           2847 ;result                    Allocated with name '_atoh_data_result_1_1'
                           2848 ;i                         Allocated with name '_atoh_data_i_1_1'
                           2849 ;------------------------------------------------------------
                           2850 ;	main.c:385: int atoh_data(char *c)
                           2851 ;	-----------------------------------------
                           2852 ;	 function atoh_data
                           2853 ;	-----------------------------------------
   0903                    2854 _atoh_data:
                           2855 ;	genReceive
   0903 AA F0              2856 	mov	r2,b
   0905 AB 83              2857 	mov	r3,dph
   0907 E5 82              2858 	mov	a,dpl
   0909 90s00r67           2859 	mov	dptr,#_atoh_data_c_1_1
   090C F0                 2860 	movx	@dptr,a
   090D A3                 2861 	inc	dptr
   090E EB                 2862 	mov	a,r3
   090F F0                 2863 	movx	@dptr,a
   0910 A3                 2864 	inc	dptr
   0911 EA                 2865 	mov	a,r2
   0912 F0                 2866 	movx	@dptr,a
                           2867 ;	main.c:389: if(*(c+2) != '\0')
                           2868 ;	genAssign
   0913 90s00r67           2869 	mov	dptr,#_atoh_data_c_1_1
   0916 E0                 2870 	movx	a,@dptr
   0917 FA                 2871 	mov	r2,a
   0918 A3                 2872 	inc	dptr
   0919 E0                 2873 	movx	a,@dptr
   091A FB                 2874 	mov	r3,a
   091B A3                 2875 	inc	dptr
   091C E0                 2876 	movx	a,@dptr
   091D FC                 2877 	mov	r4,a
                           2878 ;	genPlus
                           2879 ;     genPlusIncr
   091E 74 02              2880 	mov	a,#0x02
                           2881 ;	Peephole 236.a	used r2 instead of ar2
   0920 2A                 2882 	add	a,r2
   0921 FD                 2883 	mov	r5,a
                           2884 ;	Peephole 181	changed mov to clr
   0922 E4                 2885 	clr	a
                           2886 ;	Peephole 236.b	used r3 instead of ar3
   0923 3B                 2887 	addc	a,r3
   0924 FE                 2888 	mov	r6,a
   0925 8C 07              2889 	mov	ar7,r4
                           2890 ;	genPointerGet
                           2891 ;	genGenPointerGet
   0927 8D 82              2892 	mov	dpl,r5
   0929 8E 83              2893 	mov	dph,r6
   092B 8F F0              2894 	mov	b,r7
   092D 12s00r00           2895 	lcall	__gptrget
                           2896 ;	genCmpEq
                           2897 ;	gencjneshort
                           2898 ;	Peephole 112.b	changed ljmp to sjmp
   0930 FD                 2899 	mov	r5,a
                           2900 ;	Peephole 115.b	jump optimization
   0931 60 04              2901 	jz	00102$
                           2902 ;	Peephole 300	removed redundant label 00142$
                           2903 ;	main.c:391: return 258;
                           2904 ;	genRet
                           2905 ;	Peephole 182.b	used 16 bit load of dptr
   0933 90 01 02           2906 	mov	dptr,#0x0102
                           2907 ;	Peephole 251.a	replaced ljmp to ret with ret
   0936 22                 2908 	ret
   0937                    2909 00102$:
                           2910 ;	main.c:394: if(*(c)>=48 && *(c)<=57 )
                           2911 ;	genPointerGet
                           2912 ;	genGenPointerGet
   0937 8A 82              2913 	mov	dpl,r2
   0939 8B 83              2914 	mov	dph,r3
   093B 8C F0              2915 	mov	b,r4
   093D 12s00r00           2916 	lcall	__gptrget
                           2917 ;	genCmpLt
                           2918 ;	genCmp
   0940 FD                 2919 	mov	r5,a
   0941 C3                 2920 	clr	c
                           2921 ;	Peephole 106	removed redundant mov
   0942 64 80              2922 	xrl	a,#0x80
   0944 94 B0              2923 	subb	a,#0xb0
                           2924 ;	genIfxJump
                           2925 ;	Peephole 112.b	changed ljmp to sjmp
                           2926 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2927 ;	genCmpGt
                           2928 ;	genCmp
   0946 40 3E              2929 	jc	00112$
                           2930 ;	Peephole 300	removed redundant label 00143$
                           2931 ;	Peephole 256.a	removed redundant clr c
                           2932 ;	Peephole 159	avoided xrl during execution
   0948 74 B9              2933 	mov	a,#(0x39 ^ 0x80)
   094A 8D F0              2934 	mov	b,r5
   094C 63 F0 80           2935 	xrl	b,#0x80
   094F 95 F0              2936 	subb	a,b
                           2937 ;	genIfxJump
                           2938 ;	Peephole 112.b	changed ljmp to sjmp
                           2939 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0951 40 33              2940 	jc	00112$
                           2941 ;	Peephole 300	removed redundant label 00144$
                           2942 ;	main.c:396: result = (*c-48)*16;
                           2943 ;	genCast
   0953 ED                 2944 	mov	a,r5
   0954 33                 2945 	rlc	a
   0955 95 E0              2946 	subb	a,acc
   0957 FE                 2947 	mov	r6,a
                           2948 ;	genMinus
   0958 ED                 2949 	mov	a,r5
   0959 24 D0              2950 	add	a,#0xd0
   095B FD                 2951 	mov	r5,a
   095C EE                 2952 	mov	a,r6
   095D 34 FF              2953 	addc	a,#0xff
                           2954 ;	genLeftShift
                           2955 ;	genLeftShiftLiteral
                           2956 ;	genlshTwo
   095F FE                 2957 	mov	r6,a
                           2958 ;	Peephole 105	removed redundant mov
   0960 C4                 2959 	swap	a
   0961 54 F0              2960 	anl	a,#0xf0
   0963 CD                 2961 	xch	a,r5
   0964 C4                 2962 	swap	a
   0965 CD                 2963 	xch	a,r5
   0966 6D                 2964 	xrl	a,r5
   0967 CD                 2965 	xch	a,r5
   0968 54 F0              2966 	anl	a,#0xf0
   096A CD                 2967 	xch	a,r5
   096B 6D                 2968 	xrl	a,r5
   096C FE                 2969 	mov	r6,a
                           2970 ;	genAssign
   096D 90s00r6A           2971 	mov	dptr,#_atoh_data_result_1_1
   0970 ED                 2972 	mov	a,r5
   0971 F0                 2973 	movx	@dptr,a
   0972 A3                 2974 	inc	dptr
   0973 EE                 2975 	mov	a,r6
   0974 F0                 2976 	movx	@dptr,a
                           2977 ;	main.c:397: c++;
                           2978 ;	genPlus
   0975 90s00r67           2979 	mov	dptr,#_atoh_data_c_1_1
                           2980 ;     genPlusIncr
   0978 74 01              2981 	mov	a,#0x01
                           2982 ;	Peephole 236.a	used r2 instead of ar2
   097A 2A                 2983 	add	a,r2
   097B F0                 2984 	movx	@dptr,a
                           2985 ;	Peephole 181	changed mov to clr
   097C E4                 2986 	clr	a
                           2987 ;	Peephole 236.b	used r3 instead of ar3
   097D 3B                 2988 	addc	a,r3
   097E A3                 2989 	inc	dptr
   097F F0                 2990 	movx	@dptr,a
   0980 A3                 2991 	inc	dptr
   0981 EC                 2992 	mov	a,r4
   0982 F0                 2993 	movx	@dptr,a
   0983 02s0Ar3C           2994 	ljmp	00113$
   0986                    2995 00112$:
                           2996 ;	main.c:399: else if(*(c)>=97 && *(c)<=102)
                           2997 ;	genAssign
   0986 90s00r67           2998 	mov	dptr,#_atoh_data_c_1_1
   0989 E0                 2999 	movx	a,@dptr
   098A FA                 3000 	mov	r2,a
   098B A3                 3001 	inc	dptr
   098C E0                 3002 	movx	a,@dptr
   098D FB                 3003 	mov	r3,a
   098E A3                 3004 	inc	dptr
   098F E0                 3005 	movx	a,@dptr
   0990 FC                 3006 	mov	r4,a
                           3007 ;	genPointerGet
                           3008 ;	genGenPointerGet
   0991 8A 82              3009 	mov	dpl,r2
   0993 8B 83              3010 	mov	dph,r3
   0995 8C F0              3011 	mov	b,r4
   0997 12s00r00           3012 	lcall	__gptrget
                           3013 ;	genCmpLt
                           3014 ;	genCmp
   099A FD                 3015 	mov	r5,a
   099B C3                 3016 	clr	c
                           3017 ;	Peephole 106	removed redundant mov
   099C 64 80              3018 	xrl	a,#0x80
   099E 94 E1              3019 	subb	a,#0xe1
                           3020 ;	genIfxJump
                           3021 ;	Peephole 112.b	changed ljmp to sjmp
                           3022 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3023 ;	genCmpGt
                           3024 ;	genCmp
   09A0 40 3D              3025 	jc	00108$
                           3026 ;	Peephole 300	removed redundant label 00145$
                           3027 ;	Peephole 256.a	removed redundant clr c
                           3028 ;	Peephole 159	avoided xrl during execution
   09A2 74 E6              3029 	mov	a,#(0x66 ^ 0x80)
   09A4 8D F0              3030 	mov	b,r5
   09A6 63 F0 80           3031 	xrl	b,#0x80
   09A9 95 F0              3032 	subb	a,b
                           3033 ;	genIfxJump
                           3034 ;	Peephole 112.b	changed ljmp to sjmp
                           3035 ;	Peephole 160.a	removed sjmp by inverse jump logic
   09AB 40 32              3036 	jc	00108$
                           3037 ;	Peephole 300	removed redundant label 00146$
                           3038 ;	main.c:401: result = (*c - 87)*16;
                           3039 ;	genCast
   09AD ED                 3040 	mov	a,r5
   09AE 33                 3041 	rlc	a
   09AF 95 E0              3042 	subb	a,acc
   09B1 FE                 3043 	mov	r6,a
                           3044 ;	genMinus
   09B2 ED                 3045 	mov	a,r5
   09B3 24 A9              3046 	add	a,#0xa9
   09B5 FD                 3047 	mov	r5,a
   09B6 EE                 3048 	mov	a,r6
   09B7 34 FF              3049 	addc	a,#0xff
                           3050 ;	genLeftShift
                           3051 ;	genLeftShiftLiteral
                           3052 ;	genlshTwo
   09B9 FE                 3053 	mov	r6,a
                           3054 ;	Peephole 105	removed redundant mov
   09BA C4                 3055 	swap	a
   09BB 54 F0              3056 	anl	a,#0xf0
   09BD CD                 3057 	xch	a,r5
   09BE C4                 3058 	swap	a
   09BF CD                 3059 	xch	a,r5
   09C0 6D                 3060 	xrl	a,r5
   09C1 CD                 3061 	xch	a,r5
   09C2 54 F0              3062 	anl	a,#0xf0
   09C4 CD                 3063 	xch	a,r5
   09C5 6D                 3064 	xrl	a,r5
   09C6 FE                 3065 	mov	r6,a
                           3066 ;	genAssign
   09C7 90s00r6A           3067 	mov	dptr,#_atoh_data_result_1_1
   09CA ED                 3068 	mov	a,r5
   09CB F0                 3069 	movx	@dptr,a
   09CC A3                 3070 	inc	dptr
   09CD EE                 3071 	mov	a,r6
   09CE F0                 3072 	movx	@dptr,a
                           3073 ;	main.c:402: c++;
                           3074 ;	genPlus
   09CF 90s00r67           3075 	mov	dptr,#_atoh_data_c_1_1
                           3076 ;     genPlusIncr
   09D2 74 01              3077 	mov	a,#0x01
                           3078 ;	Peephole 236.a	used r2 instead of ar2
   09D4 2A                 3079 	add	a,r2
   09D5 F0                 3080 	movx	@dptr,a
                           3081 ;	Peephole 181	changed mov to clr
   09D6 E4                 3082 	clr	a
                           3083 ;	Peephole 236.b	used r3 instead of ar3
   09D7 3B                 3084 	addc	a,r3
   09D8 A3                 3085 	inc	dptr
   09D9 F0                 3086 	movx	@dptr,a
   09DA A3                 3087 	inc	dptr
   09DB EC                 3088 	mov	a,r4
   09DC F0                 3089 	movx	@dptr,a
                           3090 ;	Peephole 112.b	changed ljmp to sjmp
   09DD 80 5D              3091 	sjmp	00113$
   09DF                    3092 00108$:
                           3093 ;	main.c:404: else if(*(c)>=65 && *(c)<=70)
                           3094 ;	genAssign
   09DF 90s00r67           3095 	mov	dptr,#_atoh_data_c_1_1
   09E2 E0                 3096 	movx	a,@dptr
   09E3 FA                 3097 	mov	r2,a
   09E4 A3                 3098 	inc	dptr
   09E5 E0                 3099 	movx	a,@dptr
   09E6 FB                 3100 	mov	r3,a
   09E7 A3                 3101 	inc	dptr
   09E8 E0                 3102 	movx	a,@dptr
   09E9 FC                 3103 	mov	r4,a
                           3104 ;	genPointerGet
                           3105 ;	genGenPointerGet
   09EA 8A 82              3106 	mov	dpl,r2
   09EC 8B 83              3107 	mov	dph,r3
   09EE 8C F0              3108 	mov	b,r4
   09F0 12s00r00           3109 	lcall	__gptrget
                           3110 ;	genCmpLt
                           3111 ;	genCmp
   09F3 FD                 3112 	mov	r5,a
   09F4 C3                 3113 	clr	c
                           3114 ;	Peephole 106	removed redundant mov
   09F5 64 80              3115 	xrl	a,#0x80
   09F7 94 C1              3116 	subb	a,#0xc1
                           3117 ;	genIfxJump
                           3118 ;	Peephole 112.b	changed ljmp to sjmp
                           3119 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3120 ;	genCmpGt
                           3121 ;	genCmp
   09F9 40 3D              3122 	jc	00104$
                           3123 ;	Peephole 300	removed redundant label 00147$
                           3124 ;	Peephole 256.a	removed redundant clr c
                           3125 ;	Peephole 159	avoided xrl during execution
   09FB 74 C6              3126 	mov	a,#(0x46 ^ 0x80)
   09FD 8D F0              3127 	mov	b,r5
   09FF 63 F0 80           3128 	xrl	b,#0x80
   0A02 95 F0              3129 	subb	a,b
                           3130 ;	genIfxJump
                           3131 ;	Peephole 112.b	changed ljmp to sjmp
                           3132 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0A04 40 32              3133 	jc	00104$
                           3134 ;	Peephole 300	removed redundant label 00148$
                           3135 ;	main.c:406: result = (*c - 55)*16;
                           3136 ;	genCast
   0A06 ED                 3137 	mov	a,r5
   0A07 33                 3138 	rlc	a
   0A08 95 E0              3139 	subb	a,acc
   0A0A FE                 3140 	mov	r6,a
                           3141 ;	genMinus
   0A0B ED                 3142 	mov	a,r5
   0A0C 24 C9              3143 	add	a,#0xc9
   0A0E FD                 3144 	mov	r5,a
   0A0F EE                 3145 	mov	a,r6
   0A10 34 FF              3146 	addc	a,#0xff
                           3147 ;	genLeftShift
                           3148 ;	genLeftShiftLiteral
                           3149 ;	genlshTwo
   0A12 FE                 3150 	mov	r6,a
                           3151 ;	Peephole 105	removed redundant mov
   0A13 C4                 3152 	swap	a
   0A14 54 F0              3153 	anl	a,#0xf0
   0A16 CD                 3154 	xch	a,r5
   0A17 C4                 3155 	swap	a
   0A18 CD                 3156 	xch	a,r5
   0A19 6D                 3157 	xrl	a,r5
   0A1A CD                 3158 	xch	a,r5
   0A1B 54 F0              3159 	anl	a,#0xf0
   0A1D CD                 3160 	xch	a,r5
   0A1E 6D                 3161 	xrl	a,r5
   0A1F FE                 3162 	mov	r6,a
                           3163 ;	genAssign
   0A20 90s00r6A           3164 	mov	dptr,#_atoh_data_result_1_1
   0A23 ED                 3165 	mov	a,r5
   0A24 F0                 3166 	movx	@dptr,a
   0A25 A3                 3167 	inc	dptr
   0A26 EE                 3168 	mov	a,r6
   0A27 F0                 3169 	movx	@dptr,a
                           3170 ;	main.c:407: c++;
                           3171 ;	genPlus
   0A28 90s00r67           3172 	mov	dptr,#_atoh_data_c_1_1
                           3173 ;     genPlusIncr
   0A2B 74 01              3174 	mov	a,#0x01
                           3175 ;	Peephole 236.a	used r2 instead of ar2
   0A2D 2A                 3176 	add	a,r2
   0A2E F0                 3177 	movx	@dptr,a
                           3178 ;	Peephole 181	changed mov to clr
   0A2F E4                 3179 	clr	a
                           3180 ;	Peephole 236.b	used r3 instead of ar3
   0A30 3B                 3181 	addc	a,r3
   0A31 A3                 3182 	inc	dptr
   0A32 F0                 3183 	movx	@dptr,a
   0A33 A3                 3184 	inc	dptr
   0A34 EC                 3185 	mov	a,r4
   0A35 F0                 3186 	movx	@dptr,a
                           3187 ;	Peephole 112.b	changed ljmp to sjmp
   0A36 80 04              3188 	sjmp	00113$
   0A38                    3189 00104$:
                           3190 ;	main.c:411: return 257;
                           3191 ;	genRet
                           3192 ;	Peephole 182.b	used 16 bit load of dptr
   0A38 90 01 01           3193 	mov	dptr,#0x0101
                           3194 ;	Peephole 251.a	replaced ljmp to ret with ret
   0A3B 22                 3195 	ret
   0A3C                    3196 00113$:
                           3197 ;	main.c:416: if(*(c)>=48 && *(c)<=57)
                           3198 ;	genAssign
   0A3C 90s00r67           3199 	mov	dptr,#_atoh_data_c_1_1
   0A3F E0                 3200 	movx	a,@dptr
   0A40 FA                 3201 	mov	r2,a
   0A41 A3                 3202 	inc	dptr
   0A42 E0                 3203 	movx	a,@dptr
   0A43 FB                 3204 	mov	r3,a
   0A44 A3                 3205 	inc	dptr
   0A45 E0                 3206 	movx	a,@dptr
   0A46 FC                 3207 	mov	r4,a
                           3208 ;	genPointerGet
                           3209 ;	genGenPointerGet
   0A47 8A 82              3210 	mov	dpl,r2
   0A49 8B 83              3211 	mov	dph,r3
   0A4B 8C F0              3212 	mov	b,r4
   0A4D 12s00r00           3213 	lcall	__gptrget
                           3214 ;	genCmpLt
                           3215 ;	genCmp
   0A50 FA                 3216 	mov	r2,a
   0A51 C3                 3217 	clr	c
                           3218 ;	Peephole 106	removed redundant mov
   0A52 64 80              3219 	xrl	a,#0x80
   0A54 94 B0              3220 	subb	a,#0xb0
                           3221 ;	genIfxJump
                           3222 ;	Peephole 112.b	changed ljmp to sjmp
                           3223 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3224 ;	genCmpGt
                           3225 ;	genCmp
   0A56 40 2D              3226 	jc	00124$
                           3227 ;	Peephole 300	removed redundant label 00149$
                           3228 ;	Peephole 256.a	removed redundant clr c
                           3229 ;	Peephole 159	avoided xrl during execution
   0A58 74 B9              3230 	mov	a,#(0x39 ^ 0x80)
   0A5A 8A F0              3231 	mov	b,r2
   0A5C 63 F0 80           3232 	xrl	b,#0x80
   0A5F 95 F0              3233 	subb	a,b
                           3234 ;	genIfxJump
                           3235 ;	Peephole 112.b	changed ljmp to sjmp
                           3236 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0A61 40 22              3237 	jc	00124$
                           3238 ;	Peephole 300	removed redundant label 00150$
                           3239 ;	main.c:418: result += (*c - 48);
                           3240 ;	genCast
   0A63 EA                 3241 	mov	a,r2
   0A64 33                 3242 	rlc	a
   0A65 95 E0              3243 	subb	a,acc
   0A67 FB                 3244 	mov	r3,a
                           3245 ;	genMinus
   0A68 EA                 3246 	mov	a,r2
   0A69 24 D0              3247 	add	a,#0xd0
   0A6B FA                 3248 	mov	r2,a
   0A6C EB                 3249 	mov	a,r3
   0A6D 34 FF              3250 	addc	a,#0xff
   0A6F FB                 3251 	mov	r3,a
                           3252 ;	genAssign
   0A70 90s00r6A           3253 	mov	dptr,#_atoh_data_result_1_1
   0A73 E0                 3254 	movx	a,@dptr
   0A74 FC                 3255 	mov	r4,a
   0A75 A3                 3256 	inc	dptr
   0A76 E0                 3257 	movx	a,@dptr
   0A77 FD                 3258 	mov	r5,a
                           3259 ;	genPlus
   0A78 90s00r6A           3260 	mov	dptr,#_atoh_data_result_1_1
                           3261 ;	Peephole 236.g	used r2 instead of ar2
   0A7B EA                 3262 	mov	a,r2
                           3263 ;	Peephole 236.a	used r4 instead of ar4
   0A7C 2C                 3264 	add	a,r4
   0A7D F0                 3265 	movx	@dptr,a
                           3266 ;	Peephole 236.g	used r3 instead of ar3
   0A7E EB                 3267 	mov	a,r3
                           3268 ;	Peephole 236.b	used r5 instead of ar5
   0A7F 3D                 3269 	addc	a,r5
   0A80 A3                 3270 	inc	dptr
   0A81 F0                 3271 	movx	@dptr,a
   0A82 02s0Br19           3272 	ljmp	00125$
   0A85                    3273 00124$:
                           3274 ;	main.c:420: else if(*(c)>=97 && *(c)<=102)
                           3275 ;	genAssign
   0A85 90s00r67           3276 	mov	dptr,#_atoh_data_c_1_1
   0A88 E0                 3277 	movx	a,@dptr
   0A89 FA                 3278 	mov	r2,a
   0A8A A3                 3279 	inc	dptr
   0A8B E0                 3280 	movx	a,@dptr
   0A8C FB                 3281 	mov	r3,a
   0A8D A3                 3282 	inc	dptr
   0A8E E0                 3283 	movx	a,@dptr
   0A8F FC                 3284 	mov	r4,a
                           3285 ;	genPointerGet
                           3286 ;	genGenPointerGet
   0A90 8A 82              3287 	mov	dpl,r2
   0A92 8B 83              3288 	mov	dph,r3
   0A94 8C F0              3289 	mov	b,r4
   0A96 12s00r00           3290 	lcall	__gptrget
                           3291 ;	genCmpLt
                           3292 ;	genCmp
   0A99 FA                 3293 	mov	r2,a
   0A9A C3                 3294 	clr	c
                           3295 ;	Peephole 106	removed redundant mov
   0A9B 64 80              3296 	xrl	a,#0x80
   0A9D 94 E1              3297 	subb	a,#0xe1
                           3298 ;	genIfxJump
                           3299 ;	Peephole 112.b	changed ljmp to sjmp
                           3300 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3301 ;	genCmpGt
                           3302 ;	genCmp
   0A9F 40 2C              3303 	jc	00120$
                           3304 ;	Peephole 300	removed redundant label 00151$
                           3305 ;	Peephole 256.a	removed redundant clr c
                           3306 ;	Peephole 159	avoided xrl during execution
   0AA1 74 E6              3307 	mov	a,#(0x66 ^ 0x80)
   0AA3 8A F0              3308 	mov	b,r2
   0AA5 63 F0 80           3309 	xrl	b,#0x80
   0AA8 95 F0              3310 	subb	a,b
                           3311 ;	genIfxJump
                           3312 ;	Peephole 112.b	changed ljmp to sjmp
                           3313 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0AAA 40 21              3314 	jc	00120$
                           3315 ;	Peephole 300	removed redundant label 00152$
                           3316 ;	main.c:422: result += (*c - 87);
                           3317 ;	genCast
   0AAC EA                 3318 	mov	a,r2
   0AAD 33                 3319 	rlc	a
   0AAE 95 E0              3320 	subb	a,acc
   0AB0 FB                 3321 	mov	r3,a
                           3322 ;	genMinus
   0AB1 EA                 3323 	mov	a,r2
   0AB2 24 A9              3324 	add	a,#0xa9
   0AB4 FA                 3325 	mov	r2,a
   0AB5 EB                 3326 	mov	a,r3
   0AB6 34 FF              3327 	addc	a,#0xff
   0AB8 FB                 3328 	mov	r3,a
                           3329 ;	genAssign
   0AB9 90s00r6A           3330 	mov	dptr,#_atoh_data_result_1_1
   0ABC E0                 3331 	movx	a,@dptr
   0ABD FC                 3332 	mov	r4,a
   0ABE A3                 3333 	inc	dptr
   0ABF E0                 3334 	movx	a,@dptr
   0AC0 FD                 3335 	mov	r5,a
                           3336 ;	genPlus
   0AC1 90s00r6A           3337 	mov	dptr,#_atoh_data_result_1_1
                           3338 ;	Peephole 236.g	used r2 instead of ar2
   0AC4 EA                 3339 	mov	a,r2
                           3340 ;	Peephole 236.a	used r4 instead of ar4
   0AC5 2C                 3341 	add	a,r4
   0AC6 F0                 3342 	movx	@dptr,a
                           3343 ;	Peephole 236.g	used r3 instead of ar3
   0AC7 EB                 3344 	mov	a,r3
                           3345 ;	Peephole 236.b	used r5 instead of ar5
   0AC8 3D                 3346 	addc	a,r5
   0AC9 A3                 3347 	inc	dptr
   0ACA F0                 3348 	movx	@dptr,a
                           3349 ;	Peephole 112.b	changed ljmp to sjmp
   0ACB 80 4C              3350 	sjmp	00125$
   0ACD                    3351 00120$:
                           3352 ;	main.c:424: else if(*(c)>=65 && *(c)<=70)
                           3353 ;	genAssign
   0ACD 90s00r67           3354 	mov	dptr,#_atoh_data_c_1_1
   0AD0 E0                 3355 	movx	a,@dptr
   0AD1 FA                 3356 	mov	r2,a
   0AD2 A3                 3357 	inc	dptr
   0AD3 E0                 3358 	movx	a,@dptr
   0AD4 FB                 3359 	mov	r3,a
   0AD5 A3                 3360 	inc	dptr
   0AD6 E0                 3361 	movx	a,@dptr
   0AD7 FC                 3362 	mov	r4,a
                           3363 ;	genPointerGet
                           3364 ;	genGenPointerGet
   0AD8 8A 82              3365 	mov	dpl,r2
   0ADA 8B 83              3366 	mov	dph,r3
   0ADC 8C F0              3367 	mov	b,r4
   0ADE 12s00r00           3368 	lcall	__gptrget
                           3369 ;	genCmpLt
                           3370 ;	genCmp
   0AE1 FA                 3371 	mov	r2,a
   0AE2 C3                 3372 	clr	c
                           3373 ;	Peephole 106	removed redundant mov
   0AE3 64 80              3374 	xrl	a,#0x80
   0AE5 94 C1              3375 	subb	a,#0xc1
                           3376 ;	genIfxJump
                           3377 ;	Peephole 112.b	changed ljmp to sjmp
                           3378 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3379 ;	genCmpGt
                           3380 ;	genCmp
   0AE7 40 2C              3381 	jc	00116$
                           3382 ;	Peephole 300	removed redundant label 00153$
                           3383 ;	Peephole 256.a	removed redundant clr c
                           3384 ;	Peephole 159	avoided xrl during execution
   0AE9 74 C6              3385 	mov	a,#(0x46 ^ 0x80)
   0AEB 8A F0              3386 	mov	b,r2
   0AED 63 F0 80           3387 	xrl	b,#0x80
   0AF0 95 F0              3388 	subb	a,b
                           3389 ;	genIfxJump
                           3390 ;	Peephole 112.b	changed ljmp to sjmp
                           3391 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0AF2 40 21              3392 	jc	00116$
                           3393 ;	Peephole 300	removed redundant label 00154$
                           3394 ;	main.c:426: result += (*c - 55);
                           3395 ;	genCast
   0AF4 EA                 3396 	mov	a,r2
   0AF5 33                 3397 	rlc	a
   0AF6 95 E0              3398 	subb	a,acc
   0AF8 FB                 3399 	mov	r3,a
                           3400 ;	genMinus
   0AF9 EA                 3401 	mov	a,r2
   0AFA 24 C9              3402 	add	a,#0xc9
   0AFC FA                 3403 	mov	r2,a
   0AFD EB                 3404 	mov	a,r3
   0AFE 34 FF              3405 	addc	a,#0xff
   0B00 FB                 3406 	mov	r3,a
                           3407 ;	genAssign
   0B01 90s00r6A           3408 	mov	dptr,#_atoh_data_result_1_1
   0B04 E0                 3409 	movx	a,@dptr
   0B05 FC                 3410 	mov	r4,a
   0B06 A3                 3411 	inc	dptr
   0B07 E0                 3412 	movx	a,@dptr
   0B08 FD                 3413 	mov	r5,a
                           3414 ;	genPlus
   0B09 90s00r6A           3415 	mov	dptr,#_atoh_data_result_1_1
                           3416 ;	Peephole 236.g	used r2 instead of ar2
   0B0C EA                 3417 	mov	a,r2
                           3418 ;	Peephole 236.a	used r4 instead of ar4
   0B0D 2C                 3419 	add	a,r4
   0B0E F0                 3420 	movx	@dptr,a
                           3421 ;	Peephole 236.g	used r3 instead of ar3
   0B0F EB                 3422 	mov	a,r3
                           3423 ;	Peephole 236.b	used r5 instead of ar5
   0B10 3D                 3424 	addc	a,r5
   0B11 A3                 3425 	inc	dptr
   0B12 F0                 3426 	movx	@dptr,a
                           3427 ;	Peephole 112.b	changed ljmp to sjmp
   0B13 80 04              3428 	sjmp	00125$
   0B15                    3429 00116$:
                           3430 ;	main.c:430: return 257;
                           3431 ;	genRet
                           3432 ;	Peephole 182.b	used 16 bit load of dptr
   0B15 90 01 01           3433 	mov	dptr,#0x0101
                           3434 ;	Peephole 112.b	changed ljmp to sjmp
                           3435 ;	Peephole 251.b	replaced sjmp to ret with ret
   0B18 22                 3436 	ret
   0B19                    3437 00125$:
                           3438 ;	main.c:436: return result;
                           3439 ;	genAssign
   0B19 90s00r6A           3440 	mov	dptr,#_atoh_data_result_1_1
   0B1C E0                 3441 	movx	a,@dptr
   0B1D FA                 3442 	mov	r2,a
   0B1E A3                 3443 	inc	dptr
   0B1F E0                 3444 	movx	a,@dptr
                           3445 ;	genRet
                           3446 ;	Peephole 234.b	loading dph directly from a(ccumulator), r3 not set
   0B20 8A 82              3447 	mov	dpl,r2
   0B22 F5 83              3448 	mov	dph,a
                           3449 ;	Peephole 300	removed redundant label 00127$
   0B24 22                 3450 	ret
                           3451 ;------------------------------------------------------------
                           3452 ;Allocation info for local variables in function 'DDRAM_dump'
                           3453 ;------------------------------------------------------------
                           3454 ;temp                      Allocated with name '_DDRAM_dump_temp_1_1'
                           3455 ;i                         Allocated with name '_DDRAM_dump_i_1_1'
                           3456 ;------------------------------------------------------------
                           3457 ;	main.c:440: void DDRAM_dump()
                           3458 ;	-----------------------------------------
                           3459 ;	 function DDRAM_dump
                           3460 ;	-----------------------------------------
   0B25                    3461 _DDRAM_dump:
                           3462 ;	main.c:444: lcdputcmd(0x80);
                           3463 ;	genCall
   0B25 75 82 80           3464 	mov	dpl,#0x80
   0B28 12s00r00           3465 	lcall	_lcdputcmd
                           3466 ;	main.c:445: for(i=0;i<64;i++)
                           3467 ;	genAssign
   0B2B 7A 00              3468 	mov	r2,#0x00
                           3469 ;	genAssign
   0B2D 7B 00              3470 	mov	r3,#0x00
   0B2F 7C 00              3471 	mov	r4,#0x00
   0B31                    3472 00103$:
                           3473 ;	genCmpLt
                           3474 ;	genCmp
   0B31 C3                 3475 	clr	c
   0B32 EB                 3476 	mov	a,r3
   0B33 94 40              3477 	subb	a,#0x40
   0B35 EC                 3478 	mov	a,r4
   0B36 64 80              3479 	xrl	a,#0x80
   0B38 94 80              3480 	subb	a,#0x80
                           3481 ;	genIfxJump
   0B3A 40 01              3482 	jc	00113$
                           3483 ;	Peephole 251.a	replaced ljmp to ret with ret
   0B3C 22                 3484 	ret
   0B3D                    3485 00113$:
                           3486 ;	main.c:447: if(i%16==0)
                           3487 ;	genAssign
   0B3D 90s00r00           3488 	mov	dptr,#__modsint_PARM_2
   0B40 74 10              3489 	mov	a,#0x10
   0B42 F0                 3490 	movx	@dptr,a
   0B43 E4                 3491 	clr	a
   0B44 A3                 3492 	inc	dptr
   0B45 F0                 3493 	movx	@dptr,a
                           3494 ;	genCall
   0B46 8B 82              3495 	mov	dpl,r3
   0B48 8C 83              3496 	mov	dph,r4
   0B4A C0 02              3497 	push	ar2
   0B4C C0 03              3498 	push	ar3
   0B4E C0 04              3499 	push	ar4
   0B50 12s00r00           3500 	lcall	__modsint
   0B53 E5 82              3501 	mov	a,dpl
   0B55 85 83 F0           3502 	mov	b,dph
   0B58 D0 04              3503 	pop	ar4
   0B5A D0 03              3504 	pop	ar3
   0B5C D0 02              3505 	pop	ar2
                           3506 ;	genIfx
   0B5E 45 F0              3507 	orl	a,b
                           3508 ;	genIfxJump
                           3509 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0B60 70 33              3510 	jnz	00102$
                           3511 ;	Peephole 300	removed redundant label 00114$
                           3512 ;	main.c:449: temp++;
                           3513 ;	genPlus
                           3514 ;     genPlusIncr
   0B62 0A                 3515 	inc	r2
                           3516 ;	main.c:450: printf_tiny("\n\r");
                           3517 ;	genIpush
   0B63 C0 02              3518 	push	ar2
   0B65 C0 03              3519 	push	ar3
   0B67 C0 04              3520 	push	ar4
   0B69 74r15              3521 	mov	a,#__str_23
   0B6B C0 E0              3522 	push	acc
   0B6D 74s03              3523 	mov	a,#(__str_23 >> 8)
   0B6F C0 E0              3524 	push	acc
                           3525 ;	genCall
   0B71 12s00r00           3526 	lcall	_printf_tiny
   0B74 15 81              3527 	dec	sp
   0B76 15 81              3528 	dec	sp
   0B78 D0 04              3529 	pop	ar4
   0B7A D0 03              3530 	pop	ar3
   0B7C D0 02              3531 	pop	ar2
                           3532 ;	main.c:451: lcdgotoxy(temp,1);
                           3533 ;	genAssign
   0B7E 90s00r00           3534 	mov	dptr,#_lcdgotoxy_PARM_2
   0B81 74 01              3535 	mov	a,#0x01
   0B83 F0                 3536 	movx	@dptr,a
                           3537 ;	genCall
   0B84 8A 82              3538 	mov	dpl,r2
   0B86 C0 02              3539 	push	ar2
   0B88 C0 03              3540 	push	ar3
   0B8A C0 04              3541 	push	ar4
   0B8C 12s00r00           3542 	lcall	_lcdgotoxy
   0B8F D0 04              3543 	pop	ar4
   0B91 D0 03              3544 	pop	ar3
   0B93 D0 02              3545 	pop	ar2
   0B95                    3546 00102$:
                           3547 ;	main.c:454: putchar(lcdread());
                           3548 ;	genCall
   0B95 C0 02              3549 	push	ar2
   0B97 C0 03              3550 	push	ar3
   0B99 C0 04              3551 	push	ar4
   0B9B 12s00r00           3552 	lcall	_lcdread
   0B9E AD 82              3553 	mov	r5,dpl
   0BA0 D0 04              3554 	pop	ar4
   0BA2 D0 03              3555 	pop	ar3
   0BA4 D0 02              3556 	pop	ar2
                           3557 ;	genCall
   0BA6 8D 82              3558 	mov	dpl,r5
   0BA8 C0 02              3559 	push	ar2
   0BAA C0 03              3560 	push	ar3
   0BAC C0 04              3561 	push	ar4
   0BAE 12s02rE6           3562 	lcall	_putchar
   0BB1 D0 04              3563 	pop	ar4
   0BB3 D0 03              3564 	pop	ar3
   0BB5 D0 02              3565 	pop	ar2
                           3566 ;	main.c:455: delay_ms(10);
                           3567 ;	genCall
                           3568 ;	Peephole 182.b	used 16 bit load of dptr
   0BB7 90 00 0A           3569 	mov	dptr,#0x000A
   0BBA C0 02              3570 	push	ar2
   0BBC C0 03              3571 	push	ar3
   0BBE C0 04              3572 	push	ar4
   0BC0 12s00r00           3573 	lcall	_delay_ms
   0BC3 D0 04              3574 	pop	ar4
   0BC5 D0 03              3575 	pop	ar3
   0BC7 D0 02              3576 	pop	ar2
                           3577 ;	main.c:445: for(i=0;i<64;i++)
                           3578 ;	genPlus
                           3579 ;     genPlusIncr
   0BC9 0B                 3580 	inc	r3
   0BCA BB 00 01           3581 	cjne	r3,#0x00,00115$
   0BCD 0C                 3582 	inc	r4
   0BCE                    3583 00115$:
   0BCE 02s0Br31           3584 	ljmp	00103$
                           3585 ;	Peephole 259.b	removed redundant label 00107$ and ret
                           3586 ;
                           3587 ;------------------------------------------------------------
                           3588 ;Allocation info for local variables in function 'CGRAM_dump'
                           3589 ;------------------------------------------------------------
                           3590 ;temp                      Allocated with name '_CGRAM_dump_temp_1_1'
                           3591 ;i                         Allocated with name '_CGRAM_dump_i_1_1'
                           3592 ;------------------------------------------------------------
                           3593 ;	main.c:462: void CGRAM_dump()
                           3594 ;	-----------------------------------------
                           3595 ;	 function CGRAM_dump
                           3596 ;	-----------------------------------------
   0BD1                    3597 _CGRAM_dump:
                           3598 ;	main.c:466: putchar('\n');
                           3599 ;	genCall
   0BD1 75 82 0A           3600 	mov	dpl,#0x0A
   0BD4 12s02rE6           3601 	lcall	_putchar
                           3602 ;	main.c:467: lcdputcmd(0x40);
                           3603 ;	genCall
   0BD7 75 82 40           3604 	mov	dpl,#0x40
   0BDA 12s00r00           3605 	lcall	_lcdputcmd
                           3606 ;	main.c:468: for(i=0;i<32;i++)
                           3607 ;	genAssign
   0BDD 7A 20              3608 	mov	r2,#0x20
   0BDF 7B 00              3609 	mov	r3,#0x00
   0BE1                    3610 00103$:
                           3611 ;	main.c:470: temp = lcdread();
                           3612 ;	genCall
   0BE1 C0 02              3613 	push	ar2
   0BE3 C0 03              3614 	push	ar3
   0BE5 12s00r00           3615 	lcall	_lcdread
   0BE8 AC 82              3616 	mov	r4,dpl
   0BEA D0 03              3617 	pop	ar3
   0BEC D0 02              3618 	pop	ar2
                           3619 ;	main.c:471: putchar('\t');
                           3620 ;	genCall
   0BEE 75 82 09           3621 	mov	dpl,#0x09
   0BF1 C0 02              3622 	push	ar2
   0BF3 C0 03              3623 	push	ar3
   0BF5 C0 04              3624 	push	ar4
   0BF7 12s02rE6           3625 	lcall	_putchar
   0BFA D0 04              3626 	pop	ar4
   0BFC D0 03              3627 	pop	ar3
   0BFE D0 02              3628 	pop	ar2
                           3629 ;	main.c:472: putchar(temp);
                           3630 ;	genCall
   0C00 8C 82              3631 	mov	dpl,r4
   0C02 C0 02              3632 	push	ar2
   0C04 C0 03              3633 	push	ar3
   0C06 12s02rE6           3634 	lcall	_putchar
   0C09 D0 03              3635 	pop	ar3
   0C0B D0 02              3636 	pop	ar2
                           3637 ;	genMinus
                           3638 ;	genMinusDec
   0C0D 1A                 3639 	dec	r2
   0C0E BA FF 01           3640 	cjne	r2,#0xff,00109$
   0C11 1B                 3641 	dec	r3
   0C12                    3642 00109$:
                           3643 ;	main.c:468: for(i=0;i<32;i++)
                           3644 ;	genIfx
   0C12 EA                 3645 	mov	a,r2
   0C13 4B                 3646 	orl	a,r3
                           3647 ;	genIfxJump
                           3648 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0C14 70 CB              3649 	jnz	00103$
                           3650 ;	Peephole 300	removed redundant label 00110$
                           3651 ;	main.c:476: delay_ms(10);
                           3652 ;	genCall
                           3653 ;	Peephole 182.b	used 16 bit load of dptr
   0C16 90 00 0A           3654 	mov	dptr,#0x000A
                           3655 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0C19 02s00r00           3656 	ljmp	_delay_ms
                           3657 ;
                           3658 	.area CSEG    (CODE)
                           3659 	.area CONST   (CODE)
   0000                    3660 __str_0:
   0000 48 69              3661 	.ascii "Hi"
   0002 00                 3662 	.db 0x00
   0003                    3663 __str_1:
   0003 48 65 6C 6C 6F 20  3664 	.ascii "Hello World"
        57 6F 72 6C 64
   000E 00                 3665 	.db 0x00
   000F                    3666 __str_2:
   000F 0A                 3667 	.db 0x0A
   0010 0D                 3668 	.db 0x0D
   0011 43 6F 6E 74 72 6F  3669 	.ascii "Control Commands: "
        6C 20 43 6F 6D 6D
        61 6E 64 73 3A 20
   0023 0A                 3670 	.db 0x0A
   0024 0D                 3671 	.db 0x0D
   0025 31 2E 20 57 72 69  3672 	.ascii "1. Write Byte "
        74 65 20 42 79 74
        65 20
   0033 0A                 3673 	.db 0x0A
   0034 0D                 3674 	.db 0x0D
   0035 32 2E 20 52 65 61  3675 	.ascii "2. Read Byte "
        64 20 42 79 74 65
        20
   0042 0A                 3676 	.db 0x0A
   0043 0D                 3677 	.db 0x0D
   0044 33 2E 20 4C 43 44  3678 	.ascii "3. LCD "
        20
   004B 44 69 73 70 6C 61  3679 	.ascii "Display"
        79
   0052 0A                 3680 	.db 0x0A
   0053 0D                 3681 	.db 0x0D
   0054 34 2E 20 43 6C 65  3682 	.ascii "4. Clear LCD"
        61 72 20 4C 43 44
   0060 0A                 3683 	.db 0x0A
   0061 0D                 3684 	.db 0x0D
   0062 35 2E 20 48 65 78  3685 	.ascii "5. Hex Dump"
        20 44 75 6D 70
   006D 0A                 3686 	.db 0x0A
   006E 0D                 3687 	.db 0x0D
   006F 36 2E 20 44 44 52  3688 	.ascii "6. DDRAM Dump"
        41 4D 20 44 75 6D
        70
   007C 0A                 3689 	.db 0x0A
   007D 0D                 3690 	.db 0x0D
   007E 37 2E 20 43 47 52  3691 	.ascii "7. CGRAM "
        41 4D 20
   0087 44 75 6D 70        3692 	.ascii "Dump"
   008B 09                 3693 	.db 0x09
   008C 00                 3694 	.db 0x00
   008D                    3695 __str_3:
   008D 0A                 3696 	.db 0x0A
   008E 0A                 3697 	.db 0x0A
   008F 0D                 3698 	.db 0x0D
   0090 09                 3699 	.db 0x09
   0091 09                 3700 	.db 0x09
   0092 20 57 72 69 74 65  3701 	.ascii " Write Command"
        20 43 6F 6D 6D 61
        6E 64
   00A0 00                 3702 	.db 0x00
   00A1                    3703 __str_4:
   00A1 0A                 3704 	.db 0x0A
   00A2 0A                 3705 	.db 0x0A
   00A3 0D                 3706 	.db 0x0D
   00A4 09                 3707 	.db 0x09
   00A5 09                 3708 	.db 0x09
   00A6 20 52 65 61 64 20  3709 	.ascii " Read Command"
        43 6F 6D 6D 61 6E
        64
   00B3 00                 3710 	.db 0x00
   00B4                    3711 __str_5:
   00B4 0A                 3712 	.db 0x0A
   00B5 0A                 3713 	.db 0x0A
   00B6 0D                 3714 	.db 0x0D
   00B7 09                 3715 	.db 0x09
   00B8 09                 3716 	.db 0x09
   00B9 20 4C 43 44 20 44  3717 	.ascii " LCD DISPLAY"
        49 53 50 4C 41 59
   00C5 00                 3718 	.db 0x00
   00C6                    3719 __str_6:
   00C6 0A                 3720 	.db 0x0A
   00C7 0A                 3721 	.db 0x0A
   00C8 0D                 3722 	.db 0x0D
   00C9 09                 3723 	.db 0x09
   00CA 09                 3724 	.db 0x09
   00CB 20 43 6C 65 61 72  3725 	.ascii " Clear LCD"
        20 4C 43 44
   00D5 00                 3726 	.db 0x00
   00D6                    3727 __str_7:
   00D6 0A                 3728 	.db 0x0A
   00D7 0A                 3729 	.db 0x0A
   00D8 0D                 3730 	.db 0x0D
   00D9 09                 3731 	.db 0x09
   00DA 09                 3732 	.db 0x09
   00DB 20 48 65 78 20 44  3733 	.ascii " Hex Dump Command"
        75 6D 70 20 43 6F
        6D 6D 61 6E 64
   00EC 00                 3734 	.db 0x00
   00ED                    3735 __str_8:
   00ED 0A                 3736 	.db 0x0A
   00EE 0A                 3737 	.db 0x0A
   00EF 0D                 3738 	.db 0x0D
   00F0 20 45 6E 74 65 72  3739 	.ascii " Enter Address in Hex in HHH format between 000 to 7FF: "
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20 37 46 46
        3A 20
   0128 00                 3740 	.db 0x00
   0129                    3741 __str_9:
   0129 41 64 64 72 65 73  3742 	.ascii "Address: %d"
        73 3A 20 25 64
   0134 00                 3743 	.db 0x00
   0135                    3744 __str_10:
   0135 0A                 3745 	.db 0x0A
   0136 0A                 3746 	.db 0x0A
   0137 0D                 3747 	.db 0x0D
   0138 45 6E 74 65 72 20  3748 	.ascii "Enter valid number Address betweem 000 and 7FF: "
        76 61 6C 69 64 20
        6E 75 6D 62 65 72
        20 41 64 64 72 65
        73 73 20 62 65 74
        77 65 65 6D 20 30
        30 30 20 61 6E 64
        20 37 46 46 3A 20
   0168 00                 3749 	.db 0x00
   0169                    3750 __str_11:
   0169 0A                 3751 	.db 0x0A
   016A 0A                 3752 	.db 0x0A
   016B 0D                 3753 	.db 0x0D
   016C 20 45 6E 74 65 72  3754 	.ascii " Enter Data in Hex in HH format between 00 to FF: "
        20 44 61 74 61 20
        69 6E 20 48 65 78
        20 69 6E 20 48 48
        20 66 6F 72 6D 61
        74 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 46 46
        3A 20
   019E 00                 3755 	.db 0x00
   019F                    3756 __str_12:
   019F 0A                 3757 	.db 0x0A
   01A0 0A                 3758 	.db 0x0A
   01A1 0D                 3759 	.db 0x0D
   01A2 45 6E 74 65 72 20  3760 	.ascii "Enter valid data in Hex in HH format between 00 to FF: "
        76 61 6C 69 64 20
        64 61 74 61 20 69
        6E 20 48 65 78 20
        69 6E 20 48 48 20
        66 6F 72 6D 61 74
        20 62 65 74 77 65
        65 6E 20 30 30 20
        74 6F 20 46 46 3A
        20
   01D9 00                 3761 	.db 0x00
   01DA                    3762 __str_13:
   01DA 0A                 3763 	.db 0x0A
   01DB 0A                 3764 	.db 0x0A
   01DC 0D                 3765 	.db 0x0D
   01DD 25 78 3A 25 78 20  3766 	.ascii "%x:%x "
   01E3 0A                 3767 	.db 0x0A
   01E4 00                 3768 	.db 0x00
   01E5                    3769 __str_14:
   01E5 0A                 3770 	.db 0x0A
   01E6 0A                 3771 	.db 0x0A
   01E7 0D                 3772 	.db 0x0D
   01E8 20 45 6E 74 65 72  3773 	.ascii " Enter Row number between 0 to 3: "
        20 52 6F 77 20 6E
        75 6D 62 65 72 20
        62 65 74 77 65 65
        6E 20 30 20 74 6F
        20 33 3A 20
   020A 00                 3774 	.db 0x00
   020B                    3775 __str_15:
   020B 0A                 3776 	.db 0x0A
   020C 0A                 3777 	.db 0x0A
   020D 0D                 3778 	.db 0x0D
   020E 20 45 6E 74 65 72  3779 	.ascii " Enter valid row number betweem 0 and 3: "
        20 76 61 6C 69 64
        20 72 6F 77 20 6E
        75 6D 62 65 72 20
        62 65 74 77 65 65
        6D 20 30 20 61 6E
        64 20 33 3A 20
   0237 00                 3780 	.db 0x00
   0238                    3781 __str_16:
   0238 0A                 3782 	.db 0x0A
   0239 0A                 3783 	.db 0x0A
   023A 0D                 3784 	.db 0x0D
   023B 20 45 6E 74 65 72  3785 	.ascii " Enter Start Address in Hex in HHH format between 000 to "
        20 53 74 61 72 74
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20
   0274 37 46 46 3A 20     3786 	.ascii "7FF: "
   0279 00                 3787 	.db 0x00
   027A                    3788 __str_17:
   027A 0A                 3789 	.db 0x0A
   027B 0A                 3790 	.db 0x0A
   027C 0D                 3791 	.db 0x0D
   027D 20 45 6E 74 65 72  3792 	.ascii " Enter End Address in Hex in HHH format between 000 to 7F"
        20 45 6E 64 20 41
        64 64 72 65 73 73
        20 69 6E 20 48 65
        78 20 69 6E 20 48
        48 48 20 66 6F 72
        6D 61 74 20 62 65
        74 77 65 65 6E 20
        30 30 30 20 74 6F
        20 37 46
   02B6 46 3A 20           3793 	.ascii "F: "
   02B9 00                 3794 	.db 0x00
   02BA                    3795 __str_18:
   02BA 0A                 3796 	.db 0x0A
   02BB 0D                 3797 	.db 0x0D
   02BC 09                 3798 	.db 0x09
   02BD 54 6F 74 61 6C 20  3799 	.ascii "Total Bytes: %d"
        42 79 74 65 73 3A
        20 25 64
   02CC 0A                 3800 	.db 0x0A
   02CD 0D                 3801 	.db 0x0D
   02CE 00                 3802 	.db 0x00
   02CF                    3803 __str_19:
   02CF 45 6E 64 20 61 64  3804 	.ascii "End address smaller than start address"
        64 72 65 73 73 20
        73 6D 61 6C 6C 65
        72 20 74 68 61 6E
        20 73 74 61 72 74
        20 61 64 64 72 65
        73 73
   02F5 00                 3805 	.db 0x00
   02F6                    3806 __str_20:
   02F6 4E 75 6D 62 65 72  3807 	.ascii "Number Of bytes: %d"
        20 4F 66 20 62 79
        74 65 73 3A 20 25
        64
   0309 00                 3808 	.db 0x00
   030A                    3809 __str_21:
   030A 0A                 3810 	.db 0x0A
   030B 0D                 3811 	.db 0x0D
   030C 25 78 3A           3812 	.ascii "%x:"
   030F 09                 3813 	.db 0x09
   0310 00                 3814 	.db 0x00
   0311                    3815 __str_22:
   0311 25 78              3816 	.ascii "%x"
   0313 09                 3817 	.db 0x09
   0314 00                 3818 	.db 0x00
   0315                    3819 __str_23:
   0315 0A                 3820 	.db 0x0A
   0316 0D                 3821 	.db 0x0D
   0317 00                 3822 	.db 0x00
                           3823 	.area XINIT   (CODE)
   0000                    3824 __xinit__write:
   0000 00 A0              3825 	.byte #0x00,#0xA0
   0002                    3826 __xinit__read:
   0002 00 C0              3827 	.byte #0x00,#0xC0
