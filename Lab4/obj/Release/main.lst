                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Fri Nov 11 04:07:46 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl ___sdcc_external_startup
                             14 	.globl _P5_7
                             15 	.globl _P5_6
                             16 	.globl _P5_5
                             17 	.globl _P5_4
                             18 	.globl _P5_3
                             19 	.globl _P5_2
                             20 	.globl _P5_1
                             21 	.globl _P5_0
                             22 	.globl _P4_7
                             23 	.globl _P4_6
                             24 	.globl _P4_5
                             25 	.globl _P4_4
                             26 	.globl _P4_3
                             27 	.globl _P4_2
                             28 	.globl _P4_1
                             29 	.globl _P4_0
                             30 	.globl _PX0L
                             31 	.globl _PT0L
                             32 	.globl _PX1L
                             33 	.globl _PT1L
                             34 	.globl _PLS
                             35 	.globl _PT2L
                             36 	.globl _PPCL
                             37 	.globl _EC
                             38 	.globl _CCF0
                             39 	.globl _CCF1
                             40 	.globl _CCF2
                             41 	.globl _CCF3
                             42 	.globl _CCF4
                             43 	.globl _CR
                             44 	.globl _CF
                             45 	.globl _TF2
                             46 	.globl _EXF2
                             47 	.globl _RCLK
                             48 	.globl _TCLK
                             49 	.globl _EXEN2
                             50 	.globl _TR2
                             51 	.globl _C_T2
                             52 	.globl _CP_RL2
                             53 	.globl _T2CON_7
                             54 	.globl _T2CON_6
                             55 	.globl _T2CON_5
                             56 	.globl _T2CON_4
                             57 	.globl _T2CON_3
                             58 	.globl _T2CON_2
                             59 	.globl _T2CON_1
                             60 	.globl _T2CON_0
                             61 	.globl _PT2
                             62 	.globl _ET2
                             63 	.globl _CY
                             64 	.globl _AC
                             65 	.globl _F0
                             66 	.globl _RS1
                             67 	.globl _RS0
                             68 	.globl _OV
                             69 	.globl _F1
                             70 	.globl _P
                             71 	.globl _PS
                             72 	.globl _PT1
                             73 	.globl _PX1
                             74 	.globl _PT0
                             75 	.globl _PX0
                             76 	.globl _RD
                             77 	.globl _WR
                             78 	.globl _T1
                             79 	.globl _T0
                             80 	.globl _INT1
                             81 	.globl _INT0
                             82 	.globl _TXD
                             83 	.globl _RXD
                             84 	.globl _P3_7
                             85 	.globl _P3_6
                             86 	.globl _P3_5
                             87 	.globl _P3_4
                             88 	.globl _P3_3
                             89 	.globl _P3_2
                             90 	.globl _P3_1
                             91 	.globl _P3_0
                             92 	.globl _EA
                             93 	.globl _ES
                             94 	.globl _ET1
                             95 	.globl _EX1
                             96 	.globl _ET0
                             97 	.globl _EX0
                             98 	.globl _P2_7
                             99 	.globl _P2_6
                            100 	.globl _P2_5
                            101 	.globl _P2_4
                            102 	.globl _P2_3
                            103 	.globl _P2_2
                            104 	.globl _P2_1
                            105 	.globl _P2_0
                            106 	.globl _SM0
                            107 	.globl _SM1
                            108 	.globl _SM2
                            109 	.globl _REN
                            110 	.globl _TB8
                            111 	.globl _RB8
                            112 	.globl _TI
                            113 	.globl _RI
                            114 	.globl _P1_7
                            115 	.globl _P1_6
                            116 	.globl _P1_5
                            117 	.globl _P1_4
                            118 	.globl _P1_3
                            119 	.globl _P1_2
                            120 	.globl _P1_1
                            121 	.globl _P1_0
                            122 	.globl _TF1
                            123 	.globl _TR1
                            124 	.globl _TF0
                            125 	.globl _TR0
                            126 	.globl _IE1
                            127 	.globl _IT1
                            128 	.globl _IE0
                            129 	.globl _IT0
                            130 	.globl _P0_7
                            131 	.globl _P0_6
                            132 	.globl _P0_5
                            133 	.globl _P0_4
                            134 	.globl _P0_3
                            135 	.globl _P0_2
                            136 	.globl _P0_1
                            137 	.globl _P0_0
                            138 	.globl _EECON
                            139 	.globl _KBF
                            140 	.globl _KBE
                            141 	.globl _KBLS
                            142 	.globl _BRL
                            143 	.globl _BDRCON
                            144 	.globl _T2MOD
                            145 	.globl _SPDAT
                            146 	.globl _SPSTA
                            147 	.globl _SPCON
                            148 	.globl _SADEN
                            149 	.globl _SADDR
                            150 	.globl _WDTPRG
                            151 	.globl _WDTRST
                            152 	.globl _P5
                            153 	.globl _P4
                            154 	.globl _IPH1
                            155 	.globl _IPL1
                            156 	.globl _IPH0
                            157 	.globl _IPL0
                            158 	.globl _IEN1
                            159 	.globl _IEN0
                            160 	.globl _CMOD
                            161 	.globl _CL
                            162 	.globl _CH
                            163 	.globl _CCON
                            164 	.globl _CCAPM4
                            165 	.globl _CCAPM3
                            166 	.globl _CCAPM2
                            167 	.globl _CCAPM1
                            168 	.globl _CCAPM0
                            169 	.globl _CCAP4L
                            170 	.globl _CCAP3L
                            171 	.globl _CCAP2L
                            172 	.globl _CCAP1L
                            173 	.globl _CCAP0L
                            174 	.globl _CCAP4H
                            175 	.globl _CCAP3H
                            176 	.globl _CCAP2H
                            177 	.globl _CCAP1H
                            178 	.globl _CCAP0H
                            179 	.globl _CKCKON1
                            180 	.globl _CKCKON0
                            181 	.globl _CKRL
                            182 	.globl _AUXR1
                            183 	.globl _AUXR
                            184 	.globl _TH2
                            185 	.globl _TL2
                            186 	.globl _RCAP2H
                            187 	.globl _RCAP2L
                            188 	.globl _T2CON
                            189 	.globl _B
                            190 	.globl _ACC
                            191 	.globl _PSW
                            192 	.globl _IP
                            193 	.globl _P3
                            194 	.globl _IE
                            195 	.globl _P2
                            196 	.globl _SBUF
                            197 	.globl _SCON
                            198 	.globl _P1
                            199 	.globl _TH1
                            200 	.globl _TH0
                            201 	.globl _TL1
                            202 	.globl _TL0
                            203 	.globl _TMOD
                            204 	.globl _TCON
                            205 	.globl _PCON
                            206 	.globl _DPH
                            207 	.globl _DPL
                            208 	.globl _SP
                            209 	.globl _P0
                            210 	.globl _read
                            211 	.globl _write
                            212 	.globl _hex_dump
                            213 	.globl _DDRAM_dump
                            214 	.globl _CGRAM_dump
                            215 ;--------------------------------------------------------
                            216 ; special function registers
                            217 ;--------------------------------------------------------
                            218 	.area RSEG    (DATA)
                    0080    219 _P0	=	0x0080
                    0081    220 _SP	=	0x0081
                    0082    221 _DPL	=	0x0082
                    0083    222 _DPH	=	0x0083
                    0087    223 _PCON	=	0x0087
                    0088    224 _TCON	=	0x0088
                    0089    225 _TMOD	=	0x0089
                    008A    226 _TL0	=	0x008a
                    008B    227 _TL1	=	0x008b
                    008C    228 _TH0	=	0x008c
                    008D    229 _TH1	=	0x008d
                    0090    230 _P1	=	0x0090
                    0098    231 _SCON	=	0x0098
                    0099    232 _SBUF	=	0x0099
                    00A0    233 _P2	=	0x00a0
                    00A8    234 _IE	=	0x00a8
                    00B0    235 _P3	=	0x00b0
                    00B8    236 _IP	=	0x00b8
                    00D0    237 _PSW	=	0x00d0
                    00E0    238 _ACC	=	0x00e0
                    00F0    239 _B	=	0x00f0
                    00C8    240 _T2CON	=	0x00c8
                    00CA    241 _RCAP2L	=	0x00ca
                    00CB    242 _RCAP2H	=	0x00cb
                    00CC    243 _TL2	=	0x00cc
                    00CD    244 _TH2	=	0x00cd
                    008E    245 _AUXR	=	0x008e
                    00A2    246 _AUXR1	=	0x00a2
                    0097    247 _CKRL	=	0x0097
                    008F    248 _CKCKON0	=	0x008f
                    008F    249 _CKCKON1	=	0x008f
                    00FA    250 _CCAP0H	=	0x00fa
                    00FB    251 _CCAP1H	=	0x00fb
                    00FC    252 _CCAP2H	=	0x00fc
                    00FD    253 _CCAP3H	=	0x00fd
                    00FE    254 _CCAP4H	=	0x00fe
                    00EA    255 _CCAP0L	=	0x00ea
                    00EB    256 _CCAP1L	=	0x00eb
                    00EC    257 _CCAP2L	=	0x00ec
                    00ED    258 _CCAP3L	=	0x00ed
                    00EE    259 _CCAP4L	=	0x00ee
                    00DA    260 _CCAPM0	=	0x00da
                    00DB    261 _CCAPM1	=	0x00db
                    00DC    262 _CCAPM2	=	0x00dc
                    00DD    263 _CCAPM3	=	0x00dd
                    00DE    264 _CCAPM4	=	0x00de
                    00D8    265 _CCON	=	0x00d8
                    00F9    266 _CH	=	0x00f9
                    00E9    267 _CL	=	0x00e9
                    00D9    268 _CMOD	=	0x00d9
                    00A8    269 _IEN0	=	0x00a8
                    00B1    270 _IEN1	=	0x00b1
                    00B8    271 _IPL0	=	0x00b8
                    00B7    272 _IPH0	=	0x00b7
                    00B2    273 _IPL1	=	0x00b2
                    00B3    274 _IPH1	=	0x00b3
                    00C0    275 _P4	=	0x00c0
                    00D8    276 _P5	=	0x00d8
                    00A6    277 _WDTRST	=	0x00a6
                    00A7    278 _WDTPRG	=	0x00a7
                    00A9    279 _SADDR	=	0x00a9
                    00B9    280 _SADEN	=	0x00b9
                    00C3    281 _SPCON	=	0x00c3
                    00C4    282 _SPSTA	=	0x00c4
                    00C5    283 _SPDAT	=	0x00c5
                    00C9    284 _T2MOD	=	0x00c9
                    009B    285 _BDRCON	=	0x009b
                    009A    286 _BRL	=	0x009a
                    009C    287 _KBLS	=	0x009c
                    009D    288 _KBE	=	0x009d
                    009E    289 _KBF	=	0x009e
                    00D2    290 _EECON	=	0x00d2
                            291 ;--------------------------------------------------------
                            292 ; special function bits
                            293 ;--------------------------------------------------------
                            294 	.area RSEG    (DATA)
                    0080    295 _P0_0	=	0x0080
                    0081    296 _P0_1	=	0x0081
                    0082    297 _P0_2	=	0x0082
                    0083    298 _P0_3	=	0x0083
                    0084    299 _P0_4	=	0x0084
                    0085    300 _P0_5	=	0x0085
                    0086    301 _P0_6	=	0x0086
                    0087    302 _P0_7	=	0x0087
                    0088    303 _IT0	=	0x0088
                    0089    304 _IE0	=	0x0089
                    008A    305 _IT1	=	0x008a
                    008B    306 _IE1	=	0x008b
                    008C    307 _TR0	=	0x008c
                    008D    308 _TF0	=	0x008d
                    008E    309 _TR1	=	0x008e
                    008F    310 _TF1	=	0x008f
                    0090    311 _P1_0	=	0x0090
                    0091    312 _P1_1	=	0x0091
                    0092    313 _P1_2	=	0x0092
                    0093    314 _P1_3	=	0x0093
                    0094    315 _P1_4	=	0x0094
                    0095    316 _P1_5	=	0x0095
                    0096    317 _P1_6	=	0x0096
                    0097    318 _P1_7	=	0x0097
                    0098    319 _RI	=	0x0098
                    0099    320 _TI	=	0x0099
                    009A    321 _RB8	=	0x009a
                    009B    322 _TB8	=	0x009b
                    009C    323 _REN	=	0x009c
                    009D    324 _SM2	=	0x009d
                    009E    325 _SM1	=	0x009e
                    009F    326 _SM0	=	0x009f
                    00A0    327 _P2_0	=	0x00a0
                    00A1    328 _P2_1	=	0x00a1
                    00A2    329 _P2_2	=	0x00a2
                    00A3    330 _P2_3	=	0x00a3
                    00A4    331 _P2_4	=	0x00a4
                    00A5    332 _P2_5	=	0x00a5
                    00A6    333 _P2_6	=	0x00a6
                    00A7    334 _P2_7	=	0x00a7
                    00A8    335 _EX0	=	0x00a8
                    00A9    336 _ET0	=	0x00a9
                    00AA    337 _EX1	=	0x00aa
                    00AB    338 _ET1	=	0x00ab
                    00AC    339 _ES	=	0x00ac
                    00AF    340 _EA	=	0x00af
                    00B0    341 _P3_0	=	0x00b0
                    00B1    342 _P3_1	=	0x00b1
                    00B2    343 _P3_2	=	0x00b2
                    00B3    344 _P3_3	=	0x00b3
                    00B4    345 _P3_4	=	0x00b4
                    00B5    346 _P3_5	=	0x00b5
                    00B6    347 _P3_6	=	0x00b6
                    00B7    348 _P3_7	=	0x00b7
                    00B0    349 _RXD	=	0x00b0
                    00B1    350 _TXD	=	0x00b1
                    00B2    351 _INT0	=	0x00b2
                    00B3    352 _INT1	=	0x00b3
                    00B4    353 _T0	=	0x00b4
                    00B5    354 _T1	=	0x00b5
                    00B6    355 _WR	=	0x00b6
                    00B7    356 _RD	=	0x00b7
                    00B8    357 _PX0	=	0x00b8
                    00B9    358 _PT0	=	0x00b9
                    00BA    359 _PX1	=	0x00ba
                    00BB    360 _PT1	=	0x00bb
                    00BC    361 _PS	=	0x00bc
                    00D0    362 _P	=	0x00d0
                    00D1    363 _F1	=	0x00d1
                    00D2    364 _OV	=	0x00d2
                    00D3    365 _RS0	=	0x00d3
                    00D4    366 _RS1	=	0x00d4
                    00D5    367 _F0	=	0x00d5
                    00D6    368 _AC	=	0x00d6
                    00D7    369 _CY	=	0x00d7
                    00AD    370 _ET2	=	0x00ad
                    00BD    371 _PT2	=	0x00bd
                    00C8    372 _T2CON_0	=	0x00c8
                    00C9    373 _T2CON_1	=	0x00c9
                    00CA    374 _T2CON_2	=	0x00ca
                    00CB    375 _T2CON_3	=	0x00cb
                    00CC    376 _T2CON_4	=	0x00cc
                    00CD    377 _T2CON_5	=	0x00cd
                    00CE    378 _T2CON_6	=	0x00ce
                    00CF    379 _T2CON_7	=	0x00cf
                    00C8    380 _CP_RL2	=	0x00c8
                    00C9    381 _C_T2	=	0x00c9
                    00CA    382 _TR2	=	0x00ca
                    00CB    383 _EXEN2	=	0x00cb
                    00CC    384 _TCLK	=	0x00cc
                    00CD    385 _RCLK	=	0x00cd
                    00CE    386 _EXF2	=	0x00ce
                    00CF    387 _TF2	=	0x00cf
                    00DF    388 _CF	=	0x00df
                    00DE    389 _CR	=	0x00de
                    00DC    390 _CCF4	=	0x00dc
                    00DB    391 _CCF3	=	0x00db
                    00DA    392 _CCF2	=	0x00da
                    00D9    393 _CCF1	=	0x00d9
                    00D8    394 _CCF0	=	0x00d8
                    00AE    395 _EC	=	0x00ae
                    00BE    396 _PPCL	=	0x00be
                    00BD    397 _PT2L	=	0x00bd
                    00BC    398 _PLS	=	0x00bc
                    00BB    399 _PT1L	=	0x00bb
                    00BA    400 _PX1L	=	0x00ba
                    00B9    401 _PT0L	=	0x00b9
                    00B8    402 _PX0L	=	0x00b8
                    00C0    403 _P4_0	=	0x00c0
                    00C1    404 _P4_1	=	0x00c1
                    00C2    405 _P4_2	=	0x00c2
                    00C3    406 _P4_3	=	0x00c3
                    00C4    407 _P4_4	=	0x00c4
                    00C5    408 _P4_5	=	0x00c5
                    00C6    409 _P4_6	=	0x00c6
                    00C7    410 _P4_7	=	0x00c7
                    00D8    411 _P5_0	=	0x00d8
                    00D9    412 _P5_1	=	0x00d9
                    00DA    413 _P5_2	=	0x00da
                    00DB    414 _P5_3	=	0x00db
                    00DC    415 _P5_4	=	0x00dc
                    00DD    416 _P5_5	=	0x00dd
                    00DE    417 _P5_6	=	0x00de
                    00DF    418 _P5_7	=	0x00df
                            419 ;--------------------------------------------------------
                            420 ; overlayable register banks
                            421 ;--------------------------------------------------------
                            422 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     423 	.ds 8
                            424 ;--------------------------------------------------------
                            425 ; internal ram data
                            426 ;--------------------------------------------------------
                            427 	.area DSEG    (DATA)
   0000                     428 _main_sloc0_1_0:
   0000                     429 	.ds 2
   0002                     430 _hex_dump_sloc0_1_0:
   0002                     431 	.ds 2
                            432 ;--------------------------------------------------------
                            433 ; overlayable items in internal ram 
                            434 ;--------------------------------------------------------
                            435 	.area OSEG    (OVR,DATA)
                            436 ;--------------------------------------------------------
                            437 ; Stack segment in internal ram 
                            438 ;--------------------------------------------------------
                            439 	.area	SSEG	(DATA)
   0000                     440 __start__stack:
   0000                     441 	.ds	1
                            442 
                            443 ;--------------------------------------------------------
                            444 ; indirectly addressable internal ram data
                            445 ;--------------------------------------------------------
                            446 	.area ISEG    (DATA)
                            447 ;--------------------------------------------------------
                            448 ; bit data
                            449 ;--------------------------------------------------------
                            450 	.area BSEG    (BIT)
                            451 ;--------------------------------------------------------
                            452 ; paged external ram data
                            453 ;--------------------------------------------------------
                            454 	.area PSEG    (PAG,XDATA)
                            455 ;--------------------------------------------------------
                            456 ; external ram data
                            457 ;--------------------------------------------------------
                            458 	.area XSEG    (XDATA)
   0000                     459 _main_b_1_1:
   0000                     460 	.ds 10
   000A                     461 _main_d_1_1:
   000A                     462 	.ds 10
   0014                     463 _main_flag_1_1:
   0014                     464 	.ds 2
   0016                     465 _hex_dump_b_1_1:
   0016                     466 	.ds 10
   0020                     467 _hex_dump_d_1_1:
   0020                     468 	.ds 10
   002A                     469 _hex_dump_r_1_1:
   002A                     470 	.ds 17
   003B                     471 _hex_dump_st_addr_1_1:
   003B                     472 	.ds 2
   003D                     473 _hex_dump_flag_1_1:
   003D                     474 	.ds 2
   003F                     475 _hex_dump_j_1_1:
   003F                     476 	.ds 2
                            477 ;--------------------------------------------------------
                            478 ; external initialized ram data
                            479 ;--------------------------------------------------------
                            480 	.area XISEG   (XDATA)
   0000                     481 _write::
   0000                     482 	.ds 2
   0002                     483 _read::
   0002                     484 	.ds 2
                            485 	.area HOME    (CODE)
                            486 	.area GSINIT0 (CODE)
                            487 	.area GSINIT1 (CODE)
                            488 	.area GSINIT2 (CODE)
                            489 	.area GSINIT3 (CODE)
                            490 	.area GSINIT4 (CODE)
                            491 	.area GSINIT5 (CODE)
                            492 	.area GSINIT  (CODE)
                            493 	.area GSFINAL (CODE)
                            494 	.area CSEG    (CODE)
                            495 ;--------------------------------------------------------
                            496 ; interrupt vector 
                            497 ;--------------------------------------------------------
                            498 	.area HOME    (CODE)
   0000                     499 __interrupt_vect:
   0000 02s00r00            500 	ljmp	__sdcc_gsinit_startup
                            501 ;--------------------------------------------------------
                            502 ; global & static initialisations
                            503 ;--------------------------------------------------------
                            504 	.area HOME    (CODE)
                            505 	.area GSINIT  (CODE)
                            506 	.area GSFINAL (CODE)
                            507 	.area GSINIT  (CODE)
                            508 	.globl __sdcc_gsinit_startup
                            509 	.globl __sdcc_program_startup
                            510 	.globl __start__stack
                            511 	.globl __mcs51_genXINIT
                            512 	.globl __mcs51_genXRAMCLEAR
                            513 	.globl __mcs51_genRAMCLEAR
                            514 	.area GSFINAL (CODE)
   0000 02s00r00            515 	ljmp	__sdcc_program_startup
                            516 ;--------------------------------------------------------
                            517 ; Home
                            518 ;--------------------------------------------------------
                            519 	.area HOME    (CODE)
                            520 	.area CSEG    (CODE)
   0000                     521 __sdcc_program_startup:
   0000 12s00r0C            522 	lcall	_main
                            523 ;	return from main will lock up
   0003 80 FE               524 	sjmp .
                            525 ;--------------------------------------------------------
                            526 ; code
                            527 ;--------------------------------------------------------
                            528 	.area CSEG    (CODE)
                            529 ;------------------------------------------------------------
                            530 ;Allocation info for local variables in function '__sdcc_external_startup'
                            531 ;------------------------------------------------------------
                            532 ;------------------------------------------------------------
                            533 ;	main.c:27: __sdcc_external_startup()
                            534 ;	-----------------------------------------
                            535 ;	 function __sdcc_external_startup
                            536 ;	-----------------------------------------
   0005                     537 ___sdcc_external_startup:
                    0002    538 	ar2 = 0x02
                    0003    539 	ar3 = 0x03
                    0004    540 	ar4 = 0x04
                    0005    541 	ar5 = 0x05
                    0006    542 	ar6 = 0x06
                    0007    543 	ar7 = 0x07
                    0000    544 	ar0 = 0x00
                    0001    545 	ar1 = 0x01
                            546 ;	main.c:29: AUXR |= 0xC0;
                            547 ;	genOr
   0005 43 8E C0            548 	orl	_AUXR,#0xC0
                            549 ;	main.c:30: return 0;													// Enables 1 KB RAM	 Before main starts
                            550 ;	genRet
                            551 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            552 	mov	dptr,#0x0000
                            553 ;	Peephole 300	removed redundant label 00101$
   000B 22                  554 	ret
                            555 ;------------------------------------------------------------
                            556 ;Allocation info for local variables in function 'main'
                            557 ;------------------------------------------------------------
                            558 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                            559 ;b                         Allocated with name '_main_b_1_1'
                            560 ;d                         Allocated with name '_main_d_1_1'
                            561 ;store                     Allocated with name '_main_store_1_1'
                            562 ;rd                        Allocated with name '_main_rd_1_1'
                            563 ;page                      Allocated with name '_main_page_1_1'
                            564 ;addr                      Allocated with name '_main_addr_1_1'
                            565 ;flag                      Allocated with name '_main_flag_1_1'
                            566 ;dat                       Allocated with name '_main_dat_1_1'
                            567 ;------------------------------------------------------------
                            568 ;	main.c:33: void main(void)
                            569 ;	-----------------------------------------
                            570 ;	 function main
                            571 ;	-----------------------------------------
   000C                     572 _main:
                            573 ;	main.c:38: P1_0=1;
                            574 ;	genAssign
   000C D2 90               575 	setb	_P1_0
                            576 ;	main.c:39: lcd_init();                                     // Initilaize LCD
                            577 ;	genCall
   000E 12s00r00            578 	lcall	_lcd_init
                            579 ;	main.c:40: uart_init()	;                                   // Initilalize UART
                            580 ;	genCall
   0011 12s00r00            581 	lcall	_uart_init
                            582 ;	main.c:41: lcdgotoaddr(0x00);                              // Print Hello World on LCD at addres 0x86
                            583 ;	genCall
   0014 75 82 00            584 	mov	dpl,#0x00
   0017 12s00r00            585 	lcall	_lcdgotoaddr
                            586 ;	main.c:42: lcdgotoaddr(0x86);
                            587 ;	genCall
   001A 75 82 86            588 	mov	dpl,#0x86
   001D 12s00r00            589 	lcall	_lcdgotoaddr
                            590 ;	main.c:43: lcdputstr("Hi");
                            591 ;	genCall
                            592 ;	Peephole 182.a	used 16 bit load of DPTR
   0020 90s00r00            593 	mov	dptr,#__str_0
   0023 75 F0 80            594 	mov	b,#0x80
   0026 12s00r00            595 	lcall	_lcdputstr
                            596 ;	main.c:45: lcdgotoxy(2,6);                                 // Goes to address specified by x,y coordinates
                            597 ;	genAssign
   0029 90s00r00            598 	mov	dptr,#_lcdgotoxy_PARM_2
   002C 74 06               599 	mov	a,#0x06
   002E F0                  600 	movx	@dptr,a
                            601 ;	genCall
   002F 75 82 02            602 	mov	dpl,#0x02
   0032 12s00r00            603 	lcall	_lcdgotoxy
                            604 ;	main.c:46: lcdputstr("Hello");
                            605 ;	genCall
                            606 ;	Peephole 182.a	used 16 bit load of DPTR
   0035 90s00r03            607 	mov	dptr,#__str_1
   0038 75 F0 80            608 	mov	b,#0x80
   003B 12s00r00            609 	lcall	_lcdputstr
                            610 ;	main.c:47: lcdgotoxy(3,6);
                            611 ;	genAssign
   003E 90s00r00            612 	mov	dptr,#_lcdgotoxy_PARM_2
   0041 74 06               613 	mov	a,#0x06
   0043 F0                  614 	movx	@dptr,a
                            615 ;	genCall
   0044 75 82 03            616 	mov	dpl,#0x03
   0047 12s00r00            617 	lcall	_lcdgotoxy
                            618 ;	main.c:48: lcdputstr("World");
                            619 ;	genCall
                            620 ;	Peephole 182.a	used 16 bit load of DPTR
   004A 90s00r09            621 	mov	dptr,#__str_2
   004D 75 F0 80            622 	mov	b,#0x80
   0050 12s00r00            623 	lcall	_lcdputstr
                            624 ;	main.c:50: printf_tiny("\n\r\t\t\t\t\t******** Control Commands ********\n\r\t1. Write Byte \n\r\t2. Read Byte \n\r\t3. LCD Display\n\r\t4. Clear LCD\n\r\t5. Hex Dump\n\r\t6. DDRAM Dump\n\r\t7. CGRAM Dump\t");
                            625 ;	genIpush
   0053 74r0F               626 	mov	a,#__str_3
   0055 C0 E0               627 	push	acc
   0057 74s00               628 	mov	a,#(__str_3 >> 8)
   0059 C0 E0               629 	push	acc
                            630 ;	genCall
   005B 12s00r00            631 	lcall	_printf_tiny
   005E 15 81               632 	dec	sp
   0060 15 81               633 	dec	sp
                            634 ;	main.c:51: while(1)
   0062                     635 00160$:
                            636 ;	genIfx
                            637 ;	genIfxJump
                            638 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0062 30 98 FD            639 	jnb	_RI,00160$
                            640 ;	Peephole 300	removed redundant label 00188$
                            641 ;	main.c:55: store= getchar();                       // If Character is recivers then save it in store
                            642 ;	genCall
   0065 12s00r00            643 	lcall	_getchar
                            644 ;	main.c:56: putchar(store);                         // Characters 1 to 7 are used as Commands
                            645 ;	genCall
   0068 AA 82               646 	mov  r2,dpl
                            647 ;	Peephole 177.a	removed redundant mov
   006A C0 02               648 	push	ar2
   006C 12s00r00            649 	lcall	_putchar
   006F D0 02               650 	pop	ar2
                            651 ;	main.c:57: if(store=='1'){printf_tiny("\n\n\r\t\t ******  Write Command  *****"); }
                            652 ;	genCmpEq
                            653 ;	gencjne
                            654 ;	gencjneshort
                            655 ;	Peephole 241.d	optimized compare
   0071 E4                  656 	clr	a
   0072 BA 31 01            657 	cjne	r2,#0x31,00189$
   0075 04                  658 	inc	a
   0076                     659 00189$:
                            660 ;	Peephole 300	removed redundant label 00190$
                            661 ;	genIfx
   0076 FB                  662 	mov	r3,a
                            663 ;	Peephole 105	removed redundant mov
                            664 ;	genIfxJump
                            665 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0077 60 1A               666 	jz	00119$
                            667 ;	Peephole 300	removed redundant label 00191$
                            668 ;	genIpush
   0079 C0 02               669 	push	ar2
   007B C0 03               670 	push	ar3
   007D 74rA9               671 	mov	a,#__str_4
   007F C0 E0               672 	push	acc
   0081 74s00               673 	mov	a,#(__str_4 >> 8)
   0083 C0 E0               674 	push	acc
                            675 ;	genCall
   0085 12s00r00            676 	lcall	_printf_tiny
   0088 15 81               677 	dec	sp
   008A 15 81               678 	dec	sp
   008C D0 03               679 	pop	ar3
   008E D0 02               680 	pop	ar2
   0090 02s01r3B            681 	ljmp	00120$
   0093                     682 00119$:
                            683 ;	main.c:58: else if(store=='2'){printf_tiny("\n\n\r\t\t ******  Read Command  ******"); }
                            684 ;	genCmpEq
                            685 ;	gencjneshort
                            686 ;	Peephole 112.b	changed ljmp to sjmp
                            687 ;	Peephole 198.b	optimized misc jump sequence
   0093 BA 32 1A            688 	cjne	r2,#0x32,00116$
                            689 ;	Peephole 200.b	removed redundant sjmp
                            690 ;	Peephole 300	removed redundant label 00192$
                            691 ;	Peephole 300	removed redundant label 00193$
                            692 ;	genIpush
   0096 C0 02               693 	push	ar2
   0098 C0 03               694 	push	ar3
   009A 74rCC               695 	mov	a,#__str_5
   009C C0 E0               696 	push	acc
   009E 74s00               697 	mov	a,#(__str_5 >> 8)
   00A0 C0 E0               698 	push	acc
                            699 ;	genCall
   00A2 12s00r00            700 	lcall	_printf_tiny
   00A5 15 81               701 	dec	sp
   00A7 15 81               702 	dec	sp
   00A9 D0 03               703 	pop	ar3
   00AB D0 02               704 	pop	ar2
   00AD 02s01r3B            705 	ljmp	00120$
   00B0                     706 00116$:
                            707 ;	main.c:59: else if(store=='3'){printf_tiny("\n\n\r\t\t ******  LCD DISPLAY  ******"); }
                            708 ;	genCmpEq
                            709 ;	gencjneshort
                            710 ;	Peephole 112.b	changed ljmp to sjmp
                            711 ;	Peephole 198.b	optimized misc jump sequence
   00B0 BA 33 1A            712 	cjne	r2,#0x33,00113$
                            713 ;	Peephole 200.b	removed redundant sjmp
                            714 ;	Peephole 300	removed redundant label 00194$
                            715 ;	Peephole 300	removed redundant label 00195$
                            716 ;	genIpush
   00B3 C0 02               717 	push	ar2
   00B5 C0 03               718 	push	ar3
   00B7 74rEF               719 	mov	a,#__str_6
   00B9 C0 E0               720 	push	acc
   00BB 74s00               721 	mov	a,#(__str_6 >> 8)
   00BD C0 E0               722 	push	acc
                            723 ;	genCall
   00BF 12s00r00            724 	lcall	_printf_tiny
   00C2 15 81               725 	dec	sp
   00C4 15 81               726 	dec	sp
   00C6 D0 03               727 	pop	ar3
   00C8 D0 02               728 	pop	ar2
   00CA 02s01r3B            729 	ljmp	00120$
   00CD                     730 00113$:
                            731 ;	main.c:60: else if(store=='4'){printf_tiny("\n\n\r\t\t ******  Clear LCD  ******"); }
                            732 ;	genCmpEq
                            733 ;	gencjneshort
                            734 ;	Peephole 112.b	changed ljmp to sjmp
                            735 ;	Peephole 198.b	optimized misc jump sequence
   00CD BA 34 19            736 	cjne	r2,#0x34,00110$
                            737 ;	Peephole 200.b	removed redundant sjmp
                            738 ;	Peephole 300	removed redundant label 00196$
                            739 ;	Peephole 300	removed redundant label 00197$
                            740 ;	genIpush
   00D0 C0 02               741 	push	ar2
   00D2 C0 03               742 	push	ar3
   00D4 74r11               743 	mov	a,#__str_7
   00D6 C0 E0               744 	push	acc
   00D8 74s01               745 	mov	a,#(__str_7 >> 8)
   00DA C0 E0               746 	push	acc
                            747 ;	genCall
   00DC 12s00r00            748 	lcall	_printf_tiny
   00DF 15 81               749 	dec	sp
   00E1 15 81               750 	dec	sp
   00E3 D0 03               751 	pop	ar3
   00E5 D0 02               752 	pop	ar2
                            753 ;	Peephole 112.b	changed ljmp to sjmp
   00E7 80 52               754 	sjmp	00120$
   00E9                     755 00110$:
                            756 ;	main.c:61: else if(store=='5'){printf_tiny("\n\n\r\t\t ******  Hex Dump Command  ******"); }
                            757 ;	genCmpEq
                            758 ;	gencjneshort
                            759 ;	Peephole 112.b	changed ljmp to sjmp
                            760 ;	Peephole 198.b	optimized misc jump sequence
   00E9 BA 35 19            761 	cjne	r2,#0x35,00107$
                            762 ;	Peephole 200.b	removed redundant sjmp
                            763 ;	Peephole 300	removed redundant label 00198$
                            764 ;	Peephole 300	removed redundant label 00199$
                            765 ;	genIpush
   00EC C0 02               766 	push	ar2
   00EE C0 03               767 	push	ar3
   00F0 74r31               768 	mov	a,#__str_8
   00F2 C0 E0               769 	push	acc
   00F4 74s01               770 	mov	a,#(__str_8 >> 8)
   00F6 C0 E0               771 	push	acc
                            772 ;	genCall
   00F8 12s00r00            773 	lcall	_printf_tiny
   00FB 15 81               774 	dec	sp
   00FD 15 81               775 	dec	sp
   00FF D0 03               776 	pop	ar3
   0101 D0 02               777 	pop	ar2
                            778 ;	Peephole 112.b	changed ljmp to sjmp
   0103 80 36               779 	sjmp	00120$
   0105                     780 00107$:
                            781 ;	main.c:62: else if(store=='6'){printf_tiny("\n\n\r\t\t ******  DDRAM Dump Command  ******\n\n\r"); }
                            782 ;	genCmpEq
                            783 ;	gencjneshort
                            784 ;	Peephole 112.b	changed ljmp to sjmp
                            785 ;	Peephole 198.b	optimized misc jump sequence
   0105 BA 36 19            786 	cjne	r2,#0x36,00104$
                            787 ;	Peephole 200.b	removed redundant sjmp
                            788 ;	Peephole 300	removed redundant label 00200$
                            789 ;	Peephole 300	removed redundant label 00201$
                            790 ;	genIpush
   0108 C0 02               791 	push	ar2
   010A C0 03               792 	push	ar3
   010C 74r58               793 	mov	a,#__str_9
   010E C0 E0               794 	push	acc
   0110 74s01               795 	mov	a,#(__str_9 >> 8)
   0112 C0 E0               796 	push	acc
                            797 ;	genCall
   0114 12s00r00            798 	lcall	_printf_tiny
   0117 15 81               799 	dec	sp
   0119 15 81               800 	dec	sp
   011B D0 03               801 	pop	ar3
   011D D0 02               802 	pop	ar2
                            803 ;	Peephole 112.b	changed ljmp to sjmp
   011F 80 1A               804 	sjmp	00120$
   0121                     805 00104$:
                            806 ;	main.c:63: else if(store=='7'){printf_tiny("\n\n\r\t\t ******  CGRAM Dump Command  ******\n\n\r"); }
                            807 ;	genCmpEq
                            808 ;	gencjneshort
                            809 ;	Peephole 112.b	changed ljmp to sjmp
                            810 ;	Peephole 198.b	optimized misc jump sequence
   0121 BA 37 17            811 	cjne	r2,#0x37,00120$
                            812 ;	Peephole 200.b	removed redundant sjmp
                            813 ;	Peephole 300	removed redundant label 00202$
                            814 ;	Peephole 300	removed redundant label 00203$
                            815 ;	genIpush
   0124 C0 02               816 	push	ar2
   0126 C0 03               817 	push	ar3
   0128 74r84               818 	mov	a,#__str_10
   012A C0 E0               819 	push	acc
   012C 74s01               820 	mov	a,#(__str_10 >> 8)
   012E C0 E0               821 	push	acc
                            822 ;	genCall
   0130 12s00r00            823 	lcall	_printf_tiny
   0133 15 81               824 	dec	sp
   0135 15 81               825 	dec	sp
   0137 D0 03               826 	pop	ar3
   0139 D0 02               827 	pop	ar2
   013B                     828 00120$:
                            829 ;	main.c:64: if(store=='1' || store=='2' || store=='3')
                            830 ;	genIfx
   013B EB                  831 	mov	a,r3
                            832 ;	genIfxJump
                            833 ;	Peephole 108.b	removed ljmp by inverse jump logic
   013C 70 0D               834 	jnz	00152$
                            835 ;	Peephole 300	removed redundant label 00204$
                            836 ;	genCmpEq
                            837 ;	gencjneshort
   013E BA 32 02            838 	cjne	r2,#0x32,00205$
                            839 ;	Peephole 112.b	changed ljmp to sjmp
   0141 80 08               840 	sjmp	00152$
   0143                     841 00205$:
                            842 ;	genCmpEq
                            843 ;	gencjneshort
   0143 BA 33 02            844 	cjne	r2,#0x33,00206$
   0146 80 03               845 	sjmp	00207$
   0148                     846 00206$:
   0148 02s02rD2            847 	ljmp	00153$
   014B                     848 00207$:
   014B                     849 00152$:
                            850 ;	main.c:67: printf_tiny("\n\n\r Enter Address in Hex in HHH format between 000 to 7FF: ");  // Promt user to input address in the specified range
                            851 ;	genIpush
   014B C0 02               852 	push	ar2
   014D C0 03               853 	push	ar3
   014F 74rB0               854 	mov	a,#__str_11
   0151 C0 E0               855 	push	acc
   0153 74s01               856 	mov	a,#(__str_11 >> 8)
   0155 C0 E0               857 	push	acc
                            858 ;	genCall
   0157 12s00r00            859 	lcall	_printf_tiny
   015A 15 81               860 	dec	sp
   015C 15 81               861 	dec	sp
   015E D0 03               862 	pop	ar3
   0160 D0 02               863 	pop	ar2
                            864 ;	main.c:70: do{
   0162                     865 00124$:
                            866 ;	main.c:71: flag=0;
                            867 ;	genAssign
   0162 90s00r14            868 	mov	dptr,#_main_flag_1_1
   0165 E4                  869 	clr	a
   0166 F0                  870 	movx	@dptr,a
   0167 A3                  871 	inc	dptr
   0168 F0                  872 	movx	@dptr,a
                            873 ;	main.c:72: gets(b);
                            874 ;	genCall
                            875 ;	Peephole 182.a	used 16 bit load of DPTR
   0169 90s00r00            876 	mov	dptr,#_main_b_1_1
   016C 75 F0 00            877 	mov	b,#0x00
   016F C0 02               878 	push	ar2
   0171 C0 03               879 	push	ar3
   0173 12s00r00            880 	lcall	_gets
   0176 D0 03               881 	pop	ar3
   0178 D0 02               882 	pop	ar2
                            883 ;	main.c:73: addr=atoh(b);            // Get data from the user    //Conver that data into hex
                            884 ;	genCall
                            885 ;	Peephole 182.a	used 16 bit load of DPTR
   017A 90s00r00            886 	mov	dptr,#_main_b_1_1
   017D 75 F0 00            887 	mov	b,#0x00
   0180 C0 02               888 	push	ar2
   0182 C0 03               889 	push	ar3
   0184 12s00r00            890 	lcall	_atoh
   0187 AC 82               891 	mov	r4,dpl
   0189 AD 83               892 	mov	r5,dph
   018B D0 03               893 	pop	ar3
   018D D0 02               894 	pop	ar2
                            895 ;	main.c:74: if(addr<2048)              // Check if address is in valid range
                            896 ;	genAssign
   018F 8C 06               897 	mov	ar6,r4
   0191 8D 07               898 	mov	ar7,r5
                            899 ;	genCmpLt
                            900 ;	genCmp
                            901 ;	genIfxJump
                            902 ;	Peephole 108.a	removed ljmp by inverse jump logic
                            903 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0193 74 F8               904 	mov	a,#0x100 - 0x08
   0195 2F                  905 	add	a,r7
   0196 40 0B               906 	jc	00122$
                            907 ;	Peephole 300	removed redundant label 00208$
                            908 ;	main.c:76: flag=1;
                            909 ;	genAssign
   0198 90s00r14            910 	mov	dptr,#_main_flag_1_1
   019B 74 01               911 	mov	a,#0x01
   019D F0                  912 	movx	@dptr,a
   019E E4                  913 	clr	a
   019F A3                  914 	inc	dptr
   01A0 F0                  915 	movx	@dptr,a
                            916 ;	Peephole 112.b	changed ljmp to sjmp
   01A1 80 1F               917 	sjmp	00125$
   01A3                     918 00122$:
                            919 ;	main.c:81: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address betweem 000 and 7FF: ");
                            920 ;	genIpush
   01A3 C0 02               921 	push	ar2
   01A5 C0 03               922 	push	ar3
   01A7 C0 04               923 	push	ar4
   01A9 C0 05               924 	push	ar5
   01AB 74rEC               925 	mov	a,#__str_12
   01AD C0 E0               926 	push	acc
   01AF 74s01               927 	mov	a,#(__str_12 >> 8)
   01B1 C0 E0               928 	push	acc
                            929 ;	genCall
   01B3 12s00r00            930 	lcall	_printf_tiny
   01B6 15 81               931 	dec	sp
   01B8 15 81               932 	dec	sp
   01BA D0 05               933 	pop	ar5
   01BC D0 04               934 	pop	ar4
   01BE D0 03               935 	pop	ar3
   01C0 D0 02               936 	pop	ar2
   01C2                     937 00125$:
                            938 ;	main.c:83: }while(flag==0);
                            939 ;	genAssign
   01C2 90s00r14            940 	mov	dptr,#_main_flag_1_1
   01C5 E0                  941 	movx	a,@dptr
   01C6 FE                  942 	mov	r6,a
   01C7 A3                  943 	inc	dptr
   01C8 E0                  944 	movx	a,@dptr
                            945 ;	genIfx
   01C9 FF                  946 	mov	r7,a
                            947 ;	Peephole 135	removed redundant mov
   01CA 4E                  948 	orl	a,r6
                            949 ;	genIfxJump
                            950 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01CB 60 95               951 	jz	00124$
                            952 ;	Peephole 300	removed redundant label 00209$
                            953 ;	main.c:85: page=addr/256;          // Calculate PAage block from the address
                            954 ;	genAssign
   01CD 8C 06               955 	mov	ar6,r4
   01CF 8D 07               956 	mov	ar7,r5
                            957 ;	genRightShift
                            958 ;	genRightShiftLiteral
                            959 ;	genrshTwo
   01D1 8F*00               960 	mov	_main_sloc0_1_0,r7
   01D3 75*01 00            961 	mov	(_main_sloc0_1_0 + 1),#0x00
                            962 ;	main.c:87: if(store=='1')
                            963 ;	genIfx
   01D6 EB                  964 	mov	a,r3
                            965 ;	genIfxJump
   01D7 70 03               966 	jnz	00210$
   01D9 02s02r74            967 	ljmp	00139$
   01DC                     968 00210$:
                            969 ;	main.c:91: printf_tiny("\n\n\r Enter Data in Hex in HH format between 00 to FF: ");
                            970 ;	genIpush
   01DC C0 04               971 	push	ar4
   01DE C0 05               972 	push	ar5
   01E0 74r2C               973 	mov	a,#__str_13
   01E2 C0 E0               974 	push	acc
   01E4 74s02               975 	mov	a,#(__str_13 >> 8)
   01E6 C0 E0               976 	push	acc
                            977 ;	genCall
   01E8 12s00r00            978 	lcall	_printf_tiny
   01EB 15 81               979 	dec	sp
   01ED 15 81               980 	dec	sp
   01EF D0 05               981 	pop	ar5
   01F1 D0 04               982 	pop	ar4
                            983 ;	main.c:92: do{
   01F3                     984 00130$:
                            985 ;	main.c:93: flag=0;
                            986 ;	genIpush
                            987 ;	genAssign
   01F3 90s00r14            988 	mov	dptr,#_main_flag_1_1
   01F6 E4                  989 	clr	a
   01F7 F0                  990 	movx	@dptr,a
   01F8 A3                  991 	inc	dptr
   01F9 F0                  992 	movx	@dptr,a
                            993 ;	main.c:94: gets(d);            // Get data from the user
                            994 ;	genCall
                            995 ;	Peephole 182.a	used 16 bit load of DPTR
   01FA 90s00r0A            996 	mov	dptr,#_main_d_1_1
   01FD 75 F0 00            997 	mov	b,#0x00
   0200 C0 04               998 	push	ar4
   0202 C0 05               999 	push	ar5
   0204 12s00r00           1000 	lcall	_gets
   0207 D0 05              1001 	pop	ar5
   0209 D0 04              1002 	pop	ar4
                           1003 ;	main.c:95: dat=atoh_data(d);   //Conver that data into hex
                           1004 ;	genCall
                           1005 ;	Peephole 182.a	used 16 bit load of DPTR
   020B 90s00r0A           1006 	mov	dptr,#_main_d_1_1
   020E 75 F0 00           1007 	mov	b,#0x00
   0211 C0 04              1008 	push	ar4
   0213 C0 05              1009 	push	ar5
   0215 12s00r00           1010 	lcall	_atoh_data
   0218 AB 82              1011 	mov	r3,dpl
   021A A8 83              1012 	mov	r0,dph
   021C D0 05              1013 	pop	ar5
   021E D0 04              1014 	pop	ar4
                           1015 ;	main.c:96: if(dat<256)
                           1016 ;	genAssign
   0220 8B 01              1017 	mov	ar1,r3
   0222 88 06              1018 	mov	ar6,r0
                           1019 ;	genCmpLt
                           1020 ;	genCmp
                           1021 ;	genIpop
                           1022 ;	genIfx
                           1023 ;	genIfxJump
                           1024 ;	Peephole 108.c	removed ljmp by inverse jump logic
                           1025 ;	Peephole 128	jump optimization
                           1026 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0224 74 FF              1027 	mov	a,#0x100 - 0x01
   0226 2E                 1028 	add	a,r6
   0227 40 0B              1029 	jc	00128$
                           1030 ;	Peephole 300	removed redundant label 00211$
                           1031 ;	main.c:98: flag=1;
                           1032 ;	genAssign
   0229 90s00r14           1033 	mov	dptr,#_main_flag_1_1
   022C 74 01              1034 	mov	a,#0x01
   022E F0                 1035 	movx	@dptr,a
   022F E4                 1036 	clr	a
   0230 A3                 1037 	inc	dptr
   0231 F0                 1038 	movx	@dptr,a
                           1039 ;	Peephole 112.b	changed ljmp to sjmp
   0232 80 1F              1040 	sjmp	00131$
   0234                    1041 00128$:
                           1042 ;	main.c:103: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid data in Hex in HH format between 00 to FF: ");
                           1043 ;	genIpush
   0234 C0 03              1044 	push	ar3
   0236 C0 04              1045 	push	ar4
   0238 C0 05              1046 	push	ar5
   023A C0 00              1047 	push	ar0
   023C 74r62              1048 	mov	a,#__str_14
   023E C0 E0              1049 	push	acc
   0240 74s02              1050 	mov	a,#(__str_14 >> 8)
   0242 C0 E0              1051 	push	acc
                           1052 ;	genCall
   0244 12s00r00           1053 	lcall	_printf_tiny
   0247 15 81              1054 	dec	sp
   0249 15 81              1055 	dec	sp
   024B D0 00              1056 	pop	ar0
   024D D0 05              1057 	pop	ar5
   024F D0 04              1058 	pop	ar4
   0251 D0 03              1059 	pop	ar3
   0253                    1060 00131$:
                           1061 ;	main.c:105: }while(flag==0);
                           1062 ;	genAssign
   0253 90s00r14           1063 	mov	dptr,#_main_flag_1_1
   0256 E0                 1064 	movx	a,@dptr
   0257 F9                 1065 	mov	r1,a
   0258 A3                 1066 	inc	dptr
   0259 E0                 1067 	movx	a,@dptr
                           1068 ;	genIfx
   025A FE                 1069 	mov	r6,a
                           1070 ;	Peephole 135	removed redundant mov
   025B 49                 1071 	orl	a,r1
                           1072 ;	genIfxJump
                           1073 ;	Peephole 108.c	removed ljmp by inverse jump logic
   025C 60 95              1074 	jz	00130$
                           1075 ;	Peephole 300	removed redundant label 00212$
                           1076 ;	main.c:107: EEPROM_WriteByte((addr-page*256),dat,page);     // Write byte to the specified address
                           1077 ;	genAssign
   025E 8C 06              1078 	mov	ar6,r4
                           1079 ;	genCast
                           1080 ;	genCast
                           1081 ;	peephole 177.f	removed redundant move
   0260 AF*00              1082 	mov	r7,_main_sloc0_1_0
                           1083 ;	genAssign
                           1084 ;	genCast
   0262 90s00r00           1085 	mov	dptr,#_EEPROM_WriteByte_PARM_2
   0265 EB                 1086 	mov	a,r3
   0266 F0                 1087 	movx	@dptr,a
                           1088 ;	genAssign
   0267 90s00r00           1089 	mov	dptr,#_EEPROM_WriteByte_PARM_3
   026A EF                 1090 	mov	a,r7
   026B F0                 1091 	movx	@dptr,a
                           1092 ;	genCall
   026C 8E 82              1093 	mov	dpl,r6
   026E 12s00r00           1094 	lcall	_EEPROM_WriteByte
   0271 02s02rF3           1095 	ljmp	00154$
   0274                    1096 00139$:
                           1097 ;	main.c:110: else if(store=='2')
                           1098 ;	genCmpEq
                           1099 ;	gencjneshort
                           1100 ;	Peephole 112.b	changed ljmp to sjmp
                           1101 ;	Peephole 198.b	optimized misc jump sequence
   0274 BA 32 36           1102 	cjne	r2,#0x32,00136$
                           1103 ;	Peephole 200.b	removed redundant sjmp
                           1104 ;	Peephole 300	removed redundant label 00213$
                           1105 ;	Peephole 300	removed redundant label 00214$
                           1106 ;	main.c:114: rd=EEPROM_ReadByte((addr-page*256),page);
                           1107 ;	genAssign
   0277 8C 03              1108 	mov	ar3,r4
   0279 8D 06              1109 	mov	ar6,r5
                           1110 ;	genCast
                           1111 ;	genCast
   027B 90s00r00           1112 	mov	dptr,#_EEPROM_ReadByte_PARM_2
   027E E5*00              1113 	mov	a,_main_sloc0_1_0
   0280 F0                 1114 	movx	@dptr,a
                           1115 ;	genCall
   0281 8B 82              1116 	mov	dpl,r3
   0283 C0 04              1117 	push	ar4
   0285 C0 05              1118 	push	ar5
   0287 12s00r00           1119 	lcall	_EEPROM_ReadByte
   028A AB 82              1120 	mov	r3,dpl
   028C D0 05              1121 	pop	ar5
   028E D0 04              1122 	pop	ar4
                           1123 ;	main.c:115: printf_tiny("\n\n\r\t\t\t%x : %x \n",addr,rd);  //Data is printed in AAA:DD format
                           1124 ;	genCast
   0290 7E 00              1125 	mov	r6,#0x00
                           1126 ;	genIpush
   0292 C0 03              1127 	push	ar3
   0294 C0 06              1128 	push	ar6
                           1129 ;	genIpush
   0296 C0 04              1130 	push	ar4
   0298 C0 05              1131 	push	ar5
                           1132 ;	genIpush
   029A 74rB0              1133 	mov	a,#__str_15
   029C C0 E0              1134 	push	acc
   029E 74s02              1135 	mov	a,#(__str_15 >> 8)
   02A0 C0 E0              1136 	push	acc
                           1137 ;	genCall
   02A2 12s00r00           1138 	lcall	_printf_tiny
   02A5 E5 81              1139 	mov	a,sp
   02A7 24 FA              1140 	add	a,#0xfa
   02A9 F5 81              1141 	mov	sp,a
                           1142 ;	Peephole 112.b	changed ljmp to sjmp
   02AB 80 46              1143 	sjmp	00154$
   02AD                    1144 00136$:
                           1145 ;	main.c:119: else if(store=='3')
                           1146 ;	genCmpEq
                           1147 ;	gencjneshort
                           1148 ;	Peephole 112.b	changed ljmp to sjmp
                           1149 ;	Peephole 198.b	optimized misc jump sequence
   02AD BA 33 43           1150 	cjne	r2,#0x33,00154$
                           1151 ;	Peephole 200.b	removed redundant sjmp
                           1152 ;	Peephole 300	removed redundant label 00215$
                           1153 ;	Peephole 300	removed redundant label 00216$
                           1154 ;	main.c:121: rd=EEPROM_ReadByte((addr-page*256),page);
                           1155 ;	genAssign
                           1156 ;	genCast
                           1157 ;	genCast
   02B0 90s00r00           1158 	mov	dptr,#_EEPROM_ReadByte_PARM_2
   02B3 E5*00              1159 	mov	a,_main_sloc0_1_0
   02B5 F0                 1160 	movx	@dptr,a
                           1161 ;	genCall
   02B6 8C 82              1162 	mov	dpl,r4
   02B8 12s00r00           1163 	lcall	_EEPROM_ReadByte
   02BB AB 82              1164 	mov	r3,dpl
                           1165 ;	main.c:122: lcd_display(rd,b);
                           1166 ;	genCast
   02BD 90s00r00           1167 	mov	dptr,#_lcd_display_PARM_2
   02C0 74r00              1168 	mov	a,#_main_b_1_1
   02C2 F0                 1169 	movx	@dptr,a
   02C3 A3                 1170 	inc	dptr
   02C4 74s00              1171 	mov	a,#(_main_b_1_1 >> 8)
   02C6 F0                 1172 	movx	@dptr,a
   02C7 A3                 1173 	inc	dptr
   02C8 74 00              1174 	mov	a,#0x0
   02CA F0                 1175 	movx	@dptr,a
                           1176 ;	genCall
   02CB 8B 82              1177 	mov	dpl,r3
   02CD 12s00r00           1178 	lcall	_lcd_display
                           1179 ;	Peephole 112.b	changed ljmp to sjmp
   02D0 80 21              1180 	sjmp	00154$
   02D2                    1181 00153$:
                           1182 ;	main.c:130: else if(store=='4')
                           1183 ;	genCmpEq
                           1184 ;	gencjneshort
                           1185 ;	Peephole 112.b	changed ljmp to sjmp
                           1186 ;	Peephole 198.b	optimized misc jump sequence
   02D2 BA 34 08           1187 	cjne	r2,#0x34,00150$
                           1188 ;	Peephole 200.b	removed redundant sjmp
                           1189 ;	Peephole 300	removed redundant label 00217$
                           1190 ;	Peephole 300	removed redundant label 00218$
                           1191 ;	main.c:132: lcdputcmd(1);
                           1192 ;	genCall
   02D5 75 82 01           1193 	mov	dpl,#0x01
   02D8 12s00r00           1194 	lcall	_lcdputcmd
                           1195 ;	Peephole 112.b	changed ljmp to sjmp
   02DB 80 16              1196 	sjmp	00154$
   02DD                    1197 00150$:
                           1198 ;	main.c:136: else if(store=='5')
                           1199 ;	genCmpEq
                           1200 ;	gencjneshort
                           1201 ;	Peephole 112.b	changed ljmp to sjmp
                           1202 ;	Peephole 198.b	optimized misc jump sequence
   02DD BA 35 05           1203 	cjne	r2,#0x35,00147$
                           1204 ;	Peephole 200.b	removed redundant sjmp
                           1205 ;	Peephole 300	removed redundant label 00219$
                           1206 ;	Peephole 300	removed redundant label 00220$
                           1207 ;	main.c:138: hex_dump();
                           1208 ;	genCall
   02E0 12s03r05           1209 	lcall	_hex_dump
                           1210 ;	Peephole 112.b	changed ljmp to sjmp
   02E3 80 0E              1211 	sjmp	00154$
   02E5                    1212 00147$:
                           1213 ;	main.c:141: else if(store=='6')
                           1214 ;	genCmpEq
                           1215 ;	gencjneshort
                           1216 ;	Peephole 112.b	changed ljmp to sjmp
                           1217 ;	Peephole 198.b	optimized misc jump sequence
   02E5 BA 36 05           1218 	cjne	r2,#0x36,00144$
                           1219 ;	Peephole 200.b	removed redundant sjmp
                           1220 ;	Peephole 300	removed redundant label 00221$
                           1221 ;	Peephole 300	removed redundant label 00222$
                           1222 ;	main.c:143: DDRAM_dump();
                           1223 ;	genCall
   02E8 12s05r8A           1224 	lcall	_DDRAM_dump
                           1225 ;	Peephole 112.b	changed ljmp to sjmp
   02EB 80 06              1226 	sjmp	00154$
   02ED                    1227 00144$:
                           1228 ;	main.c:147: else if(store=='7')
                           1229 ;	genCmpEq
                           1230 ;	gencjneshort
                           1231 ;	Peephole 112.b	changed ljmp to sjmp
                           1232 ;	Peephole 198.b	optimized misc jump sequence
   02ED BA 37 03           1233 	cjne	r2,#0x37,00154$
                           1234 ;	Peephole 200.b	removed redundant sjmp
                           1235 ;	Peephole 300	removed redundant label 00223$
                           1236 ;	Peephole 300	removed redundant label 00224$
                           1237 ;	main.c:149: CGRAM_dump();
                           1238 ;	genCall
   02F0 12s06r36           1239 	lcall	_CGRAM_dump
   02F3                    1240 00154$:
                           1241 ;	main.c:153: printf_tiny("\n\n\n\r\t\t\t\t\t******** Control Commands ********\n\r\t1. Write Byte \n\r\t2. Read Byte \n\r\t3. LCD Display\n\r\t4. Clear LCD\n\r\t5. Hex Dump\n\r\t6. DDRAM Dump\n\r\t7. CGRAM Dump\t");
                           1242 ;	genIpush
   02F3 74rC0              1243 	mov	a,#__str_16
   02F5 C0 E0              1244 	push	acc
   02F7 74s02              1245 	mov	a,#(__str_16 >> 8)
   02F9 C0 E0              1246 	push	acc
                           1247 ;	genCall
   02FB 12s00r00           1248 	lcall	_printf_tiny
   02FE 15 81              1249 	dec	sp
   0300 15 81              1250 	dec	sp
   0302 02s00r62           1251 	ljmp	00160$
                           1252 ;	Peephole 259.b	removed redundant label 00162$ and ret
                           1253 ;
                           1254 ;------------------------------------------------------------
                           1255 ;Allocation info for local variables in function 'hex_dump'
                           1256 ;------------------------------------------------------------
                           1257 ;sloc0                     Allocated with name '_hex_dump_sloc0_1_0'
                           1258 ;b                         Allocated with name '_hex_dump_b_1_1'
                           1259 ;d                         Allocated with name '_hex_dump_d_1_1'
                           1260 ;r                         Allocated with name '_hex_dump_r_1_1'
                           1261 ;st_addr                   Allocated with name '_hex_dump_st_addr_1_1'
                           1262 ;st_page                   Allocated with name '_hex_dump_st_page_1_1'
                           1263 ;end_addr                  Allocated with name '_hex_dump_end_addr_1_1'
                           1264 ;flag                      Allocated with name '_hex_dump_flag_1_1'
                           1265 ;i                         Allocated with name '_hex_dump_i_1_1'
                           1266 ;aaa                       Allocated with name '_hex_dump_aaa_1_1'
                           1267 ;j                         Allocated with name '_hex_dump_j_1_1'
                           1268 ;bytes                     Allocated with name '_hex_dump_bytes_1_1'
                           1269 ;------------------------------------------------------------
                           1270 ;	main.c:171: void hex_dump()
                           1271 ;	-----------------------------------------
                           1272 ;	 function hex_dump
                           1273 ;	-----------------------------------------
   0305                    1274 _hex_dump:
                           1275 ;	main.c:175: unsigned int st_addr,st_page, end_addr,flag=0,i,aaa,j=0;
                           1276 ;	genAssign
   0305 90s00r3F           1277 	mov	dptr,#_hex_dump_j_1_1
   0308 E4                 1278 	clr	a
   0309 F0                 1279 	movx	@dptr,a
   030A A3                 1280 	inc	dptr
   030B F0                 1281 	movx	@dptr,a
                           1282 ;	main.c:178: do{
   030C                    1283 00115$:
                           1284 ;	main.c:180: printf_tiny("\n\n\r Enter Start Address in Hex in HHH format between 000 to 7FF: ");
                           1285 ;	genIpush
   030C 74r5C              1286 	mov	a,#__str_17
   030E C0 E0              1287 	push	acc
   0310 74s03              1288 	mov	a,#(__str_17 >> 8)
   0312 C0 E0              1289 	push	acc
                           1290 ;	genCall
   0314 12s00r00           1291 	lcall	_printf_tiny
   0317 15 81              1292 	dec	sp
   0319 15 81              1293 	dec	sp
                           1294 ;	main.c:181: do{
   031B                    1295 00104$:
                           1296 ;	main.c:182: flag=0;
                           1297 ;	genAssign
   031B 90s00r3D           1298 	mov	dptr,#_hex_dump_flag_1_1
   031E E4                 1299 	clr	a
   031F F0                 1300 	movx	@dptr,a
   0320 A3                 1301 	inc	dptr
   0321 F0                 1302 	movx	@dptr,a
                           1303 ;	main.c:183: gets(b);                // Get data from the user    //Conver that data into hex
                           1304 ;	genCall
                           1305 ;	Peephole 182.a	used 16 bit load of DPTR
   0322 90s00r16           1306 	mov	dptr,#_hex_dump_b_1_1
   0325 75 F0 00           1307 	mov	b,#0x00
   0328 12s00r00           1308 	lcall	_gets
                           1309 ;	main.c:184: st_addr=atoh(b);
                           1310 ;	genCall
                           1311 ;	Peephole 182.a	used 16 bit load of DPTR
   032B 90s00r16           1312 	mov	dptr,#_hex_dump_b_1_1
   032E 75 F0 00           1313 	mov	b,#0x00
   0331 12s00r00           1314 	lcall	_atoh
   0334 AA 82              1315 	mov	r2,dpl
   0336 AB 83              1316 	mov	r3,dph
                           1317 ;	genAssign
   0338 90s00r3B           1318 	mov	dptr,#_hex_dump_st_addr_1_1
   033B EA                 1319 	mov	a,r2
   033C F0                 1320 	movx	@dptr,a
   033D A3                 1321 	inc	dptr
   033E EB                 1322 	mov	a,r3
   033F F0                 1323 	movx	@dptr,a
                           1324 ;	main.c:185: if(st_addr<2048)        // Check if the address is in valid range
                           1325 ;	genAssign
   0340 8A 04              1326 	mov	ar4,r2
   0342 8B 05              1327 	mov	ar5,r3
                           1328 ;	genCmpLt
                           1329 ;	genCmp
                           1330 ;	genIfxJump
                           1331 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           1332 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0344 74 F8              1333 	mov	a,#0x100 - 0x08
   0346 2D                 1334 	add	a,r5
   0347 40 0B              1335 	jc	00102$
                           1336 ;	Peephole 300	removed redundant label 00140$
                           1337 ;	main.c:187: flag=1;
                           1338 ;	genAssign
   0349 90s00r3D           1339 	mov	dptr,#_hex_dump_flag_1_1
   034C 74 01              1340 	mov	a,#0x01
   034E F0                 1341 	movx	@dptr,a
   034F E4                 1342 	clr	a
   0350 A3                 1343 	inc	dptr
   0351 F0                 1344 	movx	@dptr,a
                           1345 ;	Peephole 112.b	changed ljmp to sjmp
   0352 80 17              1346 	sjmp	00105$
   0354                    1347 00102$:
                           1348 ;	main.c:192: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid start Address betweem 000 and 7FF: ");
                           1349 ;	genIpush
   0354 C0 02              1350 	push	ar2
   0356 C0 03              1351 	push	ar3
   0358 74r9E              1352 	mov	a,#__str_18
   035A C0 E0              1353 	push	acc
   035C 74s03              1354 	mov	a,#(__str_18 >> 8)
   035E C0 E0              1355 	push	acc
                           1356 ;	genCall
   0360 12s00r00           1357 	lcall	_printf_tiny
   0363 15 81              1358 	dec	sp
   0365 15 81              1359 	dec	sp
   0367 D0 03              1360 	pop	ar3
   0369 D0 02              1361 	pop	ar2
   036B                    1362 00105$:
                           1363 ;	main.c:194: }while(flag==0);
                           1364 ;	genAssign
   036B 90s00r3D           1365 	mov	dptr,#_hex_dump_flag_1_1
   036E E0                 1366 	movx	a,@dptr
   036F FC                 1367 	mov	r4,a
   0370 A3                 1368 	inc	dptr
   0371 E0                 1369 	movx	a,@dptr
                           1370 ;	genIfx
   0372 FD                 1371 	mov	r5,a
                           1372 ;	Peephole 135	removed redundant mov
   0373 4C                 1373 	orl	a,r4
                           1374 ;	genIfxJump
                           1375 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0374 60 A5              1376 	jz	00104$
                           1377 ;	Peephole 300	removed redundant label 00141$
                           1378 ;	main.c:198: printf_tiny("\n\n\r Enter End Address in Hex in HHH format between 000 to 7FF: ");
                           1379 ;	genIpush
   0376 C0 02              1380 	push	ar2
   0378 C0 03              1381 	push	ar3
   037A 74rE4              1382 	mov	a,#__str_19
   037C C0 E0              1383 	push	acc
   037E 74s03              1384 	mov	a,#(__str_19 >> 8)
   0380 C0 E0              1385 	push	acc
                           1386 ;	genCall
   0382 12s00r00           1387 	lcall	_printf_tiny
   0385 15 81              1388 	dec	sp
   0387 15 81              1389 	dec	sp
   0389 D0 03              1390 	pop	ar3
   038B D0 02              1391 	pop	ar2
                           1392 ;	main.c:199: do{
   038D                    1393 00110$:
                           1394 ;	main.c:200: flag=0;
                           1395 ;	genAssign
   038D 90s00r3D           1396 	mov	dptr,#_hex_dump_flag_1_1
   0390 E4                 1397 	clr	a
   0391 F0                 1398 	movx	@dptr,a
   0392 A3                 1399 	inc	dptr
   0393 F0                 1400 	movx	@dptr,a
                           1401 ;	main.c:201: gets(d);            // Get data from the user    //Conver that data into hex
                           1402 ;	genCall
                           1403 ;	Peephole 182.a	used 16 bit load of DPTR
   0394 90s00r20           1404 	mov	dptr,#_hex_dump_d_1_1
   0397 75 F0 00           1405 	mov	b,#0x00
   039A C0 02              1406 	push	ar2
   039C C0 03              1407 	push	ar3
   039E 12s00r00           1408 	lcall	_gets
   03A1 D0 03              1409 	pop	ar3
   03A3 D0 02              1410 	pop	ar2
                           1411 ;	main.c:202: end_addr=atoh(d);   // Check if the address is in valid range
                           1412 ;	genCall
                           1413 ;	Peephole 182.a	used 16 bit load of DPTR
   03A5 90s00r20           1414 	mov	dptr,#_hex_dump_d_1_1
   03A8 75 F0 00           1415 	mov	b,#0x00
   03AB C0 02              1416 	push	ar2
   03AD C0 03              1417 	push	ar3
   03AF 12s00r00           1418 	lcall	_atoh
   03B2 AC 82              1419 	mov	r4,dpl
   03B4 AD 83              1420 	mov	r5,dph
   03B6 D0 03              1421 	pop	ar3
   03B8 D0 02              1422 	pop	ar2
                           1423 ;	main.c:203: if(end_addr<2048)
                           1424 ;	genAssign
   03BA 8C 06              1425 	mov	ar6,r4
   03BC 8D 07              1426 	mov	ar7,r5
                           1427 ;	genCmpLt
                           1428 ;	genCmp
                           1429 ;	genIfxJump
                           1430 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           1431 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   03BE 74 F8              1432 	mov	a,#0x100 - 0x08
   03C0 2F                 1433 	add	a,r7
   03C1 40 0B              1434 	jc	00108$
                           1435 ;	Peephole 300	removed redundant label 00142$
                           1436 ;	main.c:205: flag=1;
                           1437 ;	genAssign
   03C3 90s00r3D           1438 	mov	dptr,#_hex_dump_flag_1_1
   03C6 74 01              1439 	mov	a,#0x01
   03C8 F0                 1440 	movx	@dptr,a
   03C9 E4                 1441 	clr	a
   03CA A3                 1442 	inc	dptr
   03CB F0                 1443 	movx	@dptr,a
                           1444 ;	Peephole 112.b	changed ljmp to sjmp
   03CC 80 1F              1445 	sjmp	00111$
   03CE                    1446 00108$:
                           1447 ;	main.c:210: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid end Address betweem 000 and 7FF: ");
                           1448 ;	genIpush
   03CE C0 02              1449 	push	ar2
   03D0 C0 03              1450 	push	ar3
   03D2 C0 04              1451 	push	ar4
   03D4 C0 05              1452 	push	ar5
   03D6 74r24              1453 	mov	a,#__str_20
   03D8 C0 E0              1454 	push	acc
   03DA 74s04              1455 	mov	a,#(__str_20 >> 8)
   03DC C0 E0              1456 	push	acc
                           1457 ;	genCall
   03DE 12s00r00           1458 	lcall	_printf_tiny
   03E1 15 81              1459 	dec	sp
   03E3 15 81              1460 	dec	sp
   03E5 D0 05              1461 	pop	ar5
   03E7 D0 04              1462 	pop	ar4
   03E9 D0 03              1463 	pop	ar3
   03EB D0 02              1464 	pop	ar2
   03ED                    1465 00111$:
                           1466 ;	main.c:212: }while(flag==0);
                           1467 ;	genAssign
   03ED 90s00r3D           1468 	mov	dptr,#_hex_dump_flag_1_1
   03F0 E0                 1469 	movx	a,@dptr
   03F1 FE                 1470 	mov	r6,a
   03F2 A3                 1471 	inc	dptr
   03F3 E0                 1472 	movx	a,@dptr
                           1473 ;	genIfx
   03F4 FF                 1474 	mov	r7,a
                           1475 ;	Peephole 135	removed redundant mov
   03F5 4E                 1476 	orl	a,r6
                           1477 ;	genIfxJump
                           1478 ;	Peephole 108.c	removed ljmp by inverse jump logic
   03F6 60 95              1479 	jz	00110$
                           1480 ;	Peephole 300	removed redundant label 00143$
                           1481 ;	main.c:213: bytes = end_addr - st_addr;         // Calculate total number of bytes to read
                           1482 ;	genMinus
   03F8 EC                 1483 	mov	a,r4
   03F9 C3                 1484 	clr	c
                           1485 ;	Peephole 236.l	used r2 instead of ar2
   03FA 9A                 1486 	subb	a,r2
   03FB FC                 1487 	mov	r4,a
   03FC ED                 1488 	mov	a,r5
                           1489 ;	Peephole 236.l	used r3 instead of ar3
   03FD 9B                 1490 	subb	a,r3
   03FE FD                 1491 	mov	r5,a
                           1492 ;	main.c:214: printf_tiny("\n\r\tTotal Bytes: %d\n\r",bytes+1);
                           1493 ;	genPlus
                           1494 ;     genPlusIncr
   03FF 74 01              1495 	mov	a,#0x01
                           1496 ;	Peephole 236.a	used r4 instead of ar4
   0401 2C                 1497 	add	a,r4
   0402 FE                 1498 	mov	r6,a
                           1499 ;	Peephole 181	changed mov to clr
   0403 E4                 1500 	clr	a
                           1501 ;	Peephole 236.b	used r5 instead of ar5
   0404 3D                 1502 	addc	a,r5
   0405 FF                 1503 	mov	r7,a
                           1504 ;	genIpush
   0406 C0 02              1505 	push	ar2
   0408 C0 03              1506 	push	ar3
   040A C0 04              1507 	push	ar4
   040C C0 05              1508 	push	ar5
   040E C0 06              1509 	push	ar6
   0410 C0 07              1510 	push	ar7
                           1511 ;	genIpush
   0412 74r68              1512 	mov	a,#__str_21
   0414 C0 E0              1513 	push	acc
   0416 74s04              1514 	mov	a,#(__str_21 >> 8)
   0418 C0 E0              1515 	push	acc
                           1516 ;	genCall
   041A 12s00r00           1517 	lcall	_printf_tiny
   041D E5 81              1518 	mov	a,sp
   041F 24 FC              1519 	add	a,#0xfc
   0421 F5 81              1520 	mov	sp,a
   0423 D0 05              1521 	pop	ar5
   0425 D0 04              1522 	pop	ar4
   0427 D0 03              1523 	pop	ar3
   0429 D0 02              1524 	pop	ar2
                           1525 ;	main.c:216: if(bytes<0){printf_tiny("\n\r -ERROR- End address smaller than the start address\n\r Enter Valid address range\n\r");}
                           1526 ;	genAssign
   042B 8C 06              1527 	mov	ar6,r4
   042D 8D 07              1528 	mov	ar7,r5
                           1529 ;	genCmpLt
                           1530 ;	genCmp
   042F EF                 1531 	mov	a,r7
                           1532 ;	genIfxJump
                           1533 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0430 30 E7 1F           1534 	jnb	acc.7,00116$
                           1535 ;	Peephole 300	removed redundant label 00144$
                           1536 ;	genIpush
   0433 C0 02              1537 	push	ar2
   0435 C0 03              1538 	push	ar3
   0437 C0 04              1539 	push	ar4
   0439 C0 05              1540 	push	ar5
   043B 74r7D              1541 	mov	a,#__str_22
   043D C0 E0              1542 	push	acc
   043F 74s04              1543 	mov	a,#(__str_22 >> 8)
   0441 C0 E0              1544 	push	acc
                           1545 ;	genCall
   0443 12s00r00           1546 	lcall	_printf_tiny
   0446 15 81              1547 	dec	sp
   0448 15 81              1548 	dec	sp
   044A D0 05              1549 	pop	ar5
   044C D0 04              1550 	pop	ar4
   044E D0 03              1551 	pop	ar3
   0450 D0 02              1552 	pop	ar2
   0452                    1553 00116$:
                           1554 ;	main.c:217: }while(bytes<0);
                           1555 ;	genAssign
   0452 8C 06              1556 	mov	ar6,r4
   0454 8D 07              1557 	mov	ar7,r5
                           1558 ;	genCmpLt
                           1559 ;	genCmp
   0456 EF                 1560 	mov	a,r7
                           1561 ;	genIfxJump
   0457 30 E7 03           1562 	jnb	acc.7,00145$
   045A 02s03r0C           1563 	ljmp	00115$
   045D                    1564 00145$:
                           1565 ;	main.c:221: for(i=0;i<=bytes;i++)               // Loop for number of bytes
                           1566 ;	genAssign
                           1567 ;	genAssign
                           1568 ;	genAssign
   045D 7E 00              1569 	mov	r6,#0x00
   045F 7F 00              1570 	mov	r7,#0x00
   0461                    1571 00121$:
                           1572 ;	genCmpGt
                           1573 ;	genCmp
   0461 C3                 1574 	clr	c
   0462 EC                 1575 	mov	a,r4
   0463 9E                 1576 	subb	a,r6
   0464 ED                 1577 	mov	a,r5
   0465 9F                 1578 	subb	a,r7
                           1579 ;	genIfxJump
   0466 50 01              1580 	jnc	00146$
                           1581 ;	Peephole 251.a	replaced ljmp to ret with ret
   0468 22                 1582 	ret
   0469                    1583 00146$:
                           1584 ;	main.c:223: if(i%16==0)
                           1585 ;	genAnd
   0469 EE                 1586 	mov	a,r6
   046A 54 0F              1587 	anl	a,#0x0F
                           1588 ;	Peephole 160.c	removed sjmp by inverse jump logic
   046C 60 03              1589 	jz	00148$
                           1590 ;	Peephole 300	removed redundant label 00147$
   046E 02s05r11           1591 	ljmp	00119$
   0471                    1592 00148$:
                           1593 ;	main.c:226: printf_tiny("\n\n\r%x:\t",aaa);
                           1594 ;	genIpush
   0471 C0 04              1595 	push	ar4
   0473 C0 05              1596 	push	ar5
                           1597 ;	genIpush
   0475 C0 02              1598 	push	ar2
   0477 C0 03              1599 	push	ar3
   0479 C0 04              1600 	push	ar4
   047B C0 05              1601 	push	ar5
   047D C0 06              1602 	push	ar6
   047F C0 07              1603 	push	ar7
   0481 C0 02              1604 	push	ar2
   0483 C0 03              1605 	push	ar3
                           1606 ;	genIpush
   0485 74rD1              1607 	mov	a,#__str_23
   0487 C0 E0              1608 	push	acc
   0489 74s04              1609 	mov	a,#(__str_23 >> 8)
   048B C0 E0              1610 	push	acc
                           1611 ;	genCall
   048D 12s00r00           1612 	lcall	_printf_tiny
   0490 E5 81              1613 	mov	a,sp
   0492 24 FC              1614 	add	a,#0xfc
   0494 F5 81              1615 	mov	sp,a
   0496 D0 07              1616 	pop	ar7
   0498 D0 06              1617 	pop	ar6
   049A D0 05              1618 	pop	ar5
   049C D0 04              1619 	pop	ar4
   049E D0 03              1620 	pop	ar3
   04A0 D0 02              1621 	pop	ar2
                           1622 ;	main.c:227: aaa+=16;
                           1623 ;	genPlus
                           1624 ;     genPlusIncr
   04A2 74 10              1625 	mov	a,#0x10
                           1626 ;	Peephole 236.a	used r2 instead of ar2
   04A4 2A                 1627 	add	a,r2
   04A5 FA                 1628 	mov	r2,a
                           1629 ;	Peephole 181	changed mov to clr
   04A6 E4                 1630 	clr	a
                           1631 ;	Peephole 236.b	used r3 instead of ar3
   04A7 3B                 1632 	addc	a,r3
   04A8 FB                 1633 	mov	r3,a
                           1634 ;	main.c:228: j=0;
                           1635 ;	genAssign
   04A9 90s00r3F           1636 	mov	dptr,#_hex_dump_j_1_1
   04AC E4                 1637 	clr	a
   04AD F0                 1638 	movx	@dptr,a
   04AE A3                 1639 	inc	dptr
   04AF F0                 1640 	movx	@dptr,a
                           1641 ;	main.c:229: st_page=st_addr/256;       // Calculate the page blobk number
                           1642 ;	genAssign
   04B0 90s00r3B           1643 	mov	dptr,#_hex_dump_st_addr_1_1
   04B3 E0                 1644 	movx	a,@dptr
   04B4 F8                 1645 	mov	r0,a
   04B5 A3                 1646 	inc	dptr
   04B6 E0                 1647 	movx	a,@dptr
   04B7 F9                 1648 	mov	r1,a
                           1649 ;	genRightShift
                           1650 ;	genRightShiftLiteral
                           1651 ;	genrshTwo
   04B8 89*02              1652 	mov	_hex_dump_sloc0_1_0,r1
   04BA 75*03 00           1653 	mov	(_hex_dump_sloc0_1_0 + 1),#0x00
                           1654 ;	main.c:230: seq_read(st_addr-st_page*256,st_page,16,r);     // Sequantial read is used to read 16 bytes of data is single go
                           1655 ;	genCast
   04BD 88 04              1656 	mov	ar4,r0
                           1657 ;	genCast
   04BF 90s00r00           1658 	mov	dptr,#_seq_read_PARM_2
   04C2 E5*02              1659 	mov	a,_hex_dump_sloc0_1_0
   04C4 F0                 1660 	movx	@dptr,a
                           1661 ;	genAssign
   04C5 90s00r00           1662 	mov	dptr,#_seq_read_PARM_3
   04C8 74 10              1663 	mov	a,#0x10
   04CA F0                 1664 	movx	@dptr,a
   04CB E4                 1665 	clr	a
   04CC A3                 1666 	inc	dptr
   04CD F0                 1667 	movx	@dptr,a
                           1668 ;	genAssign
   04CE 90s00r00           1669 	mov	dptr,#_seq_read_PARM_4
   04D1 74r2A              1670 	mov	a,#_hex_dump_r_1_1
   04D3 F0                 1671 	movx	@dptr,a
   04D4 A3                 1672 	inc	dptr
   04D5 74s00              1673 	mov	a,#(_hex_dump_r_1_1 >> 8)
   04D7 F0                 1674 	movx	@dptr,a
   04D8 A3                 1675 	inc	dptr
                           1676 ;	Peephole 181	changed mov to clr
   04D9 E4                 1677 	clr	a
   04DA F0                 1678 	movx	@dptr,a
                           1679 ;	genCall
   04DB 8C 82              1680 	mov	dpl,r4
   04DD C0 02              1681 	push	ar2
   04DF C0 03              1682 	push	ar3
   04E1 C0 04              1683 	push	ar4
   04E3 C0 05              1684 	push	ar5
   04E5 C0 06              1685 	push	ar6
   04E7 C0 07              1686 	push	ar7
   04E9 C0 00              1687 	push	ar0
   04EB C0 01              1688 	push	ar1
   04ED 12s00r00           1689 	lcall	_seq_read
   04F0 D0 01              1690 	pop	ar1
   04F2 D0 00              1691 	pop	ar0
   04F4 D0 07              1692 	pop	ar7
   04F6 D0 06              1693 	pop	ar6
   04F8 D0 05              1694 	pop	ar5
   04FA D0 04              1695 	pop	ar4
   04FC D0 03              1696 	pop	ar3
   04FE D0 02              1697 	pop	ar2
                           1698 ;	main.c:231: st_addr++;
                           1699 ;	genPlus
   0500 90s00r3B           1700 	mov	dptr,#_hex_dump_st_addr_1_1
                           1701 ;     genPlusIncr
   0503 74 01              1702 	mov	a,#0x01
                           1703 ;	Peephole 236.a	used r0 instead of ar0
   0505 28                 1704 	add	a,r0
   0506 F0                 1705 	movx	@dptr,a
                           1706 ;	Peephole 181	changed mov to clr
   0507 E4                 1707 	clr	a
                           1708 ;	Peephole 236.b	used r1 instead of ar1
   0508 39                 1709 	addc	a,r1
   0509 A3                 1710 	inc	dptr
   050A F0                 1711 	movx	@dptr,a
                           1712 ;	genIpop
   050B D0 05              1713 	pop	ar5
   050D D0 04              1714 	pop	ar4
                           1715 ;	Peephole 112.b	changed ljmp to sjmp
   050F 80 13              1716 	sjmp	00120$
   0511                    1717 00119$:
                           1718 ;	main.c:238: st_addr++;
                           1719 ;	genAssign
   0511 90s00r3B           1720 	mov	dptr,#_hex_dump_st_addr_1_1
   0514 E0                 1721 	movx	a,@dptr
   0515 F8                 1722 	mov	r0,a
   0516 A3                 1723 	inc	dptr
   0517 E0                 1724 	movx	a,@dptr
   0518 F9                 1725 	mov	r1,a
                           1726 ;	genPlus
   0519 90s00r3B           1727 	mov	dptr,#_hex_dump_st_addr_1_1
                           1728 ;     genPlusIncr
   051C 74 01              1729 	mov	a,#0x01
                           1730 ;	Peephole 236.a	used r0 instead of ar0
   051E 28                 1731 	add	a,r0
   051F F0                 1732 	movx	@dptr,a
                           1733 ;	Peephole 181	changed mov to clr
   0520 E4                 1734 	clr	a
                           1735 ;	Peephole 236.b	used r1 instead of ar1
   0521 39                 1736 	addc	a,r1
   0522 A3                 1737 	inc	dptr
   0523 F0                 1738 	movx	@dptr,a
   0524                    1739 00120$:
                           1740 ;	main.c:241: printf_tiny("%x\t",r[j]);
                           1741 ;	genIpush
   0524 C0 04              1742 	push	ar4
   0526 C0 05              1743 	push	ar5
                           1744 ;	genAssign
   0528 90s00r3F           1745 	mov	dptr,#_hex_dump_j_1_1
   052B E0                 1746 	movx	a,@dptr
   052C F8                 1747 	mov	r0,a
   052D A3                 1748 	inc	dptr
   052E E0                 1749 	movx	a,@dptr
   052F F9                 1750 	mov	r1,a
                           1751 ;	genPlus
                           1752 ;	Peephole 236.g	used r0 instead of ar0
   0530 E8                 1753 	mov	a,r0
   0531 24r2A              1754 	add	a,#_hex_dump_r_1_1
   0533 F5 82              1755 	mov	dpl,a
                           1756 ;	Peephole 236.g	used r1 instead of ar1
   0535 E9                 1757 	mov	a,r1
   0536 34s00              1758 	addc	a,#(_hex_dump_r_1_1 >> 8)
   0538 F5 83              1759 	mov	dph,a
                           1760 ;	genPointerGet
                           1761 ;	genFarPointerGet
   053A E0                 1762 	movx	a,@dptr
   053B FC                 1763 	mov	r4,a
                           1764 ;	genCast
   053C 7D 00              1765 	mov	r5,#0x00
                           1766 ;	genIpush
   053E C0 02              1767 	push	ar2
   0540 C0 03              1768 	push	ar3
   0542 C0 04              1769 	push	ar4
   0544 C0 05              1770 	push	ar5
   0546 C0 06              1771 	push	ar6
   0548 C0 07              1772 	push	ar7
   054A C0 00              1773 	push	ar0
   054C C0 01              1774 	push	ar1
   054E C0 04              1775 	push	ar4
   0550 C0 05              1776 	push	ar5
                           1777 ;	genIpush
   0552 74rD9              1778 	mov	a,#__str_24
   0554 C0 E0              1779 	push	acc
   0556 74s04              1780 	mov	a,#(__str_24 >> 8)
   0558 C0 E0              1781 	push	acc
                           1782 ;	genCall
   055A 12s00r00           1783 	lcall	_printf_tiny
   055D E5 81              1784 	mov	a,sp
   055F 24 FC              1785 	add	a,#0xfc
   0561 F5 81              1786 	mov	sp,a
   0563 D0 01              1787 	pop	ar1
   0565 D0 00              1788 	pop	ar0
   0567 D0 07              1789 	pop	ar7
   0569 D0 06              1790 	pop	ar6
   056B D0 05              1791 	pop	ar5
   056D D0 04              1792 	pop	ar4
   056F D0 03              1793 	pop	ar3
   0571 D0 02              1794 	pop	ar2
                           1795 ;	main.c:242: j++;
                           1796 ;	genPlus
   0573 90s00r3F           1797 	mov	dptr,#_hex_dump_j_1_1
                           1798 ;     genPlusIncr
   0576 74 01              1799 	mov	a,#0x01
                           1800 ;	Peephole 236.a	used r0 instead of ar0
   0578 28                 1801 	add	a,r0
   0579 F0                 1802 	movx	@dptr,a
                           1803 ;	Peephole 181	changed mov to clr
   057A E4                 1804 	clr	a
                           1805 ;	Peephole 236.b	used r1 instead of ar1
   057B 39                 1806 	addc	a,r1
   057C A3                 1807 	inc	dptr
   057D F0                 1808 	movx	@dptr,a
                           1809 ;	main.c:221: for(i=0;i<=bytes;i++)               // Loop for number of bytes
                           1810 ;	genPlus
                           1811 ;     genPlusIncr
   057E 0E                 1812 	inc	r6
   057F BE 00 01           1813 	cjne	r6,#0x00,00149$
   0582 0F                 1814 	inc	r7
   0583                    1815 00149$:
                           1816 ;	genIpop
   0583 D0 05              1817 	pop	ar5
   0585 D0 04              1818 	pop	ar4
   0587 02s04r61           1819 	ljmp	00121$
                           1820 ;	Peephole 259.b	removed redundant label 00125$ and ret
                           1821 ;
                           1822 ;------------------------------------------------------------
                           1823 ;Allocation info for local variables in function 'DDRAM_dump'
                           1824 ;------------------------------------------------------------
                           1825 ;temp                      Allocated with name '_DDRAM_dump_temp_1_1'
                           1826 ;i                         Allocated with name '_DDRAM_dump_i_1_1'
                           1827 ;------------------------------------------------------------
                           1828 ;	main.c:255: void DDRAM_dump()
                           1829 ;	-----------------------------------------
                           1830 ;	 function DDRAM_dump
                           1831 ;	-----------------------------------------
   058A                    1832 _DDRAM_dump:
                           1833 ;	main.c:259: lcdputcmd(0x80);        // 0x80 command is passed to the LCD to select DDRAM and Setting its address as 00
                           1834 ;	genCall
   058A 75 82 80           1835 	mov	dpl,#0x80
   058D 12s00r00           1836 	lcall	_lcdputcmd
                           1837 ;	main.c:260: for(i=0;i<64;i++)       // Reading contents of the DDRAM
                           1838 ;	genAssign
   0590 7A 00              1839 	mov	r2,#0x00
                           1840 ;	genAssign
   0592 7B 00              1841 	mov	r3,#0x00
   0594 7C 00              1842 	mov	r4,#0x00
   0596                    1843 00103$:
                           1844 ;	genCmpLt
                           1845 ;	genCmp
   0596 C3                 1846 	clr	c
   0597 EB                 1847 	mov	a,r3
   0598 94 40              1848 	subb	a,#0x40
   059A EC                 1849 	mov	a,r4
   059B 64 80              1850 	xrl	a,#0x80
   059D 94 80              1851 	subb	a,#0x80
                           1852 ;	genIfxJump
   059F 40 01              1853 	jc	00113$
                           1854 ;	Peephole 251.a	replaced ljmp to ret with ret
   05A1 22                 1855 	ret
   05A2                    1856 00113$:
                           1857 ;	main.c:262: if(i%16==0)         // After every 16 characters , go to new line of the terminal
                           1858 ;	genAssign
   05A2 90s00r00           1859 	mov	dptr,#__modsint_PARM_2
   05A5 74 10              1860 	mov	a,#0x10
   05A7 F0                 1861 	movx	@dptr,a
   05A8 E4                 1862 	clr	a
   05A9 A3                 1863 	inc	dptr
   05AA F0                 1864 	movx	@dptr,a
                           1865 ;	genCall
   05AB 8B 82              1866 	mov	dpl,r3
   05AD 8C 83              1867 	mov	dph,r4
   05AF C0 02              1868 	push	ar2
   05B1 C0 03              1869 	push	ar3
   05B3 C0 04              1870 	push	ar4
   05B5 12s00r00           1871 	lcall	__modsint
   05B8 E5 82              1872 	mov	a,dpl
   05BA 85 83 F0           1873 	mov	b,dph
   05BD D0 04              1874 	pop	ar4
   05BF D0 03              1875 	pop	ar3
   05C1 D0 02              1876 	pop	ar2
                           1877 ;	genIfx
   05C3 45 F0              1878 	orl	a,b
                           1879 ;	genIfxJump
                           1880 ;	Peephole 108.b	removed ljmp by inverse jump logic
   05C5 70 33              1881 	jnz	00102$
                           1882 ;	Peephole 300	removed redundant label 00114$
                           1883 ;	main.c:264: temp++;
                           1884 ;	genPlus
                           1885 ;     genPlusIncr
   05C7 0A                 1886 	inc	r2
                           1887 ;	main.c:265: printf_tiny("\n\r");
                           1888 ;	genIpush
   05C8 C0 02              1889 	push	ar2
   05CA C0 03              1890 	push	ar3
   05CC C0 04              1891 	push	ar4
   05CE 74rDD              1892 	mov	a,#__str_25
   05D0 C0 E0              1893 	push	acc
   05D2 74s04              1894 	mov	a,#(__str_25 >> 8)
   05D4 C0 E0              1895 	push	acc
                           1896 ;	genCall
   05D6 12s00r00           1897 	lcall	_printf_tiny
   05D9 15 81              1898 	dec	sp
   05DB 15 81              1899 	dec	sp
   05DD D0 04              1900 	pop	ar4
   05DF D0 03              1901 	pop	ar3
   05E1 D0 02              1902 	pop	ar2
                           1903 ;	main.c:266: lcdgotoxy(temp,1);
                           1904 ;	genAssign
   05E3 90s00r00           1905 	mov	dptr,#_lcdgotoxy_PARM_2
   05E6 74 01              1906 	mov	a,#0x01
   05E8 F0                 1907 	movx	@dptr,a
                           1908 ;	genCall
   05E9 8A 82              1909 	mov	dpl,r2
   05EB C0 02              1910 	push	ar2
   05ED C0 03              1911 	push	ar3
   05EF C0 04              1912 	push	ar4
   05F1 12s00r00           1913 	lcall	_lcdgotoxy
   05F4 D0 04              1914 	pop	ar4
   05F6 D0 03              1915 	pop	ar3
   05F8 D0 02              1916 	pop	ar2
   05FA                    1917 00102$:
                           1918 ;	main.c:270: putchar(lcdread());     // Read character from the DDRAM and peint it to the terminal
                           1919 ;	genCall
   05FA C0 02              1920 	push	ar2
   05FC C0 03              1921 	push	ar3
   05FE C0 04              1922 	push	ar4
   0600 12s00r00           1923 	lcall	_lcdread
   0603 AD 82              1924 	mov	r5,dpl
   0605 D0 04              1925 	pop	ar4
   0607 D0 03              1926 	pop	ar3
   0609 D0 02              1927 	pop	ar2
                           1928 ;	genCall
   060B 8D 82              1929 	mov	dpl,r5
   060D C0 02              1930 	push	ar2
   060F C0 03              1931 	push	ar3
   0611 C0 04              1932 	push	ar4
   0613 12s00r00           1933 	lcall	_putchar
   0616 D0 04              1934 	pop	ar4
   0618 D0 03              1935 	pop	ar3
   061A D0 02              1936 	pop	ar2
                           1937 ;	main.c:271: delay_ms(10);           // Wait for 10 ms
                           1938 ;	genCall
                           1939 ;	Peephole 182.b	used 16 bit load of dptr
   061C 90 00 0A           1940 	mov	dptr,#0x000A
   061F C0 02              1941 	push	ar2
   0621 C0 03              1942 	push	ar3
   0623 C0 04              1943 	push	ar4
   0625 12s00r00           1944 	lcall	_delay_ms
   0628 D0 04              1945 	pop	ar4
   062A D0 03              1946 	pop	ar3
   062C D0 02              1947 	pop	ar2
                           1948 ;	main.c:260: for(i=0;i<64;i++)       // Reading contents of the DDRAM
                           1949 ;	genPlus
                           1950 ;     genPlusIncr
   062E 0B                 1951 	inc	r3
   062F BB 00 01           1952 	cjne	r3,#0x00,00115$
   0632 0C                 1953 	inc	r4
   0633                    1954 00115$:
   0633 02s05r96           1955 	ljmp	00103$
                           1956 ;	Peephole 259.b	removed redundant label 00107$ and ret
                           1957 ;
                           1958 ;------------------------------------------------------------
                           1959 ;Allocation info for local variables in function 'CGRAM_dump'
                           1960 ;------------------------------------------------------------
                           1961 ;temp                      Allocated with name '_CGRAM_dump_temp_1_1'
                           1962 ;i                         Allocated with name '_CGRAM_dump_i_1_1'
                           1963 ;------------------------------------------------------------
                           1964 ;	main.c:301: void CGRAM_dump()
                           1965 ;	-----------------------------------------
                           1966 ;	 function CGRAM_dump
                           1967 ;	-----------------------------------------
   0636                    1968 _CGRAM_dump:
                           1969 ;	main.c:305: putchar('\n');
                           1970 ;	genCall
   0636 75 82 0A           1971 	mov	dpl,#0x0A
   0639 12s00r00           1972 	lcall	_putchar
                           1973 ;	main.c:306: lcdputcmd(0x40);        // 0x40 is Passed to select CGRAM and setting its address as 00
                           1974 ;	genCall
   063C 75 82 40           1975 	mov	dpl,#0x40
   063F 12s00r00           1976 	lcall	_lcdputcmd
                           1977 ;	main.c:307: for(i=0;i<64;i++)       // 64 bytes of CGRAM are read
                           1978 ;	genAssign
   0642 7A 40              1979 	mov	r2,#0x40
   0644 7B 00              1980 	mov	r3,#0x00
   0646                    1981 00103$:
                           1982 ;	main.c:309: temp = lcdread();   // Reading data from the LCD
                           1983 ;	genCall
   0646 C0 02              1984 	push	ar2
   0648 C0 03              1985 	push	ar3
   064A 12s00r00           1986 	lcall	_lcdread
   064D AC 82              1987 	mov	r4,dpl
   064F D0 03              1988 	pop	ar3
   0651 D0 02              1989 	pop	ar2
                           1990 ;	main.c:310: putchar('\t');
                           1991 ;	genCall
   0653 75 82 09           1992 	mov	dpl,#0x09
   0656 C0 02              1993 	push	ar2
   0658 C0 03              1994 	push	ar3
   065A C0 04              1995 	push	ar4
   065C 12s00r00           1996 	lcall	_putchar
   065F D0 04              1997 	pop	ar4
   0661 D0 03              1998 	pop	ar3
   0663 D0 02              1999 	pop	ar2
                           2000 ;	main.c:311: putchar(temp);      // Displaying Data on the terminal
                           2001 ;	genCall
   0665 8C 82              2002 	mov	dpl,r4
   0667 C0 02              2003 	push	ar2
   0669 C0 03              2004 	push	ar3
   066B 12s00r00           2005 	lcall	_putchar
   066E D0 03              2006 	pop	ar3
   0670 D0 02              2007 	pop	ar2
                           2008 ;	genMinus
                           2009 ;	genMinusDec
   0672 1A                 2010 	dec	r2
   0673 BA FF 01           2011 	cjne	r2,#0xff,00109$
   0676 1B                 2012 	dec	r3
   0677                    2013 00109$:
                           2014 ;	main.c:307: for(i=0;i<64;i++)       // 64 bytes of CGRAM are read
                           2015 ;	genIfx
   0677 EA                 2016 	mov	a,r2
   0678 4B                 2017 	orl	a,r3
                           2018 ;	genIfxJump
                           2019 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0679 70 CB              2020 	jnz	00103$
                           2021 ;	Peephole 300	removed redundant label 00110$
                           2022 ;	main.c:315: delay_ms(10);
                           2023 ;	genCall
                           2024 ;	Peephole 182.b	used 16 bit load of dptr
   067B 90 00 0A           2025 	mov	dptr,#0x000A
                           2026 ;	Peephole 253.b	replaced lcall/ret with ljmp
   067E 02s00r00           2027 	ljmp	_delay_ms
                           2028 ;
                           2029 	.area CSEG    (CODE)
                           2030 	.area CONST   (CODE)
   0000                    2031 __str_0:
   0000 48 69              2032 	.ascii "Hi"
   0002 00                 2033 	.db 0x00
   0003                    2034 __str_1:
   0003 48 65 6C 6C 6F     2035 	.ascii "Hello"
   0008 00                 2036 	.db 0x00
   0009                    2037 __str_2:
   0009 57 6F 72 6C 64     2038 	.ascii "World"
   000E 00                 2039 	.db 0x00
   000F                    2040 __str_3:
   000F 0A                 2041 	.db 0x0A
   0010 0D                 2042 	.db 0x0D
   0011 09                 2043 	.db 0x09
   0012 09                 2044 	.db 0x09
   0013 09                 2045 	.db 0x09
   0014 09                 2046 	.db 0x09
   0015 09                 2047 	.db 0x09
   0016 2A 2A 2A 2A 2A 2A  2048 	.ascii "******** Control Commands ********"
        2A 2A 20 43 6F 6E
        74 72 6F 6C 20 43
        6F 6D 6D 61 6E 64
        73 20 2A 2A 2A 2A
        2A 2A 2A 2A
   0038 0A                 2049 	.db 0x0A
   0039 0D                 2050 	.db 0x0D
   003A 09                 2051 	.db 0x09
   003B 31 2E 20 57 72 69  2052 	.ascii "1. Write Byte "
        74 65 20 42 79 74
        65 20
   0049 0A                 2053 	.db 0x0A
   004A 0D                 2054 	.db 0x0D
   004B 09                 2055 	.db 0x09
   004C 32 2E 20 52 65 61  2056 	.ascii "2. Read Byte "
        64 20 42 79 74 65
        20
   0059 0A                 2057 	.db 0x0A
   005A 0D                 2058 	.db 0x0D
   005B 09                 2059 	.db 0x09
   005C 33 2E 20 4C 43 44  2060 	.ascii "3. LCD Display"
        20 44 69 73 70 6C
        61 79
   006A 0A                 2061 	.db 0x0A
   006B 0D                 2062 	.db 0x0D
   006C 09                 2063 	.db 0x09
   006D 34 2E 20 43 6C 65  2064 	.ascii "4. Clear LCD"
        61 72 20 4C 43 44
   0079 0A                 2065 	.db 0x0A
   007A 0D                 2066 	.db 0x0D
   007B 09                 2067 	.db 0x09
   007C 35 2E 20 48 65 78  2068 	.ascii "5. Hex Dump"
        20 44 75 6D 70
   0087 0A                 2069 	.db 0x0A
   0088 0D                 2070 	.db 0x0D
   0089 09                 2071 	.db 0x09
   008A 36 2E 20 44 44 52  2072 	.ascii "6. DDRAM Dump"
        41 4D 20 44 75 6D
        70
   0097 0A                 2073 	.db 0x0A
   0098 0D                 2074 	.db 0x0D
   0099 09                 2075 	.db 0x09
   009A 37 2E 20 43 47 52  2076 	.ascii "7. CGRAM Dump"
        41 4D 20 44 75 6D
        70
   00A7 09                 2077 	.db 0x09
   00A8 00                 2078 	.db 0x00
   00A9                    2079 __str_4:
   00A9 0A                 2080 	.db 0x0A
   00AA 0A                 2081 	.db 0x0A
   00AB 0D                 2082 	.db 0x0D
   00AC 09                 2083 	.db 0x09
   00AD 09                 2084 	.db 0x09
   00AE 20 2A 2A 2A 2A 2A  2085 	.ascii " ******  Write Command  *****"
        2A 20 20 57 72 69
        74 65 20 43 6F 6D
        6D 61 6E 64 20 20
        2A 2A 2A 2A 2A
   00CB 00                 2086 	.db 0x00
   00CC                    2087 __str_5:
   00CC 0A                 2088 	.db 0x0A
   00CD 0A                 2089 	.db 0x0A
   00CE 0D                 2090 	.db 0x0D
   00CF 09                 2091 	.db 0x09
   00D0 09                 2092 	.db 0x09
   00D1 20 2A 2A 2A 2A 2A  2093 	.ascii " ******  Read Command  ******"
        2A 20 20 52 65 61
        64 20 43 6F 6D 6D
        61 6E 64 20 20 2A
        2A 2A 2A 2A 2A
   00EE 00                 2094 	.db 0x00
   00EF                    2095 __str_6:
   00EF 0A                 2096 	.db 0x0A
   00F0 0A                 2097 	.db 0x0A
   00F1 0D                 2098 	.db 0x0D
   00F2 09                 2099 	.db 0x09
   00F3 09                 2100 	.db 0x09
   00F4 20 2A 2A 2A 2A 2A  2101 	.ascii " ******  LCD DISPLAY  ******"
        2A 20 20 4C 43 44
        20 44 49 53 50 4C
        41 59 20 20 2A 2A
        2A 2A 2A 2A
   0110 00                 2102 	.db 0x00
   0111                    2103 __str_7:
   0111 0A                 2104 	.db 0x0A
   0112 0A                 2105 	.db 0x0A
   0113 0D                 2106 	.db 0x0D
   0114 09                 2107 	.db 0x09
   0115 09                 2108 	.db 0x09
   0116 20 2A 2A 2A 2A 2A  2109 	.ascii " ******  Clear LCD  ******"
        2A 20 20 43 6C 65
        61 72 20 4C 43 44
        20 20 2A 2A 2A 2A
        2A 2A
   0130 00                 2110 	.db 0x00
   0131                    2111 __str_8:
   0131 0A                 2112 	.db 0x0A
   0132 0A                 2113 	.db 0x0A
   0133 0D                 2114 	.db 0x0D
   0134 09                 2115 	.db 0x09
   0135 09                 2116 	.db 0x09
   0136 20 2A 2A 2A 2A 2A  2117 	.ascii " ******  Hex Dump Command  ******"
        2A 20 20 48 65 78
        20 44 75 6D 70 20
        43 6F 6D 6D 61 6E
        64 20 20 2A 2A 2A
        2A 2A 2A
   0157 00                 2118 	.db 0x00
   0158                    2119 __str_9:
   0158 0A                 2120 	.db 0x0A
   0159 0A                 2121 	.db 0x0A
   015A 0D                 2122 	.db 0x0D
   015B 09                 2123 	.db 0x09
   015C 09                 2124 	.db 0x09
   015D 20 2A 2A 2A 2A 2A  2125 	.ascii " ******  DDRAM Dump Command  ******"
        2A 20 20 44 44 52
        41 4D 20 44 75 6D
        70 20 43 6F 6D 6D
        61 6E 64 20 20 2A
        2A 2A 2A 2A 2A
   0180 0A                 2126 	.db 0x0A
   0181 0A                 2127 	.db 0x0A
   0182 0D                 2128 	.db 0x0D
   0183 00                 2129 	.db 0x00
   0184                    2130 __str_10:
   0184 0A                 2131 	.db 0x0A
   0185 0A                 2132 	.db 0x0A
   0186 0D                 2133 	.db 0x0D
   0187 09                 2134 	.db 0x09
   0188 09                 2135 	.db 0x09
   0189 20 2A 2A 2A 2A 2A  2136 	.ascii " ******  CGRAM Dump Command  ******"
        2A 20 20 43 47 52
        41 4D 20 44 75 6D
        70 20 43 6F 6D 6D
        61 6E 64 20 20 2A
        2A 2A 2A 2A 2A
   01AC 0A                 2137 	.db 0x0A
   01AD 0A                 2138 	.db 0x0A
   01AE 0D                 2139 	.db 0x0D
   01AF 00                 2140 	.db 0x00
   01B0                    2141 __str_11:
   01B0 0A                 2142 	.db 0x0A
   01B1 0A                 2143 	.db 0x0A
   01B2 0D                 2144 	.db 0x0D
   01B3 20 45 6E 74 65 72  2145 	.ascii " Enter Address in Hex in HHH format between 000 to 7FF: "
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20 37 46 46
        3A 20
   01EB 00                 2146 	.db 0x00
   01EC                    2147 __str_12:
   01EC 0A                 2148 	.db 0x0A
   01ED 0A                 2149 	.db 0x0A
   01EE 0D                 2150 	.db 0x0D
   01EF 20 2A 2D 45 52 52  2151 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   01F9 09                 2152 	.db 0x09
   01FA 20 50 6C 65 61 73  2153 	.ascii " Please Enter valid Address betweem 000 and 7F"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 41 64 64 72
        65 73 73 20 62 65
        74 77 65 65 6D 20
        30 30 30 20 61 6E
        64 20 37 46
   0228 46 3A 20           2154 	.ascii "F: "
   022B 00                 2155 	.db 0x00
   022C                    2156 __str_13:
   022C 0A                 2157 	.db 0x0A
   022D 0A                 2158 	.db 0x0A
   022E 0D                 2159 	.db 0x0D
   022F 20 45 6E 74 65 72  2160 	.ascii " Enter Data in Hex in HH format between 00 to FF: "
        20 44 61 74 61 20
        69 6E 20 48 65 78
        20 69 6E 20 48 48
        20 66 6F 72 6D 61
        74 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 46 46
        3A 20
   0261 00                 2161 	.db 0x00
   0262                    2162 __str_14:
   0262 0A                 2163 	.db 0x0A
   0263 0A                 2164 	.db 0x0A
   0264 0D                 2165 	.db 0x0D
   0265 20 2A 2D 45 52 52  2166 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   026F 09                 2167 	.db 0x09
   0270 20 50 6C 65 61 73  2168 	.ascii " Please Enter valid data in Hex in HH format b"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 64 61 74 61
        20 69 6E 20 48 65
        78 20 69 6E 20 48
        48 20 66 6F 72 6D
        61 74 20 62
   029E 65 74 77 65 65 6E  2169 	.ascii "etween 00 to FF: "
        20 30 30 20 74 6F
        20 46 46 3A 20
   02AF 00                 2170 	.db 0x00
   02B0                    2171 __str_15:
   02B0 0A                 2172 	.db 0x0A
   02B1 0A                 2173 	.db 0x0A
   02B2 0D                 2174 	.db 0x0D
   02B3 09                 2175 	.db 0x09
   02B4 09                 2176 	.db 0x09
   02B5 09                 2177 	.db 0x09
   02B6 25 78 20 3A 20 25  2178 	.ascii "%x : %x "
        78 20
   02BE 0A                 2179 	.db 0x0A
   02BF 00                 2180 	.db 0x00
   02C0                    2181 __str_16:
   02C0 0A                 2182 	.db 0x0A
   02C1 0A                 2183 	.db 0x0A
   02C2 0A                 2184 	.db 0x0A
   02C3 0D                 2185 	.db 0x0D
   02C4 09                 2186 	.db 0x09
   02C5 09                 2187 	.db 0x09
   02C6 09                 2188 	.db 0x09
   02C7 09                 2189 	.db 0x09
   02C8 09                 2190 	.db 0x09
   02C9 2A 2A 2A 2A 2A 2A  2191 	.ascii "******** Control Commands ********"
        2A 2A 20 43 6F 6E
        74 72 6F 6C 20 43
        6F 6D 6D 61 6E 64
        73 20 2A 2A 2A 2A
        2A 2A 2A 2A
   02EB 0A                 2192 	.db 0x0A
   02EC 0D                 2193 	.db 0x0D
   02ED 09                 2194 	.db 0x09
   02EE 31 2E 20 57 72 69  2195 	.ascii "1. Write Byte "
        74 65 20 42 79 74
        65 20
   02FC 0A                 2196 	.db 0x0A
   02FD 0D                 2197 	.db 0x0D
   02FE 09                 2198 	.db 0x09
   02FF 32 2E 20 52 65 61  2199 	.ascii "2. Read Byte "
        64 20 42 79 74 65
        20
   030C 0A                 2200 	.db 0x0A
   030D 0D                 2201 	.db 0x0D
   030E 09                 2202 	.db 0x09
   030F 33 2E 20 4C 43 44  2203 	.ascii "3. LCD Display"
        20 44 69 73 70 6C
        61 79
   031D 0A                 2204 	.db 0x0A
   031E 0D                 2205 	.db 0x0D
   031F 09                 2206 	.db 0x09
   0320 34 2E 20 43 6C 65  2207 	.ascii "4. Clear LCD"
        61 72 20 4C 43 44
   032C 0A                 2208 	.db 0x0A
   032D 0D                 2209 	.db 0x0D
   032E 09                 2210 	.db 0x09
   032F 35 2E 20 48 65 78  2211 	.ascii "5. Hex Du"
        20 44 75
   0338 6D 70              2212 	.ascii "mp"
   033A 0A                 2213 	.db 0x0A
   033B 0D                 2214 	.db 0x0D
   033C 09                 2215 	.db 0x09
   033D 36 2E 20 44 44 52  2216 	.ascii "6. DDRAM Dump"
        41 4D 20 44 75 6D
        70
   034A 0A                 2217 	.db 0x0A
   034B 0D                 2218 	.db 0x0D
   034C 09                 2219 	.db 0x09
   034D 37 2E 20 43 47 52  2220 	.ascii "7. CGRAM Dump"
        41 4D 20 44 75 6D
        70
   035A 09                 2221 	.db 0x09
   035B 00                 2222 	.db 0x00
   035C                    2223 __str_17:
   035C 0A                 2224 	.db 0x0A
   035D 0A                 2225 	.db 0x0A
   035E 0D                 2226 	.db 0x0D
   035F 20 45 6E 74 65 72  2227 	.ascii " Enter Start Address in Hex in HHH format between 000 to "
        20 53 74 61 72 74
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20
   0398 37 46 46 3A 20     2228 	.ascii "7FF: "
   039D 00                 2229 	.db 0x00
   039E                    2230 __str_18:
   039E 0A                 2231 	.db 0x0A
   039F 0A                 2232 	.db 0x0A
   03A0 0D                 2233 	.db 0x0D
   03A1 20 2A 2D 45 52 52  2234 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   03AB 09                 2235 	.db 0x09
   03AC 20 50 6C 65 61 73  2236 	.ascii " Please Enter valid start Address betweem 000 "
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 73 74 61 72
        74 20 41 64 64 72
        65 73 73 20 62 65
        74 77 65 65 6D 20
        30 30 30 20
   03DA 61 6E 64 20 37 46  2237 	.ascii "and 7FF: "
        46 3A 20
   03E3 00                 2238 	.db 0x00
   03E4                    2239 __str_19:
   03E4 0A                 2240 	.db 0x0A
   03E5 0A                 2241 	.db 0x0A
   03E6 0D                 2242 	.db 0x0D
   03E7 20 45 6E 74 65 72  2243 	.ascii " Enter End Address in Hex in HHH format between 000 to 7F"
        20 45 6E 64 20 41
        64 64 72 65 73 73
        20 69 6E 20 48 65
        78 20 69 6E 20 48
        48 48 20 66 6F 72
        6D 61 74 20 62 65
        74 77 65 65 6E 20
        30 30 30 20 74 6F
        20 37 46
   0420 46 3A 20           2244 	.ascii "F: "
   0423 00                 2245 	.db 0x00
   0424                    2246 __str_20:
   0424 0A                 2247 	.db 0x0A
   0425 0A                 2248 	.db 0x0A
   0426 0D                 2249 	.db 0x0D
   0427 20 2A 2D 45 52 52  2250 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0431 09                 2251 	.db 0x09
   0432 20 50 6C 65 61 73  2252 	.ascii " Please Enter valid end Address betweem 000 an"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 65 6E 64 20
        41 64 64 72 65 73
        73 20 62 65 74 77
        65 65 6D 20 30 30
        30 20 61 6E
   0460 64 20 37 46 46 3A  2253 	.ascii "d 7FF: "
        20
   0467 00                 2254 	.db 0x00
   0468                    2255 __str_21:
   0468 0A                 2256 	.db 0x0A
   0469 0D                 2257 	.db 0x0D
   046A 09                 2258 	.db 0x09
   046B 54 6F 74 61 6C 20  2259 	.ascii "Total Bytes: %d"
        42 79 74 65 73 3A
        20 25 64
   047A 0A                 2260 	.db 0x0A
   047B 0D                 2261 	.db 0x0D
   047C 00                 2262 	.db 0x00
   047D                    2263 __str_22:
   047D 0A                 2264 	.db 0x0A
   047E 0D                 2265 	.db 0x0D
   047F 20 2D 45 52 52 4F  2266 	.ascii " -ERROR- End address smaller than the start address"
        52 2D 20 45 6E 64
        20 61 64 64 72 65
        73 73 20 73 6D 61
        6C 6C 65 72 20 74
        68 61 6E 20 74 68
        65 20 73 74 61 72
        74 20 61 64 64 72
        65 73 73
   04B2 0A                 2267 	.db 0x0A
   04B3 0D                 2268 	.db 0x0D
   04B4 20 45 6E 74 65     2269 	.ascii " Ente"
   04B9 72 20 56 61 6C 69  2270 	.ascii "r Valid address range"
        64 20 61 64 64 72
        65 73 73 20 72 61
        6E 67 65
   04CE 0A                 2271 	.db 0x0A
   04CF 0D                 2272 	.db 0x0D
   04D0 00                 2273 	.db 0x00
   04D1                    2274 __str_23:
   04D1 0A                 2275 	.db 0x0A
   04D2 0A                 2276 	.db 0x0A
   04D3 0D                 2277 	.db 0x0D
   04D4 25 78 3A           2278 	.ascii "%x:"
   04D7 09                 2279 	.db 0x09
   04D8 00                 2280 	.db 0x00
   04D9                    2281 __str_24:
   04D9 25 78              2282 	.ascii "%x"
   04DB 09                 2283 	.db 0x09
   04DC 00                 2284 	.db 0x00
   04DD                    2285 __str_25:
   04DD 0A                 2286 	.db 0x0A
   04DE 0D                 2287 	.db 0x0D
   04DF 00                 2288 	.db 0x00
                           2289 	.area XINIT   (CODE)
   0000                    2290 __xinit__write:
   0000 00 A0              2291 	.byte #0x00,#0xA0
   0002                    2292 __xinit__read:
   0002 00 C0              2293 	.byte #0x00,#0xC0
