                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Thu Nov 24 04:54:17 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _timer_isr
                             13 	.globl _ext_zero
                             14 	.globl _main
                             15 	.globl __sdcc_external_startup
                             16 	.globl _P5_7
                             17 	.globl _P5_6
                             18 	.globl _P5_5
                             19 	.globl _P5_4
                             20 	.globl _P5_3
                             21 	.globl _P5_2
                             22 	.globl _P5_1
                             23 	.globl _P5_0
                             24 	.globl _P4_7
                             25 	.globl _P4_6
                             26 	.globl _P4_5
                             27 	.globl _P4_4
                             28 	.globl _P4_3
                             29 	.globl _P4_2
                             30 	.globl _P4_1
                             31 	.globl _P4_0
                             32 	.globl _PX0L
                             33 	.globl _PT0L
                             34 	.globl _PX1L
                             35 	.globl _PT1L
                             36 	.globl _PLS
                             37 	.globl _PT2L
                             38 	.globl _PPCL
                             39 	.globl _EC
                             40 	.globl _CCF0
                             41 	.globl _CCF1
                             42 	.globl _CCF2
                             43 	.globl _CCF3
                             44 	.globl _CCF4
                             45 	.globl _CR
                             46 	.globl _CF
                             47 	.globl _TF2
                             48 	.globl _EXF2
                             49 	.globl _RCLK
                             50 	.globl _TCLK
                             51 	.globl _EXEN2
                             52 	.globl _TR2
                             53 	.globl _C_T2
                             54 	.globl _CP_RL2
                             55 	.globl _T2CON_7
                             56 	.globl _T2CON_6
                             57 	.globl _T2CON_5
                             58 	.globl _T2CON_4
                             59 	.globl _T2CON_3
                             60 	.globl _T2CON_2
                             61 	.globl _T2CON_1
                             62 	.globl _T2CON_0
                             63 	.globl _PT2
                             64 	.globl _ET2
                             65 	.globl _CY
                             66 	.globl _AC
                             67 	.globl _F0
                             68 	.globl _RS1
                             69 	.globl _RS0
                             70 	.globl _OV
                             71 	.globl _F1
                             72 	.globl _P
                             73 	.globl _PS
                             74 	.globl _PT1
                             75 	.globl _PX1
                             76 	.globl _PT0
                             77 	.globl _PX0
                             78 	.globl _RD
                             79 	.globl _WR
                             80 	.globl _T1
                             81 	.globl _T0
                             82 	.globl _INT1
                             83 	.globl _INT0
                             84 	.globl _TXD
                             85 	.globl _RXD
                             86 	.globl _P3_7
                             87 	.globl _P3_6
                             88 	.globl _P3_5
                             89 	.globl _P3_4
                             90 	.globl _P3_3
                             91 	.globl _P3_2
                             92 	.globl _P3_1
                             93 	.globl _P3_0
                             94 	.globl _EA
                             95 	.globl _ES
                             96 	.globl _ET1
                             97 	.globl _EX1
                             98 	.globl _ET0
                             99 	.globl _EX0
                            100 	.globl _P2_7
                            101 	.globl _P2_6
                            102 	.globl _P2_5
                            103 	.globl _P2_4
                            104 	.globl _P2_3
                            105 	.globl _P2_2
                            106 	.globl _P2_1
                            107 	.globl _P2_0
                            108 	.globl _SM0
                            109 	.globl _SM1
                            110 	.globl _SM2
                            111 	.globl _REN
                            112 	.globl _TB8
                            113 	.globl _RB8
                            114 	.globl _TI
                            115 	.globl _RI
                            116 	.globl _P1_7
                            117 	.globl _P1_6
                            118 	.globl _P1_5
                            119 	.globl _P1_4
                            120 	.globl _P1_3
                            121 	.globl _P1_2
                            122 	.globl _P1_1
                            123 	.globl _P1_0
                            124 	.globl _TF1
                            125 	.globl _TR1
                            126 	.globl _TF0
                            127 	.globl _TR0
                            128 	.globl _IE1
                            129 	.globl _IT1
                            130 	.globl _IE0
                            131 	.globl _IT0
                            132 	.globl _P0_7
                            133 	.globl _P0_6
                            134 	.globl _P0_5
                            135 	.globl _P0_4
                            136 	.globl _P0_3
                            137 	.globl _P0_2
                            138 	.globl _P0_1
                            139 	.globl _P0_0
                            140 	.globl _EECON
                            141 	.globl _KBF
                            142 	.globl _KBE
                            143 	.globl _KBLS
                            144 	.globl _BRL
                            145 	.globl _BDRCON
                            146 	.globl _T2MOD
                            147 	.globl _SPDAT
                            148 	.globl _SPSTA
                            149 	.globl _SPCON
                            150 	.globl _SADEN
                            151 	.globl _SADDR
                            152 	.globl _WDTPRG
                            153 	.globl _WDTRST
                            154 	.globl _P5
                            155 	.globl _P4
                            156 	.globl _IPH1
                            157 	.globl _IPL1
                            158 	.globl _IPH0
                            159 	.globl _IPL0
                            160 	.globl _IEN1
                            161 	.globl _IEN0
                            162 	.globl _CMOD
                            163 	.globl _CL
                            164 	.globl _CH
                            165 	.globl _CCON
                            166 	.globl _CCAPM4
                            167 	.globl _CCAPM3
                            168 	.globl _CCAPM2
                            169 	.globl _CCAPM1
                            170 	.globl _CCAPM0
                            171 	.globl _CCAP4L
                            172 	.globl _CCAP3L
                            173 	.globl _CCAP2L
                            174 	.globl _CCAP1L
                            175 	.globl _CCAP0L
                            176 	.globl _CCAP4H
                            177 	.globl _CCAP3H
                            178 	.globl _CCAP2H
                            179 	.globl _CCAP1H
                            180 	.globl _CCAP0H
                            181 	.globl _CKCKON1
                            182 	.globl _CKCKON0
                            183 	.globl _CKRL
                            184 	.globl _AUXR1
                            185 	.globl _AUXR
                            186 	.globl _TH2
                            187 	.globl _TL2
                            188 	.globl _RCAP2H
                            189 	.globl _RCAP2L
                            190 	.globl _T2CON
                            191 	.globl _B
                            192 	.globl _ACC
                            193 	.globl _PSW
                            194 	.globl _IP
                            195 	.globl _P3
                            196 	.globl _IE
                            197 	.globl _P2
                            198 	.globl _SBUF
                            199 	.globl _SCON
                            200 	.globl _P1
                            201 	.globl _TH1
                            202 	.globl _TH0
                            203 	.globl _TL1
                            204 	.globl _TL0
                            205 	.globl _TMOD
                            206 	.globl _TCON
                            207 	.globl _PCON
                            208 	.globl _DPH
                            209 	.globl _DPL
                            210 	.globl _SP
                            211 	.globl _P0
                            212 	.globl _timers
                            213 	.globl _flag
                            214 	.globl _io_counter
                            215 	.globl _nmi
                            216 	.globl _nsec
                            217 	.globl _nms
                            218 	.globl _cnt
                            219 	.globl _mi
                            220 	.globl _sec
                            221 	.globl _ms
                            222 ;--------------------------------------------------------
                            223 ; special function registers
                            224 ;--------------------------------------------------------
                            225 	.area RSEG    (DATA)
                    0080    226 _P0	=	0x0080
                    0081    227 _SP	=	0x0081
                    0082    228 _DPL	=	0x0082
                    0083    229 _DPH	=	0x0083
                    0087    230 _PCON	=	0x0087
                    0088    231 _TCON	=	0x0088
                    0089    232 _TMOD	=	0x0089
                    008A    233 _TL0	=	0x008a
                    008B    234 _TL1	=	0x008b
                    008C    235 _TH0	=	0x008c
                    008D    236 _TH1	=	0x008d
                    0090    237 _P1	=	0x0090
                    0098    238 _SCON	=	0x0098
                    0099    239 _SBUF	=	0x0099
                    00A0    240 _P2	=	0x00a0
                    00A8    241 _IE	=	0x00a8
                    00B0    242 _P3	=	0x00b0
                    00B8    243 _IP	=	0x00b8
                    00D0    244 _PSW	=	0x00d0
                    00E0    245 _ACC	=	0x00e0
                    00F0    246 _B	=	0x00f0
                    00C8    247 _T2CON	=	0x00c8
                    00CA    248 _RCAP2L	=	0x00ca
                    00CB    249 _RCAP2H	=	0x00cb
                    00CC    250 _TL2	=	0x00cc
                    00CD    251 _TH2	=	0x00cd
                    008E    252 _AUXR	=	0x008e
                    00A2    253 _AUXR1	=	0x00a2
                    0097    254 _CKRL	=	0x0097
                    008F    255 _CKCKON0	=	0x008f
                    008F    256 _CKCKON1	=	0x008f
                    00FA    257 _CCAP0H	=	0x00fa
                    00FB    258 _CCAP1H	=	0x00fb
                    00FC    259 _CCAP2H	=	0x00fc
                    00FD    260 _CCAP3H	=	0x00fd
                    00FE    261 _CCAP4H	=	0x00fe
                    00EA    262 _CCAP0L	=	0x00ea
                    00EB    263 _CCAP1L	=	0x00eb
                    00EC    264 _CCAP2L	=	0x00ec
                    00ED    265 _CCAP3L	=	0x00ed
                    00EE    266 _CCAP4L	=	0x00ee
                    00DA    267 _CCAPM0	=	0x00da
                    00DB    268 _CCAPM1	=	0x00db
                    00DC    269 _CCAPM2	=	0x00dc
                    00DD    270 _CCAPM3	=	0x00dd
                    00DE    271 _CCAPM4	=	0x00de
                    00D8    272 _CCON	=	0x00d8
                    00F9    273 _CH	=	0x00f9
                    00E9    274 _CL	=	0x00e9
                    00D9    275 _CMOD	=	0x00d9
                    00A8    276 _IEN0	=	0x00a8
                    00B1    277 _IEN1	=	0x00b1
                    00B8    278 _IPL0	=	0x00b8
                    00B7    279 _IPH0	=	0x00b7
                    00B2    280 _IPL1	=	0x00b2
                    00B3    281 _IPH1	=	0x00b3
                    00C0    282 _P4	=	0x00c0
                    00D8    283 _P5	=	0x00d8
                    00A6    284 _WDTRST	=	0x00a6
                    00A7    285 _WDTPRG	=	0x00a7
                    00A9    286 _SADDR	=	0x00a9
                    00B9    287 _SADEN	=	0x00b9
                    00C3    288 _SPCON	=	0x00c3
                    00C4    289 _SPSTA	=	0x00c4
                    00C5    290 _SPDAT	=	0x00c5
                    00C9    291 _T2MOD	=	0x00c9
                    009B    292 _BDRCON	=	0x009b
                    009A    293 _BRL	=	0x009a
                    009C    294 _KBLS	=	0x009c
                    009D    295 _KBE	=	0x009d
                    009E    296 _KBF	=	0x009e
                    00D2    297 _EECON	=	0x00d2
                            298 ;--------------------------------------------------------
                            299 ; special function bits
                            300 ;--------------------------------------------------------
                            301 	.area RSEG    (DATA)
                    0080    302 _P0_0	=	0x0080
                    0081    303 _P0_1	=	0x0081
                    0082    304 _P0_2	=	0x0082
                    0083    305 _P0_3	=	0x0083
                    0084    306 _P0_4	=	0x0084
                    0085    307 _P0_5	=	0x0085
                    0086    308 _P0_6	=	0x0086
                    0087    309 _P0_7	=	0x0087
                    0088    310 _IT0	=	0x0088
                    0089    311 _IE0	=	0x0089
                    008A    312 _IT1	=	0x008a
                    008B    313 _IE1	=	0x008b
                    008C    314 _TR0	=	0x008c
                    008D    315 _TF0	=	0x008d
                    008E    316 _TR1	=	0x008e
                    008F    317 _TF1	=	0x008f
                    0090    318 _P1_0	=	0x0090
                    0091    319 _P1_1	=	0x0091
                    0092    320 _P1_2	=	0x0092
                    0093    321 _P1_3	=	0x0093
                    0094    322 _P1_4	=	0x0094
                    0095    323 _P1_5	=	0x0095
                    0096    324 _P1_6	=	0x0096
                    0097    325 _P1_7	=	0x0097
                    0098    326 _RI	=	0x0098
                    0099    327 _TI	=	0x0099
                    009A    328 _RB8	=	0x009a
                    009B    329 _TB8	=	0x009b
                    009C    330 _REN	=	0x009c
                    009D    331 _SM2	=	0x009d
                    009E    332 _SM1	=	0x009e
                    009F    333 _SM0	=	0x009f
                    00A0    334 _P2_0	=	0x00a0
                    00A1    335 _P2_1	=	0x00a1
                    00A2    336 _P2_2	=	0x00a2
                    00A3    337 _P2_3	=	0x00a3
                    00A4    338 _P2_4	=	0x00a4
                    00A5    339 _P2_5	=	0x00a5
                    00A6    340 _P2_6	=	0x00a6
                    00A7    341 _P2_7	=	0x00a7
                    00A8    342 _EX0	=	0x00a8
                    00A9    343 _ET0	=	0x00a9
                    00AA    344 _EX1	=	0x00aa
                    00AB    345 _ET1	=	0x00ab
                    00AC    346 _ES	=	0x00ac
                    00AF    347 _EA	=	0x00af
                    00B0    348 _P3_0	=	0x00b0
                    00B1    349 _P3_1	=	0x00b1
                    00B2    350 _P3_2	=	0x00b2
                    00B3    351 _P3_3	=	0x00b3
                    00B4    352 _P3_4	=	0x00b4
                    00B5    353 _P3_5	=	0x00b5
                    00B6    354 _P3_6	=	0x00b6
                    00B7    355 _P3_7	=	0x00b7
                    00B0    356 _RXD	=	0x00b0
                    00B1    357 _TXD	=	0x00b1
                    00B2    358 _INT0	=	0x00b2
                    00B3    359 _INT1	=	0x00b3
                    00B4    360 _T0	=	0x00b4
                    00B5    361 _T1	=	0x00b5
                    00B6    362 _WR	=	0x00b6
                    00B7    363 _RD	=	0x00b7
                    00B8    364 _PX0	=	0x00b8
                    00B9    365 _PT0	=	0x00b9
                    00BA    366 _PX1	=	0x00ba
                    00BB    367 _PT1	=	0x00bb
                    00BC    368 _PS	=	0x00bc
                    00D0    369 _P	=	0x00d0
                    00D1    370 _F1	=	0x00d1
                    00D2    371 _OV	=	0x00d2
                    00D3    372 _RS0	=	0x00d3
                    00D4    373 _RS1	=	0x00d4
                    00D5    374 _F0	=	0x00d5
                    00D6    375 _AC	=	0x00d6
                    00D7    376 _CY	=	0x00d7
                    00AD    377 _ET2	=	0x00ad
                    00BD    378 _PT2	=	0x00bd
                    00C8    379 _T2CON_0	=	0x00c8
                    00C9    380 _T2CON_1	=	0x00c9
                    00CA    381 _T2CON_2	=	0x00ca
                    00CB    382 _T2CON_3	=	0x00cb
                    00CC    383 _T2CON_4	=	0x00cc
                    00CD    384 _T2CON_5	=	0x00cd
                    00CE    385 _T2CON_6	=	0x00ce
                    00CF    386 _T2CON_7	=	0x00cf
                    00C8    387 _CP_RL2	=	0x00c8
                    00C9    388 _C_T2	=	0x00c9
                    00CA    389 _TR2	=	0x00ca
                    00CB    390 _EXEN2	=	0x00cb
                    00CC    391 _TCLK	=	0x00cc
                    00CD    392 _RCLK	=	0x00cd
                    00CE    393 _EXF2	=	0x00ce
                    00CF    394 _TF2	=	0x00cf
                    00DF    395 _CF	=	0x00df
                    00DE    396 _CR	=	0x00de
                    00DC    397 _CCF4	=	0x00dc
                    00DB    398 _CCF3	=	0x00db
                    00DA    399 _CCF2	=	0x00da
                    00D9    400 _CCF1	=	0x00d9
                    00D8    401 _CCF0	=	0x00d8
                    00AE    402 _EC	=	0x00ae
                    00BE    403 _PPCL	=	0x00be
                    00BD    404 _PT2L	=	0x00bd
                    00BC    405 _PLS	=	0x00bc
                    00BB    406 _PT1L	=	0x00bb
                    00BA    407 _PX1L	=	0x00ba
                    00B9    408 _PT0L	=	0x00b9
                    00B8    409 _PX0L	=	0x00b8
                    00C0    410 _P4_0	=	0x00c0
                    00C1    411 _P4_1	=	0x00c1
                    00C2    412 _P4_2	=	0x00c2
                    00C3    413 _P4_3	=	0x00c3
                    00C4    414 _P4_4	=	0x00c4
                    00C5    415 _P4_5	=	0x00c5
                    00C6    416 _P4_6	=	0x00c6
                    00C7    417 _P4_7	=	0x00c7
                    00D8    418 _P5_0	=	0x00d8
                    00D9    419 _P5_1	=	0x00d9
                    00DA    420 _P5_2	=	0x00da
                    00DB    421 _P5_3	=	0x00db
                    00DC    422 _P5_4	=	0x00dc
                    00DD    423 _P5_5	=	0x00dd
                    00DE    424 _P5_6	=	0x00de
                    00DF    425 _P5_7	=	0x00df
                            426 ;--------------------------------------------------------
                            427 ; overlayable register banks
                            428 ;--------------------------------------------------------
                            429 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     430 	.ds 8
                            431 ;--------------------------------------------------------
                            432 ; internal ram data
                            433 ;--------------------------------------------------------
                            434 	.area DSEG    (DATA)
   0000                     435 _main_sloc0_1_0:
   0000                     436 	.ds 2
   0002                     437 _main_sloc1_1_0:
   0002                     438 	.ds 2
   0004                     439 _timer_isr_sloc0_1_0:
   0004                     440 	.ds 2
   0006                     441 _timer_isr_sloc1_1_0:
   0006                     442 	.ds 2
                            443 ;--------------------------------------------------------
                            444 ; overlayable items in internal ram 
                            445 ;--------------------------------------------------------
                            446 	.area OSEG    (OVR,DATA)
                            447 ;--------------------------------------------------------
                            448 ; Stack segment in internal ram 
                            449 ;--------------------------------------------------------
                            450 	.area	SSEG	(DATA)
   0000                     451 __start__stack:
   0000                     452 	.ds	1
                            453 
                            454 ;--------------------------------------------------------
                            455 ; indirectly addressable internal ram data
                            456 ;--------------------------------------------------------
                            457 	.area ISEG    (DATA)
                            458 ;--------------------------------------------------------
                            459 ; bit data
                            460 ;--------------------------------------------------------
                            461 	.area BSEG    (BIT)
                            462 ;--------------------------------------------------------
                            463 ; paged external ram data
                            464 ;--------------------------------------------------------
                            465 	.area PSEG    (PAG,XDATA)
                            466 ;--------------------------------------------------------
                            467 ; external ram data
                            468 ;--------------------------------------------------------
                            469 	.area XSEG    (XDATA)
   0000                     470 _ms::
   0000                     471 	.ds 1
   0001                     472 _sec::
   0001                     473 	.ds 1
   0002                     474 _mi::
   0002                     475 	.ds 1
   0003                     476 _cnt::
   0003                     477 	.ds 3
   0006                     478 _nms::
   0006                     479 	.ds 6
   000C                     480 _nsec::
   000C                     481 	.ds 6
   0012                     482 _nmi::
   0012                     483 	.ds 6
   0018                     484 _io_counter::
   0018                     485 	.ds 2
   001A                     486 _main_c_1_1:
   001A                     487 	.ds 4
   001E                     488 _main_d_1_1:
   001E                     489 	.ds 5
   0023                     490 _main_name_1_1:
   0023                     491 	.ds 3
   0026                     492 _main_b_1_1:
   0026                     493 	.ds 5
   002B                     494 _main_flag_1_1:
   002B                     495 	.ds 2
   002D                     496 _main_row_val_1_1:
   002D                     497 	.ds 8
   0035                     498 _main_disp_1_1:
   0035                     499 	.ds 8
                            500 ;--------------------------------------------------------
                            501 ; external initialized ram data
                            502 ;--------------------------------------------------------
                            503 	.area XISEG   (XDATA)
   0000                     504 _flag::
   0000                     505 	.ds 1
   0001                     506 _timers::
   0001                     507 	.ds 2
                            508 	.area HOME    (CODE)
                            509 	.area GSINIT0 (CODE)
                            510 	.area GSINIT1 (CODE)
                            511 	.area GSINIT2 (CODE)
                            512 	.area GSINIT3 (CODE)
                            513 	.area GSINIT4 (CODE)
                            514 	.area GSINIT5 (CODE)
                            515 	.area GSINIT  (CODE)
                            516 	.area GSFINAL (CODE)
                            517 	.area CSEG    (CODE)
                            518 ;--------------------------------------------------------
                            519 ; interrupt vector 
                            520 ;--------------------------------------------------------
                            521 	.area HOME    (CODE)
   0000                     522 __interrupt_vect:
   0000 02s00r00            523 	ljmp	__sdcc_gsinit_startup
   0003 02s0FrE7            524 	ljmp	_ext_zero
   0006                     525 	.ds	5
   000B 02s10r61            526 	ljmp	_timer_isr
                            527 ;--------------------------------------------------------
                            528 ; global & static initialisations
                            529 ;--------------------------------------------------------
                            530 	.area HOME    (CODE)
                            531 	.area GSINIT  (CODE)
                            532 	.area GSFINAL (CODE)
                            533 	.area GSINIT  (CODE)
                            534 	.globl __sdcc_gsinit_startup
                            535 	.globl __sdcc_program_startup
                            536 	.globl __start__stack
                            537 	.globl __mcs51_genXINIT
                            538 	.globl __mcs51_genXRAMCLEAR
                            539 	.globl __mcs51_genRAMCLEAR
                            540 	.area GSFINAL (CODE)
   0000 02s00r00            541 	ljmp	__sdcc_program_startup
                            542 ;--------------------------------------------------------
                            543 ; Home
                            544 ;--------------------------------------------------------
                            545 	.area HOME    (CODE)
                            546 	.area CSEG    (CODE)
   0000                     547 __sdcc_program_startup:
   0000 12s00r0F            548 	lcall	_main
                            549 ;	return from main will lock up
   0003 80 FE               550 	sjmp .
                            551 ;--------------------------------------------------------
                            552 ; code
                            553 ;--------------------------------------------------------
                            554 	.area CSEG    (CODE)
                            555 ;------------------------------------------------------------
                            556 ;Allocation info for local variables in function '_sdcc_external_startup'
                            557 ;------------------------------------------------------------
                            558 ;------------------------------------------------------------
                            559 ;	main.c:31: _sdcc_external_startup()
                            560 ;	-----------------------------------------
                            561 ;	 function _sdcc_external_startup
                            562 ;	-----------------------------------------
   0005                     563 __sdcc_external_startup:
                    0002    564 	ar2 = 0x02
                    0003    565 	ar3 = 0x03
                    0004    566 	ar4 = 0x04
                    0005    567 	ar5 = 0x05
                    0006    568 	ar6 = 0x06
                    0007    569 	ar7 = 0x07
                    0000    570 	ar0 = 0x00
                    0001    571 	ar1 = 0x01
                            572 ;	main.c:33: AUXR |= 0x0C;
                            573 ;	genOr
   0005 43 8E 0C            574 	orl	_AUXR,#0x0C
                            575 ;	main.c:34: CKCKON0 = 0xFB;
                            576 ;	genAssign
   0008 75 8F FB            577 	mov	_CKCKON0,#0xFB
                            578 ;	main.c:35: return 0;
                            579 ;	genRet
                            580 ;	Peephole 182.b	used 16 bit load of dptr
   000B 90 00 00            581 	mov	dptr,#0x0000
                            582 ;	Peephole 300	removed redundant label 00101$
   000E 22                  583 	ret
                            584 ;------------------------------------------------------------
                            585 ;Allocation info for local variables in function 'main'
                            586 ;------------------------------------------------------------
                            587 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                            588 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                            589 ;store                     Allocated with name '_main_store_1_1'
                            590 ;c                         Allocated with name '_main_c_1_1'
                            591 ;d                         Allocated with name '_main_d_1_1'
                            592 ;name                      Allocated with name '_main_name_1_1'
                            593 ;b                         Allocated with name '_main_b_1_1'
                            594 ;num                       Allocated with name '_main_num_1_1'
                            595 ;i                         Allocated with name '_main_i_1_1'
                            596 ;j                         Allocated with name '_main_j_1_1'
                            597 ;k                         Allocated with name '_main_k_1_1'
                            598 ;page                      Allocated with name '_main_page_1_1'
                            599 ;addr                      Allocated with name '_main_addr_1_1'
                            600 ;flag                      Allocated with name '_main_flag_1_1'
                            601 ;dat                       Allocated with name '_main_dat_1_1'
                            602 ;time                      Allocated with name '_main_time_1_1'
                            603 ;row_val                   Allocated with name '_main_row_val_1_1'
                            604 ;ccode                     Allocated with name '_main_ccode_1_1'
                            605 ;rd                        Allocated with name '_main_rd_1_1'
                            606 ;disp                      Allocated with name '_main_disp_1_1'
                            607 ;------------------------------------------------------------
                            608 ;	main.c:40: void main(void)
                            609 ;	-----------------------------------------
                            610 ;	 function main
                            611 ;	-----------------------------------------
   000F                     612 _main:
                            613 ;	main.c:42: char store,c[4],d[5],name[3]="012",b[5];        // c,d,b are used for taking input from the user
                            614 ;	genPointerSet
                            615 ;     genFarPointerSet
   000F 90s00r23            616 	mov	dptr,#_main_name_1_1
   0012 74 30               617 	mov	a,#0x30
   0014 F0                  618 	movx	@dptr,a
                            619 ;	genPointerSet
                            620 ;     genFarPointerSet
   0015 90s00r24            621 	mov	dptr,#(_main_name_1_1 + 0x0001)
   0018 74 31               622 	mov	a,#0x31
   001A F0                  623 	movx	@dptr,a
                            624 ;	genPointerSet
                            625 ;     genFarPointerSet
   001B 90s00r25            626 	mov	dptr,#(_main_name_1_1 + 0x0002)
   001E 74 32               627 	mov	a,#0x32
   0020 F0                  628 	movx	@dptr,a
                            629 ;	main.c:47: lcd_init();                                     // Initilaize LCD
                            630 ;	genCall
   0021 12s00r00            631 	lcall	_lcd_init
                            632 ;	main.c:48: uart_init()	;                                   // Initilalize UART
                            633 ;	genCall
   0024 12s00r00            634 	lcall	_uart_init
                            635 ;	main.c:49: timer_init();                                   // Initialize the Timer
                            636 ;	genCall
   0027 12s00r00            637 	lcall	_timer_init
                            638 ;	main.c:52: P1_0=0;
                            639 ;	genAssign
   002A C2 90               640 	clr	_P1_0
                            641 ;	main.c:53: eereset();                                      // EEPROM is reset at every powerup
                            642 ;	genCall
   002C 12s00r00            643 	lcall	_eereset
                            644 ;	main.c:56: lcdgotoxy(4,1);
                            645 ;	genAssign
   002F 90s00r00            646 	mov	dptr,#_lcdgotoxy_PARM_2
   0032 74 01               647 	mov	a,#0x01
   0034 F0                  648 	movx	@dptr,a
                            649 ;	genCall
   0035 75 82 04            650 	mov	dpl,#0x04
   0038 12s00r00            651 	lcall	_lcdgotoxy
                            652 ;	main.c:57: lcdputstr("Count-0");
                            653 ;	genCall
                            654 ;	Peephole 182.a	used 16 bit load of DPTR
   003B 90s00r00            655 	mov	dptr,#__str_1
   003E 75 F0 80            656 	mov	b,#0x80
   0041 12s00r00            657 	lcall	_lcdputstr
                            658 ;	main.c:59: lcdgotoxy(4,15);
                            659 ;	genAssign
   0044 90s00r00            660 	mov	dptr,#_lcdgotoxy_PARM_2
   0047 74 0F               661 	mov	a,#0x0F
   0049 F0                  662 	movx	@dptr,a
                            663 ;	genCall
   004A 75 82 04            664 	mov	dpl,#0x04
   004D 12s00r00            665 	lcall	_lcdgotoxy
                            666 ;	main.c:60: lcdputch('.');
                            667 ;	genCall
   0050 75 82 2E            668 	mov	dpl,#0x2E
   0053 12s00r00            669 	lcall	_lcdputch
                            670 ;	main.c:61: lcdgotoxy(4,12);
                            671 ;	genAssign
   0056 90s00r00            672 	mov	dptr,#_lcdgotoxy_PARM_2
   0059 74 0C               673 	mov	a,#0x0C
   005B F0                  674 	movx	@dptr,a
                            675 ;	genCall
   005C 75 82 04            676 	mov	dpl,#0x04
   005F 12s00r00            677 	lcall	_lcdgotoxy
                            678 ;	main.c:62: lcdputch(':');
                            679 ;	genCall
   0062 75 82 3A            680 	mov	dpl,#0x3A
   0065 12s00r00            681 	lcall	_lcdputch
                            682 ;	main.c:63: IOEX_WriteByte(0x01);
                            683 ;	genCall
   0068 75 82 01            684 	mov	dpl,#0x01
   006B 12s00r00            685 	lcall	_IOEX_WriteByte
                            686 ;	main.c:66: for(i=0;i<3;i++)
                            687 ;	genAssign
   006E 7A 00               688 	mov	r2,#0x00
   0070 7B 00               689 	mov	r3,#0x00
   0072                     690 00294$:
                            691 ;	genCmpLt
                            692 ;	genCmp
   0072 C3                  693 	clr	c
   0073 EA                  694 	mov	a,r2
   0074 94 03               695 	subb	a,#0x03
   0076 EB                  696 	mov	a,r3
   0077 64 80               697 	xrl	a,#0x80
   0079 94 80               698 	subb	a,#0x80
                            699 ;	genIfxJump
   007B 40 03               700 	jc	00412$
   007D 02s01r61            701 	ljmp	00297$
   0080                     702 00412$:
                            703 ;	main.c:68: EA=0;
                            704 ;	genAssign
   0080 C2 AF               705 	clr	_EA
                            706 ;	main.c:69: countdown_alarm(0,0,0,2,i);     // Display Initial Status of the C/D timer as 0.0.0
                            707 ;	genAssign
   0082 90s00r00            708 	mov	dptr,#_countdown_alarm_PARM_2
   0085 E4                  709 	clr	a
   0086 F0                  710 	movx	@dptr,a
   0087 A3                  711 	inc	dptr
   0088 F0                  712 	movx	@dptr,a
                            713 ;	genAssign
   0089 90s00r00            714 	mov	dptr,#_countdown_alarm_PARM_3
   008C E4                  715 	clr	a
   008D F0                  716 	movx	@dptr,a
   008E A3                  717 	inc	dptr
   008F F0                  718 	movx	@dptr,a
                            719 ;	genAssign
   0090 90s00r00            720 	mov	dptr,#_countdown_alarm_PARM_4
   0093 74 02               721 	mov	a,#0x02
   0095 F0                  722 	movx	@dptr,a
                            723 ;	genAssign
   0096 90s00r00            724 	mov	dptr,#_countdown_alarm_PARM_5
   0099 EA                  725 	mov	a,r2
   009A F0                  726 	movx	@dptr,a
   009B A3                  727 	inc	dptr
   009C EB                  728 	mov	a,r3
   009D F0                  729 	movx	@dptr,a
                            730 ;	genCall
                            731 ;	Peephole 182.b	used 16 bit load of dptr
   009E 90 00 00            732 	mov	dptr,#0x0000
   00A1 C0 02               733 	push	ar2
   00A3 C0 03               734 	push	ar3
   00A5 12s00r00            735 	lcall	_countdown_alarm
   00A8 D0 03               736 	pop	ar3
   00AA D0 02               737 	pop	ar2
                            738 ;	main.c:70: lcdgotoxy(i+1,1);
                            739 ;	genCast
   00AC 8A 04               740 	mov	ar4,r2
                            741 ;	genPlus
                            742 ;     genPlusIncr
   00AE 0C                  743 	inc	r4
                            744 ;	genAssign
   00AF 90s00r00            745 	mov	dptr,#_lcdgotoxy_PARM_2
   00B2 74 01               746 	mov	a,#0x01
   00B4 F0                  747 	movx	@dptr,a
                            748 ;	genCall
   00B5 8C 82               749 	mov	dpl,r4
   00B7 C0 02               750 	push	ar2
   00B9 C0 03               751 	push	ar3
   00BB C0 04               752 	push	ar4
   00BD 12s00r00            753 	lcall	_lcdgotoxy
   00C0 D0 04               754 	pop	ar4
   00C2 D0 03               755 	pop	ar3
   00C4 D0 02               756 	pop	ar2
                            757 ;	main.c:71: lcdputstr("Timer");
                            758 ;	genCall
                            759 ;	Peephole 182.a	used 16 bit load of DPTR
   00C6 90s00r08            760 	mov	dptr,#__str_2
   00C9 75 F0 80            761 	mov	b,#0x80
   00CC C0 02               762 	push	ar2
   00CE C0 03               763 	push	ar3
   00D0 C0 04               764 	push	ar4
   00D2 12s00r00            765 	lcall	_lcdputstr
   00D5 D0 04               766 	pop	ar4
   00D7 D0 03               767 	pop	ar3
   00D9 D0 02               768 	pop	ar2
                            769 ;	main.c:72: lcdputch(name[i]);
                            770 ;	genPlus
                            771 ;	Peephole 236.g	used r2 instead of ar2
   00DB EA                  772 	mov	a,r2
   00DC 24r23               773 	add	a,#_main_name_1_1
   00DE F5 82               774 	mov	dpl,a
                            775 ;	Peephole 236.g	used r3 instead of ar3
   00E0 EB                  776 	mov	a,r3
   00E1 34s00               777 	addc	a,#(_main_name_1_1 >> 8)
   00E3 F5 83               778 	mov	dph,a
                            779 ;	genPointerGet
                            780 ;	genFarPointerGet
   00E5 E0                  781 	movx	a,@dptr
                            782 ;	genCall
   00E6 FD                  783 	mov	r5,a
                            784 ;	Peephole 244.c	loading dpl from a instead of r5
   00E7 F5 82               785 	mov	dpl,a
   00E9 C0 02               786 	push	ar2
   00EB C0 03               787 	push	ar3
   00ED C0 04               788 	push	ar4
   00EF 12s00r00            789 	lcall	_lcdputch
   00F2 D0 04               790 	pop	ar4
   00F4 D0 03               791 	pop	ar3
   00F6 D0 02               792 	pop	ar2
                            793 ;	main.c:73: lcdputstr("-D");
                            794 ;	genCall
                            795 ;	Peephole 182.a	used 16 bit load of DPTR
   00F8 90s00r0E            796 	mov	dptr,#__str_3
   00FB 75 F0 80            797 	mov	b,#0x80
   00FE C0 02               798 	push	ar2
   0100 C0 03               799 	push	ar3
   0102 C0 04               800 	push	ar4
   0104 12s00r00            801 	lcall	_lcdputstr
   0107 D0 04               802 	pop	ar4
   0109 D0 03               803 	pop	ar3
   010B D0 02               804 	pop	ar2
                            805 ;	main.c:74: lcdgotoxy(i+1,12);
                            806 ;	genAssign
   010D 90s00r00            807 	mov	dptr,#_lcdgotoxy_PARM_2
   0110 74 0C               808 	mov	a,#0x0C
   0112 F0                  809 	movx	@dptr,a
                            810 ;	genCall
   0113 8C 82               811 	mov	dpl,r4
   0115 C0 02               812 	push	ar2
   0117 C0 03               813 	push	ar3
   0119 C0 04               814 	push	ar4
   011B 12s00r00            815 	lcall	_lcdgotoxy
   011E D0 04               816 	pop	ar4
   0120 D0 03               817 	pop	ar3
   0122 D0 02               818 	pop	ar2
                            819 ;	main.c:75: lcdputch(':');
                            820 ;	genCall
   0124 75 82 3A            821 	mov	dpl,#0x3A
   0127 C0 02               822 	push	ar2
   0129 C0 03               823 	push	ar3
   012B C0 04               824 	push	ar4
   012D 12s00r00            825 	lcall	_lcdputch
   0130 D0 04               826 	pop	ar4
   0132 D0 03               827 	pop	ar3
   0134 D0 02               828 	pop	ar2
                            829 ;	main.c:76: lcdgotoxy(i+1,15);
                            830 ;	genAssign
   0136 90s00r00            831 	mov	dptr,#_lcdgotoxy_PARM_2
   0139 74 0F               832 	mov	a,#0x0F
   013B F0                  833 	movx	@dptr,a
                            834 ;	genCall
   013C 8C 82               835 	mov	dpl,r4
   013E C0 02               836 	push	ar2
   0140 C0 03               837 	push	ar3
   0142 12s00r00            838 	lcall	_lcdgotoxy
   0145 D0 03               839 	pop	ar3
   0147 D0 02               840 	pop	ar2
                            841 ;	main.c:77: lcdputch('.');
                            842 ;	genCall
   0149 75 82 2E            843 	mov	dpl,#0x2E
   014C C0 02               844 	push	ar2
   014E C0 03               845 	push	ar3
   0150 12s00r00            846 	lcall	_lcdputch
   0153 D0 03               847 	pop	ar3
   0155 D0 02               848 	pop	ar2
                            849 ;	main.c:80: EA=1;
                            850 ;	genAssign
   0157 D2 AF               851 	setb	_EA
                            852 ;	main.c:66: for(i=0;i<3;i++)
                            853 ;	genPlus
                            854 ;     genPlusIncr
   0159 0A                  855 	inc	r2
   015A BA 00 01            856 	cjne	r2,#0x00,00413$
   015D 0B                  857 	inc	r3
   015E                     858 00413$:
   015E 02s00r72            859 	ljmp	00294$
   0161                     860 00297$:
                            861 ;	main.c:84: printf_tiny("\n\n\r\t\t\t\t\t******** Clock Control Commands ********\n\n\r\t1. Stop Clock \t\t\t\t\t\t2. Restart Clock \t\t\t3. Reset Clock\n\r\t4. Select Count-Down Timer and Value \t\t\t5. Timer Enable \t\t\t6. Timer Disable ");
                            862 ;	genIpush
   0161 74r11               863 	mov	a,#__str_4
   0163 C0 E0               864 	push	acc
   0165 74s00               865 	mov	a,#(__str_4 >> 8)
   0167 C0 E0               866 	push	acc
                            867 ;	genCall
   0169 12s00r00            868 	lcall	_printf_tiny
   016C 15 81               869 	dec	sp
   016E 15 81               870 	dec	sp
                            871 ;	main.c:85: printf_tiny("\n\n\n\r\t\t\t\t\t******** LCD Commands ********\n\n\r\t7. Create Custom Character\t\t\t8. Display Custom Character\t\t\t'c'. CGRAM Dump\t\t\t'd'. DDRAM Dump\n\r\t'l'.EEPROM Content on LCD Display\t\t'q'. Clear LCD Display");
                            872 ;	genIpush
   0170 74rCB               873 	mov	a,#__str_5
   0172 C0 E0               874 	push	acc
   0174 74s00               875 	mov	a,#(__str_5 >> 8)
   0176 C0 E0               876 	push	acc
                            877 ;	genCall
   0178 12s00r00            878 	lcall	_printf_tiny
   017B 15 81               879 	dec	sp
   017D 15 81               880 	dec	sp
                            881 ;	main.c:86: printf_tiny("\n\n\n\r\t\t\t\t\t******** IO Expander Control Commands ********\n\n\r\t'x'. Reset Counter\t\t\t\t'i'. Configure IO Pins\t\t\t\t's'. Status of IO_Expander");
                            882 ;	genIpush
   017F 74r8F               883 	mov	a,#__str_6
   0181 C0 E0               884 	push	acc
   0183 74s01               885 	mov	a,#(__str_6 >> 8)
   0185 C0 E0               886 	push	acc
                            887 ;	genCall
   0187 12s00r00            888 	lcall	_printf_tiny
   018A 15 81               889 	dec	sp
   018C 15 81               890 	dec	sp
                            891 ;	main.c:87: printf_tiny("\n\n\n\r\t\t\t\t\t******** EEPROM Control Commands ******** \n\n\r\t'w'. EEPROM Write \t\t\t'r'. EEPROM Read \t\t\t\t'h'. HEX Dump\t\n\r\t");
                            892 ;	genIpush
   018E 74r15               893 	mov	a,#__str_7
   0190 C0 E0               894 	push	acc
   0192 74s02               895 	mov	a,#(__str_7 >> 8)
   0194 C0 E0               896 	push	acc
                            897 ;	genCall
   0196 12s00r00            898 	lcall	_printf_tiny
   0199 15 81               899 	dec	sp
   019B 15 81               900 	dec	sp
                            901 ;	main.c:88: printf_tiny("\n\n\r\t\t\t\t\t******** Demo Commands ******** \n\n\r\t'y'. Watchdog Demo \t\t\t'9'. LOGO Creation Demo \t\t\t't'EEPROM Time Measure\n\r\t'b'. EEPROM Block Fill ");
                            902 ;	genIpush
   019D 74r88               903 	mov	a,#__str_8
   019F C0 E0               904 	push	acc
   01A1 74s02               905 	mov	a,#(__str_8 >> 8)
   01A3 C0 E0               906 	push	acc
                            907 ;	genCall
   01A5 12s00r00            908 	lcall	_printf_tiny
   01A8 15 81               909 	dec	sp
   01AA 15 81               910 	dec	sp
                            911 ;	main.c:89: while(1)
   01AC                     912 00292$:
                            913 ;	genIfx
                            914 ;	genIfxJump
                            915 ;	Peephole 108.d	removed ljmp by inverse jump logic
   01AC 30 98 FD            916 	jnb	_RI,00292$
                            917 ;	Peephole 300	removed redundant label 00414$
                            918 ;	main.c:95: store=getchar();
                            919 ;	genCall
   01AF 12s00r00            920 	lcall	_getchar
                            921 ;	main.c:96: putchar(store);
                            922 ;	genCall
   01B2 AA 82               923 	mov  r2,dpl
                            924 ;	Peephole 177.a	removed redundant mov
   01B4 C0 02               925 	push	ar2
   01B6 12s00r00            926 	lcall	_putchar
   01B9 D0 02               927 	pop	ar2
                            928 ;	main.c:97: if(store=='1'){printf_tiny("\n\n\r\t\t ******  Stop Clock  *****"); }
                            929 ;	genCmpEq
                            930 ;	gencjne
                            931 ;	gencjneshort
                            932 ;	Peephole 241.d	optimized compare
   01BB E4                  933 	clr	a
   01BC BA 31 01            934 	cjne	r2,#0x31,00415$
   01BF 04                  935 	inc	a
   01C0                     936 00415$:
                            937 ;	Peephole 300	removed redundant label 00416$
                            938 ;	genIfx
   01C0 FB                  939 	mov	r3,a
                            940 ;	Peephole 105	removed redundant mov
                            941 ;	genIfxJump
                            942 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01C1 60 1A               943 	jz	00163$
                            944 ;	Peephole 300	removed redundant label 00417$
                            945 ;	genIpush
   01C3 C0 02               946 	push	ar2
   01C5 C0 03               947 	push	ar3
   01C7 74r16               948 	mov	a,#__str_9
   01C9 C0 E0               949 	push	acc
   01CB 74s03               950 	mov	a,#(__str_9 >> 8)
   01CD C0 E0               951 	push	acc
                            952 ;	genCall
   01CF 12s00r00            953 	lcall	_printf_tiny
   01D2 15 81               954 	dec	sp
   01D4 15 81               955 	dec	sp
   01D6 D0 03               956 	pop	ar3
   01D8 D0 02               957 	pop	ar2
   01DA 02s04r95            958 	ljmp	00164$
   01DD                     959 00163$:
                            960 ;	main.c:98: else if(store=='2' && timers<2){printf_tiny("\n\n\r\t\t ******  Restart Clock  ******"); }
                            961 ;	genCmpEq
                            962 ;	gencjneshort
                            963 ;	Peephole 112.b	changed ljmp to sjmp
                            964 ;	Peephole 198.b	optimized misc jump sequence
   01DD BA 32 2B            965 	cjne	r2,#0x32,00159$
                            966 ;	Peephole 200.b	removed redundant sjmp
                            967 ;	Peephole 300	removed redundant label 00418$
                            968 ;	Peephole 300	removed redundant label 00419$
                            969 ;	genAssign
   01E0 90s00r01            970 	mov	dptr,#_timers
   01E3 E0                  971 	movx	a,@dptr
   01E4 FC                  972 	mov	r4,a
   01E5 A3                  973 	inc	dptr
   01E6 E0                  974 	movx	a,@dptr
   01E7 FD                  975 	mov	r5,a
                            976 ;	genCmpLt
                            977 ;	genCmp
   01E8 C3                  978 	clr	c
   01E9 EC                  979 	mov	a,r4
   01EA 94 02               980 	subb	a,#0x02
   01EC ED                  981 	mov	a,r5
   01ED 94 00               982 	subb	a,#0x00
                            983 ;	genIfxJump
                            984 ;	Peephole 108.a	removed ljmp by inverse jump logic
   01EF 50 1A               985 	jnc	00159$
                            986 ;	Peephole 300	removed redundant label 00420$
                            987 ;	genIpush
   01F1 C0 02               988 	push	ar2
   01F3 C0 03               989 	push	ar3
   01F5 74r36               990 	mov	a,#__str_10
   01F7 C0 E0               991 	push	acc
   01F9 74s03               992 	mov	a,#(__str_10 >> 8)
   01FB C0 E0               993 	push	acc
                            994 ;	genCall
   01FD 12s00r00            995 	lcall	_printf_tiny
   0200 15 81               996 	dec	sp
   0202 15 81               997 	dec	sp
   0204 D0 03               998 	pop	ar3
   0206 D0 02               999 	pop	ar2
   0208 02s04r95           1000 	ljmp	00164$
   020B                    1001 00159$:
                           1002 ;	main.c:99: else if(store=='3' && timers<2){printf_tiny("\n\n\r\t\t ******  Reset Clock  ******"); }
                           1003 ;	genCmpEq
                           1004 ;	gencjneshort
                           1005 ;	Peephole 112.b	changed ljmp to sjmp
                           1006 ;	Peephole 198.b	optimized misc jump sequence
   020B BA 33 2B           1007 	cjne	r2,#0x33,00155$
                           1008 ;	Peephole 200.b	removed redundant sjmp
                           1009 ;	Peephole 300	removed redundant label 00421$
                           1010 ;	Peephole 300	removed redundant label 00422$
                           1011 ;	genAssign
   020E 90s00r01           1012 	mov	dptr,#_timers
   0211 E0                 1013 	movx	a,@dptr
   0212 FC                 1014 	mov	r4,a
   0213 A3                 1015 	inc	dptr
   0214 E0                 1016 	movx	a,@dptr
   0215 FD                 1017 	mov	r5,a
                           1018 ;	genCmpLt
                           1019 ;	genCmp
   0216 C3                 1020 	clr	c
   0217 EC                 1021 	mov	a,r4
   0218 94 02              1022 	subb	a,#0x02
   021A ED                 1023 	mov	a,r5
   021B 94 00              1024 	subb	a,#0x00
                           1025 ;	genIfxJump
                           1026 ;	Peephole 108.a	removed ljmp by inverse jump logic
   021D 50 1A              1027 	jnc	00155$
                           1028 ;	Peephole 300	removed redundant label 00423$
                           1029 ;	genIpush
   021F C0 02              1030 	push	ar2
   0221 C0 03              1031 	push	ar3
   0223 74r5A              1032 	mov	a,#__str_11
   0225 C0 E0              1033 	push	acc
   0227 74s03              1034 	mov	a,#(__str_11 >> 8)
   0229 C0 E0              1035 	push	acc
                           1036 ;	genCall
   022B 12s00r00           1037 	lcall	_printf_tiny
   022E 15 81              1038 	dec	sp
   0230 15 81              1039 	dec	sp
   0232 D0 03              1040 	pop	ar3
   0234 D0 02              1041 	pop	ar2
   0236 02s04r95           1042 	ljmp	00164$
   0239                    1043 00155$:
                           1044 ;	main.c:100: else if(store=='4'&& timers<2){printf_tiny("\n\n\r\t\t ******  Load Counter Value ******"); }
                           1045 ;	genCmpEq
                           1046 ;	gencjneshort
                           1047 ;	Peephole 112.b	changed ljmp to sjmp
                           1048 ;	Peephole 198.b	optimized misc jump sequence
   0239 BA 34 2B           1049 	cjne	r2,#0x34,00151$
                           1050 ;	Peephole 200.b	removed redundant sjmp
                           1051 ;	Peephole 300	removed redundant label 00424$
                           1052 ;	Peephole 300	removed redundant label 00425$
                           1053 ;	genAssign
   023C 90s00r01           1054 	mov	dptr,#_timers
   023F E0                 1055 	movx	a,@dptr
   0240 FC                 1056 	mov	r4,a
   0241 A3                 1057 	inc	dptr
   0242 E0                 1058 	movx	a,@dptr
   0243 FD                 1059 	mov	r5,a
                           1060 ;	genCmpLt
                           1061 ;	genCmp
   0244 C3                 1062 	clr	c
   0245 EC                 1063 	mov	a,r4
   0246 94 02              1064 	subb	a,#0x02
   0248 ED                 1065 	mov	a,r5
   0249 94 00              1066 	subb	a,#0x00
                           1067 ;	genIfxJump
                           1068 ;	Peephole 108.a	removed ljmp by inverse jump logic
   024B 50 1A              1069 	jnc	00151$
                           1070 ;	Peephole 300	removed redundant label 00426$
                           1071 ;	genIpush
   024D C0 02              1072 	push	ar2
   024F C0 03              1073 	push	ar3
   0251 74r7C              1074 	mov	a,#__str_12
   0253 C0 E0              1075 	push	acc
   0255 74s03              1076 	mov	a,#(__str_12 >> 8)
   0257 C0 E0              1077 	push	acc
                           1078 ;	genCall
   0259 12s00r00           1079 	lcall	_printf_tiny
   025C 15 81              1080 	dec	sp
   025E 15 81              1081 	dec	sp
   0260 D0 03              1082 	pop	ar3
   0262 D0 02              1083 	pop	ar2
   0264 02s04r95           1084 	ljmp	00164$
   0267                    1085 00151$:
                           1086 ;	main.c:101: else if(store=='5' && timers<2){printf_tiny("\n\n\r\t\t ******  Timer Enable  ******"); }
                           1087 ;	genCmpEq
                           1088 ;	gencjneshort
                           1089 ;	Peephole 112.b	changed ljmp to sjmp
                           1090 ;	Peephole 198.b	optimized misc jump sequence
   0267 BA 35 2B           1091 	cjne	r2,#0x35,00147$
                           1092 ;	Peephole 200.b	removed redundant sjmp
                           1093 ;	Peephole 300	removed redundant label 00427$
                           1094 ;	Peephole 300	removed redundant label 00428$
                           1095 ;	genAssign
   026A 90s00r01           1096 	mov	dptr,#_timers
   026D E0                 1097 	movx	a,@dptr
   026E FC                 1098 	mov	r4,a
   026F A3                 1099 	inc	dptr
   0270 E0                 1100 	movx	a,@dptr
   0271 FD                 1101 	mov	r5,a
                           1102 ;	genCmpLt
                           1103 ;	genCmp
   0272 C3                 1104 	clr	c
   0273 EC                 1105 	mov	a,r4
   0274 94 02              1106 	subb	a,#0x02
   0276 ED                 1107 	mov	a,r5
   0277 94 00              1108 	subb	a,#0x00
                           1109 ;	genIfxJump
                           1110 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0279 50 1A              1111 	jnc	00147$
                           1112 ;	Peephole 300	removed redundant label 00429$
                           1113 ;	genIpush
   027B C0 02              1114 	push	ar2
   027D C0 03              1115 	push	ar3
   027F 74rA4              1116 	mov	a,#__str_13
   0281 C0 E0              1117 	push	acc
   0283 74s03              1118 	mov	a,#(__str_13 >> 8)
   0285 C0 E0              1119 	push	acc
                           1120 ;	genCall
   0287 12s00r00           1121 	lcall	_printf_tiny
   028A 15 81              1122 	dec	sp
   028C 15 81              1123 	dec	sp
   028E D0 03              1124 	pop	ar3
   0290 D0 02              1125 	pop	ar2
   0292 02s04r95           1126 	ljmp	00164$
   0295                    1127 00147$:
                           1128 ;	main.c:102: else if(store=='6' && timers<2){printf_tiny("\n\n\r\t\t ******  Timer Disable  ******"); }
                           1129 ;	genCmpEq
                           1130 ;	gencjneshort
                           1131 ;	Peephole 112.b	changed ljmp to sjmp
                           1132 ;	Peephole 198.b	optimized misc jump sequence
   0295 BA 36 2B           1133 	cjne	r2,#0x36,00143$
                           1134 ;	Peephole 200.b	removed redundant sjmp
                           1135 ;	Peephole 300	removed redundant label 00430$
                           1136 ;	Peephole 300	removed redundant label 00431$
                           1137 ;	genAssign
   0298 90s00r01           1138 	mov	dptr,#_timers
   029B E0                 1139 	movx	a,@dptr
   029C FC                 1140 	mov	r4,a
   029D A3                 1141 	inc	dptr
   029E E0                 1142 	movx	a,@dptr
   029F FD                 1143 	mov	r5,a
                           1144 ;	genCmpLt
                           1145 ;	genCmp
   02A0 C3                 1146 	clr	c
   02A1 EC                 1147 	mov	a,r4
   02A2 94 02              1148 	subb	a,#0x02
   02A4 ED                 1149 	mov	a,r5
   02A5 94 00              1150 	subb	a,#0x00
                           1151 ;	genIfxJump
                           1152 ;	Peephole 108.a	removed ljmp by inverse jump logic
   02A7 50 1A              1153 	jnc	00143$
                           1154 ;	Peephole 300	removed redundant label 00432$
                           1155 ;	genIpush
   02A9 C0 02              1156 	push	ar2
   02AB C0 03              1157 	push	ar3
   02AD 74rC7              1158 	mov	a,#__str_14
   02AF C0 E0              1159 	push	acc
   02B1 74s03              1160 	mov	a,#(__str_14 >> 8)
   02B3 C0 E0              1161 	push	acc
                           1162 ;	genCall
   02B5 12s00r00           1163 	lcall	_printf_tiny
   02B8 15 81              1164 	dec	sp
   02BA 15 81              1165 	dec	sp
   02BC D0 03              1166 	pop	ar3
   02BE D0 02              1167 	pop	ar2
   02C0 02s04r95           1168 	ljmp	00164$
   02C3                    1169 00143$:
                           1170 ;	main.c:103: else if(store=='7' && timers<2){printf_tiny("\n\n\r\t\t ******  Custom Character  ******"); }
                           1171 ;	genCmpEq
                           1172 ;	gencjneshort
                           1173 ;	Peephole 112.b	changed ljmp to sjmp
                           1174 ;	Peephole 198.b	optimized misc jump sequence
   02C3 BA 37 2B           1175 	cjne	r2,#0x37,00139$
                           1176 ;	Peephole 200.b	removed redundant sjmp
                           1177 ;	Peephole 300	removed redundant label 00433$
                           1178 ;	Peephole 300	removed redundant label 00434$
                           1179 ;	genAssign
   02C6 90s00r01           1180 	mov	dptr,#_timers
   02C9 E0                 1181 	movx	a,@dptr
   02CA FC                 1182 	mov	r4,a
   02CB A3                 1183 	inc	dptr
   02CC E0                 1184 	movx	a,@dptr
   02CD FD                 1185 	mov	r5,a
                           1186 ;	genCmpLt
                           1187 ;	genCmp
   02CE C3                 1188 	clr	c
   02CF EC                 1189 	mov	a,r4
   02D0 94 02              1190 	subb	a,#0x02
   02D2 ED                 1191 	mov	a,r5
   02D3 94 00              1192 	subb	a,#0x00
                           1193 ;	genIfxJump
                           1194 ;	Peephole 108.a	removed ljmp by inverse jump logic
   02D5 50 1A              1195 	jnc	00139$
                           1196 ;	Peephole 300	removed redundant label 00435$
                           1197 ;	genIpush
   02D7 C0 02              1198 	push	ar2
   02D9 C0 03              1199 	push	ar3
   02DB 74rEB              1200 	mov	a,#__str_15
   02DD C0 E0              1201 	push	acc
   02DF 74s03              1202 	mov	a,#(__str_15 >> 8)
   02E1 C0 E0              1203 	push	acc
                           1204 ;	genCall
   02E3 12s00r00           1205 	lcall	_printf_tiny
   02E6 15 81              1206 	dec	sp
   02E8 15 81              1207 	dec	sp
   02EA D0 03              1208 	pop	ar3
   02EC D0 02              1209 	pop	ar2
   02EE 02s04r95           1210 	ljmp	00164$
   02F1                    1211 00139$:
                           1212 ;	main.c:104: else if(store=='x' && timers<2){printf_tiny("\n\n\r\t\t ******  Reset Counter  ******"); }
                           1213 ;	genCmpEq
                           1214 ;	gencjneshort
                           1215 ;	Peephole 112.b	changed ljmp to sjmp
                           1216 ;	Peephole 198.b	optimized misc jump sequence
   02F1 BA 78 2B           1217 	cjne	r2,#0x78,00135$
                           1218 ;	Peephole 200.b	removed redundant sjmp
                           1219 ;	Peephole 300	removed redundant label 00436$
                           1220 ;	Peephole 300	removed redundant label 00437$
                           1221 ;	genAssign
   02F4 90s00r01           1222 	mov	dptr,#_timers
   02F7 E0                 1223 	movx	a,@dptr
   02F8 FC                 1224 	mov	r4,a
   02F9 A3                 1225 	inc	dptr
   02FA E0                 1226 	movx	a,@dptr
   02FB FD                 1227 	mov	r5,a
                           1228 ;	genCmpLt
                           1229 ;	genCmp
   02FC C3                 1230 	clr	c
   02FD EC                 1231 	mov	a,r4
   02FE 94 02              1232 	subb	a,#0x02
   0300 ED                 1233 	mov	a,r5
   0301 94 00              1234 	subb	a,#0x00
                           1235 ;	genIfxJump
                           1236 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0303 50 1A              1237 	jnc	00135$
                           1238 ;	Peephole 300	removed redundant label 00438$
                           1239 ;	genIpush
   0305 C0 02              1240 	push	ar2
   0307 C0 03              1241 	push	ar3
   0309 74r12              1242 	mov	a,#__str_16
   030B C0 E0              1243 	push	acc
   030D 74s04              1244 	mov	a,#(__str_16 >> 8)
   030F C0 E0              1245 	push	acc
                           1246 ;	genCall
   0311 12s00r00           1247 	lcall	_printf_tiny
   0314 15 81              1248 	dec	sp
   0316 15 81              1249 	dec	sp
   0318 D0 03              1250 	pop	ar3
   031A D0 02              1251 	pop	ar2
   031C 02s04r95           1252 	ljmp	00164$
   031F                    1253 00135$:
                           1254 ;	main.c:105: else if(store=='i' && timers<2){printf_tiny("\n\n\r\t\t ******  Configure IO Pins  ******"); }
                           1255 ;	genCmpEq
                           1256 ;	gencjneshort
                           1257 ;	Peephole 112.b	changed ljmp to sjmp
                           1258 ;	Peephole 198.b	optimized misc jump sequence
   031F BA 69 2B           1259 	cjne	r2,#0x69,00131$
                           1260 ;	Peephole 200.b	removed redundant sjmp
                           1261 ;	Peephole 300	removed redundant label 00439$
                           1262 ;	Peephole 300	removed redundant label 00440$
                           1263 ;	genAssign
   0322 90s00r01           1264 	mov	dptr,#_timers
   0325 E0                 1265 	movx	a,@dptr
   0326 FC                 1266 	mov	r4,a
   0327 A3                 1267 	inc	dptr
   0328 E0                 1268 	movx	a,@dptr
   0329 FD                 1269 	mov	r5,a
                           1270 ;	genCmpLt
                           1271 ;	genCmp
   032A C3                 1272 	clr	c
   032B EC                 1273 	mov	a,r4
   032C 94 02              1274 	subb	a,#0x02
   032E ED                 1275 	mov	a,r5
   032F 94 00              1276 	subb	a,#0x00
                           1277 ;	genIfxJump
                           1278 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0331 50 1A              1279 	jnc	00131$
                           1280 ;	Peephole 300	removed redundant label 00441$
                           1281 ;	genIpush
   0333 C0 02              1282 	push	ar2
   0335 C0 03              1283 	push	ar3
   0337 74r36              1284 	mov	a,#__str_17
   0339 C0 E0              1285 	push	acc
   033B 74s04              1286 	mov	a,#(__str_17 >> 8)
   033D C0 E0              1287 	push	acc
                           1288 ;	genCall
   033F 12s00r00           1289 	lcall	_printf_tiny
   0342 15 81              1290 	dec	sp
   0344 15 81              1291 	dec	sp
   0346 D0 03              1292 	pop	ar3
   0348 D0 02              1293 	pop	ar2
   034A 02s04r95           1294 	ljmp	00164$
   034D                    1295 00131$:
                           1296 ;	main.c:106: else if(store=='s' && timers<2){printf_tiny("\n\n\r\t\t ******  Status of IO Expander  ******"); }
                           1297 ;	genCmpEq
                           1298 ;	gencjneshort
                           1299 ;	Peephole 112.b	changed ljmp to sjmp
                           1300 ;	Peephole 198.b	optimized misc jump sequence
   034D BA 73 2B           1301 	cjne	r2,#0x73,00127$
                           1302 ;	Peephole 200.b	removed redundant sjmp
                           1303 ;	Peephole 300	removed redundant label 00442$
                           1304 ;	Peephole 300	removed redundant label 00443$
                           1305 ;	genAssign
   0350 90s00r01           1306 	mov	dptr,#_timers
   0353 E0                 1307 	movx	a,@dptr
   0354 FC                 1308 	mov	r4,a
   0355 A3                 1309 	inc	dptr
   0356 E0                 1310 	movx	a,@dptr
   0357 FD                 1311 	mov	r5,a
                           1312 ;	genCmpLt
                           1313 ;	genCmp
   0358 C3                 1314 	clr	c
   0359 EC                 1315 	mov	a,r4
   035A 94 02              1316 	subb	a,#0x02
   035C ED                 1317 	mov	a,r5
   035D 94 00              1318 	subb	a,#0x00
                           1319 ;	genIfxJump
                           1320 ;	Peephole 108.a	removed ljmp by inverse jump logic
   035F 50 1A              1321 	jnc	00127$
                           1322 ;	Peephole 300	removed redundant label 00444$
                           1323 ;	genIpush
   0361 C0 02              1324 	push	ar2
   0363 C0 03              1325 	push	ar3
   0365 74r5E              1326 	mov	a,#__str_18
   0367 C0 E0              1327 	push	acc
   0369 74s04              1328 	mov	a,#(__str_18 >> 8)
   036B C0 E0              1329 	push	acc
                           1330 ;	genCall
   036D 12s00r00           1331 	lcall	_printf_tiny
   0370 15 81              1332 	dec	sp
   0372 15 81              1333 	dec	sp
   0374 D0 03              1334 	pop	ar3
   0376 D0 02              1335 	pop	ar2
   0378 02s04r95           1336 	ljmp	00164$
   037B                    1337 00127$:
                           1338 ;	main.c:107: else if(store=='w' && timers<2){printf_tiny("\n\n\r\t\t ******  EEPROM Write  ******"); }
                           1339 ;	genCmpEq
                           1340 ;	gencjneshort
                           1341 ;	Peephole 112.b	changed ljmp to sjmp
                           1342 ;	Peephole 198.b	optimized misc jump sequence
   037B BA 77 2B           1343 	cjne	r2,#0x77,00123$
                           1344 ;	Peephole 200.b	removed redundant sjmp
                           1345 ;	Peephole 300	removed redundant label 00445$
                           1346 ;	Peephole 300	removed redundant label 00446$
                           1347 ;	genAssign
   037E 90s00r01           1348 	mov	dptr,#_timers
   0381 E0                 1349 	movx	a,@dptr
   0382 FC                 1350 	mov	r4,a
   0383 A3                 1351 	inc	dptr
   0384 E0                 1352 	movx	a,@dptr
   0385 FD                 1353 	mov	r5,a
                           1354 ;	genCmpLt
                           1355 ;	genCmp
   0386 C3                 1356 	clr	c
   0387 EC                 1357 	mov	a,r4
   0388 94 02              1358 	subb	a,#0x02
   038A ED                 1359 	mov	a,r5
   038B 94 00              1360 	subb	a,#0x00
                           1361 ;	genIfxJump
                           1362 ;	Peephole 108.a	removed ljmp by inverse jump logic
   038D 50 1A              1363 	jnc	00123$
                           1364 ;	Peephole 300	removed redundant label 00447$
                           1365 ;	genIpush
   038F C0 02              1366 	push	ar2
   0391 C0 03              1367 	push	ar3
   0393 74r8A              1368 	mov	a,#__str_19
   0395 C0 E0              1369 	push	acc
   0397 74s04              1370 	mov	a,#(__str_19 >> 8)
   0399 C0 E0              1371 	push	acc
                           1372 ;	genCall
   039B 12s00r00           1373 	lcall	_printf_tiny
   039E 15 81              1374 	dec	sp
   03A0 15 81              1375 	dec	sp
   03A2 D0 03              1376 	pop	ar3
   03A4 D0 02              1377 	pop	ar2
   03A6 02s04r95           1378 	ljmp	00164$
   03A9                    1379 00123$:
                           1380 ;	main.c:108: else if(store=='r' && timers<2){printf_tiny("\n\n\r\t\t ******  EEPROM Read  ******"); }
                           1381 ;	genCmpEq
                           1382 ;	gencjneshort
                           1383 ;	Peephole 112.b	changed ljmp to sjmp
                           1384 ;	Peephole 198.b	optimized misc jump sequence
   03A9 BA 72 2B           1385 	cjne	r2,#0x72,00119$
                           1386 ;	Peephole 200.b	removed redundant sjmp
                           1387 ;	Peephole 300	removed redundant label 00448$
                           1388 ;	Peephole 300	removed redundant label 00449$
                           1389 ;	genAssign
   03AC 90s00r01           1390 	mov	dptr,#_timers
   03AF E0                 1391 	movx	a,@dptr
   03B0 FC                 1392 	mov	r4,a
   03B1 A3                 1393 	inc	dptr
   03B2 E0                 1394 	movx	a,@dptr
   03B3 FD                 1395 	mov	r5,a
                           1396 ;	genCmpLt
                           1397 ;	genCmp
   03B4 C3                 1398 	clr	c
   03B5 EC                 1399 	mov	a,r4
   03B6 94 02              1400 	subb	a,#0x02
   03B8 ED                 1401 	mov	a,r5
   03B9 94 00              1402 	subb	a,#0x00
                           1403 ;	genIfxJump
                           1404 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03BB 50 1A              1405 	jnc	00119$
                           1406 ;	Peephole 300	removed redundant label 00450$
                           1407 ;	genIpush
   03BD C0 02              1408 	push	ar2
   03BF C0 03              1409 	push	ar3
   03C1 74rAD              1410 	mov	a,#__str_20
   03C3 C0 E0              1411 	push	acc
   03C5 74s04              1412 	mov	a,#(__str_20 >> 8)
   03C7 C0 E0              1413 	push	acc
                           1414 ;	genCall
   03C9 12s00r00           1415 	lcall	_printf_tiny
   03CC 15 81              1416 	dec	sp
   03CE 15 81              1417 	dec	sp
   03D0 D0 03              1418 	pop	ar3
   03D2 D0 02              1419 	pop	ar2
   03D4 02s04r95           1420 	ljmp	00164$
   03D7                    1421 00119$:
                           1422 ;	main.c:109: else if(store=='c' && timers<2){printf_tiny("\n\n\r\t\t ******  CGRAM Dump  ******"); }
                           1423 ;	genCmpEq
                           1424 ;	gencjneshort
                           1425 ;	Peephole 112.b	changed ljmp to sjmp
                           1426 ;	Peephole 198.b	optimized misc jump sequence
   03D7 BA 63 2B           1427 	cjne	r2,#0x63,00115$
                           1428 ;	Peephole 200.b	removed redundant sjmp
                           1429 ;	Peephole 300	removed redundant label 00451$
                           1430 ;	Peephole 300	removed redundant label 00452$
                           1431 ;	genAssign
   03DA 90s00r01           1432 	mov	dptr,#_timers
   03DD E0                 1433 	movx	a,@dptr
   03DE FC                 1434 	mov	r4,a
   03DF A3                 1435 	inc	dptr
   03E0 E0                 1436 	movx	a,@dptr
   03E1 FD                 1437 	mov	r5,a
                           1438 ;	genCmpLt
                           1439 ;	genCmp
   03E2 C3                 1440 	clr	c
   03E3 EC                 1441 	mov	a,r4
   03E4 94 02              1442 	subb	a,#0x02
   03E6 ED                 1443 	mov	a,r5
   03E7 94 00              1444 	subb	a,#0x00
                           1445 ;	genIfxJump
                           1446 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03E9 50 1A              1447 	jnc	00115$
                           1448 ;	Peephole 300	removed redundant label 00453$
                           1449 ;	genIpush
   03EB C0 02              1450 	push	ar2
   03ED C0 03              1451 	push	ar3
   03EF 74rCF              1452 	mov	a,#__str_21
   03F1 C0 E0              1453 	push	acc
   03F3 74s04              1454 	mov	a,#(__str_21 >> 8)
   03F5 C0 E0              1455 	push	acc
                           1456 ;	genCall
   03F7 12s00r00           1457 	lcall	_printf_tiny
   03FA 15 81              1458 	dec	sp
   03FC 15 81              1459 	dec	sp
   03FE D0 03              1460 	pop	ar3
   0400 D0 02              1461 	pop	ar2
   0402 02s04r95           1462 	ljmp	00164$
   0405                    1463 00115$:
                           1464 ;	main.c:110: else if(store=='d' && timers<2){printf_tiny("\n\n\r\t\t ******  DDRAM Dump  ******"); }
                           1465 ;	genCmpEq
                           1466 ;	gencjneshort
                           1467 ;	Peephole 112.b	changed ljmp to sjmp
                           1468 ;	Peephole 198.b	optimized misc jump sequence
   0405 BA 64 2A           1469 	cjne	r2,#0x64,00111$
                           1470 ;	Peephole 200.b	removed redundant sjmp
                           1471 ;	Peephole 300	removed redundant label 00454$
                           1472 ;	Peephole 300	removed redundant label 00455$
                           1473 ;	genAssign
   0408 90s00r01           1474 	mov	dptr,#_timers
   040B E0                 1475 	movx	a,@dptr
   040C FC                 1476 	mov	r4,a
   040D A3                 1477 	inc	dptr
   040E E0                 1478 	movx	a,@dptr
   040F FD                 1479 	mov	r5,a
                           1480 ;	genCmpLt
                           1481 ;	genCmp
   0410 C3                 1482 	clr	c
   0411 EC                 1483 	mov	a,r4
   0412 94 02              1484 	subb	a,#0x02
   0414 ED                 1485 	mov	a,r5
   0415 94 00              1486 	subb	a,#0x00
                           1487 ;	genIfxJump
                           1488 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0417 50 19              1489 	jnc	00111$
                           1490 ;	Peephole 300	removed redundant label 00456$
                           1491 ;	genIpush
   0419 C0 02              1492 	push	ar2
   041B C0 03              1493 	push	ar3
   041D 74rF0              1494 	mov	a,#__str_22
   041F C0 E0              1495 	push	acc
   0421 74s04              1496 	mov	a,#(__str_22 >> 8)
   0423 C0 E0              1497 	push	acc
                           1498 ;	genCall
   0425 12s00r00           1499 	lcall	_printf_tiny
   0428 15 81              1500 	dec	sp
   042A 15 81              1501 	dec	sp
   042C D0 03              1502 	pop	ar3
   042E D0 02              1503 	pop	ar2
                           1504 ;	Peephole 112.b	changed ljmp to sjmp
   0430 80 63              1505 	sjmp	00164$
   0432                    1506 00111$:
                           1507 ;	main.c:111: else if(store=='h' && timers<2){printf_tiny("\n\n\r\t\t ******  Hex Dump  ******"); }
                           1508 ;	genCmpEq
                           1509 ;	gencjneshort
                           1510 ;	Peephole 112.b	changed ljmp to sjmp
                           1511 ;	Peephole 198.b	optimized misc jump sequence
   0432 BA 68 2A           1512 	cjne	r2,#0x68,00107$
                           1513 ;	Peephole 200.b	removed redundant sjmp
                           1514 ;	Peephole 300	removed redundant label 00457$
                           1515 ;	Peephole 300	removed redundant label 00458$
                           1516 ;	genAssign
   0435 90s00r01           1517 	mov	dptr,#_timers
   0438 E0                 1518 	movx	a,@dptr
   0439 FC                 1519 	mov	r4,a
   043A A3                 1520 	inc	dptr
   043B E0                 1521 	movx	a,@dptr
   043C FD                 1522 	mov	r5,a
                           1523 ;	genCmpLt
                           1524 ;	genCmp
   043D C3                 1525 	clr	c
   043E EC                 1526 	mov	a,r4
   043F 94 02              1527 	subb	a,#0x02
   0441 ED                 1528 	mov	a,r5
   0442 94 00              1529 	subb	a,#0x00
                           1530 ;	genIfxJump
                           1531 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0444 50 19              1532 	jnc	00107$
                           1533 ;	Peephole 300	removed redundant label 00459$
                           1534 ;	genIpush
   0446 C0 02              1535 	push	ar2
   0448 C0 03              1536 	push	ar3
   044A 74r11              1537 	mov	a,#__str_23
   044C C0 E0              1538 	push	acc
   044E 74s05              1539 	mov	a,#(__str_23 >> 8)
   0450 C0 E0              1540 	push	acc
                           1541 ;	genCall
   0452 12s00r00           1542 	lcall	_printf_tiny
   0455 15 81              1543 	dec	sp
   0457 15 81              1544 	dec	sp
   0459 D0 03              1545 	pop	ar3
   045B D0 02              1546 	pop	ar2
                           1547 ;	Peephole 112.b	changed ljmp to sjmp
   045D 80 36              1548 	sjmp	00164$
   045F                    1549 00107$:
                           1550 ;	main.c:112: else if(store=='l'){printf_tiny("\n\n\r\t\t ******  LCD DISPLAY  ******"); }
                           1551 ;	genCmpEq
                           1552 ;	gencjneshort
                           1553 ;	Peephole 112.b	changed ljmp to sjmp
                           1554 ;	Peephole 198.b	optimized misc jump sequence
   045F BA 6C 19           1555 	cjne	r2,#0x6C,00104$
                           1556 ;	Peephole 200.b	removed redundant sjmp
                           1557 ;	Peephole 300	removed redundant label 00460$
                           1558 ;	Peephole 300	removed redundant label 00461$
                           1559 ;	genIpush
   0462 C0 02              1560 	push	ar2
   0464 C0 03              1561 	push	ar3
   0466 74r30              1562 	mov	a,#__str_24
   0468 C0 E0              1563 	push	acc
   046A 74s05              1564 	mov	a,#(__str_24 >> 8)
   046C C0 E0              1565 	push	acc
                           1566 ;	genCall
   046E 12s00r00           1567 	lcall	_printf_tiny
   0471 15 81              1568 	dec	sp
   0473 15 81              1569 	dec	sp
   0475 D0 03              1570 	pop	ar3
   0477 D0 02              1571 	pop	ar2
                           1572 ;	Peephole 112.b	changed ljmp to sjmp
   0479 80 1A              1573 	sjmp	00164$
   047B                    1574 00104$:
                           1575 ;	main.c:113: else if(store=='q'){printf_tiny("\n\n\r\t\t ******  Clear LCD  ******"); }
                           1576 ;	genCmpEq
                           1577 ;	gencjneshort
                           1578 ;	Peephole 112.b	changed ljmp to sjmp
                           1579 ;	Peephole 198.b	optimized misc jump sequence
   047B BA 71 17           1580 	cjne	r2,#0x71,00164$
                           1581 ;	Peephole 200.b	removed redundant sjmp
                           1582 ;	Peephole 300	removed redundant label 00462$
                           1583 ;	Peephole 300	removed redundant label 00463$
                           1584 ;	genIpush
   047E C0 02              1585 	push	ar2
   0480 C0 03              1586 	push	ar3
   0482 74r52              1587 	mov	a,#__str_25
   0484 C0 E0              1588 	push	acc
   0486 74s05              1589 	mov	a,#(__str_25 >> 8)
   0488 C0 E0              1590 	push	acc
                           1591 ;	genCall
   048A 12s00r00           1592 	lcall	_printf_tiny
   048D 15 81              1593 	dec	sp
   048F 15 81              1594 	dec	sp
   0491 D0 03              1595 	pop	ar3
   0493 D0 02              1596 	pop	ar2
   0495                    1597 00164$:
                           1598 ;	main.c:118: if(store=='1')
                           1599 ;	genIfx
   0495 EB                 1600 	mov	a,r3
                           1601 ;	genIfxJump
                           1602 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0496 60 05              1603 	jz	00234$
                           1604 ;	Peephole 300	removed redundant label 00464$
                           1605 ;	main.c:120: EA=0;
                           1606 ;	genAssign
   0498 C2 AF              1607 	clr	_EA
   049A 02s0Dr2B           1608 	ljmp	00235$
   049D                    1609 00234$:
                           1610 ;	main.c:124: else if(store=='2' && EA==0)
                           1611 ;	genCmpEq
                           1612 ;	gencjneshort
                           1613 ;	Peephole 112.b	changed ljmp to sjmp
                           1614 ;	Peephole 198.b	optimized misc jump sequence
   049D BA 32 08           1615 	cjne	r2,#0x32,00230$
                           1616 ;	Peephole 200.b	removed redundant sjmp
                           1617 ;	Peephole 300	removed redundant label 00465$
                           1618 ;	Peephole 300	removed redundant label 00466$
                           1619 ;	genIfx
                           1620 ;	genIfxJump
                           1621 ;	Peephole 108.e	removed ljmp by inverse jump logic
   04A0 20 AF 05           1622 	jb	_EA,00230$
                           1623 ;	Peephole 300	removed redundant label 00467$
                           1624 ;	main.c:126: EA=1;
                           1625 ;	genAssign
   04A3 D2 AF              1626 	setb	_EA
   04A5 02s0Dr2B           1627 	ljmp	00235$
   04A8                    1628 00230$:
                           1629 ;	main.c:130: else if(store=='3')
                           1630 ;	genCmpEq
                           1631 ;	gencjneshort
                           1632 ;	Peephole 112.b	changed ljmp to sjmp
                           1633 ;	Peephole 198.b	optimized misc jump sequence
   04A8 BA 33 0A           1634 	cjne	r2,#0x33,00227$
                           1635 ;	Peephole 200.b	removed redundant sjmp
                           1636 ;	Peephole 300	removed redundant label 00468$
                           1637 ;	Peephole 300	removed redundant label 00469$
                           1638 ;	main.c:133: clock_reset();
                           1639 ;	genCall
   04AB C0 02              1640 	push	ar2
   04AD 12s00r00           1641 	lcall	_clock_reset
   04B0 D0 02              1642 	pop	ar2
   04B2 02s0Dr2B           1643 	ljmp	00235$
   04B5                    1644 00227$:
                           1645 ;	main.c:137: else if(store=='4')
                           1646 ;	genCmpEq
                           1647 ;	gencjneshort
   04B5 BA 34 02           1648 	cjne	r2,#0x34,00470$
   04B8 80 03              1649 	sjmp	00471$
   04BA                    1650 00470$:
   04BA 02s08r11           1651 	ljmp	00224$
   04BD                    1652 00471$:
                           1653 ;	main.c:139: printf_tiny("\n\n\r\t Select timer number between 0 to 2: \t");
                           1654 ;	genIpush
   04BD C0 02              1655 	push	ar2
   04BF 74r72              1656 	mov	a,#__str_26
   04C1 C0 E0              1657 	push	acc
   04C3 74s05              1658 	mov	a,#(__str_26 >> 8)
   04C5 C0 E0              1659 	push	acc
                           1660 ;	genCall
   04C7 12s00r00           1661 	lcall	_printf_tiny
   04CA 15 81              1662 	dec	sp
   04CC 15 81              1663 	dec	sp
   04CE D0 02              1664 	pop	ar2
                           1665 ;	main.c:141: do
   04D0                    1666 00167$:
                           1667 ;	main.c:144: gets(c);
                           1668 ;	genCall
                           1669 ;	Peephole 182.a	used 16 bit load of DPTR
   04D0 90s00r1A           1670 	mov	dptr,#_main_c_1_1
   04D3 75 F0 00           1671 	mov	b,#0x00
   04D6 C0 02              1672 	push	ar2
   04D8 12s00r00           1673 	lcall	_gets
   04DB D0 02              1674 	pop	ar2
                           1675 ;	main.c:145: num=atoi(c);
                           1676 ;	genCall
                           1677 ;	Peephole 182.a	used 16 bit load of DPTR
   04DD 90s00r1A           1678 	mov	dptr,#_main_c_1_1
   04E0 75 F0 00           1679 	mov	b,#0x00
   04E3 C0 02              1680 	push	ar2
   04E5 12s00r00           1681 	lcall	_atoi
   04E8 AB 82              1682 	mov	r3,dpl
   04EA AC 83              1683 	mov	r4,dph
   04EC D0 02              1684 	pop	ar2
                           1685 ;	main.c:146: if(num>2){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 2");}
                           1686 ;	genCmpGt
                           1687 ;	genCmp
   04EE C3                 1688 	clr	c
   04EF 74 02              1689 	mov	a,#0x02
   04F1 9B                 1690 	subb	a,r3
                           1691 ;	Peephole 159	avoided xrl during execution
   04F2 74 80              1692 	mov	a,#(0x00 ^ 0x80)
   04F4 8C F0              1693 	mov	b,r4
   04F6 63 F0 80           1694 	xrl	b,#0x80
   04F9 95 F0              1695 	subb	a,b
   04FB E4                 1696 	clr	a
   04FC 33                 1697 	rlc	a
                           1698 ;	genIfx
   04FD FD                 1699 	mov	r5,a
                           1700 ;	Peephole 105	removed redundant mov
                           1701 ;	genIfxJump
                           1702 ;	Peephole 108.c	removed ljmp by inverse jump logic
   04FE 60 1F              1703 	jz	00168$
                           1704 ;	Peephole 300	removed redundant label 00472$
                           1705 ;	genIpush
   0500 C0 02              1706 	push	ar2
   0502 C0 03              1707 	push	ar3
   0504 C0 04              1708 	push	ar4
   0506 C0 05              1709 	push	ar5
   0508 74r9D              1710 	mov	a,#__str_27
   050A C0 E0              1711 	push	acc
   050C 74s05              1712 	mov	a,#(__str_27 >> 8)
   050E C0 E0              1713 	push	acc
                           1714 ;	genCall
   0510 12s00r00           1715 	lcall	_printf_tiny
   0513 15 81              1716 	dec	sp
   0515 15 81              1717 	dec	sp
   0517 D0 05              1718 	pop	ar5
   0519 D0 04              1719 	pop	ar4
   051B D0 03              1720 	pop	ar3
   051D D0 02              1721 	pop	ar2
   051F                    1722 00168$:
                           1723 ;	main.c:147: }while(num>2);
                           1724 ;	genIfx
   051F ED                 1725 	mov	a,r5
                           1726 ;	genIfxJump
                           1727 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0520 70 AE              1728 	jnz	00167$
                           1729 ;	Peephole 300	removed redundant label 00473$
                           1730 ;	main.c:150: printf_tiny("\n\n\rEnter minutes for timer %d between 0 to 59: \t",num);
                           1731 ;	genIpush
   0522 C0 02              1732 	push	ar2
   0524 C0 03              1733 	push	ar3
   0526 C0 04              1734 	push	ar4
   0528 C0 03              1735 	push	ar3
   052A C0 04              1736 	push	ar4
                           1737 ;	genIpush
   052C 74rD2              1738 	mov	a,#__str_28
   052E C0 E0              1739 	push	acc
   0530 74s05              1740 	mov	a,#(__str_28 >> 8)
   0532 C0 E0              1741 	push	acc
                           1742 ;	genCall
   0534 12s00r00           1743 	lcall	_printf_tiny
   0537 E5 81              1744 	mov	a,sp
   0539 24 FC              1745 	add	a,#0xfc
   053B F5 81              1746 	mov	sp,a
   053D D0 04              1747 	pop	ar4
   053F D0 03              1748 	pop	ar3
   0541 D0 02              1749 	pop	ar2
                           1750 ;	main.c:151: do{
                           1751 ;	genLeftShift
                           1752 ;	genLeftShiftLiteral
                           1753 ;	genlshTwo
   0543 8B 05              1754 	mov	ar5,r3
   0545 EC                 1755 	mov	a,r4
   0546 CD                 1756 	xch	a,r5
   0547 25 E0              1757 	add	a,acc
   0549 CD                 1758 	xch	a,r5
   054A 33                 1759 	rlc	a
   054B FE                 1760 	mov	r6,a
                           1761 ;	genPlus
                           1762 ;	Peephole 236.g	used r5 instead of ar5
   054C ED                 1763 	mov	a,r5
   054D 24r12              1764 	add	a,#_nmi
   054F F5*00              1765 	mov	_main_sloc0_1_0,a
                           1766 ;	Peephole 236.g	used r6 instead of ar6
   0551 EE                 1767 	mov	a,r6
   0552 34s00              1768 	addc	a,#(_nmi >> 8)
   0554 F5*01              1769 	mov	(_main_sloc0_1_0 + 1),a
   0556                    1770 00172$:
                           1771 ;	main.c:153: gets(c);
                           1772 ;	genIpush
   0556 C0 02              1773 	push	ar2
                           1774 ;	genCall
                           1775 ;	Peephole 182.a	used 16 bit load of DPTR
   0558 90s00r1A           1776 	mov	dptr,#_main_c_1_1
   055B 75 F0 00           1777 	mov	b,#0x00
   055E C0 02              1778 	push	ar2
   0560 C0 03              1779 	push	ar3
   0562 C0 04              1780 	push	ar4
   0564 C0 05              1781 	push	ar5
   0566 C0 06              1782 	push	ar6
   0568 12s00r00           1783 	lcall	_gets
   056B D0 06              1784 	pop	ar6
   056D D0 05              1785 	pop	ar5
   056F D0 04              1786 	pop	ar4
   0571 D0 03              1787 	pop	ar3
   0573 D0 02              1788 	pop	ar2
                           1789 ;	main.c:154: nmi[num]=atoi(c);
                           1790 ;	genPlus
                           1791 ;	Peephole 236.g	used r5 instead of ar5
   0575 ED                 1792 	mov	a,r5
   0576 24r12              1793 	add	a,#_nmi
   0578 F9                 1794 	mov	r1,a
                           1795 ;	Peephole 236.g	used r6 instead of ar6
   0579 EE                 1796 	mov	a,r6
   057A 34s00              1797 	addc	a,#(_nmi >> 8)
   057C FA                 1798 	mov	r2,a
                           1799 ;	genCall
                           1800 ;	Peephole 182.a	used 16 bit load of DPTR
   057D 90s00r1A           1801 	mov	dptr,#_main_c_1_1
   0580 75 F0 00           1802 	mov	b,#0x00
   0583 C0 02              1803 	push	ar2
   0585 C0 03              1804 	push	ar3
   0587 C0 04              1805 	push	ar4
   0589 C0 05              1806 	push	ar5
   058B C0 06              1807 	push	ar6
   058D C0 01              1808 	push	ar1
   058F 12s00r00           1809 	lcall	_atoi
   0592 AF 82              1810 	mov	r7,dpl
   0594 A8 83              1811 	mov	r0,dph
   0596 D0 01              1812 	pop	ar1
   0598 D0 06              1813 	pop	ar6
   059A D0 05              1814 	pop	ar5
   059C D0 04              1815 	pop	ar4
   059E D0 03              1816 	pop	ar3
   05A0 D0 02              1817 	pop	ar2
                           1818 ;	genPointerSet
                           1819 ;     genFarPointerSet
   05A2 89 82              1820 	mov	dpl,r1
   05A4 8A 83              1821 	mov	dph,r2
   05A6 EF                 1822 	mov	a,r7
   05A7 F0                 1823 	movx	@dptr,a
   05A8 A3                 1824 	inc	dptr
   05A9 E8                 1825 	mov	a,r0
   05AA F0                 1826 	movx	@dptr,a
                           1827 ;	main.c:155: if(nmi[num]>59){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 59");}
                           1828 ;	genPointerGet
                           1829 ;	genFarPointerGet
   05AB 85*00 82           1830 	mov	dpl,_main_sloc0_1_0
   05AE 85*01 83           1831 	mov	dph,(_main_sloc0_1_0 + 1)
   05B1 E0                 1832 	movx	a,@dptr
   05B2 FA                 1833 	mov	r2,a
   05B3 A3                 1834 	inc	dptr
   05B4 E0                 1835 	movx	a,@dptr
   05B5 FF                 1836 	mov	r7,a
                           1837 ;	genCmpGt
                           1838 ;	genCmp
   05B6 C3                 1839 	clr	c
   05B7 74 3B              1840 	mov	a,#0x3B
   05B9 9A                 1841 	subb	a,r2
                           1842 ;	Peephole 181	changed mov to clr
   05BA E4                 1843 	clr	a
   05BB 9F                 1844 	subb	a,r7
   05BC E4                 1845 	clr	a
   05BD 33                 1846 	rlc	a
                           1847 ;	genIpop
   05BE D0 02              1848 	pop	ar2
                           1849 ;	genIfx
                           1850 ;	genIfxJump
                           1851 ;	Peephole 108.c	removed ljmp by inverse jump logic
   05C0 60 23              1852 	jz	00173$
                           1853 ;	Peephole 300	removed redundant label 00474$
                           1854 ;	genIpush
   05C2 C0 02              1855 	push	ar2
   05C4 C0 03              1856 	push	ar3
   05C6 C0 04              1857 	push	ar4
   05C8 C0 05              1858 	push	ar5
   05CA C0 06              1859 	push	ar6
   05CC 74r03              1860 	mov	a,#__str_29
   05CE C0 E0              1861 	push	acc
   05D0 74s06              1862 	mov	a,#(__str_29 >> 8)
   05D2 C0 E0              1863 	push	acc
                           1864 ;	genCall
   05D4 12s00r00           1865 	lcall	_printf_tiny
   05D7 15 81              1866 	dec	sp
   05D9 15 81              1867 	dec	sp
   05DB D0 06              1868 	pop	ar6
   05DD D0 05              1869 	pop	ar5
   05DF D0 04              1870 	pop	ar4
   05E1 D0 03              1871 	pop	ar3
   05E3 D0 02              1872 	pop	ar2
   05E5                    1873 00173$:
                           1874 ;	main.c:156: }while(nmi[num]>59);
                           1875 ;	genPlus
                           1876 ;	Peephole 236.g	used r5 instead of ar5
   05E5 ED                 1877 	mov	a,r5
   05E6 24r12              1878 	add	a,#_nmi
   05E8 F5 82              1879 	mov	dpl,a
                           1880 ;	Peephole 236.g	used r6 instead of ar6
   05EA EE                 1881 	mov	a,r6
   05EB 34s00              1882 	addc	a,#(_nmi >> 8)
   05ED F5 83              1883 	mov	dph,a
                           1884 ;	genPointerGet
                           1885 ;	genFarPointerGet
   05EF E0                 1886 	movx	a,@dptr
   05F0 FF                 1887 	mov	r7,a
   05F1 A3                 1888 	inc	dptr
   05F2 E0                 1889 	movx	a,@dptr
   05F3 F8                 1890 	mov	r0,a
                           1891 ;	genCmpGt
                           1892 ;	genCmp
   05F4 C3                 1893 	clr	c
   05F5 74 3B              1894 	mov	a,#0x3B
   05F7 9F                 1895 	subb	a,r7
                           1896 ;	Peephole 181	changed mov to clr
   05F8 E4                 1897 	clr	a
   05F9 98                 1898 	subb	a,r0
                           1899 ;	genIfxJump
   05FA 50 03              1900 	jnc	00475$
   05FC 02s05r56           1901 	ljmp	00172$
   05FF                    1902 00475$:
                           1903 ;	main.c:159: printf_tiny("\n\n\rEnter seconds for timer %d between 1 to 59: \t",num);
                           1904 ;	genIpush
   05FF C0 02              1905 	push	ar2
   0601 C0 03              1906 	push	ar3
   0603 C0 04              1907 	push	ar4
   0605 C0 05              1908 	push	ar5
   0607 C0 06              1909 	push	ar6
   0609 C0 03              1910 	push	ar3
   060B C0 04              1911 	push	ar4
                           1912 ;	genIpush
   060D 74r39              1913 	mov	a,#__str_30
   060F C0 E0              1914 	push	acc
   0611 74s06              1915 	mov	a,#(__str_30 >> 8)
   0613 C0 E0              1916 	push	acc
                           1917 ;	genCall
   0615 12s00r00           1918 	lcall	_printf_tiny
   0618 E5 81              1919 	mov	a,sp
   061A 24 FC              1920 	add	a,#0xfc
   061C F5 81              1921 	mov	sp,a
   061E D0 06              1922 	pop	ar6
   0620 D0 05              1923 	pop	ar5
   0622 D0 04              1924 	pop	ar4
   0624 D0 03              1925 	pop	ar3
   0626 D0 02              1926 	pop	ar2
                           1927 ;	main.c:160: do{
                           1928 ;	genPlus
                           1929 ;	Peephole 236.g	used r5 instead of ar5
   0628 ED                 1930 	mov	a,r5
   0629 24r0C              1931 	add	a,#_nsec
   062B F5*02              1932 	mov	_main_sloc1_1_0,a
                           1933 ;	Peephole 236.g	used r6 instead of ar6
   062D EE                 1934 	mov	a,r6
   062E 34s00              1935 	addc	a,#(_nsec >> 8)
   0630 F5*03              1936 	mov	(_main_sloc1_1_0 + 1),a
                           1937 ;	genPlus
                           1938 ;	Peephole 236.g	used r5 instead of ar5
   0632 ED                 1939 	mov	a,r5
   0633 24r0C              1940 	add	a,#_nsec
   0635 F5*00              1941 	mov	_main_sloc0_1_0,a
                           1942 ;	Peephole 236.g	used r6 instead of ar6
   0637 EE                 1943 	mov	a,r6
   0638 34s00              1944 	addc	a,#(_nsec >> 8)
   063A F5*01              1945 	mov	(_main_sloc0_1_0 + 1),a
   063C                    1946 00177$:
                           1947 ;	main.c:162: gets(c);
                           1948 ;	genIpush
   063C C0 02              1949 	push	ar2
                           1950 ;	genCall
                           1951 ;	Peephole 182.a	used 16 bit load of DPTR
   063E 90s00r1A           1952 	mov	dptr,#_main_c_1_1
   0641 75 F0 00           1953 	mov	b,#0x00
   0644 C0 02              1954 	push	ar2
   0646 C0 03              1955 	push	ar3
   0648 C0 04              1956 	push	ar4
   064A C0 05              1957 	push	ar5
   064C C0 06              1958 	push	ar6
   064E 12s00r00           1959 	lcall	_gets
   0651 D0 06              1960 	pop	ar6
   0653 D0 05              1961 	pop	ar5
   0655 D0 04              1962 	pop	ar4
   0657 D0 03              1963 	pop	ar3
   0659 D0 02              1964 	pop	ar2
                           1965 ;	main.c:163: nsec[num]=atoi(c);
                           1966 ;	genPlus
                           1967 ;	Peephole 236.g	used r5 instead of ar5
   065B ED                 1968 	mov	a,r5
   065C 24r0C              1969 	add	a,#_nsec
   065E F9                 1970 	mov	r1,a
                           1971 ;	Peephole 236.g	used r6 instead of ar6
   065F EE                 1972 	mov	a,r6
   0660 34s00              1973 	addc	a,#(_nsec >> 8)
   0662 FA                 1974 	mov	r2,a
                           1975 ;	genCall
                           1976 ;	Peephole 182.a	used 16 bit load of DPTR
   0663 90s00r1A           1977 	mov	dptr,#_main_c_1_1
   0666 75 F0 00           1978 	mov	b,#0x00
   0669 C0 02              1979 	push	ar2
   066B C0 03              1980 	push	ar3
   066D C0 04              1981 	push	ar4
   066F C0 05              1982 	push	ar5
   0671 C0 06              1983 	push	ar6
   0673 C0 01              1984 	push	ar1
   0675 12s00r00           1985 	lcall	_atoi
   0678 AF 82              1986 	mov	r7,dpl
   067A A8 83              1987 	mov	r0,dph
   067C D0 01              1988 	pop	ar1
   067E D0 06              1989 	pop	ar6
   0680 D0 05              1990 	pop	ar5
   0682 D0 04              1991 	pop	ar4
   0684 D0 03              1992 	pop	ar3
   0686 D0 02              1993 	pop	ar2
                           1994 ;	genPointerSet
                           1995 ;     genFarPointerSet
   0688 89 82              1996 	mov	dpl,r1
   068A 8A 83              1997 	mov	dph,r2
   068C EF                 1998 	mov	a,r7
   068D F0                 1999 	movx	@dptr,a
   068E A3                 2000 	inc	dptr
   068F E8                 2001 	mov	a,r0
   0690 F0                 2002 	movx	@dptr,a
                           2003 ;	main.c:164: if(nsec[num]>59){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 59");}
                           2004 ;	genPointerGet
                           2005 ;	genFarPointerGet
   0691 85*00 82           2006 	mov	dpl,_main_sloc0_1_0
   0694 85*01 83           2007 	mov	dph,(_main_sloc0_1_0 + 1)
   0697 E0                 2008 	movx	a,@dptr
   0698 FA                 2009 	mov	r2,a
   0699 A3                 2010 	inc	dptr
   069A E0                 2011 	movx	a,@dptr
   069B FF                 2012 	mov	r7,a
                           2013 ;	genCmpGt
                           2014 ;	genCmp
   069C C3                 2015 	clr	c
   069D 74 3B              2016 	mov	a,#0x3B
   069F 9A                 2017 	subb	a,r2
                           2018 ;	Peephole 181	changed mov to clr
   06A0 E4                 2019 	clr	a
   06A1 9F                 2020 	subb	a,r7
   06A2 E4                 2021 	clr	a
   06A3 33                 2022 	rlc	a
                           2023 ;	genIpop
   06A4 D0 02              2024 	pop	ar2
                           2025 ;	genIfx
                           2026 ;	genIfxJump
                           2027 ;	Peephole 108.c	removed ljmp by inverse jump logic
   06A6 60 23              2028 	jz	00178$
                           2029 ;	Peephole 300	removed redundant label 00476$
                           2030 ;	genIpush
   06A8 C0 02              2031 	push	ar2
   06AA C0 03              2032 	push	ar3
   06AC C0 04              2033 	push	ar4
   06AE C0 05              2034 	push	ar5
   06B0 C0 06              2035 	push	ar6
   06B2 74r03              2036 	mov	a,#__str_29
   06B4 C0 E0              2037 	push	acc
   06B6 74s06              2038 	mov	a,#(__str_29 >> 8)
   06B8 C0 E0              2039 	push	acc
                           2040 ;	genCall
   06BA 12s00r00           2041 	lcall	_printf_tiny
   06BD 15 81              2042 	dec	sp
   06BF 15 81              2043 	dec	sp
   06C1 D0 06              2044 	pop	ar6
   06C3 D0 05              2045 	pop	ar5
   06C5 D0 04              2046 	pop	ar4
   06C7 D0 03              2047 	pop	ar3
   06C9 D0 02              2048 	pop	ar2
   06CB                    2049 00178$:
                           2050 ;	main.c:165: }while(nsec[num]>59);
                           2051 ;	genPointerGet
                           2052 ;	genFarPointerGet
   06CB 85*02 82           2053 	mov	dpl,_main_sloc1_1_0
   06CE 85*03 83           2054 	mov	dph,(_main_sloc1_1_0 + 1)
   06D1 E0                 2055 	movx	a,@dptr
   06D2 FF                 2056 	mov	r7,a
   06D3 A3                 2057 	inc	dptr
   06D4 E0                 2058 	movx	a,@dptr
   06D5 F8                 2059 	mov	r0,a
                           2060 ;	genCmpGt
                           2061 ;	genCmp
   06D6 C3                 2062 	clr	c
   06D7 74 3B              2063 	mov	a,#0x3B
   06D9 9F                 2064 	subb	a,r7
                           2065 ;	Peephole 181	changed mov to clr
   06DA E4                 2066 	clr	a
   06DB 98                 2067 	subb	a,r0
                           2068 ;	genIfxJump
   06DC 50 03              2069 	jnc	00477$
   06DE 02s06r3C           2070 	ljmp	00177$
   06E1                    2071 00477$:
                           2072 ;	main.c:169: printf_tiny("\n\n\rEnter milisec for timer %d between 0 to 9: \t",num);
                           2073 ;	genIpush
   06E1 C0 02              2074 	push	ar2
   06E3 C0 03              2075 	push	ar3
   06E5 C0 04              2076 	push	ar4
   06E7 C0 05              2077 	push	ar5
   06E9 C0 06              2078 	push	ar6
   06EB C0 03              2079 	push	ar3
   06ED C0 04              2080 	push	ar4
                           2081 ;	genIpush
   06EF 74r6A              2082 	mov	a,#__str_31
   06F1 C0 E0              2083 	push	acc
   06F3 74s06              2084 	mov	a,#(__str_31 >> 8)
   06F5 C0 E0              2085 	push	acc
                           2086 ;	genCall
   06F7 12s00r00           2087 	lcall	_printf_tiny
   06FA E5 81              2088 	mov	a,sp
   06FC 24 FC              2089 	add	a,#0xfc
   06FE F5 81              2090 	mov	sp,a
   0700 D0 06              2091 	pop	ar6
   0702 D0 05              2092 	pop	ar5
   0704 D0 04              2093 	pop	ar4
   0706 D0 03              2094 	pop	ar3
   0708 D0 02              2095 	pop	ar2
                           2096 ;	main.c:170: do{
                           2097 ;	genPlus
                           2098 ;	Peephole 236.g	used r5 instead of ar5
   070A ED                 2099 	mov	a,r5
   070B 24r06              2100 	add	a,#_nms
   070D F5*00              2101 	mov	_main_sloc0_1_0,a
                           2102 ;	Peephole 236.g	used r6 instead of ar6
   070F EE                 2103 	mov	a,r6
   0710 34s00              2104 	addc	a,#(_nms >> 8)
   0712 F5*01              2105 	mov	(_main_sloc0_1_0 + 1),a
                           2106 ;	genPlus
                           2107 ;	Peephole 236.g	used r5 instead of ar5
   0714 ED                 2108 	mov	a,r5
   0715 24r06              2109 	add	a,#_nms
   0717 F5*02              2110 	mov	_main_sloc1_1_0,a
                           2111 ;	Peephole 236.g	used r6 instead of ar6
   0719 EE                 2112 	mov	a,r6
   071A 34s00              2113 	addc	a,#(_nms >> 8)
   071C F5*03              2114 	mov	(_main_sloc1_1_0 + 1),a
   071E                    2115 00182$:
                           2116 ;	main.c:172: gets(d);
                           2117 ;	genIpush
   071E C0 02              2118 	push	ar2
                           2119 ;	genCall
                           2120 ;	Peephole 182.a	used 16 bit load of DPTR
   0720 90s00r1E           2121 	mov	dptr,#_main_d_1_1
   0723 75 F0 00           2122 	mov	b,#0x00
   0726 C0 02              2123 	push	ar2
   0728 C0 03              2124 	push	ar3
   072A C0 04              2125 	push	ar4
   072C C0 05              2126 	push	ar5
   072E C0 06              2127 	push	ar6
   0730 12s00r00           2128 	lcall	_gets
   0733 D0 06              2129 	pop	ar6
   0735 D0 05              2130 	pop	ar5
   0737 D0 04              2131 	pop	ar4
   0739 D0 03              2132 	pop	ar3
   073B D0 02              2133 	pop	ar2
                           2134 ;	main.c:173: nms[num]=atoi(d);
                           2135 ;	genPlus
                           2136 ;	Peephole 236.g	used r5 instead of ar5
   073D ED                 2137 	mov	a,r5
   073E 24r06              2138 	add	a,#_nms
   0740 F9                 2139 	mov	r1,a
                           2140 ;	Peephole 236.g	used r6 instead of ar6
   0741 EE                 2141 	mov	a,r6
   0742 34s00              2142 	addc	a,#(_nms >> 8)
   0744 FA                 2143 	mov	r2,a
                           2144 ;	genCall
                           2145 ;	Peephole 182.a	used 16 bit load of DPTR
   0745 90s00r1E           2146 	mov	dptr,#_main_d_1_1
   0748 75 F0 00           2147 	mov	b,#0x00
   074B C0 02              2148 	push	ar2
   074D C0 03              2149 	push	ar3
   074F C0 04              2150 	push	ar4
   0751 C0 05              2151 	push	ar5
   0753 C0 06              2152 	push	ar6
   0755 C0 01              2153 	push	ar1
   0757 12s00r00           2154 	lcall	_atoi
   075A AF 82              2155 	mov	r7,dpl
   075C A8 83              2156 	mov	r0,dph
   075E D0 01              2157 	pop	ar1
   0760 D0 06              2158 	pop	ar6
   0762 D0 05              2159 	pop	ar5
   0764 D0 04              2160 	pop	ar4
   0766 D0 03              2161 	pop	ar3
   0768 D0 02              2162 	pop	ar2
                           2163 ;	genPointerSet
                           2164 ;     genFarPointerSet
   076A 89 82              2165 	mov	dpl,r1
   076C 8A 83              2166 	mov	dph,r2
   076E EF                 2167 	mov	a,r7
   076F F0                 2168 	movx	@dptr,a
   0770 A3                 2169 	inc	dptr
   0771 E8                 2170 	mov	a,r0
   0772 F0                 2171 	movx	@dptr,a
                           2172 ;	main.c:174: if(nms[num]>9 ){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 9");}
                           2173 ;	genPointerGet
                           2174 ;	genFarPointerGet
   0773 85*02 82           2175 	mov	dpl,_main_sloc1_1_0
   0776 85*03 83           2176 	mov	dph,(_main_sloc1_1_0 + 1)
   0779 E0                 2177 	movx	a,@dptr
   077A FA                 2178 	mov	r2,a
   077B A3                 2179 	inc	dptr
   077C E0                 2180 	movx	a,@dptr
   077D FF                 2181 	mov	r7,a
                           2182 ;	genCmpGt
                           2183 ;	genCmp
   077E C3                 2184 	clr	c
   077F 74 09              2185 	mov	a,#0x09
   0781 9A                 2186 	subb	a,r2
                           2187 ;	Peephole 181	changed mov to clr
   0782 E4                 2188 	clr	a
   0783 9F                 2189 	subb	a,r7
   0784 E4                 2190 	clr	a
   0785 33                 2191 	rlc	a
                           2192 ;	genIpop
   0786 D0 02              2193 	pop	ar2
                           2194 ;	genIfx
                           2195 ;	genIfxJump
                           2196 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0788 60 23              2197 	jz	00183$
                           2198 ;	Peephole 300	removed redundant label 00478$
                           2199 ;	genIpush
   078A C0 02              2200 	push	ar2
   078C C0 03              2201 	push	ar3
   078E C0 04              2202 	push	ar4
   0790 C0 05              2203 	push	ar5
   0792 C0 06              2204 	push	ar6
   0794 74r9A              2205 	mov	a,#__str_32
   0796 C0 E0              2206 	push	acc
   0798 74s06              2207 	mov	a,#(__str_32 >> 8)
   079A C0 E0              2208 	push	acc
                           2209 ;	genCall
   079C 12s00r00           2210 	lcall	_printf_tiny
   079F 15 81              2211 	dec	sp
   07A1 15 81              2212 	dec	sp
   07A3 D0 06              2213 	pop	ar6
   07A5 D0 05              2214 	pop	ar5
   07A7 D0 04              2215 	pop	ar4
   07A9 D0 03              2216 	pop	ar3
   07AB D0 02              2217 	pop	ar2
   07AD                    2218 00183$:
                           2219 ;	main.c:175: }while(nms[num]>9);
                           2220 ;	genPointerGet
                           2221 ;	genFarPointerGet
   07AD 85*00 82           2222 	mov	dpl,_main_sloc0_1_0
   07B0 85*01 83           2223 	mov	dph,(_main_sloc0_1_0 + 1)
   07B3 E0                 2224 	movx	a,@dptr
   07B4 FF                 2225 	mov	r7,a
   07B5 A3                 2226 	inc	dptr
   07B6 E0                 2227 	movx	a,@dptr
   07B7 F8                 2228 	mov	r0,a
                           2229 ;	genCmpGt
                           2230 ;	genCmp
   07B8 C3                 2231 	clr	c
   07B9 74 09              2232 	mov	a,#0x09
   07BB 9F                 2233 	subb	a,r7
                           2234 ;	Peephole 181	changed mov to clr
   07BC E4                 2235 	clr	a
   07BD 98                 2236 	subb	a,r0
                           2237 ;	genIfxJump
   07BE 50 03              2238 	jnc	00479$
   07C0 02s07r1E           2239 	ljmp	00182$
   07C3                    2240 00479$:
                           2241 ;	main.c:178: countdown_alarm(nms[num],nsec[num],nmi[num],2,num);
                           2242 ;	genIpush
   07C3 C0 02              2243 	push	ar2
                           2244 ;	genPlus
                           2245 ;	Peephole 236.g	used r5 instead of ar5
   07C5 ED                 2246 	mov	a,r5
   07C6 24r0C              2247 	add	a,#_nsec
   07C8 F5 82              2248 	mov	dpl,a
                           2249 ;	Peephole 236.g	used r6 instead of ar6
   07CA EE                 2250 	mov	a,r6
   07CB 34s00              2251 	addc	a,#(_nsec >> 8)
   07CD F5 83              2252 	mov	dph,a
                           2253 ;	genPointerGet
                           2254 ;	genFarPointerGet
   07CF E0                 2255 	movx	a,@dptr
   07D0 F9                 2256 	mov	r1,a
   07D1 A3                 2257 	inc	dptr
   07D2 E0                 2258 	movx	a,@dptr
   07D3 FA                 2259 	mov	r2,a
                           2260 ;	genPlus
                           2261 ;	Peephole 236.g	used r5 instead of ar5
   07D4 ED                 2262 	mov	a,r5
   07D5 24r12              2263 	add	a,#_nmi
   07D7 F5 82              2264 	mov	dpl,a
                           2265 ;	Peephole 236.g	used r6 instead of ar6
   07D9 EE                 2266 	mov	a,r6
   07DA 34s00              2267 	addc	a,#(_nmi >> 8)
   07DC F5 83              2268 	mov	dph,a
                           2269 ;	genPointerGet
                           2270 ;	genFarPointerGet
   07DE E0                 2271 	movx	a,@dptr
   07DF FD                 2272 	mov	r5,a
   07E0 A3                 2273 	inc	dptr
   07E1 E0                 2274 	movx	a,@dptr
   07E2 FE                 2275 	mov	r6,a
                           2276 ;	genAssign
   07E3 90s00r00           2277 	mov	dptr,#_countdown_alarm_PARM_2
   07E6 E9                 2278 	mov	a,r1
   07E7 F0                 2279 	movx	@dptr,a
   07E8 A3                 2280 	inc	dptr
   07E9 EA                 2281 	mov	a,r2
   07EA F0                 2282 	movx	@dptr,a
                           2283 ;	genAssign
   07EB 90s00r00           2284 	mov	dptr,#_countdown_alarm_PARM_3
   07EE ED                 2285 	mov	a,r5
   07EF F0                 2286 	movx	@dptr,a
   07F0 A3                 2287 	inc	dptr
   07F1 EE                 2288 	mov	a,r6
   07F2 F0                 2289 	movx	@dptr,a
                           2290 ;	genAssign
   07F3 90s00r00           2291 	mov	dptr,#_countdown_alarm_PARM_4
   07F6 74 02              2292 	mov	a,#0x02
   07F8 F0                 2293 	movx	@dptr,a
                           2294 ;	genAssign
   07F9 90s00r00           2295 	mov	dptr,#_countdown_alarm_PARM_5
   07FC EB                 2296 	mov	a,r3
   07FD F0                 2297 	movx	@dptr,a
   07FE A3                 2298 	inc	dptr
   07FF EC                 2299 	mov	a,r4
   0800 F0                 2300 	movx	@dptr,a
                           2301 ;	genCall
   0801 8F 82              2302 	mov	dpl,r7
   0803 88 83              2303 	mov	dph,r0
   0805 C0 02              2304 	push	ar2
   0807 12s00r00           2305 	lcall	_countdown_alarm
   080A D0 02              2306 	pop	ar2
                           2307 ;	genIpop
   080C D0 02              2308 	pop	ar2
   080E 02s0Dr2B           2309 	ljmp	00235$
   0811                    2310 00224$:
                           2311 ;	main.c:182: else if(store=='5')
                           2312 ;	genCmpEq
                           2313 ;	gencjneshort
   0811 BA 35 02           2314 	cjne	r2,#0x35,00480$
   0814 80 03              2315 	sjmp	00481$
   0816                    2316 00480$:
   0816 02s08rBF           2317 	ljmp	00221$
   0819                    2318 00481$:
                           2319 ;	main.c:185: printf_tiny("\n\n\r\tWhich timer to enable between 0 to 2:\t");
                           2320 ;	genIpush
   0819 C0 02              2321 	push	ar2
   081B 74rCF              2322 	mov	a,#__str_33
   081D C0 E0              2323 	push	acc
   081F 74s06              2324 	mov	a,#(__str_33 >> 8)
   0821 C0 E0              2325 	push	acc
                           2326 ;	genCall
   0823 12s00r00           2327 	lcall	_printf_tiny
   0826 15 81              2328 	dec	sp
   0828 15 81              2329 	dec	sp
   082A D0 02              2330 	pop	ar2
                           2331 ;	main.c:187: gets(c);
                           2332 ;	genCall
                           2333 ;	Peephole 182.a	used 16 bit load of DPTR
   082C 90s00r1A           2334 	mov	dptr,#_main_c_1_1
   082F 75 F0 00           2335 	mov	b,#0x00
   0832 C0 02              2336 	push	ar2
   0834 12s00r00           2337 	lcall	_gets
   0837 D0 02              2338 	pop	ar2
                           2339 ;	main.c:188: num=atoi(c);
                           2340 ;	genCall
                           2341 ;	Peephole 182.a	used 16 bit load of DPTR
   0839 90s00r1A           2342 	mov	dptr,#_main_c_1_1
   083C 75 F0 00           2343 	mov	b,#0x00
   083F C0 02              2344 	push	ar2
   0841 12s00r00           2345 	lcall	_atoi
   0844 AB 82              2346 	mov	r3,dpl
   0846 AC 83              2347 	mov	r4,dph
   0848 D0 02              2348 	pop	ar2
                           2349 ;	main.c:189: EA=0;
                           2350 ;	genAssign
   084A C2 AF              2351 	clr	_EA
                           2352 ;	main.c:190: lcdgotoxy(num+1,1);
                           2353 ;	genCast
   084C 8B 05              2354 	mov	ar5,r3
                           2355 ;	genPlus
                           2356 ;     genPlusIncr
   084E 0D                 2357 	inc	r5
                           2358 ;	genAssign
   084F 90s00r00           2359 	mov	dptr,#_lcdgotoxy_PARM_2
   0852 74 01              2360 	mov	a,#0x01
   0854 F0                 2361 	movx	@dptr,a
                           2362 ;	genCall
   0855 8D 82              2363 	mov	dpl,r5
   0857 C0 02              2364 	push	ar2
   0859 C0 03              2365 	push	ar3
   085B C0 04              2366 	push	ar4
   085D 12s00r00           2367 	lcall	_lcdgotoxy
   0860 D0 04              2368 	pop	ar4
   0862 D0 03              2369 	pop	ar3
   0864 D0 02              2370 	pop	ar2
                           2371 ;	main.c:191: lcdputstr("Timer");
                           2372 ;	genCall
                           2373 ;	Peephole 182.a	used 16 bit load of DPTR
   0866 90s00r08           2374 	mov	dptr,#__str_2
   0869 75 F0 80           2375 	mov	b,#0x80
   086C C0 02              2376 	push	ar2
   086E C0 03              2377 	push	ar3
   0870 C0 04              2378 	push	ar4
   0872 12s00r00           2379 	lcall	_lcdputstr
   0875 D0 04              2380 	pop	ar4
   0877 D0 03              2381 	pop	ar3
   0879 D0 02              2382 	pop	ar2
                           2383 ;	main.c:192: lcdputch(name[num]);
                           2384 ;	genPlus
                           2385 ;	Peephole 236.g	used r3 instead of ar3
   087B EB                 2386 	mov	a,r3
   087C 24r23              2387 	add	a,#_main_name_1_1
   087E F5 82              2388 	mov	dpl,a
                           2389 ;	Peephole 236.g	used r4 instead of ar4
   0880 EC                 2390 	mov	a,r4
   0881 34s00              2391 	addc	a,#(_main_name_1_1 >> 8)
   0883 F5 83              2392 	mov	dph,a
                           2393 ;	genPointerGet
                           2394 ;	genFarPointerGet
   0885 E0                 2395 	movx	a,@dptr
                           2396 ;	genCall
   0886 FD                 2397 	mov	r5,a
                           2398 ;	Peephole 244.c	loading dpl from a instead of r5
   0887 F5 82              2399 	mov	dpl,a
   0889 C0 02              2400 	push	ar2
   088B C0 03              2401 	push	ar3
   088D C0 04              2402 	push	ar4
   088F 12s00r00           2403 	lcall	_lcdputch
   0892 D0 04              2404 	pop	ar4
   0894 D0 03              2405 	pop	ar3
   0896 D0 02              2406 	pop	ar2
                           2407 ;	main.c:193: lcdputstr("-E");
                           2408 ;	genCall
                           2409 ;	Peephole 182.a	used 16 bit load of DPTR
   0898 90s06rFA           2410 	mov	dptr,#__str_34
   089B 75 F0 80           2411 	mov	b,#0x80
   089E C0 02              2412 	push	ar2
   08A0 C0 03              2413 	push	ar3
   08A2 C0 04              2414 	push	ar4
   08A4 12s00r00           2415 	lcall	_lcdputstr
   08A7 D0 04              2416 	pop	ar4
   08A9 D0 03              2417 	pop	ar3
   08AB D0 02              2418 	pop	ar2
                           2419 ;	main.c:194: cnt[num]=1;
                           2420 ;	genPlus
                           2421 ;	Peephole 236.g	used r3 instead of ar3
   08AD EB                 2422 	mov	a,r3
   08AE 24r03              2423 	add	a,#_cnt
   08B0 F5 82              2424 	mov	dpl,a
                           2425 ;	Peephole 236.g	used r4 instead of ar4
   08B2 EC                 2426 	mov	a,r4
   08B3 34s00              2427 	addc	a,#(_cnt >> 8)
   08B5 F5 83              2428 	mov	dph,a
                           2429 ;	genPointerSet
                           2430 ;     genFarPointerSet
   08B7 74 01              2431 	mov	a,#0x01
   08B9 F0                 2432 	movx	@dptr,a
                           2433 ;	main.c:195: EA=1;
                           2434 ;	genAssign
   08BA D2 AF              2435 	setb	_EA
   08BC 02s0Dr2B           2436 	ljmp	00235$
   08BF                    2437 00221$:
                           2438 ;	main.c:199: else if(store=='6')
                           2439 ;	genCmpEq
                           2440 ;	gencjneshort
   08BF BA 36 02           2441 	cjne	r2,#0x36,00482$
   08C2 80 03              2442 	sjmp	00483$
   08C4                    2443 00482$:
   08C4 02s09rC5           2444 	ljmp	00218$
   08C7                    2445 00483$:
                           2446 ;	main.c:202: printf_tiny("\n\n\rWhich timer to Disable between 0 to 2:\t");
                           2447 ;	genIpush
   08C7 C0 02              2448 	push	ar2
   08C9 74rFD              2449 	mov	a,#__str_35
   08CB C0 E0              2450 	push	acc
   08CD 74s06              2451 	mov	a,#(__str_35 >> 8)
   08CF C0 E0              2452 	push	acc
                           2453 ;	genCall
   08D1 12s00r00           2454 	lcall	_printf_tiny
   08D4 15 81              2455 	dec	sp
   08D6 15 81              2456 	dec	sp
   08D8 D0 02              2457 	pop	ar2
                           2458 ;	main.c:204: gets(c);
                           2459 ;	genCall
                           2460 ;	Peephole 182.a	used 16 bit load of DPTR
   08DA 90s00r1A           2461 	mov	dptr,#_main_c_1_1
   08DD 75 F0 00           2462 	mov	b,#0x00
   08E0 C0 02              2463 	push	ar2
   08E2 12s00r00           2464 	lcall	_gets
   08E5 D0 02              2465 	pop	ar2
                           2466 ;	main.c:205: num=atoi(c);
                           2467 ;	genCall
                           2468 ;	Peephole 182.a	used 16 bit load of DPTR
   08E7 90s00r1A           2469 	mov	dptr,#_main_c_1_1
   08EA 75 F0 00           2470 	mov	b,#0x00
   08ED C0 02              2471 	push	ar2
   08EF 12s00r00           2472 	lcall	_atoi
   08F2 AB 82              2473 	mov	r3,dpl
   08F4 AC 83              2474 	mov	r4,dph
   08F6 D0 02              2475 	pop	ar2
                           2476 ;	main.c:206: EA=0;
                           2477 ;	genAssign
   08F8 C2 AF              2478 	clr	_EA
                           2479 ;	main.c:208: lcdgotoxy(num+1,1);  // Print Disabled on LCD
                           2480 ;	genCast
   08FA 8B 05              2481 	mov	ar5,r3
                           2482 ;	genPlus
                           2483 ;     genPlusIncr
   08FC 0D                 2484 	inc	r5
                           2485 ;	genAssign
   08FD 90s00r00           2486 	mov	dptr,#_lcdgotoxy_PARM_2
   0900 74 01              2487 	mov	a,#0x01
   0902 F0                 2488 	movx	@dptr,a
                           2489 ;	genCall
   0903 8D 82              2490 	mov	dpl,r5
   0905 C0 02              2491 	push	ar2
   0907 C0 03              2492 	push	ar3
   0909 C0 04              2493 	push	ar4
   090B C0 05              2494 	push	ar5
   090D 12s00r00           2495 	lcall	_lcdgotoxy
   0910 D0 05              2496 	pop	ar5
   0912 D0 04              2497 	pop	ar4
   0914 D0 03              2498 	pop	ar3
   0916 D0 02              2499 	pop	ar2
                           2500 ;	main.c:209: lcdputstr("Disabled");
                           2501 ;	genCall
                           2502 ;	Peephole 182.a	used 16 bit load of DPTR
   0918 90s07r28           2503 	mov	dptr,#__str_36
   091B 75 F0 80           2504 	mov	b,#0x80
   091E C0 02              2505 	push	ar2
   0920 C0 03              2506 	push	ar3
   0922 C0 04              2507 	push	ar4
   0924 C0 05              2508 	push	ar5
   0926 12s00r00           2509 	lcall	_lcdputstr
   0929 D0 05              2510 	pop	ar5
   092B D0 04              2511 	pop	ar4
   092D D0 03              2512 	pop	ar3
   092F D0 02              2513 	pop	ar2
                           2514 ;	main.c:210: printf_tiny("\n\n\t\t Disabling...\n\r");
                           2515 ;	genIpush
   0931 C0 02              2516 	push	ar2
   0933 C0 03              2517 	push	ar3
   0935 C0 04              2518 	push	ar4
   0937 C0 05              2519 	push	ar5
   0939 74r31              2520 	mov	a,#__str_37
   093B C0 E0              2521 	push	acc
   093D 74s07              2522 	mov	a,#(__str_37 >> 8)
   093F C0 E0              2523 	push	acc
                           2524 ;	genCall
   0941 12s00r00           2525 	lcall	_printf_tiny
   0944 15 81              2526 	dec	sp
   0946 15 81              2527 	dec	sp
   0948 D0 05              2528 	pop	ar5
   094A D0 04              2529 	pop	ar4
   094C D0 03              2530 	pop	ar3
   094E D0 02              2531 	pop	ar2
                           2532 ;	main.c:211: delay_ms(500);      // Wait for 500 ms
                           2533 ;	genCall
                           2534 ;	Peephole 182.b	used 16 bit load of dptr
   0950 90 01 F4           2535 	mov	dptr,#0x01F4
   0953 C0 02              2536 	push	ar2
   0955 C0 03              2537 	push	ar3
   0957 C0 04              2538 	push	ar4
   0959 C0 05              2539 	push	ar5
   095B 12s00r00           2540 	lcall	_delay_ms
   095E D0 05              2541 	pop	ar5
   0960 D0 04              2542 	pop	ar4
   0962 D0 03              2543 	pop	ar3
   0964 D0 02              2544 	pop	ar2
                           2545 ;	main.c:212: cnt[num]=0;         // Disable the counter by putting 0 in cnt array
                           2546 ;	genPlus
                           2547 ;	Peephole 236.g	used r3 instead of ar3
   0966 EB                 2548 	mov	a,r3
   0967 24r03              2549 	add	a,#_cnt
   0969 F5 82              2550 	mov	dpl,a
                           2551 ;	Peephole 236.g	used r4 instead of ar4
   096B EC                 2552 	mov	a,r4
   096C 34s00              2553 	addc	a,#(_cnt >> 8)
   096E F5 83              2554 	mov	dph,a
                           2555 ;	genPointerSet
                           2556 ;     genFarPointerSet
                           2557 ;	Peephole 181	changed mov to clr
   0970 E4                 2558 	clr	a
   0971 F0                 2559 	movx	@dptr,a
                           2560 ;	main.c:214: lcdgotoxy(num+1,1);
                           2561 ;	genAssign
   0972 90s00r00           2562 	mov	dptr,#_lcdgotoxy_PARM_2
   0975 74 01              2563 	mov	a,#0x01
   0977 F0                 2564 	movx	@dptr,a
                           2565 ;	genCall
   0978 8D 82              2566 	mov	dpl,r5
   097A C0 02              2567 	push	ar2
   097C C0 03              2568 	push	ar3
   097E C0 04              2569 	push	ar4
   0980 12s00r00           2570 	lcall	_lcdgotoxy
   0983 D0 04              2571 	pop	ar4
   0985 D0 03              2572 	pop	ar3
   0987 D0 02              2573 	pop	ar2
                           2574 ;	main.c:215: lcdputstr("Timer");
                           2575 ;	genCall
                           2576 ;	Peephole 182.a	used 16 bit load of DPTR
   0989 90s00r08           2577 	mov	dptr,#__str_2
   098C 75 F0 80           2578 	mov	b,#0x80
   098F C0 02              2579 	push	ar2
   0991 C0 03              2580 	push	ar3
   0993 C0 04              2581 	push	ar4
   0995 12s00r00           2582 	lcall	_lcdputstr
   0998 D0 04              2583 	pop	ar4
   099A D0 03              2584 	pop	ar3
   099C D0 02              2585 	pop	ar2
                           2586 ;	main.c:216: lcdputch(name[num]);
                           2587 ;	genPlus
                           2588 ;	Peephole 236.g	used r3 instead of ar3
   099E EB                 2589 	mov	a,r3
   099F 24r23              2590 	add	a,#_main_name_1_1
   09A1 F5 82              2591 	mov	dpl,a
                           2592 ;	Peephole 236.g	used r4 instead of ar4
   09A3 EC                 2593 	mov	a,r4
   09A4 34s00              2594 	addc	a,#(_main_name_1_1 >> 8)
   09A6 F5 83              2595 	mov	dph,a
                           2596 ;	genPointerGet
                           2597 ;	genFarPointerGet
   09A8 E0                 2598 	movx	a,@dptr
                           2599 ;	genCall
   09A9 FB                 2600 	mov	r3,a
                           2601 ;	Peephole 244.c	loading dpl from a instead of r3
   09AA F5 82              2602 	mov	dpl,a
   09AC C0 02              2603 	push	ar2
   09AE 12s00r00           2604 	lcall	_lcdputch
   09B1 D0 02              2605 	pop	ar2
                           2606 ;	main.c:217: lcdputstr("-D");
                           2607 ;	genCall
                           2608 ;	Peephole 182.a	used 16 bit load of DPTR
   09B3 90s00r0E           2609 	mov	dptr,#__str_3
   09B6 75 F0 80           2610 	mov	b,#0x80
   09B9 C0 02              2611 	push	ar2
   09BB 12s00r00           2612 	lcall	_lcdputstr
   09BE D0 02              2613 	pop	ar2
                           2614 ;	main.c:218: EA=1;
                           2615 ;	genAssign
   09C0 D2 AF              2616 	setb	_EA
   09C2 02s0Dr2B           2617 	ljmp	00235$
   09C5                    2618 00218$:
                           2619 ;	main.c:221: else if(store=='7')
                           2620 ;	genCmpEq
                           2621 ;	gencjneshort
   09C5 BA 37 02           2622 	cjne	r2,#0x37,00484$
   09C8 80 03              2623 	sjmp	00485$
   09CA                    2624 00484$:
   09CA 02s0Cr82           2625 	ljmp	00215$
   09CD                    2626 00485$:
                           2627 ;	main.c:223: printf_tiny("\n\n\r\t Select Character code between 0 to 7: \t");
                           2628 ;	genIpush
   09CD C0 02              2629 	push	ar2
   09CF 74r45              2630 	mov	a,#__str_38
   09D1 C0 E0              2631 	push	acc
   09D3 74s07              2632 	mov	a,#(__str_38 >> 8)
   09D5 C0 E0              2633 	push	acc
                           2634 ;	genCall
   09D7 12s00r00           2635 	lcall	_printf_tiny
   09DA 15 81              2636 	dec	sp
   09DC 15 81              2637 	dec	sp
   09DE D0 02              2638 	pop	ar2
                           2639 ;	main.c:225: do
   09E0                    2640 00187$:
                           2641 ;	main.c:227: gets(c);
                           2642 ;	genCall
                           2643 ;	Peephole 182.a	used 16 bit load of DPTR
   09E0 90s00r1A           2644 	mov	dptr,#_main_c_1_1
   09E3 75 F0 00           2645 	mov	b,#0x00
   09E6 C0 02              2646 	push	ar2
   09E8 12s00r00           2647 	lcall	_gets
   09EB D0 02              2648 	pop	ar2
                           2649 ;	main.c:228: num=atoi(c);
                           2650 ;	genCall
                           2651 ;	Peephole 182.a	used 16 bit load of DPTR
   09ED 90s00r1A           2652 	mov	dptr,#_main_c_1_1
   09F0 75 F0 00           2653 	mov	b,#0x00
   09F3 C0 02              2654 	push	ar2
   09F5 12s00r00           2655 	lcall	_atoi
   09F8 AB 82              2656 	mov	r3,dpl
   09FA AC 83              2657 	mov	r4,dph
   09FC D0 02              2658 	pop	ar2
                           2659 ;	main.c:229: if(num>7){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 7");}
                           2660 ;	genCmpGt
                           2661 ;	genCmp
   09FE C3                 2662 	clr	c
   09FF 74 07              2663 	mov	a,#0x07
   0A01 9B                 2664 	subb	a,r3
                           2665 ;	Peephole 159	avoided xrl during execution
   0A02 74 80              2666 	mov	a,#(0x00 ^ 0x80)
   0A04 8C F0              2667 	mov	b,r4
   0A06 63 F0 80           2668 	xrl	b,#0x80
   0A09 95 F0              2669 	subb	a,b
   0A0B E4                 2670 	clr	a
   0A0C 33                 2671 	rlc	a
                           2672 ;	genIfx
   0A0D FD                 2673 	mov	r5,a
                           2674 ;	Peephole 105	removed redundant mov
                           2675 ;	genIfxJump
                           2676 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0A0E 60 1F              2677 	jz	00188$
                           2678 ;	Peephole 300	removed redundant label 00486$
                           2679 ;	genIpush
   0A10 C0 02              2680 	push	ar2
   0A12 C0 03              2681 	push	ar3
   0A14 C0 04              2682 	push	ar4
   0A16 C0 05              2683 	push	ar5
   0A18 74r72              2684 	mov	a,#__str_39
   0A1A C0 E0              2685 	push	acc
   0A1C 74s07              2686 	mov	a,#(__str_39 >> 8)
   0A1E C0 E0              2687 	push	acc
                           2688 ;	genCall
   0A20 12s00r00           2689 	lcall	_printf_tiny
   0A23 15 81              2690 	dec	sp
   0A25 15 81              2691 	dec	sp
   0A27 D0 05              2692 	pop	ar5
   0A29 D0 04              2693 	pop	ar4
   0A2B D0 03              2694 	pop	ar3
   0A2D D0 02              2695 	pop	ar2
   0A2F                    2696 00188$:
                           2697 ;	main.c:230: }while(num>7);
                           2698 ;	genIfx
   0A2F ED                 2699 	mov	a,r5
                           2700 ;	genIfxJump
                           2701 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0A30 70 AE              2702 	jnz	00187$
                           2703 ;	Peephole 300	removed redundant label 00487$
                           2704 ;	main.c:231: ccode=num;
                           2705 ;	genCast
                           2706 ;	main.c:234: printf_tiny("\n\n\r\t Enter pixel map in HEX in HH format from 00 to 1F: \t");
                           2707 ;	genIpush
   0A32 C0 02              2708 	push	ar2
   0A34 C0 03              2709 	push	ar3
   0A36 74rA7              2710 	mov	a,#__str_40
   0A38 C0 E0              2711 	push	acc
   0A3A 74s07              2712 	mov	a,#(__str_40 >> 8)
   0A3C C0 E0              2713 	push	acc
                           2714 ;	genCall
   0A3E 12s00r00           2715 	lcall	_printf_tiny
   0A41 15 81              2716 	dec	sp
   0A43 15 81              2717 	dec	sp
   0A45 D0 03              2718 	pop	ar3
   0A47 D0 02              2719 	pop	ar2
                           2720 ;	main.c:235: for(i=0;i<8;i++)
                           2721 ;	genAssign
   0A49 7C 00              2722 	mov	r4,#0x00
   0A4B 7D 00              2723 	mov	r5,#0x00
   0A4D                    2724 00306$:
                           2725 ;	genCmpLt
                           2726 ;	genCmp
   0A4D C3                 2727 	clr	c
   0A4E EC                 2728 	mov	a,r4
   0A4F 94 08              2729 	subb	a,#0x08
   0A51 ED                 2730 	mov	a,r5
   0A52 64 80              2731 	xrl	a,#0x80
   0A54 94 80              2732 	subb	a,#0x80
                           2733 ;	genIfxJump
   0A56 40 03              2734 	jc	00488$
   0A58 02s0Cr68           2735 	ljmp	00309$
   0A5B                    2736 00488$:
                           2737 ;	main.c:237: printf_tiny("\n\r\t Data in row number %d: \t",i);
                           2738 ;	genIpush
   0A5B C0 02              2739 	push	ar2
   0A5D C0 03              2740 	push	ar3
   0A5F C0 04              2741 	push	ar4
   0A61 C0 05              2742 	push	ar5
   0A63 C0 04              2743 	push	ar4
   0A65 C0 05              2744 	push	ar5
                           2745 ;	genIpush
   0A67 74rE1              2746 	mov	a,#__str_41
   0A69 C0 E0              2747 	push	acc
   0A6B 74s07              2748 	mov	a,#(__str_41 >> 8)
   0A6D C0 E0              2749 	push	acc
                           2750 ;	genCall
   0A6F 12s00r00           2751 	lcall	_printf_tiny
   0A72 E5 81              2752 	mov	a,sp
   0A74 24 FC              2753 	add	a,#0xfc
   0A76 F5 81              2754 	mov	sp,a
   0A78 D0 05              2755 	pop	ar5
   0A7A D0 04              2756 	pop	ar4
   0A7C D0 03              2757 	pop	ar3
   0A7E D0 02              2758 	pop	ar2
                           2759 ;	main.c:238: do
   0A80                    2760 00192$:
                           2761 ;	main.c:240: gets(c);
                           2762 ;	genCall
                           2763 ;	Peephole 182.a	used 16 bit load of DPTR
   0A80 90s00r1A           2764 	mov	dptr,#_main_c_1_1
   0A83 75 F0 00           2765 	mov	b,#0x00
   0A86 C0 02              2766 	push	ar2
   0A88 C0 03              2767 	push	ar3
   0A8A C0 04              2768 	push	ar4
   0A8C C0 05              2769 	push	ar5
   0A8E 12s00r00           2770 	lcall	_gets
   0A91 D0 05              2771 	pop	ar5
   0A93 D0 04              2772 	pop	ar4
   0A95 D0 03              2773 	pop	ar3
   0A97 D0 02              2774 	pop	ar2
                           2775 ;	main.c:241: num=atoh_data(c);// atoh_data function converts ascii values to the HEX numbers
                           2776 ;	genCall
                           2777 ;	Peephole 182.a	used 16 bit load of DPTR
   0A99 90s00r1A           2778 	mov	dptr,#_main_c_1_1
   0A9C 75 F0 00           2779 	mov	b,#0x00
   0A9F C0 02              2780 	push	ar2
   0AA1 C0 03              2781 	push	ar3
   0AA3 C0 04              2782 	push	ar4
   0AA5 C0 05              2783 	push	ar5
   0AA7 12s00r00           2784 	lcall	_atoh_data
   0AAA AE 82              2785 	mov	r6,dpl
   0AAC AF 83              2786 	mov	r7,dph
   0AAE D0 05              2787 	pop	ar5
   0AB0 D0 04              2788 	pop	ar4
   0AB2 D0 03              2789 	pop	ar3
   0AB4 D0 02              2790 	pop	ar2
                           2791 ;	main.c:243: if(num>31){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid HEX number between 00 to 1F in HH format:\t");}
                           2792 ;	genCmpGt
                           2793 ;	genCmp
   0AB6 C3                 2794 	clr	c
   0AB7 74 1F              2795 	mov	a,#0x1F
   0AB9 9E                 2796 	subb	a,r6
                           2797 ;	Peephole 159	avoided xrl during execution
   0ABA 74 80              2798 	mov	a,#(0x00 ^ 0x80)
   0ABC 8F F0              2799 	mov	b,r7
   0ABE 63 F0 80           2800 	xrl	b,#0x80
   0AC1 95 F0              2801 	subb	a,b
   0AC3 E4                 2802 	clr	a
   0AC4 33                 2803 	rlc	a
                           2804 ;	genIfx
   0AC5 F8                 2805 	mov	r0,a
                           2806 ;	Peephole 105	removed redundant mov
                           2807 ;	genIfxJump
                           2808 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0AC6 60 2B              2809 	jz	00193$
                           2810 ;	Peephole 300	removed redundant label 00489$
                           2811 ;	genIpush
   0AC8 C0 02              2812 	push	ar2
   0ACA C0 03              2813 	push	ar3
   0ACC C0 04              2814 	push	ar4
   0ACE C0 05              2815 	push	ar5
   0AD0 C0 06              2816 	push	ar6
   0AD2 C0 07              2817 	push	ar7
   0AD4 C0 00              2818 	push	ar0
   0AD6 74rFE              2819 	mov	a,#__str_42
   0AD8 C0 E0              2820 	push	acc
   0ADA 74s07              2821 	mov	a,#(__str_42 >> 8)
   0ADC C0 E0              2822 	push	acc
                           2823 ;	genCall
   0ADE 12s00r00           2824 	lcall	_printf_tiny
   0AE1 15 81              2825 	dec	sp
   0AE3 15 81              2826 	dec	sp
   0AE5 D0 00              2827 	pop	ar0
   0AE7 D0 07              2828 	pop	ar7
   0AE9 D0 06              2829 	pop	ar6
   0AEB D0 05              2830 	pop	ar5
   0AED D0 04              2831 	pop	ar4
   0AEF D0 03              2832 	pop	ar3
   0AF1 D0 02              2833 	pop	ar2
   0AF3                    2834 00193$:
                           2835 ;	main.c:244: }while(num>31);
                           2836 ;	genIfx
   0AF3 E8                 2837 	mov	a,r0
                           2838 ;	genIfxJump
   0AF4 60 03              2839 	jz	00490$
   0AF6 02s0Ar80           2840 	ljmp	00192$
   0AF9                    2841 00490$:
                           2842 ;	main.c:246: row_val[i]=num;         // Store data from user into row_val[] array
                           2843 ;	genPlus
                           2844 ;	Peephole 236.g	used r4 instead of ar4
   0AF9 EC                 2845 	mov	a,r4
   0AFA 24r2D              2846 	add	a,#_main_row_val_1_1
   0AFC F5 82              2847 	mov	dpl,a
                           2848 ;	Peephole 236.g	used r5 instead of ar5
   0AFE ED                 2849 	mov	a,r5
   0AFF 34s00              2850 	addc	a,#(_main_row_val_1_1 >> 8)
   0B01 F5 83              2851 	mov	dph,a
                           2852 ;	genCast
                           2853 ;	genPointerSet
                           2854 ;     genFarPointerSet
   0B03 EE                 2855 	mov	a,r6
   0B04 F0                 2856 	movx	@dptr,a
                           2857 ;	main.c:247: disp[i]=atob(num);
                           2858 ;	genPlus
                           2859 ;	Peephole 236.g	used r4 instead of ar4
   0B05 EC                 2860 	mov	a,r4
   0B06 24r35              2861 	add	a,#_main_disp_1_1
   0B08 FF                 2862 	mov	r7,a
                           2863 ;	Peephole 236.g	used r5 instead of ar5
   0B09 ED                 2864 	mov	a,r5
   0B0A 34s00              2865 	addc	a,#(_main_disp_1_1 >> 8)
   0B0C F8                 2866 	mov	r0,a
                           2867 ;	genCall
   0B0D 8E 82              2868 	mov	dpl,r6
   0B0F C0 02              2869 	push	ar2
   0B11 C0 03              2870 	push	ar3
   0B13 C0 04              2871 	push	ar4
   0B15 C0 05              2872 	push	ar5
   0B17 C0 07              2873 	push	ar7
   0B19 C0 00              2874 	push	ar0
   0B1B 12s00r00           2875 	lcall	_atob
   0B1E AE 82              2876 	mov	r6,dpl
   0B20 D0 00              2877 	pop	ar0
   0B22 D0 07              2878 	pop	ar7
   0B24 D0 05              2879 	pop	ar5
   0B26 D0 04              2880 	pop	ar4
   0B28 D0 03              2881 	pop	ar3
   0B2A D0 02              2882 	pop	ar2
                           2883 ;	genPointerSet
                           2884 ;     genFarPointerSet
   0B2C 8F 82              2885 	mov	dpl,r7
   0B2E 88 83              2886 	mov	dph,r0
   0B30 EE                 2887 	mov	a,r6
   0B31 F0                 2888 	movx	@dptr,a
                           2889 ;	main.c:248: printf_tiny("\n\r\t\t      \t12345");
                           2890 ;	genIpush
   0B32 C0 02              2891 	push	ar2
   0B34 C0 03              2892 	push	ar3
   0B36 C0 04              2893 	push	ar4
   0B38 C0 05              2894 	push	ar5
   0B3A 74r48              2895 	mov	a,#__str_43
   0B3C C0 E0              2896 	push	acc
   0B3E 74s08              2897 	mov	a,#(__str_43 >> 8)
   0B40 C0 E0              2898 	push	acc
                           2899 ;	genCall
   0B42 12s00r00           2900 	lcall	_printf_tiny
   0B45 15 81              2901 	dec	sp
   0B47 15 81              2902 	dec	sp
   0B49 D0 05              2903 	pop	ar5
   0B4B D0 04              2904 	pop	ar4
   0B4D D0 03              2905 	pop	ar3
   0B4F D0 02              2906 	pop	ar2
                           2907 ;	main.c:249: for(j=0;j<=i;j++)          // This fop loop is used for displaying the contents of the ROW_val on the screen
                           2908 ;	genAssign
   0B51 8C 06              2909 	mov	ar6,r4
   0B53 8D 07              2910 	mov	ar7,r5
                           2911 ;	genAssign
   0B55 78 00              2912 	mov	r0,#0x00
   0B57 79 00              2913 	mov	r1,#0x00
   0B59                    2914 00302$:
                           2915 ;	genCmpGt
                           2916 ;	genCmp
   0B59 C3                 2917 	clr	c
   0B5A EE                 2918 	mov	a,r6
   0B5B 98                 2919 	subb	a,r0
   0B5C EF                 2920 	mov	a,r7
   0B5D 64 80              2921 	xrl	a,#0x80
   0B5F 89 F0              2922 	mov	b,r1
   0B61 63 F0 80           2923 	xrl	b,#0x80
   0B64 95 F0              2924 	subb	a,b
                           2925 ;	genIfxJump
   0B66 50 03              2926 	jnc	00491$
   0B68 02s0Cr5E           2927 	ljmp	00308$
   0B6B                    2928 00491$:
                           2929 ;	main.c:250: {  printf_tiny("\n\r\t\tROW %d:\t",j);
                           2930 ;	genIpush
   0B6B C0 02              2931 	push	ar2
   0B6D C0 03              2932 	push	ar3
   0B6F C0 06              2933 	push	ar6
   0B71 C0 07              2934 	push	ar7
   0B73 C0 00              2935 	push	ar0
   0B75 C0 01              2936 	push	ar1
   0B77 C0 00              2937 	push	ar0
   0B79 C0 01              2938 	push	ar1
                           2939 ;	genIpush
   0B7B 74r59              2940 	mov	a,#__str_44
   0B7D C0 E0              2941 	push	acc
   0B7F 74s08              2942 	mov	a,#(__str_44 >> 8)
   0B81 C0 E0              2943 	push	acc
                           2944 ;	genCall
   0B83 12s00r00           2945 	lcall	_printf_tiny
   0B86 E5 81              2946 	mov	a,sp
   0B88 24 FC              2947 	add	a,#0xfc
   0B8A F5 81              2948 	mov	sp,a
   0B8C D0 01              2949 	pop	ar1
   0B8E D0 00              2950 	pop	ar0
   0B90 D0 07              2951 	pop	ar7
   0B92 D0 06              2952 	pop	ar6
   0B94 D0 03              2953 	pop	ar3
   0B96 D0 02              2954 	pop	ar2
                           2955 ;	main.c:251: for(k=3;k<8;k++)
                           2956 ;	genPlus
                           2957 ;	Peephole 236.g	used r0 instead of ar0
   0B98 E8                 2958 	mov	a,r0
   0B99 24r35              2959 	add	a,#_main_disp_1_1
   0B9B FC                 2960 	mov	r4,a
                           2961 ;	Peephole 236.g	used r1 instead of ar1
   0B9C E9                 2962 	mov	a,r1
   0B9D 34s00              2963 	addc	a,#(_main_disp_1_1 >> 8)
   0B9F FD                 2964 	mov	r5,a
                           2965 ;	genAssign
   0BA0 75*00 03           2966 	mov	_main_sloc0_1_0,#0x03
   0BA3 E4                 2967 	clr	a
   0BA4 F5*01              2968 	mov	(_main_sloc0_1_0 + 1),a
   0BA6                    2969 00298$:
                           2970 ;	genCmpLt
                           2971 ;	genCmp
   0BA6 C3                 2972 	clr	c
   0BA7 E5*00              2973 	mov	a,_main_sloc0_1_0
   0BA9 94 08              2974 	subb	a,#0x08
   0BAB E5*01              2975 	mov	a,(_main_sloc0_1_0 + 1)
   0BAD 64 80              2976 	xrl	a,#0x80
   0BAF 94 80              2977 	subb	a,#0x80
                           2978 ;	genIfxJump
   0BB1 40 03              2979 	jc	00492$
   0BB3 02s0Cr56           2980 	ljmp	00304$
   0BB6                    2981 00492$:
                           2982 ;	main.c:253: if((disp[j]>>k)&1)
                           2983 ;	genIpush
   0BB6 C0 03              2984 	push	ar3
                           2985 ;	genPointerGet
                           2986 ;	genFarPointerGet
   0BB8 8C 82              2987 	mov	dpl,r4
   0BBA 8D 83              2988 	mov	dph,r5
   0BBC E0                 2989 	movx	a,@dptr
   0BBD FB                 2990 	mov	r3,a
                           2991 ;	genRightShift
   0BBE 85*00 F0           2992 	mov	b,_main_sloc0_1_0
   0BC1 05 F0              2993 	inc	b
   0BC3 EB                 2994 	mov	a,r3
   0BC4 80 02              2995 	sjmp	00494$
   0BC6                    2996 00493$:
   0BC6 C3                 2997 	clr	c
   0BC7 13                 2998 	rrc	a
   0BC8                    2999 00494$:
   0BC8 D5 F0 FB           3000 	djnz	b,00493$
                           3001 ;	genAnd
   0BCB 54 01              3002 	anl	a,#0x01
                           3003 ;	genIpop
   0BCD D0 03              3004 	pop	ar3
                           3005 ;	genIfx
                           3006 ;	genIfxJump
                           3007 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0BCF 60 3E              3008 	jz	00196$
                           3009 ;	Peephole 300	removed redundant label 00495$
                           3010 ;	main.c:254: {printf("%c",0xFF);}
                           3011 ;	genIpush
   0BD1 C0 02              3012 	push	ar2
   0BD3 C0 03              3013 	push	ar3
   0BD5 C0 04              3014 	push	ar4
   0BD7 C0 05              3015 	push	ar5
   0BD9 C0 06              3016 	push	ar6
   0BDB C0 07              3017 	push	ar7
   0BDD C0 00              3018 	push	ar0
   0BDF C0 01              3019 	push	ar1
   0BE1 74 FF              3020 	mov	a,#0xFF
   0BE3 C0 E0              3021 	push	acc
                           3022 ;	Peephole 181	changed mov to clr
   0BE5 E4                 3023 	clr	a
   0BE6 C0 E0              3024 	push	acc
                           3025 ;	genIpush
   0BE8 74r66              3026 	mov	a,#__str_45
   0BEA C0 E0              3027 	push	acc
   0BEC 74s08              3028 	mov	a,#(__str_45 >> 8)
   0BEE C0 E0              3029 	push	acc
   0BF0 74 80              3030 	mov	a,#0x80
   0BF2 C0 E0              3031 	push	acc
                           3032 ;	genCall
   0BF4 12s00r00           3033 	lcall	_printf
   0BF7 E5 81              3034 	mov	a,sp
   0BF9 24 FB              3035 	add	a,#0xfb
   0BFB F5 81              3036 	mov	sp,a
   0BFD D0 01              3037 	pop	ar1
   0BFF D0 00              3038 	pop	ar0
   0C01 D0 07              3039 	pop	ar7
   0C03 D0 06              3040 	pop	ar6
   0C05 D0 05              3041 	pop	ar5
   0C07 D0 04              3042 	pop	ar4
   0C09 D0 03              3043 	pop	ar3
   0C0B D0 02              3044 	pop	ar2
                           3045 ;	Peephole 112.b	changed ljmp to sjmp
   0C0D 80 3C              3046 	sjmp	00300$
   0C0F                    3047 00196$:
                           3048 ;	main.c:256: {printf("%c",'_');}
                           3049 ;	genIpush
   0C0F C0 02              3050 	push	ar2
   0C11 C0 03              3051 	push	ar3
   0C13 C0 04              3052 	push	ar4
   0C15 C0 05              3053 	push	ar5
   0C17 C0 06              3054 	push	ar6
   0C19 C0 07              3055 	push	ar7
   0C1B C0 00              3056 	push	ar0
   0C1D C0 01              3057 	push	ar1
   0C1F 74 5F              3058 	mov	a,#0x5F
   0C21 C0 E0              3059 	push	acc
                           3060 ;	Peephole 181	changed mov to clr
   0C23 E4                 3061 	clr	a
   0C24 C0 E0              3062 	push	acc
                           3063 ;	genIpush
   0C26 74r66              3064 	mov	a,#__str_45
   0C28 C0 E0              3065 	push	acc
   0C2A 74s08              3066 	mov	a,#(__str_45 >> 8)
   0C2C C0 E0              3067 	push	acc
   0C2E 74 80              3068 	mov	a,#0x80
   0C30 C0 E0              3069 	push	acc
                           3070 ;	genCall
   0C32 12s00r00           3071 	lcall	_printf
   0C35 E5 81              3072 	mov	a,sp
   0C37 24 FB              3073 	add	a,#0xfb
   0C39 F5 81              3074 	mov	sp,a
   0C3B D0 01              3075 	pop	ar1
   0C3D D0 00              3076 	pop	ar0
   0C3F D0 07              3077 	pop	ar7
   0C41 D0 06              3078 	pop	ar6
   0C43 D0 05              3079 	pop	ar5
   0C45 D0 04              3080 	pop	ar4
   0C47 D0 03              3081 	pop	ar3
   0C49 D0 02              3082 	pop	ar2
   0C4B                    3083 00300$:
                           3084 ;	main.c:251: for(k=3;k<8;k++)
                           3085 ;	genPlus
                           3086 ;     genPlusIncr
   0C4B 05*00              3087 	inc	_main_sloc0_1_0
   0C4D E4                 3088 	clr	a
   0C4E B5*00 02           3089 	cjne	a,_main_sloc0_1_0,00496$
   0C51 05*01              3090 	inc	(_main_sloc0_1_0 + 1)
   0C53                    3091 00496$:
   0C53 02s0BrA6           3092 	ljmp	00298$
   0C56                    3093 00304$:
                           3094 ;	main.c:249: for(j=0;j<=i;j++)          // This fop loop is used for displaying the contents of the ROW_val on the screen
                           3095 ;	genPlus
                           3096 ;     genPlusIncr
   0C56 08                 3097 	inc	r0
   0C57 B8 00 01           3098 	cjne	r0,#0x00,00497$
   0C5A 09                 3099 	inc	r1
   0C5B                    3100 00497$:
   0C5B 02s0Br59           3101 	ljmp	00302$
   0C5E                    3102 00308$:
                           3103 ;	main.c:235: for(i=0;i<8;i++)
                           3104 ;	genPlus
                           3105 ;     genPlusIncr
   0C5E 74 01              3106 	mov	a,#0x01
                           3107 ;	Peephole 236.a	used r6 instead of ar6
   0C60 2E                 3108 	add	a,r6
   0C61 FC                 3109 	mov	r4,a
                           3110 ;	Peephole 181	changed mov to clr
   0C62 E4                 3111 	clr	a
                           3112 ;	Peephole 236.b	used r7 instead of ar7
   0C63 3F                 3113 	addc	a,r7
   0C64 FD                 3114 	mov	r5,a
   0C65 02s0Ar4D           3115 	ljmp	00306$
   0C68                    3116 00309$:
                           3117 ;	main.c:260: lcdcreatechar(ccode,row_val);           // After getting all 7 values, new character  is storedin CGRAM
                           3118 ;	genCast
   0C68 90s00r00           3119 	mov	dptr,#_lcdcreatechar_PARM_2
   0C6B 74r2D              3120 	mov	a,#_main_row_val_1_1
   0C6D F0                 3121 	movx	@dptr,a
   0C6E A3                 3122 	inc	dptr
   0C6F 74s00              3123 	mov	a,#(_main_row_val_1_1 >> 8)
   0C71 F0                 3124 	movx	@dptr,a
   0C72 A3                 3125 	inc	dptr
   0C73 74 00              3126 	mov	a,#0x0
   0C75 F0                 3127 	movx	@dptr,a
                           3128 ;	genCall
   0C76 8B 82              3129 	mov	dpl,r3
   0C78 C0 02              3130 	push	ar2
   0C7A 12s00r00           3131 	lcall	_lcdcreatechar
   0C7D D0 02              3132 	pop	ar2
   0C7F 02s0Dr2B           3133 	ljmp	00235$
   0C82                    3134 00215$:
                           3135 ;	main.c:265: else if(store=='8')
                           3136 ;	genCmpEq
                           3137 ;	gencjneshort
   0C82 BA 38 02           3138 	cjne	r2,#0x38,00498$
   0C85 80 03              3139 	sjmp	00499$
   0C87                    3140 00498$:
   0C87 02s0Dr06           3141 	ljmp	00212$
   0C8A                    3142 00499$:
                           3143 ;	main.c:267: printf_tiny("\n\n\r\t Select Character code between 0 to 7 to display: \t");
                           3144 ;	genIpush
   0C8A C0 02              3145 	push	ar2
   0C8C 74r69              3146 	mov	a,#__str_46
   0C8E C0 E0              3147 	push	acc
   0C90 74s08              3148 	mov	a,#(__str_46 >> 8)
   0C92 C0 E0              3149 	push	acc
                           3150 ;	genCall
   0C94 12s00r00           3151 	lcall	_printf_tiny
   0C97 15 81              3152 	dec	sp
   0C99 15 81              3153 	dec	sp
   0C9B D0 02              3154 	pop	ar2
                           3155 ;	main.c:268: do
   0C9D                    3156 00200$:
                           3157 ;	main.c:270: gets(c);
                           3158 ;	genCall
                           3159 ;	Peephole 182.a	used 16 bit load of DPTR
   0C9D 90s00r1A           3160 	mov	dptr,#_main_c_1_1
   0CA0 75 F0 00           3161 	mov	b,#0x00
   0CA3 C0 02              3162 	push	ar2
   0CA5 12s00r00           3163 	lcall	_gets
   0CA8 D0 02              3164 	pop	ar2
                           3165 ;	main.c:271: num=atoi(c);
                           3166 ;	genCall
                           3167 ;	Peephole 182.a	used 16 bit load of DPTR
   0CAA 90s00r1A           3168 	mov	dptr,#_main_c_1_1
   0CAD 75 F0 00           3169 	mov	b,#0x00
   0CB0 C0 02              3170 	push	ar2
   0CB2 12s00r00           3171 	lcall	_atoi
   0CB5 AB 82              3172 	mov	r3,dpl
   0CB7 AC 83              3173 	mov	r4,dph
   0CB9 D0 02              3174 	pop	ar2
                           3175 ;	main.c:272: if(num>7){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 7");}
                           3176 ;	genCmpGt
                           3177 ;	genCmp
   0CBB C3                 3178 	clr	c
   0CBC 74 07              3179 	mov	a,#0x07
   0CBE 9B                 3180 	subb	a,r3
                           3181 ;	Peephole 159	avoided xrl during execution
   0CBF 74 80              3182 	mov	a,#(0x00 ^ 0x80)
   0CC1 8C F0              3183 	mov	b,r4
   0CC3 63 F0 80           3184 	xrl	b,#0x80
   0CC6 95 F0              3185 	subb	a,b
   0CC8 E4                 3186 	clr	a
   0CC9 33                 3187 	rlc	a
                           3188 ;	genIfx
   0CCA FD                 3189 	mov	r5,a
                           3190 ;	Peephole 105	removed redundant mov
                           3191 ;	genIfxJump
                           3192 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0CCB 60 1F              3193 	jz	00201$
                           3194 ;	Peephole 300	removed redundant label 00500$
                           3195 ;	genIpush
   0CCD C0 02              3196 	push	ar2
   0CCF C0 03              3197 	push	ar3
   0CD1 C0 04              3198 	push	ar4
   0CD3 C0 05              3199 	push	ar5
   0CD5 74r72              3200 	mov	a,#__str_39
   0CD7 C0 E0              3201 	push	acc
   0CD9 74s07              3202 	mov	a,#(__str_39 >> 8)
   0CDB C0 E0              3203 	push	acc
                           3204 ;	genCall
   0CDD 12s00r00           3205 	lcall	_printf_tiny
   0CE0 15 81              3206 	dec	sp
   0CE2 15 81              3207 	dec	sp
   0CE4 D0 05              3208 	pop	ar5
   0CE6 D0 04              3209 	pop	ar4
   0CE8 D0 03              3210 	pop	ar3
   0CEA D0 02              3211 	pop	ar2
   0CEC                    3212 00201$:
                           3213 ;	main.c:273: }while(num>7);
                           3214 ;	genIfx
   0CEC ED                 3215 	mov	a,r5
                           3216 ;	genIfxJump
                           3217 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0CED 70 AE              3218 	jnz	00200$
                           3219 ;	Peephole 300	removed redundant label 00501$
                           3220 ;	main.c:274: ccode=num;
                           3221 ;	genCast
                           3222 ;	main.c:275: lcd_dis_cus(ccode,2,3);
                           3223 ;	genAssign
   0CEF 90s00r00           3224 	mov	dptr,#_lcd_dis_cus_PARM_2
   0CF2 74 02              3225 	mov	a,#0x02
   0CF4 F0                 3226 	movx	@dptr,a
                           3227 ;	genAssign
   0CF5 90s00r00           3228 	mov	dptr,#_lcd_dis_cus_PARM_3
   0CF8 74 03              3229 	mov	a,#0x03
   0CFA F0                 3230 	movx	@dptr,a
                           3231 ;	genCall
   0CFB 8B 82              3232 	mov	dpl,r3
   0CFD C0 02              3233 	push	ar2
   0CFF 12s00r00           3234 	lcall	_lcd_dis_cus
   0D02 D0 02              3235 	pop	ar2
                           3236 ;	Peephole 112.b	changed ljmp to sjmp
   0D04 80 25              3237 	sjmp	00235$
   0D06                    3238 00212$:
                           3239 ;	main.c:280: else if(store=='q')
                           3240 ;	genCmpEq
                           3241 ;	gencjneshort
                           3242 ;	Peephole 112.b	changed ljmp to sjmp
                           3243 ;	Peephole 198.b	optimized misc jump sequence
   0D06 BA 71 0C           3244 	cjne	r2,#0x71,00209$
                           3245 ;	Peephole 200.b	removed redundant sjmp
                           3246 ;	Peephole 300	removed redundant label 00502$
                           3247 ;	Peephole 300	removed redundant label 00503$
                           3248 ;	main.c:282: lcdputcmd(1);
                           3249 ;	genCall
   0D09 75 82 01           3250 	mov	dpl,#0x01
   0D0C C0 02              3251 	push	ar2
   0D0E 12s00r00           3252 	lcall	_lcdputcmd
   0D11 D0 02              3253 	pop	ar2
                           3254 ;	Peephole 112.b	changed ljmp to sjmp
   0D13 80 16              3255 	sjmp	00235$
   0D15                    3256 00209$:
                           3257 ;	main.c:286: else if(store=='c')
                           3258 ;	genCmpEq
                           3259 ;	gencjneshort
                           3260 ;	Peephole 112.b	changed ljmp to sjmp
                           3261 ;	Peephole 198.b	optimized misc jump sequence
   0D15 BA 63 09           3262 	cjne	r2,#0x63,00206$
                           3263 ;	Peephole 200.b	removed redundant sjmp
                           3264 ;	Peephole 300	removed redundant label 00504$
                           3265 ;	Peephole 300	removed redundant label 00505$
                           3266 ;	main.c:288: CGRAM_dump();
                           3267 ;	genCall
   0D18 C0 02              3268 	push	ar2
   0D1A 12s00r00           3269 	lcall	_CGRAM_dump
   0D1D D0 02              3270 	pop	ar2
                           3271 ;	Peephole 112.b	changed ljmp to sjmp
   0D1F 80 0A              3272 	sjmp	00235$
   0D21                    3273 00206$:
                           3274 ;	main.c:291: else if(store=='d')
                           3275 ;	genCmpEq
                           3276 ;	gencjneshort
                           3277 ;	Peephole 112.b	changed ljmp to sjmp
                           3278 ;	Peephole 198.b	optimized misc jump sequence
   0D21 BA 64 07           3279 	cjne	r2,#0x64,00235$
                           3280 ;	Peephole 200.b	removed redundant sjmp
                           3281 ;	Peephole 300	removed redundant label 00506$
                           3282 ;	Peephole 300	removed redundant label 00507$
                           3283 ;	main.c:293: DDRAM_dump();
                           3284 ;	genCall
   0D24 C0 02              3285 	push	ar2
   0D26 12s00r00           3286 	lcall	_DDRAM_dump
   0D29 D0 02              3287 	pop	ar2
   0D2B                    3288 00235$:
                           3289 ;	main.c:296: if(store=='w' || store=='r' || store=='l')
                           3290 ;	genCmpEq
                           3291 ;	gencjne
                           3292 ;	gencjneshort
                           3293 ;	Peephole 241.d	optimized compare
   0D2B E4                 3294 	clr	a
   0D2C BA 77 01           3295 	cjne	r2,#0x77,00508$
   0D2F 04                 3296 	inc	a
   0D30                    3297 00508$:
                           3298 ;	Peephole 300	removed redundant label 00509$
                           3299 ;	genIfx
   0D30 FB                 3300 	mov	r3,a
                           3301 ;	Peephole 105	removed redundant mov
                           3302 ;	genIfxJump
                           3303 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0D31 70 0D              3304 	jnz	00282$
                           3305 ;	Peephole 300	removed redundant label 00510$
                           3306 ;	genCmpEq
                           3307 ;	gencjneshort
   0D33 BA 72 02           3308 	cjne	r2,#0x72,00511$
                           3309 ;	Peephole 112.b	changed ljmp to sjmp
   0D36 80 08              3310 	sjmp	00282$
   0D38                    3311 00511$:
                           3312 ;	genCmpEq
                           3313 ;	gencjneshort
   0D38 BA 6C 02           3314 	cjne	r2,#0x6C,00512$
   0D3B 80 03              3315 	sjmp	00513$
   0D3D                    3316 00512$:
   0D3D 02s0ErF5           3317 	ljmp	00283$
   0D40                    3318 00513$:
   0D40                    3319 00282$:
                           3320 ;	main.c:299: printf_tiny("\n\n\r Enter Address in Hex in HHH format between 000 to 7FF: ");  // Promt user to input address in the specified range
                           3321 ;	genIpush
   0D40 C0 02              3322 	push	ar2
   0D42 C0 03              3323 	push	ar3
   0D44 74rA1              3324 	mov	a,#__str_47
   0D46 C0 E0              3325 	push	acc
   0D48 74s08              3326 	mov	a,#(__str_47 >> 8)
   0D4A C0 E0              3327 	push	acc
                           3328 ;	genCall
   0D4C 12s00r00           3329 	lcall	_printf_tiny
   0D4F 15 81              3330 	dec	sp
   0D51 15 81              3331 	dec	sp
   0D53 D0 03              3332 	pop	ar3
   0D55 D0 02              3333 	pop	ar2
                           3334 ;	main.c:302: do{
   0D57                    3335 00239$:
                           3336 ;	main.c:303: flag=0;
                           3337 ;	genAssign
   0D57 90s00r2B           3338 	mov	dptr,#_main_flag_1_1
   0D5A E4                 3339 	clr	a
   0D5B F0                 3340 	movx	@dptr,a
   0D5C A3                 3341 	inc	dptr
   0D5D F0                 3342 	movx	@dptr,a
                           3343 ;	main.c:304: gets(b);
                           3344 ;	genCall
                           3345 ;	Peephole 182.a	used 16 bit load of DPTR
   0D5E 90s00r26           3346 	mov	dptr,#_main_b_1_1
   0D61 75 F0 00           3347 	mov	b,#0x00
   0D64 C0 02              3348 	push	ar2
   0D66 C0 03              3349 	push	ar3
   0D68 12s00r00           3350 	lcall	_gets
   0D6B D0 03              3351 	pop	ar3
   0D6D D0 02              3352 	pop	ar2
                           3353 ;	main.c:305: addr=atoh(b);            // Get data from the user    //Conver that data into hex
                           3354 ;	genCall
                           3355 ;	Peephole 182.a	used 16 bit load of DPTR
   0D6F 90s00r26           3356 	mov	dptr,#_main_b_1_1
   0D72 75 F0 00           3357 	mov	b,#0x00
   0D75 C0 02              3358 	push	ar2
   0D77 C0 03              3359 	push	ar3
   0D79 12s00r00           3360 	lcall	_atoh
   0D7C AC 82              3361 	mov	r4,dpl
   0D7E AD 83              3362 	mov	r5,dph
   0D80 D0 03              3363 	pop	ar3
   0D82 D0 02              3364 	pop	ar2
                           3365 ;	main.c:306: if(addr<2048)              // Check if address is in valid range
                           3366 ;	genAssign
   0D84 8C 06              3367 	mov	ar6,r4
   0D86 8D 07              3368 	mov	ar7,r5
                           3369 ;	genCmpLt
                           3370 ;	genCmp
                           3371 ;	genIfxJump
                           3372 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           3373 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0D88 74 F8              3374 	mov	a,#0x100 - 0x08
   0D8A 2F                 3375 	add	a,r7
   0D8B 40 0B              3376 	jc	00237$
                           3377 ;	Peephole 300	removed redundant label 00514$
                           3378 ;	main.c:308: flag=1;
                           3379 ;	genAssign
   0D8D 90s00r2B           3380 	mov	dptr,#_main_flag_1_1
   0D90 74 01              3381 	mov	a,#0x01
   0D92 F0                 3382 	movx	@dptr,a
   0D93 E4                 3383 	clr	a
   0D94 A3                 3384 	inc	dptr
   0D95 F0                 3385 	movx	@dptr,a
                           3386 ;	Peephole 112.b	changed ljmp to sjmp
   0D96 80 1F              3387 	sjmp	00240$
   0D98                    3388 00237$:
                           3389 ;	main.c:313: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address betweem 000 and 7FF: ");
                           3390 ;	genIpush
   0D98 C0 02              3391 	push	ar2
   0D9A C0 03              3392 	push	ar3
   0D9C C0 04              3393 	push	ar4
   0D9E C0 05              3394 	push	ar5
   0DA0 74rDD              3395 	mov	a,#__str_48
   0DA2 C0 E0              3396 	push	acc
   0DA4 74s08              3397 	mov	a,#(__str_48 >> 8)
   0DA6 C0 E0              3398 	push	acc
                           3399 ;	genCall
   0DA8 12s00r00           3400 	lcall	_printf_tiny
   0DAB 15 81              3401 	dec	sp
   0DAD 15 81              3402 	dec	sp
   0DAF D0 05              3403 	pop	ar5
   0DB1 D0 04              3404 	pop	ar4
   0DB3 D0 03              3405 	pop	ar3
   0DB5 D0 02              3406 	pop	ar2
   0DB7                    3407 00240$:
                           3408 ;	main.c:315: }while(flag==0);
                           3409 ;	genAssign
   0DB7 90s00r2B           3410 	mov	dptr,#_main_flag_1_1
   0DBA E0                 3411 	movx	a,@dptr
   0DBB FE                 3412 	mov	r6,a
   0DBC A3                 3413 	inc	dptr
   0DBD E0                 3414 	movx	a,@dptr
                           3415 ;	genIfx
   0DBE FF                 3416 	mov	r7,a
                           3417 ;	Peephole 135	removed redundant mov
   0DBF 4E                 3418 	orl	a,r6
                           3419 ;	genIfxJump
                           3420 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0DC0 60 95              3421 	jz	00239$
                           3422 ;	Peephole 300	removed redundant label 00515$
                           3423 ;	main.c:317: page=addr/256;          // Calculate PAage block from the address
                           3424 ;	genAssign
   0DC2 8C 06              3425 	mov	ar6,r4
   0DC4 8D 07              3426 	mov	ar7,r5
                           3427 ;	genRightShift
                           3428 ;	genRightShiftLiteral
                           3429 ;	genrshTwo
   0DC6 8F*02              3430 	mov	_main_sloc1_1_0,r7
   0DC8 75*03 00           3431 	mov	(_main_sloc1_1_0 + 1),#0x00
                           3432 ;	main.c:319: if(store=='w')
                           3433 ;	genIfx
   0DCB EB                 3434 	mov	a,r3
                           3435 ;	genIfxJump
   0DCC 70 03              3436 	jnz	00516$
   0DCE 02s0Er80           3437 	ljmp	00254$
   0DD1                    3438 00516$:
                           3439 ;	main.c:323: printf_tiny("\n\n\r Enter Data in Hex in HH format between 00 to FF: ");
                           3440 ;	genIpush
   0DD1 C0 02              3441 	push	ar2
   0DD3 C0 04              3442 	push	ar4
   0DD5 C0 05              3443 	push	ar5
   0DD7 74r1D              3444 	mov	a,#__str_49
   0DD9 C0 E0              3445 	push	acc
   0DDB 74s09              3446 	mov	a,#(__str_49 >> 8)
   0DDD C0 E0              3447 	push	acc
                           3448 ;	genCall
   0DDF 12s00r00           3449 	lcall	_printf_tiny
   0DE2 15 81              3450 	dec	sp
   0DE4 15 81              3451 	dec	sp
   0DE6 D0 05              3452 	pop	ar5
   0DE8 D0 04              3453 	pop	ar4
   0DEA D0 02              3454 	pop	ar2
                           3455 ;	main.c:324: do{
   0DEC                    3456 00245$:
                           3457 ;	main.c:325: flag=0;
                           3458 ;	genIpush
                           3459 ;	genAssign
   0DEC 90s00r2B           3460 	mov	dptr,#_main_flag_1_1
   0DEF E4                 3461 	clr	a
   0DF0 F0                 3462 	movx	@dptr,a
   0DF1 A3                 3463 	inc	dptr
   0DF2 F0                 3464 	movx	@dptr,a
                           3465 ;	main.c:326: gets(d);            // Get data from the user
                           3466 ;	genCall
                           3467 ;	Peephole 182.a	used 16 bit load of DPTR
   0DF3 90s00r1E           3468 	mov	dptr,#_main_d_1_1
   0DF6 75 F0 00           3469 	mov	b,#0x00
   0DF9 C0 02              3470 	push	ar2
   0DFB C0 04              3471 	push	ar4
   0DFD C0 05              3472 	push	ar5
   0DFF 12s00r00           3473 	lcall	_gets
   0E02 D0 05              3474 	pop	ar5
   0E04 D0 04              3475 	pop	ar4
   0E06 D0 02              3476 	pop	ar2
                           3477 ;	main.c:327: dat=atoh_data(d);   //Conver that data into hex
                           3478 ;	genCall
                           3479 ;	Peephole 182.a	used 16 bit load of DPTR
   0E08 90s00r1E           3480 	mov	dptr,#_main_d_1_1
   0E0B 75 F0 00           3481 	mov	b,#0x00
   0E0E C0 02              3482 	push	ar2
   0E10 C0 04              3483 	push	ar4
   0E12 C0 05              3484 	push	ar5
   0E14 12s00r00           3485 	lcall	_atoh_data
   0E17 AB 82              3486 	mov	r3,dpl
   0E19 A8 83              3487 	mov	r0,dph
   0E1B D0 05              3488 	pop	ar5
   0E1D D0 04              3489 	pop	ar4
   0E1F D0 02              3490 	pop	ar2
                           3491 ;	main.c:328: if(dat<256)
                           3492 ;	genAssign
   0E21 8B 01              3493 	mov	ar1,r3
   0E23 88 06              3494 	mov	ar6,r0
                           3495 ;	genCmpLt
                           3496 ;	genCmp
                           3497 ;	genIpop
                           3498 ;	genIfx
                           3499 ;	genIfxJump
                           3500 ;	Peephole 108.c	removed ljmp by inverse jump logic
                           3501 ;	Peephole 128	jump optimization
                           3502 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0E25 74 FF              3503 	mov	a,#0x100 - 0x01
   0E27 2E                 3504 	add	a,r6
   0E28 40 0B              3505 	jc	00243$
                           3506 ;	Peephole 300	removed redundant label 00517$
                           3507 ;	main.c:330: flag=1;
                           3508 ;	genAssign
   0E2A 90s00r2B           3509 	mov	dptr,#_main_flag_1_1
   0E2D 74 01              3510 	mov	a,#0x01
   0E2F F0                 3511 	movx	@dptr,a
   0E30 E4                 3512 	clr	a
   0E31 A3                 3513 	inc	dptr
   0E32 F0                 3514 	movx	@dptr,a
                           3515 ;	Peephole 112.b	changed ljmp to sjmp
   0E33 80 23              3516 	sjmp	00246$
   0E35                    3517 00243$:
                           3518 ;	main.c:335: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid data in Hex in HH format between 00 to FF: ");
                           3519 ;	genIpush
   0E35 C0 02              3520 	push	ar2
   0E37 C0 03              3521 	push	ar3
   0E39 C0 04              3522 	push	ar4
   0E3B C0 05              3523 	push	ar5
   0E3D C0 00              3524 	push	ar0
   0E3F 74r53              3525 	mov	a,#__str_50
   0E41 C0 E0              3526 	push	acc
   0E43 74s09              3527 	mov	a,#(__str_50 >> 8)
   0E45 C0 E0              3528 	push	acc
                           3529 ;	genCall
   0E47 12s00r00           3530 	lcall	_printf_tiny
   0E4A 15 81              3531 	dec	sp
   0E4C 15 81              3532 	dec	sp
   0E4E D0 00              3533 	pop	ar0
   0E50 D0 05              3534 	pop	ar5
   0E52 D0 04              3535 	pop	ar4
   0E54 D0 03              3536 	pop	ar3
   0E56 D0 02              3537 	pop	ar2
   0E58                    3538 00246$:
                           3539 ;	main.c:337: }while(flag==0);
                           3540 ;	genAssign
   0E58 90s00r2B           3541 	mov	dptr,#_main_flag_1_1
   0E5B E0                 3542 	movx	a,@dptr
   0E5C F9                 3543 	mov	r1,a
   0E5D A3                 3544 	inc	dptr
   0E5E E0                 3545 	movx	a,@dptr
                           3546 ;	genIfx
   0E5F FE                 3547 	mov	r6,a
                           3548 ;	Peephole 135	removed redundant mov
   0E60 49                 3549 	orl	a,r1
                           3550 ;	genIfxJump
   0E61 70 03              3551 	jnz	00518$
   0E63 02s0DrEC           3552 	ljmp	00245$
   0E66                    3553 00518$:
                           3554 ;	main.c:339: EEPROM_WriteByte((addr-page*256),dat,page);     // Write byte to the specified address
                           3555 ;	genAssign
   0E66 8C 06              3556 	mov	ar6,r4
                           3557 ;	genCast
                           3558 ;	genCast
                           3559 ;	peephole 177.f	removed redundant move
   0E68 AF*02              3560 	mov	r7,_main_sloc1_1_0
                           3561 ;	genAssign
                           3562 ;	genCast
   0E6A 90s00r00           3563 	mov	dptr,#_EEPROM_WriteByte_PARM_2
   0E6D EB                 3564 	mov	a,r3
   0E6E F0                 3565 	movx	@dptr,a
                           3566 ;	genAssign
   0E6F 90s00r00           3567 	mov	dptr,#_EEPROM_WriteByte_PARM_3
   0E72 EF                 3568 	mov	a,r7
   0E73 F0                 3569 	movx	@dptr,a
                           3570 ;	genCall
   0E74 8E 82              3571 	mov	dpl,r6
   0E76 C0 02              3572 	push	ar2
   0E78 12s00r00           3573 	lcall	_EEPROM_WriteByte
   0E7B D0 02              3574 	pop	ar2
   0E7D 02s0Fr87           3575 	ljmp	00284$
   0E80                    3576 00254$:
                           3577 ;	main.c:342: else if(store=='r')
                           3578 ;	genCmpEq
                           3579 ;	gencjneshort
                           3580 ;	Peephole 112.b	changed ljmp to sjmp
                           3581 ;	Peephole 198.b	optimized misc jump sequence
   0E80 BA 72 3F           3582 	cjne	r2,#0x72,00251$
                           3583 ;	Peephole 200.b	removed redundant sjmp
                           3584 ;	Peephole 300	removed redundant label 00519$
                           3585 ;	Peephole 300	removed redundant label 00520$
                           3586 ;	main.c:346: rd=EEPROM_ReadByte((addr-page*256),page);
                           3587 ;	genAssign
   0E83 8C 03              3588 	mov	ar3,r4
   0E85 8D 06              3589 	mov	ar6,r5
                           3590 ;	genCast
                           3591 ;	genCast
   0E87 90s00r00           3592 	mov	dptr,#_EEPROM_ReadByte_PARM_2
   0E8A E5*02              3593 	mov	a,_main_sloc1_1_0
   0E8C F0                 3594 	movx	@dptr,a
                           3595 ;	genCall
   0E8D 8B 82              3596 	mov	dpl,r3
   0E8F C0 02              3597 	push	ar2
   0E91 C0 04              3598 	push	ar4
   0E93 C0 05              3599 	push	ar5
   0E95 12s00r00           3600 	lcall	_EEPROM_ReadByte
   0E98 AB 82              3601 	mov	r3,dpl
   0E9A D0 05              3602 	pop	ar5
   0E9C D0 04              3603 	pop	ar4
   0E9E D0 02              3604 	pop	ar2
                           3605 ;	main.c:347: printf_tiny("\n\n\r\t\t\t%x : %x \n",addr,rd);  //Data is printed in AAA:DD format
                           3606 ;	genCast
   0EA0 7E 00              3607 	mov	r6,#0x00
                           3608 ;	genIpush
   0EA2 C0 02              3609 	push	ar2
   0EA4 C0 03              3610 	push	ar3
   0EA6 C0 06              3611 	push	ar6
                           3612 ;	genIpush
   0EA8 C0 04              3613 	push	ar4
   0EAA C0 05              3614 	push	ar5
                           3615 ;	genIpush
   0EAC 74rA1              3616 	mov	a,#__str_51
   0EAE C0 E0              3617 	push	acc
   0EB0 74s09              3618 	mov	a,#(__str_51 >> 8)
   0EB2 C0 E0              3619 	push	acc
                           3620 ;	genCall
   0EB4 12s00r00           3621 	lcall	_printf_tiny
   0EB7 E5 81              3622 	mov	a,sp
   0EB9 24 FA              3623 	add	a,#0xfa
   0EBB F5 81              3624 	mov	sp,a
   0EBD D0 02              3625 	pop	ar2
   0EBF 02s0Fr87           3626 	ljmp	00284$
   0EC2                    3627 00251$:
                           3628 ;	main.c:349: else if(store=='l')
                           3629 ;	genCmpEq
                           3630 ;	gencjneshort
   0EC2 BA 6C 02           3631 	cjne	r2,#0x6C,00521$
   0EC5 80 03              3632 	sjmp	00522$
   0EC7                    3633 00521$:
   0EC7 02s0Fr87           3634 	ljmp	00284$
   0ECA                    3635 00522$:
                           3636 ;	main.c:351: rd=EEPROM_ReadByte((addr-page*256),page);
                           3637 ;	genAssign
                           3638 ;	genCast
                           3639 ;	genCast
   0ECA 90s00r00           3640 	mov	dptr,#_EEPROM_ReadByte_PARM_2
   0ECD E5*02              3641 	mov	a,_main_sloc1_1_0
   0ECF F0                 3642 	movx	@dptr,a
                           3643 ;	genCall
   0ED0 8C 82              3644 	mov	dpl,r4
   0ED2 C0 02              3645 	push	ar2
   0ED4 12s00r00           3646 	lcall	_EEPROM_ReadByte
   0ED7 AB 82              3647 	mov	r3,dpl
   0ED9 D0 02              3648 	pop	ar2
                           3649 ;	main.c:352: lcd_display(rd,b);
                           3650 ;	genCast
   0EDB 90s00r00           3651 	mov	dptr,#_lcd_display_PARM_2
   0EDE 74r26              3652 	mov	a,#_main_b_1_1
   0EE0 F0                 3653 	movx	@dptr,a
   0EE1 A3                 3654 	inc	dptr
   0EE2 74s00              3655 	mov	a,#(_main_b_1_1 >> 8)
   0EE4 F0                 3656 	movx	@dptr,a
   0EE5 A3                 3657 	inc	dptr
   0EE6 74 00              3658 	mov	a,#0x0
   0EE8 F0                 3659 	movx	@dptr,a
                           3660 ;	genCall
   0EE9 8B 82              3661 	mov	dpl,r3
   0EEB C0 02              3662 	push	ar2
   0EED 12s00r00           3663 	lcall	_lcd_display
   0EF0 D0 02              3664 	pop	ar2
   0EF2 02s0Fr87           3665 	ljmp	00284$
   0EF5                    3666 00283$:
                           3667 ;	main.c:357: else if(store=='h')
                           3668 ;	genCmpEq
                           3669 ;	gencjneshort
                           3670 ;	Peephole 112.b	changed ljmp to sjmp
                           3671 ;	Peephole 198.b	optimized misc jump sequence
   0EF5 BA 68 0A           3672 	cjne	r2,#0x68,00280$
                           3673 ;	Peephole 200.b	removed redundant sjmp
                           3674 ;	Peephole 300	removed redundant label 00523$
                           3675 ;	Peephole 300	removed redundant label 00524$
                           3676 ;	main.c:359: hex_dump();
                           3677 ;	genCall
   0EF8 C0 02              3678 	push	ar2
   0EFA 12s00r00           3679 	lcall	_hex_dump
   0EFD D0 02              3680 	pop	ar2
   0EFF 02s0Fr87           3681 	ljmp	00284$
   0F02                    3682 00280$:
                           3683 ;	main.c:362: else if(store=='x')
                           3684 ;	genCmpEq
                           3685 ;	gencjneshort
                           3686 ;	Peephole 112.b	changed ljmp to sjmp
                           3687 ;	Peephole 198.b	optimized misc jump sequence
   0F02 BA 78 14           3688 	cjne	r2,#0x78,00277$
                           3689 ;	Peephole 200.b	removed redundant sjmp
                           3690 ;	Peephole 300	removed redundant label 00525$
                           3691 ;	Peephole 300	removed redundant label 00526$
                           3692 ;	main.c:364: io_counter=0;
                           3693 ;	genAssign
   0F05 90s00r18           3694 	mov	dptr,#_io_counter
   0F08 E4                 3695 	clr	a
   0F09 F0                 3696 	movx	@dptr,a
   0F0A A3                 3697 	inc	dptr
   0F0B F0                 3698 	movx	@dptr,a
                           3699 ;	main.c:365: io_cnt(io_counter);
                           3700 ;	genCall
                           3701 ;	Peephole 182.b	used 16 bit load of dptr
   0F0C 90 00 00           3702 	mov	dptr,#0x0000
   0F0F C0 02              3703 	push	ar2
   0F11 12s00r00           3704 	lcall	_io_cnt
   0F14 D0 02              3705 	pop	ar2
   0F16 02s0Fr87           3706 	ljmp	00284$
   0F19                    3707 00277$:
                           3708 ;	main.c:369: else if(store=='i')
                           3709 ;	genCmpEq
                           3710 ;	gencjneshort
                           3711 ;	Peephole 112.b	changed ljmp to sjmp
                           3712 ;	Peephole 198.b	optimized misc jump sequence
   0F19 BA 69 0A           3713 	cjne	r2,#0x69,00274$
                           3714 ;	Peephole 200.b	removed redundant sjmp
                           3715 ;	Peephole 300	removed redundant label 00527$
                           3716 ;	Peephole 300	removed redundant label 00528$
                           3717 ;	main.c:371: io_exp_dir();
                           3718 ;	genCall
   0F1C C0 02              3719 	push	ar2
   0F1E 12s00r00           3720 	lcall	_io_exp_dir
   0F21 D0 02              3721 	pop	ar2
   0F23 02s0Fr87           3722 	ljmp	00284$
   0F26                    3723 00274$:
                           3724 ;	main.c:376: else if(store=='s')
                           3725 ;	genCmpEq
                           3726 ;	gencjneshort
                           3727 ;	Peephole 112.b	changed ljmp to sjmp
                           3728 ;	Peephole 198.b	optimized misc jump sequence
   0F26 BA 73 26           3729 	cjne	r2,#0x73,00271$
                           3730 ;	Peephole 200.b	removed redundant sjmp
                           3731 ;	Peephole 300	removed redundant label 00529$
                           3732 ;	Peephole 300	removed redundant label 00530$
                           3733 ;	main.c:378: printf_tiny("\n\n\r\t Current Status of the IO_Expander pins is: 0x%x\n\n\r",IOEX_ReadByte());
                           3734 ;	genCall
   0F29 C0 02              3735 	push	ar2
   0F2B 12s00r00           3736 	lcall	_IOEX_ReadByte
   0F2E AB 82              3737 	mov	r3,dpl
   0F30 D0 02              3738 	pop	ar2
                           3739 ;	genCast
   0F32 7C 00              3740 	mov	r4,#0x00
                           3741 ;	genIpush
   0F34 C0 02              3742 	push	ar2
   0F36 C0 03              3743 	push	ar3
   0F38 C0 04              3744 	push	ar4
                           3745 ;	genIpush
   0F3A 74rB1              3746 	mov	a,#__str_52
   0F3C C0 E0              3747 	push	acc
   0F3E 74s09              3748 	mov	a,#(__str_52 >> 8)
   0F40 C0 E0              3749 	push	acc
                           3750 ;	genCall
   0F42 12s00r00           3751 	lcall	_printf_tiny
   0F45 E5 81              3752 	mov	a,sp
   0F47 24 FC              3753 	add	a,#0xfc
   0F49 F5 81              3754 	mov	sp,a
   0F4B D0 02              3755 	pop	ar2
                           3756 ;	Peephole 112.b	changed ljmp to sjmp
   0F4D 80 38              3757 	sjmp	00284$
   0F4F                    3758 00271$:
                           3759 ;	main.c:383: else if(store=='9')
                           3760 ;	genCmpEq
                           3761 ;	gencjneshort
                           3762 ;	Peephole 112.b	changed ljmp to sjmp
                           3763 ;	Peephole 198.b	optimized misc jump sequence
   0F4F BA 39 09           3764 	cjne	r2,#0x39,00268$
                           3765 ;	Peephole 200.b	removed redundant sjmp
                           3766 ;	Peephole 300	removed redundant label 00531$
                           3767 ;	Peephole 300	removed redundant label 00532$
                           3768 ;	main.c:385: logo_creator();
                           3769 ;	genCall
   0F52 C0 02              3770 	push	ar2
   0F54 12s00r00           3771 	lcall	_logo_creator
   0F57 D0 02              3772 	pop	ar2
                           3773 ;	Peephole 112.b	changed ljmp to sjmp
   0F59 80 2C              3774 	sjmp	00284$
   0F5B                    3775 00268$:
                           3776 ;	main.c:389: else if(store=='y')
                           3777 ;	genCmpEq
                           3778 ;	gencjneshort
                           3779 ;	Peephole 112.b	changed ljmp to sjmp
                           3780 ;	Peephole 198.b	optimized misc jump sequence
   0F5B BA 79 13           3781 	cjne	r2,#0x79,00265$
                           3782 ;	Peephole 200.b	removed redundant sjmp
                           3783 ;	Peephole 300	removed redundant label 00533$
                           3784 ;	Peephole 300	removed redundant label 00534$
                           3785 ;	main.c:391: printf_tiny("\n\n\n\rWatchdog RESET Demo");
                           3786 ;	genIpush
   0F5E 74rE9              3787 	mov	a,#__str_53
   0F60 C0 E0              3788 	push	acc
   0F62 74s09              3789 	mov	a,#(__str_53 >> 8)
   0F64 C0 E0              3790 	push	acc
                           3791 ;	genCall
   0F66 12s00r00           3792 	lcall	_printf_tiny
   0F69 15 81              3793 	dec	sp
   0F6B 15 81              3794 	dec	sp
                           3795 ;	main.c:392: EA=0;
                           3796 ;	genAssign
   0F6D C2 AF              3797 	clr	_EA
                           3798 ;	main.c:393: while(1);
   0F6F                    3799 00257$:
                           3800 ;	Peephole 112.b	changed ljmp to sjmp
   0F6F 80 FE              3801 	sjmp	00257$
   0F71                    3802 00265$:
                           3803 ;	main.c:397: else if(store=='t')
                           3804 ;	genCmpEq
                           3805 ;	gencjneshort
                           3806 ;	Peephole 112.b	changed ljmp to sjmp
                           3807 ;	Peephole 198.b	optimized misc jump sequence
   0F71 BA 74 09           3808 	cjne	r2,#0x74,00262$
                           3809 ;	Peephole 200.b	removed redundant sjmp
                           3810 ;	Peephole 300	removed redundant label 00535$
                           3811 ;	Peephole 300	removed redundant label 00536$
                           3812 ;	main.c:400: eeprom_profile();
                           3813 ;	genCall
   0F74 C0 02              3814 	push	ar2
   0F76 12s00r00           3815 	lcall	_eeprom_profile
   0F79 D0 02              3816 	pop	ar2
                           3817 ;	Peephole 112.b	changed ljmp to sjmp
   0F7B 80 0A              3818 	sjmp	00284$
   0F7D                    3819 00262$:
                           3820 ;	main.c:405: else if(store=='b')
                           3821 ;	genCmpEq
                           3822 ;	gencjneshort
                           3823 ;	Peephole 112.b	changed ljmp to sjmp
                           3824 ;	Peephole 198.b	optimized misc jump sequence
   0F7D BA 62 07           3825 	cjne	r2,#0x62,00284$
                           3826 ;	Peephole 200.b	removed redundant sjmp
                           3827 ;	Peephole 300	removed redundant label 00537$
                           3828 ;	Peephole 300	removed redundant label 00538$
                           3829 ;	main.c:407: eeprom_block_fill();
                           3830 ;	genCall
   0F80 C0 02              3831 	push	ar2
   0F82 12s00r00           3832 	lcall	_eeprom_block_fill
   0F85 D0 02              3833 	pop	ar2
   0F87                    3834 00284$:
                           3835 ;	main.c:412: if(store=='m')
                           3836 ;	genCmpEq
                           3837 ;	gencjneshort
                           3838 ;	Peephole 112.b	changed ljmp to sjmp
                           3839 ;	Peephole 198.b	optimized misc jump sequence
   0F87 BA 6D 4B           3840 	cjne	r2,#0x6D,00288$
                           3841 ;	Peephole 200.b	removed redundant sjmp
                           3842 ;	Peephole 300	removed redundant label 00539$
                           3843 ;	Peephole 300	removed redundant label 00540$
                           3844 ;	main.c:414: printf_tiny("\n\n\r\t\t\t\t\t******** Clock Control Commands ********\n\n\r\t1. Stop Clock \t\t\t\t\t\t2. Restart Clock \t\t\t3. Reset Clock\n\r\t4. Select Count-Down Timer and Value \t\t\t5. Timer Enable \t\t\t6. Timer Disable ");
                           3845 ;	genIpush
   0F8A 74r11              3846 	mov	a,#__str_4
   0F8C C0 E0              3847 	push	acc
   0F8E 74s00              3848 	mov	a,#(__str_4 >> 8)
   0F90 C0 E0              3849 	push	acc
                           3850 ;	genCall
   0F92 12s00r00           3851 	lcall	_printf_tiny
   0F95 15 81              3852 	dec	sp
   0F97 15 81              3853 	dec	sp
                           3854 ;	main.c:415: printf_tiny("\n\n\n\r\t\t\t\t\t******** LCD Commands ********\n\n\r\t7. Create Custom Character\t\t\t8. Display Custom Character\t\t\t'c'. CGRAM Dump\t\t\t'd'. DDRAM Dump\n\r\t'l'. LCD Display\t\t\t\t'q'. Clear LCD Display");
                           3855 ;	genIpush
   0F99 74r01              3856 	mov	a,#__str_54
   0F9B C0 E0              3857 	push	acc
   0F9D 74s0A              3858 	mov	a,#(__str_54 >> 8)
   0F9F C0 E0              3859 	push	acc
                           3860 ;	genCall
   0FA1 12s00r00           3861 	lcall	_printf_tiny
   0FA4 15 81              3862 	dec	sp
   0FA6 15 81              3863 	dec	sp
                           3864 ;	main.c:416: printf_tiny("\n\n\n\r\t\t\t\t\t******** IO Expander Control Commands ********\n\n\r\t'x'. Reset Counter\t\t\t\t'i'. Configure IO Pins\t\t\t\t's'. Status of IO_Expander");
                           3865 ;	genIpush
   0FA8 74r8F              3866 	mov	a,#__str_6
   0FAA C0 E0              3867 	push	acc
   0FAC 74s01              3868 	mov	a,#(__str_6 >> 8)
   0FAE C0 E0              3869 	push	acc
                           3870 ;	genCall
   0FB0 12s00r00           3871 	lcall	_printf_tiny
   0FB3 15 81              3872 	dec	sp
   0FB5 15 81              3873 	dec	sp
                           3874 ;	main.c:417: printf_tiny("\n\n\n\r\t\t\t\t\t******** EEPROM Control Commands ******** \n\n\r\t'w'. EEPROM Write \t\t\t'r'. EEPROM Read \t\t\t\t'h'. HEX Dump\t\n\r\t");
                           3875 ;	genIpush
   0FB7 74r15              3876 	mov	a,#__str_7
   0FB9 C0 E0              3877 	push	acc
   0FBB 74s02              3878 	mov	a,#(__str_7 >> 8)
   0FBD C0 E0              3879 	push	acc
                           3880 ;	genCall
   0FBF 12s00r00           3881 	lcall	_printf_tiny
   0FC2 15 81              3882 	dec	sp
   0FC4 15 81              3883 	dec	sp
                           3884 ;	main.c:418: printf_tiny("\n\n\r\t\t\t\t\t******** Demo Commands ******** \n\n\r\t'y'. Watchdog Demo \t\t\t'9'. LOGO Creation Demo \t\t\t't'EEPROM Time Measure\n\r\t'b'. EEPROM Block Fill ");
                           3885 ;	genIpush
   0FC6 74r88              3886 	mov	a,#__str_8
   0FC8 C0 E0              3887 	push	acc
   0FCA 74s02              3888 	mov	a,#(__str_8 >> 8)
   0FCC C0 E0              3889 	push	acc
                           3890 ;	genCall
   0FCE 12s00r00           3891 	lcall	_printf_tiny
   0FD1 15 81              3892 	dec	sp
   0FD3 15 81              3893 	dec	sp
   0FD5                    3894 00288$:
                           3895 ;	main.c:421: printf_tiny("\n\n\r\t Press 'm' to see the Menu again or Press Command Key:\t");
                           3896 ;	genIpush
   0FD5 74rB6              3897 	mov	a,#__str_55
   0FD7 C0 E0              3898 	push	acc
   0FD9 74s0A              3899 	mov	a,#(__str_55 >> 8)
   0FDB C0 E0              3900 	push	acc
                           3901 ;	genCall
   0FDD 12s00r00           3902 	lcall	_printf_tiny
   0FE0 15 81              3903 	dec	sp
   0FE2 15 81              3904 	dec	sp
   0FE4 02s01rAC           3905 	ljmp	00292$
                           3906 ;	Peephole 259.b	removed redundant label 00310$ and ret
                           3907 ;
                           3908 ;------------------------------------------------------------
                           3909 ;Allocation info for local variables in function 'ext_zero'
                           3910 ;------------------------------------------------------------
                           3911 ;------------------------------------------------------------
                           3912 ;	main.c:447: void ext_zero() interrupt 0
                           3913 ;	-----------------------------------------
                           3914 ;	 function ext_zero
                           3915 ;	-----------------------------------------
   0FE7                    3916 _ext_zero:
   0FE7 C0 E0              3917 	push	acc
   0FE9 C0 F0              3918 	push	b
   0FEB C0 82              3919 	push	dpl
   0FED C0 83              3920 	push	dph
   0FEF C0 02              3921 	push	(0+2)
   0FF1 C0 03              3922 	push	(0+3)
   0FF3 C0 04              3923 	push	(0+4)
   0FF5 C0 05              3924 	push	(0+5)
   0FF7 C0 06              3925 	push	(0+6)
   0FF9 C0 07              3926 	push	(0+7)
   0FFB C0 00              3927 	push	(0+0)
   0FFD C0 01              3928 	push	(0+1)
   0FFF C0 D0              3929 	push	psw
   1001 75 D0 00           3930 	mov	psw,#0x00
                           3931 ;	main.c:450: io_counter++;               // Increament the counter after every button press
                           3932 ;	genAssign
   1004 90s00r18           3933 	mov	dptr,#_io_counter
   1007 E0                 3934 	movx	a,@dptr
   1008 FA                 3935 	mov	r2,a
   1009 A3                 3936 	inc	dptr
   100A E0                 3937 	movx	a,@dptr
   100B FB                 3938 	mov	r3,a
                           3939 ;	genPlus
   100C 90s00r18           3940 	mov	dptr,#_io_counter
                           3941 ;     genPlusIncr
   100F 74 01              3942 	mov	a,#0x01
                           3943 ;	Peephole 236.a	used r2 instead of ar2
   1011 2A                 3944 	add	a,r2
   1012 F0                 3945 	movx	@dptr,a
                           3946 ;	Peephole 181	changed mov to clr
   1013 E4                 3947 	clr	a
                           3948 ;	Peephole 236.b	used r3 instead of ar3
   1014 3B                 3949 	addc	a,r3
   1015 A3                 3950 	inc	dptr
   1016 F0                 3951 	movx	@dptr,a
                           3952 ;	main.c:451: if(io_counter==16)          // After 16 counts reet the counter to 0;
                           3953 ;	genAssign
   1017 90s00r18           3954 	mov	dptr,#_io_counter
   101A E0                 3955 	movx	a,@dptr
   101B FA                 3956 	mov	r2,a
   101C A3                 3957 	inc	dptr
   101D E0                 3958 	movx	a,@dptr
   101E FB                 3959 	mov	r3,a
                           3960 ;	genCmpEq
                           3961 ;	gencjneshort
                           3962 ;	Peephole 112.b	changed ljmp to sjmp
                           3963 ;	Peephole 198.a	optimized misc jump sequence
   101F BA 10 0A           3964 	cjne	r2,#0x10,00102$
   1022 BB 00 07           3965 	cjne	r3,#0x00,00102$
                           3966 ;	Peephole 200.b	removed redundant sjmp
                           3967 ;	Peephole 300	removed redundant label 00109$
                           3968 ;	Peephole 300	removed redundant label 00110$
                           3969 ;	main.c:453: io_counter=0;
                           3970 ;	genAssign
   1025 90s00r18           3971 	mov	dptr,#_io_counter
   1028 E4                 3972 	clr	a
   1029 F0                 3973 	movx	@dptr,a
   102A A3                 3974 	inc	dptr
   102B F0                 3975 	movx	@dptr,a
   102C                    3976 00102$:
                           3977 ;	main.c:455: if(io_counter%2==0){io_cnt(io_counter/2);}
                           3978 ;	genAssign
   102C 90s00r18           3979 	mov	dptr,#_io_counter
   102F E0                 3980 	movx	a,@dptr
   1030 FA                 3981 	mov	r2,a
   1031 A3                 3982 	inc	dptr
   1032 E0                 3983 	movx	a,@dptr
   1033 FB                 3984 	mov	r3,a
                           3985 ;	genAnd
   1034 EA                 3986 	mov	a,r2
                           3987 ;	genIfxJump
                           3988 ;	Peephole 108.e	removed ljmp by inverse jump logic
   1035 20 E0 0E           3989 	jb	acc.0,00105$
                           3990 ;	Peephole 300	removed redundant label 00111$
                           3991 ;	genRightShift
                           3992 ;	genRightShiftLiteral
                           3993 ;	genrshTwo
   1038 EB                 3994 	mov	a,r3
   1039 C3                 3995 	clr	c
   103A 13                 3996 	rrc	a
   103B CA                 3997 	xch	a,r2
   103C 13                 3998 	rrc	a
   103D CA                 3999 	xch	a,r2
   103E FB                 4000 	mov	r3,a
                           4001 ;	genCall
   103F 8A 82              4002 	mov	dpl,r2
   1041 8B 83              4003 	mov	dph,r3
   1043 12s00r00           4004 	lcall	_io_cnt
   1046                    4005 00105$:
   1046 D0 D0              4006 	pop	psw
   1048 D0 01              4007 	pop	(0+1)
   104A D0 00              4008 	pop	(0+0)
   104C D0 07              4009 	pop	(0+7)
   104E D0 06              4010 	pop	(0+6)
   1050 D0 05              4011 	pop	(0+5)
   1052 D0 04              4012 	pop	(0+4)
   1054 D0 03              4013 	pop	(0+3)
   1056 D0 02              4014 	pop	(0+2)
   1058 D0 83              4015 	pop	dph
   105A D0 82              4016 	pop	dpl
   105C D0 F0              4017 	pop	b
   105E D0 E0              4018 	pop	acc
   1060 32                 4019 	reti
                           4020 ;------------------------------------------------------------
                           4021 ;Allocation info for local variables in function 'timer_isr'
                           4022 ;------------------------------------------------------------
                           4023 ;sloc0                     Allocated with name '_timer_isr_sloc0_1_0'
                           4024 ;sloc1                     Allocated with name '_timer_isr_sloc1_1_0'
                           4025 ;i                         Allocated with name '_timer_isr_i_1_1'
                           4026 ;------------------------------------------------------------
                           4027 ;	main.c:470: void timer_isr() interrupt 1
                           4028 ;	-----------------------------------------
                           4029 ;	 function timer_isr
                           4030 ;	-----------------------------------------
   1061                    4031 _timer_isr:
   1061 C0 E0              4032 	push	acc
   1063 C0 F0              4033 	push	b
   1065 C0 82              4034 	push	dpl
   1067 C0 83              4035 	push	dph
   1069 C0 02              4036 	push	(0+2)
   106B C0 03              4037 	push	(0+3)
   106D C0 04              4038 	push	(0+4)
   106F C0 05              4039 	push	(0+5)
   1071 C0 06              4040 	push	(0+6)
   1073 C0 07              4041 	push	(0+7)
   1075 C0 00              4042 	push	(0+0)
   1077 C0 01              4043 	push	(0+1)
   1079 C0 D0              4044 	push	psw
   107B 75 D0 00           4045 	mov	psw,#0x00
                           4046 ;	main.c:473: flag++;
                           4047 ;	genAssign
   107E 90s00r00           4048 	mov	dptr,#_flag
   1081 E0                 4049 	movx	a,@dptr
   1082 FA                 4050 	mov	r2,a
                           4051 ;	genPlus
   1083 90s00r00           4052 	mov	dptr,#_flag
                           4053 ;     genPlusIncr
   1086 74 01              4054 	mov	a,#0x01
                           4055 ;	Peephole 236.a	used r2 instead of ar2
   1088 2A                 4056 	add	a,r2
   1089 F0                 4057 	movx	@dptr,a
                           4058 ;	main.c:474: timers=cnt[0]+cnt[1]+cnt[2];            // Calculate how many counters are running curently
                           4059 ;	genPointerGet
                           4060 ;	genFarPointerGet
   108A 90s00r03           4061 	mov	dptr,#_cnt
   108D E0                 4062 	movx	a,@dptr
                           4063 ;	genCast
   108E FA                 4064 	mov	r2,a
                           4065 ;	Peephole 105	removed redundant mov
   108F 33                 4066 	rlc	a
   1090 95 E0              4067 	subb	a,acc
   1092 FB                 4068 	mov	r3,a
                           4069 ;	genPointerGet
                           4070 ;	genFarPointerGet
   1093 90s00r04           4071 	mov	dptr,#(_cnt + 0x0001)
   1096 E0                 4072 	movx	a,@dptr
                           4073 ;	genCast
   1097 FC                 4074 	mov	r4,a
                           4075 ;	Peephole 105	removed redundant mov
   1098 33                 4076 	rlc	a
   1099 95 E0              4077 	subb	a,acc
   109B FD                 4078 	mov	r5,a
                           4079 ;	genPlus
                           4080 ;	Peephole 236.g	used r4 instead of ar4
   109C EC                 4081 	mov	a,r4
                           4082 ;	Peephole 236.a	used r2 instead of ar2
   109D 2A                 4083 	add	a,r2
   109E FA                 4084 	mov	r2,a
                           4085 ;	Peephole 236.g	used r5 instead of ar5
   109F ED                 4086 	mov	a,r5
                           4087 ;	Peephole 236.b	used r3 instead of ar3
   10A0 3B                 4088 	addc	a,r3
   10A1 FB                 4089 	mov	r3,a
                           4090 ;	genPointerGet
                           4091 ;	genFarPointerGet
   10A2 90s00r05           4092 	mov	dptr,#(_cnt + 0x0002)
   10A5 E0                 4093 	movx	a,@dptr
                           4094 ;	genCast
   10A6 FC                 4095 	mov	r4,a
                           4096 ;	Peephole 105	removed redundant mov
   10A7 33                 4097 	rlc	a
   10A8 95 E0              4098 	subb	a,acc
   10AA FD                 4099 	mov	r5,a
                           4100 ;	genPlus
   10AB 90s00r01           4101 	mov	dptr,#_timers
                           4102 ;	Peephole 236.g	used r4 instead of ar4
   10AE EC                 4103 	mov	a,r4
                           4104 ;	Peephole 236.a	used r2 instead of ar2
   10AF 2A                 4105 	add	a,r2
   10B0 F0                 4106 	movx	@dptr,a
                           4107 ;	Peephole 236.g	used r5 instead of ar5
   10B1 ED                 4108 	mov	a,r5
                           4109 ;	Peephole 236.b	used r3 instead of ar3
   10B2 3B                 4110 	addc	a,r3
   10B3 A3                 4111 	inc	dptr
   10B4 F0                 4112 	movx	@dptr,a
                           4113 ;	main.c:476: if(flag==2)                             // Interrupt occurs every 50 ms , so for 100ms accuracy flag is compared with 2
                           4114 ;	genAssign
   10B5 90s00r00           4115 	mov	dptr,#_flag
   10B8 E0                 4116 	movx	a,@dptr
   10B9 FA                 4117 	mov	r2,a
                           4118 ;	genCmpEq
                           4119 ;	gencjneshort
   10BA BA 02 02           4120 	cjne	r2,#0x02,00149$
   10BD 80 03              4121 	sjmp	00150$
   10BF                    4122 00149$:
   10BF 02s12r93           4123 	ljmp	00118$
   10C2                    4124 00150$:
                           4125 ;	main.c:479: clock_control();                    // Clock control for displaying clock
                           4126 ;	genCall
   10C2 12s00r00           4127 	lcall	_clock_control
                           4128 ;	main.c:480: flag=0;
                           4129 ;	genAssign
   10C5 90s00r00           4130 	mov	dptr,#_flag
                           4131 ;	Peephole 181	changed mov to clr
   10C8 E4                 4132 	clr	a
   10C9 F0                 4133 	movx	@dptr,a
                           4134 ;	main.c:482: for(i=0;i<3;i++)
                           4135 ;	genAssign
   10CA 7A 00              4136 	mov	r2,#0x00
   10CC 7B 00              4137 	mov	r3,#0x00
   10CE                    4138 00128$:
                           4139 ;	genCmpLt
                           4140 ;	genCmp
   10CE C3                 4141 	clr	c
   10CF EA                 4142 	mov	a,r2
   10D0 94 03              4143 	subb	a,#0x03
   10D2 EB                 4144 	mov	a,r3
   10D3 64 80              4145 	xrl	a,#0x80
   10D5 94 80              4146 	subb	a,#0x80
                           4147 ;	genIfxJump
   10D7 40 03              4148 	jc	00151$
   10D9 02s12r93           4149 	ljmp	00118$
   10DC                    4150 00151$:
                           4151 ;	main.c:485: if(cnt[i]==1)                              // Checking status of 3 counters, IF they are enabed then start decrementing the counter
                           4152 ;	genPlus
                           4153 ;	Peephole 236.g	used r2 instead of ar2
   10DC EA                 4154 	mov	a,r2
   10DD 24r03              4155 	add	a,#_cnt
   10DF F5 82              4156 	mov	dpl,a
                           4157 ;	Peephole 236.g	used r3 instead of ar3
   10E1 EB                 4158 	mov	a,r3
   10E2 34s00              4159 	addc	a,#(_cnt >> 8)
   10E4 F5 83              4160 	mov	dph,a
                           4161 ;	genPointerGet
                           4162 ;	genFarPointerGet
   10E6 E0                 4163 	movx	a,@dptr
   10E7 FC                 4164 	mov	r4,a
                           4165 ;	genCmpEq
                           4166 ;	gencjneshort
   10E8 BC 01 02           4167 	cjne	r4,#0x01,00152$
   10EB 80 03              4168 	sjmp	00153$
   10ED                    4169 00152$:
   10ED 02s12r8B           4170 	ljmp	00130$
   10F0                    4171 00153$:
                           4172 ;	main.c:488: if(nms[i]==0)                           // decreament millisec from 10 to 0
                           4173 ;	genLeftShift
                           4174 ;	genLeftShiftLiteral
                           4175 ;	genlshTwo
   10F0 8A 04              4176 	mov	ar4,r2
   10F2 EB                 4177 	mov	a,r3
   10F3 CC                 4178 	xch	a,r4
   10F4 25 E0              4179 	add	a,acc
   10F6 CC                 4180 	xch	a,r4
   10F7 33                 4181 	rlc	a
   10F8 FD                 4182 	mov	r5,a
                           4183 ;	genPlus
                           4184 ;	Peephole 236.g	used r4 instead of ar4
   10F9 EC                 4185 	mov	a,r4
   10FA 24r06              4186 	add	a,#_nms
   10FC FE                 4187 	mov	r6,a
                           4188 ;	Peephole 236.g	used r5 instead of ar5
   10FD ED                 4189 	mov	a,r5
   10FE 34s00              4190 	addc	a,#(_nms >> 8)
   1100 FF                 4191 	mov	r7,a
                           4192 ;	genPointerGet
                           4193 ;	genFarPointerGet
   1101 8E 82              4194 	mov	dpl,r6
   1103 8F 83              4195 	mov	dph,r7
   1105 E0                 4196 	movx	a,@dptr
   1106 F8                 4197 	mov	r0,a
   1107 A3                 4198 	inc	dptr
   1108 E0                 4199 	movx	a,@dptr
                           4200 ;	genIfx
   1109 F9                 4201 	mov	r1,a
                           4202 ;	Peephole 135	removed redundant mov
   110A 48                 4203 	orl	a,r0
                           4204 ;	genIfxJump
                           4205 ;	Peephole 108.b	removed ljmp by inverse jump logic
   110B 70 36              4206 	jnz	00105$
                           4207 ;	Peephole 300	removed redundant label 00154$
                           4208 ;	main.c:490: nms[i]=9;
                           4209 ;	genPointerSet
                           4210 ;     genFarPointerSet
   110D 8E 82              4211 	mov	dpl,r6
   110F 8F 83              4212 	mov	dph,r7
   1111 74 09              4213 	mov	a,#0x09
   1113 F0                 4214 	movx	@dptr,a
   1114 A3                 4215 	inc	dptr
                           4216 ;	Peephole 181	changed mov to clr
   1115 E4                 4217 	clr	a
   1116 F0                 4218 	movx	@dptr,a
                           4219 ;	main.c:491: if(nsec[i]>0){nsec[i]--;}else{nsec[i]=0;}
                           4220 ;	genPlus
                           4221 ;	Peephole 236.g	used r4 instead of ar4
   1117 EC                 4222 	mov	a,r4
   1118 24r0C              4223 	add	a,#_nsec
   111A FE                 4224 	mov	r6,a
                           4225 ;	Peephole 236.g	used r5 instead of ar5
   111B ED                 4226 	mov	a,r5
   111C 34s00              4227 	addc	a,#(_nsec >> 8)
   111E FF                 4228 	mov	r7,a
                           4229 ;	genPointerGet
                           4230 ;	genFarPointerGet
   111F 8E 82              4231 	mov	dpl,r6
   1121 8F 83              4232 	mov	dph,r7
   1123 E0                 4233 	movx	a,@dptr
   1124 F8                 4234 	mov	r0,a
   1125 A3                 4235 	inc	dptr
   1126 E0                 4236 	movx	a,@dptr
                           4237 ;	genIfx
   1127 F9                 4238 	mov	r1,a
                           4239 ;	Peephole 135	removed redundant mov
   1128 48                 4240 	orl	a,r0
                           4241 ;	genIfxJump
                           4242 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1129 60 10              4243 	jz	00102$
                           4244 ;	Peephole 300	removed redundant label 00155$
                           4245 ;	genMinus
                           4246 ;	genMinusDec
   112B 18                 4247 	dec	r0
   112C B8 FF 01           4248 	cjne	r0,#0xff,00156$
   112F 19                 4249 	dec	r1
   1130                    4250 00156$:
                           4251 ;	genPointerSet
                           4252 ;     genFarPointerSet
   1130 8E 82              4253 	mov	dpl,r6
   1132 8F 83              4254 	mov	dph,r7
   1134 E8                 4255 	mov	a,r0
   1135 F0                 4256 	movx	@dptr,a
   1136 A3                 4257 	inc	dptr
   1137 E9                 4258 	mov	a,r1
   1138 F0                 4259 	movx	@dptr,a
                           4260 ;	Peephole 112.b	changed ljmp to sjmp
   1139 80 08              4261 	sjmp	00105$
   113B                    4262 00102$:
                           4263 ;	genPointerSet
                           4264 ;     genFarPointerSet
   113B 8E 82              4265 	mov	dpl,r6
   113D 8F 83              4266 	mov	dph,r7
                           4267 ;	Peephole 181	changed mov to clr
   113F E4                 4268 	clr	a
   1140 F0                 4269 	movx	@dptr,a
   1141 A3                 4270 	inc	dptr
                           4271 ;	Peephole 101	removed redundant mov
   1142 F0                 4272 	movx	@dptr,a
   1143                    4273 00105$:
                           4274 ;	main.c:493: if(nsec[i]==00)
                           4275 ;	genPlus
                           4276 ;	Peephole 236.g	used r4 instead of ar4
   1143 EC                 4277 	mov	a,r4
   1144 24r0C              4278 	add	a,#_nsec
   1146 FE                 4279 	mov	r6,a
                           4280 ;	Peephole 236.g	used r5 instead of ar5
   1147 ED                 4281 	mov	a,r5
   1148 34s00              4282 	addc	a,#(_nsec >> 8)
   114A FF                 4283 	mov	r7,a
                           4284 ;	genPointerGet
                           4285 ;	genFarPointerGet
   114B 8E 82              4286 	mov	dpl,r6
   114D 8F 83              4287 	mov	dph,r7
   114F E0                 4288 	movx	a,@dptr
   1150 F8                 4289 	mov	r0,a
   1151 A3                 4290 	inc	dptr
   1152 E0                 4291 	movx	a,@dptr
                           4292 ;	genIfx
   1153 F9                 4293 	mov	r1,a
                           4294 ;	Peephole 135	removed redundant mov
   1154 48                 4295 	orl	a,r0
                           4296 ;	genIfxJump
                           4297 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1155 70 5E              4298 	jnz	00110$
                           4299 ;	Peephole 300	removed redundant label 00157$
                           4300 ;	main.c:495: nsec[i]=59;                            // decreament sec from 59 to 0
                           4301 ;	genPointerSet
                           4302 ;     genFarPointerSet
   1157 8E 82              4303 	mov	dpl,r6
   1159 8F 83              4304 	mov	dph,r7
   115B 74 3B              4305 	mov	a,#0x3B
   115D F0                 4306 	movx	@dptr,a
   115E A3                 4307 	inc	dptr
                           4308 ;	Peephole 181	changed mov to clr
   115F E4                 4309 	clr	a
   1160 F0                 4310 	movx	@dptr,a
                           4311 ;	main.c:496: if(nmi[i]>0){nmi[i]--;}
                           4312 ;	genPlus
                           4313 ;	Peephole 236.g	used r4 instead of ar4
   1161 EC                 4314 	mov	a,r4
   1162 24r12              4315 	add	a,#_nmi
   1164 F8                 4316 	mov	r0,a
                           4317 ;	Peephole 236.g	used r5 instead of ar5
   1165 ED                 4318 	mov	a,r5
   1166 34s00              4319 	addc	a,#(_nmi >> 8)
   1168 F9                 4320 	mov	r1,a
                           4321 ;	genPointerGet
                           4322 ;	genFarPointerGet
   1169 88 82              4323 	mov	dpl,r0
   116B 89 83              4324 	mov	dph,r1
   116D E0                 4325 	movx	a,@dptr
   116E F5*04              4326 	mov	_timer_isr_sloc0_1_0,a
   1170 A3                 4327 	inc	dptr
   1171 E0                 4328 	movx	a,@dptr
   1172 F5*05              4329 	mov	(_timer_isr_sloc0_1_0 + 1),a
                           4330 ;	genIfx
   1174 E5*04              4331 	mov	a,_timer_isr_sloc0_1_0
   1176 45*05              4332 	orl	a,(_timer_isr_sloc0_1_0 + 1)
                           4333 ;	genIfxJump
                           4334 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1178 60 1D              4335 	jz	00107$
                           4336 ;	Peephole 300	removed redundant label 00158$
                           4337 ;	genIpush
   117A C0 02              4338 	push	ar2
   117C C0 03              4339 	push	ar3
                           4340 ;	genMinus
                           4341 ;	genMinusDec
   117E E5*04              4342 	mov	a,_timer_isr_sloc0_1_0
   1180 24 FF              4343 	add	a,#0xff
   1182 FA                 4344 	mov	r2,a
   1183 E5*05              4345 	mov	a,(_timer_isr_sloc0_1_0 + 1)
   1185 34 FF              4346 	addc	a,#0xff
   1187 FB                 4347 	mov	r3,a
                           4348 ;	genPointerSet
                           4349 ;     genFarPointerSet
   1188 88 82              4350 	mov	dpl,r0
   118A 89 83              4351 	mov	dph,r1
   118C EA                 4352 	mov	a,r2
   118D F0                 4353 	movx	@dptr,a
   118E A3                 4354 	inc	dptr
   118F EB                 4355 	mov	a,r3
   1190 F0                 4356 	movx	@dptr,a
                           4357 ;	genIpop
   1191 D0 03              4358 	pop	ar3
   1193 D0 02              4359 	pop	ar2
                           4360 ;	Peephole 112.b	changed ljmp to sjmp
   1195 80 1E              4361 	sjmp	00110$
   1197                    4362 00107$:
                           4363 ;	main.c:497: else{nmi[i]=0;nms[i]=0; nsec[i]=0;}
                           4364 ;	genPointerSet
                           4365 ;     genFarPointerSet
   1197 88 82              4366 	mov	dpl,r0
   1199 89 83              4367 	mov	dph,r1
                           4368 ;	Peephole 181	changed mov to clr
   119B E4                 4369 	clr	a
   119C F0                 4370 	movx	@dptr,a
   119D A3                 4371 	inc	dptr
                           4372 ;	Peephole 101	removed redundant mov
   119E F0                 4373 	movx	@dptr,a
                           4374 ;	genPlus
                           4375 ;	Peephole 236.g	used r4 instead of ar4
   119F EC                 4376 	mov	a,r4
   11A0 24r06              4377 	add	a,#_nms
   11A2 F5 82              4378 	mov	dpl,a
                           4379 ;	Peephole 236.g	used r5 instead of ar5
   11A4 ED                 4380 	mov	a,r5
   11A5 34s00              4381 	addc	a,#(_nms >> 8)
   11A7 F5 83              4382 	mov	dph,a
                           4383 ;	genPointerSet
                           4384 ;     genFarPointerSet
                           4385 ;	Peephole 181	changed mov to clr
   11A9 E4                 4386 	clr	a
   11AA F0                 4387 	movx	@dptr,a
   11AB A3                 4388 	inc	dptr
                           4389 ;	Peephole 101	removed redundant mov
   11AC F0                 4390 	movx	@dptr,a
                           4391 ;	genPointerSet
                           4392 ;     genFarPointerSet
   11AD 8E 82              4393 	mov	dpl,r6
   11AF 8F 83              4394 	mov	dph,r7
                           4395 ;	Peephole 181	changed mov to clr
   11B1 E4                 4396 	clr	a
   11B2 F0                 4397 	movx	@dptr,a
   11B3 A3                 4398 	inc	dptr
                           4399 ;	Peephole 101	removed redundant mov
   11B4 F0                 4400 	movx	@dptr,a
   11B5                    4401 00110$:
                           4402 ;	main.c:499: if(nmi[i]==0 &&nms[i]==0 && nsec[i]==0)      // If all of them reaches to zero then disble the counter and display the alarm
                           4403 ;	genPlus
                           4404 ;	Peephole 236.g	used r4 instead of ar4
   11B5 EC                 4405 	mov	a,r4
   11B6 24r12              4406 	add	a,#_nmi
   11B8 F5 82              4407 	mov	dpl,a
                           4408 ;	Peephole 236.g	used r5 instead of ar5
   11BA ED                 4409 	mov	a,r5
   11BB 34s00              4410 	addc	a,#(_nmi >> 8)
   11BD F5 83              4411 	mov	dph,a
                           4412 ;	genPointerGet
                           4413 ;	genFarPointerGet
   11BF E0                 4414 	movx	a,@dptr
   11C0 FE                 4415 	mov	r6,a
   11C1 A3                 4416 	inc	dptr
   11C2 E0                 4417 	movx	a,@dptr
                           4418 ;	genIfx
   11C3 FF                 4419 	mov	r7,a
                           4420 ;	Peephole 135	removed redundant mov
   11C4 4E                 4421 	orl	a,r6
                           4422 ;	genIfxJump
                           4423 ;	Peephole 108.b	removed ljmp by inverse jump logic
   11C5 70 30              4424 	jnz	00112$
                           4425 ;	Peephole 300	removed redundant label 00159$
                           4426 ;	genPlus
                           4427 ;	Peephole 236.g	used r4 instead of ar4
   11C7 EC                 4428 	mov	a,r4
   11C8 24r06              4429 	add	a,#_nms
   11CA F5 82              4430 	mov	dpl,a
                           4431 ;	Peephole 236.g	used r5 instead of ar5
   11CC ED                 4432 	mov	a,r5
   11CD 34s00              4433 	addc	a,#(_nms >> 8)
   11CF F5 83              4434 	mov	dph,a
                           4435 ;	genPointerGet
                           4436 ;	genFarPointerGet
   11D1 E0                 4437 	movx	a,@dptr
   11D2 FE                 4438 	mov	r6,a
   11D3 A3                 4439 	inc	dptr
   11D4 E0                 4440 	movx	a,@dptr
                           4441 ;	genIfx
   11D5 FF                 4442 	mov	r7,a
                           4443 ;	Peephole 135	removed redundant mov
   11D6 4E                 4444 	orl	a,r6
                           4445 ;	genIfxJump
                           4446 ;	Peephole 108.b	removed ljmp by inverse jump logic
   11D7 70 1E              4447 	jnz	00112$
                           4448 ;	Peephole 300	removed redundant label 00160$
                           4449 ;	genPlus
                           4450 ;	Peephole 236.g	used r4 instead of ar4
   11D9 EC                 4451 	mov	a,r4
   11DA 24r0C              4452 	add	a,#_nsec
   11DC F5 82              4453 	mov	dpl,a
                           4454 ;	Peephole 236.g	used r5 instead of ar5
   11DE ED                 4455 	mov	a,r5
   11DF 34s00              4456 	addc	a,#(_nsec >> 8)
   11E1 F5 83              4457 	mov	dph,a
                           4458 ;	genPointerGet
                           4459 ;	genFarPointerGet
   11E3 E0                 4460 	movx	a,@dptr
   11E4 FE                 4461 	mov	r6,a
   11E5 A3                 4462 	inc	dptr
   11E6 E0                 4463 	movx	a,@dptr
                           4464 ;	genIfx
   11E7 FF                 4465 	mov	r7,a
                           4466 ;	Peephole 135	removed redundant mov
   11E8 4E                 4467 	orl	a,r6
                           4468 ;	genIfxJump
                           4469 ;	Peephole 108.b	removed ljmp by inverse jump logic
   11E9 70 0C              4470 	jnz	00112$
                           4471 ;	Peephole 300	removed redundant label 00161$
                           4472 ;	main.c:501: cnt[i]=0;
                           4473 ;	genPlus
                           4474 ;	Peephole 236.g	used r2 instead of ar2
   11EB EA                 4475 	mov	a,r2
   11EC 24r03              4476 	add	a,#_cnt
   11EE F5 82              4477 	mov	dpl,a
                           4478 ;	Peephole 236.g	used r3 instead of ar3
   11F0 EB                 4479 	mov	a,r3
   11F1 34s00              4480 	addc	a,#(_cnt >> 8)
   11F3 F5 83              4481 	mov	dph,a
                           4482 ;	genPointerSet
                           4483 ;     genFarPointerSet
                           4484 ;	Peephole 181	changed mov to clr
   11F5 E4                 4485 	clr	a
   11F6 F0                 4486 	movx	@dptr,a
   11F7                    4487 00112$:
                           4488 ;	main.c:503: countdown_alarm(nms[i],nsec[i],nmi[i],cnt[i],i);
                           4489 ;	genPlus
                           4490 ;	Peephole 236.g	used r4 instead of ar4
   11F7 EC                 4491 	mov	a,r4
   11F8 24r06              4492 	add	a,#_nms
   11FA F5 82              4493 	mov	dpl,a
                           4494 ;	Peephole 236.g	used r5 instead of ar5
   11FC ED                 4495 	mov	a,r5
   11FD 34s00              4496 	addc	a,#(_nms >> 8)
   11FF F5 83              4497 	mov	dph,a
                           4498 ;	genPointerGet
                           4499 ;	genFarPointerGet
   1201 E0                 4500 	movx	a,@dptr
   1202 FE                 4501 	mov	r6,a
   1203 A3                 4502 	inc	dptr
   1204 E0                 4503 	movx	a,@dptr
   1205 FF                 4504 	mov	r7,a
                           4505 ;	genPlus
                           4506 ;	Peephole 236.g	used r4 instead of ar4
   1206 EC                 4507 	mov	a,r4
   1207 24r0C              4508 	add	a,#_nsec
   1209 F5 82              4509 	mov	dpl,a
                           4510 ;	Peephole 236.g	used r5 instead of ar5
   120B ED                 4511 	mov	a,r5
   120C 34s00              4512 	addc	a,#(_nsec >> 8)
   120E F5 83              4513 	mov	dph,a
                           4514 ;	genPointerGet
                           4515 ;	genFarPointerGet
   1210 E0                 4516 	movx	a,@dptr
   1211 F5*04              4517 	mov	_timer_isr_sloc0_1_0,a
   1213 A3                 4518 	inc	dptr
   1214 E0                 4519 	movx	a,@dptr
   1215 F5*05              4520 	mov	(_timer_isr_sloc0_1_0 + 1),a
                           4521 ;	genPlus
                           4522 ;	Peephole 236.g	used r4 instead of ar4
   1217 EC                 4523 	mov	a,r4
   1218 24r12              4524 	add	a,#_nmi
   121A F5 82              4525 	mov	dpl,a
                           4526 ;	Peephole 236.g	used r5 instead of ar5
   121C ED                 4527 	mov	a,r5
   121D 34s00              4528 	addc	a,#(_nmi >> 8)
   121F F5 83              4529 	mov	dph,a
                           4530 ;	genPointerGet
                           4531 ;	genFarPointerGet
   1221 E0                 4532 	movx	a,@dptr
   1222 F5*06              4533 	mov	_timer_isr_sloc1_1_0,a
   1224 A3                 4534 	inc	dptr
   1225 E0                 4535 	movx	a,@dptr
   1226 F5*07              4536 	mov	(_timer_isr_sloc1_1_0 + 1),a
                           4537 ;	genPlus
                           4538 ;	Peephole 236.g	used r2 instead of ar2
   1228 EA                 4539 	mov	a,r2
   1229 24r03              4540 	add	a,#_cnt
   122B F5 82              4541 	mov	dpl,a
                           4542 ;	Peephole 236.g	used r3 instead of ar3
   122D EB                 4543 	mov	a,r3
   122E 34s00              4544 	addc	a,#(_cnt >> 8)
   1230 F5 83              4545 	mov	dph,a
                           4546 ;	genPointerGet
                           4547 ;	genFarPointerGet
   1232 E0                 4548 	movx	a,@dptr
   1233 F8                 4549 	mov	r0,a
                           4550 ;	genAssign
   1234 90s00r00           4551 	mov	dptr,#_countdown_alarm_PARM_2
   1237 E5*04              4552 	mov	a,_timer_isr_sloc0_1_0
   1239 F0                 4553 	movx	@dptr,a
   123A A3                 4554 	inc	dptr
   123B E5*05              4555 	mov	a,(_timer_isr_sloc0_1_0 + 1)
   123D F0                 4556 	movx	@dptr,a
                           4557 ;	genAssign
   123E 90s00r00           4558 	mov	dptr,#_countdown_alarm_PARM_3
   1241 E5*06              4559 	mov	a,_timer_isr_sloc1_1_0
   1243 F0                 4560 	movx	@dptr,a
   1244 A3                 4561 	inc	dptr
   1245 E5*07              4562 	mov	a,(_timer_isr_sloc1_1_0 + 1)
   1247 F0                 4563 	movx	@dptr,a
                           4564 ;	genAssign
   1248 90s00r00           4565 	mov	dptr,#_countdown_alarm_PARM_4
   124B E8                 4566 	mov	a,r0
   124C F0                 4567 	movx	@dptr,a
                           4568 ;	genAssign
   124D 90s00r00           4569 	mov	dptr,#_countdown_alarm_PARM_5
   1250 EA                 4570 	mov	a,r2
   1251 F0                 4571 	movx	@dptr,a
   1252 A3                 4572 	inc	dptr
   1253 EB                 4573 	mov	a,r3
   1254 F0                 4574 	movx	@dptr,a
                           4575 ;	genCall
   1255 8E 82              4576 	mov	dpl,r6
   1257 8F 83              4577 	mov	dph,r7
   1259 C0 02              4578 	push	ar2
   125B C0 03              4579 	push	ar3
   125D C0 04              4580 	push	ar4
   125F C0 05              4581 	push	ar5
   1261 12s00r00           4582 	lcall	_countdown_alarm
   1264 D0 05              4583 	pop	ar5
   1266 D0 04              4584 	pop	ar4
   1268 D0 03              4585 	pop	ar3
   126A D0 02              4586 	pop	ar2
                           4587 ;	main.c:505: nms[i]--;
                           4588 ;	genPlus
                           4589 ;	Peephole 236.g	used r4 instead of ar4
   126C EC                 4590 	mov	a,r4
   126D 24r06              4591 	add	a,#_nms
   126F FC                 4592 	mov	r4,a
                           4593 ;	Peephole 236.g	used r5 instead of ar5
   1270 ED                 4594 	mov	a,r5
   1271 34s00              4595 	addc	a,#(_nms >> 8)
   1273 FD                 4596 	mov	r5,a
                           4597 ;	genPointerGet
                           4598 ;	genFarPointerGet
   1274 8C 82              4599 	mov	dpl,r4
   1276 8D 83              4600 	mov	dph,r5
   1278 E0                 4601 	movx	a,@dptr
   1279 FE                 4602 	mov	r6,a
   127A A3                 4603 	inc	dptr
   127B E0                 4604 	movx	a,@dptr
   127C FF                 4605 	mov	r7,a
                           4606 ;	genMinus
                           4607 ;	genMinusDec
   127D 1E                 4608 	dec	r6
   127E BE FF 01           4609 	cjne	r6,#0xff,00162$
   1281 1F                 4610 	dec	r7
   1282                    4611 00162$:
                           4612 ;	genPointerSet
                           4613 ;     genFarPointerSet
   1282 8C 82              4614 	mov	dpl,r4
   1284 8D 83              4615 	mov	dph,r5
   1286 EE                 4616 	mov	a,r6
   1287 F0                 4617 	movx	@dptr,a
   1288 A3                 4618 	inc	dptr
   1289 EF                 4619 	mov	a,r7
   128A F0                 4620 	movx	@dptr,a
   128B                    4621 00130$:
                           4622 ;	main.c:482: for(i=0;i<3;i++)
                           4623 ;	genPlus
                           4624 ;     genPlusIncr
   128B 0A                 4625 	inc	r2
   128C BA 00 01           4626 	cjne	r2,#0x00,00163$
   128F 0B                 4627 	inc	r3
   1290                    4628 00163$:
   1290 02s10rCE           4629 	ljmp	00128$
   1293                    4630 00118$:
                           4631 ;	main.c:511: if(timers==3)                                   // Dynamically adjust the timing of the interrupt by keeping track of how many timers are active currently
                           4632 ;	genAssign
   1293 90s00r01           4633 	mov	dptr,#_timers
   1296 E0                 4634 	movx	a,@dptr
   1297 FA                 4635 	mov	r2,a
   1298 A3                 4636 	inc	dptr
   1299 E0                 4637 	movx	a,@dptr
   129A FB                 4638 	mov	r3,a
                           4639 ;	genCmpEq
                           4640 ;	gencjneshort
                           4641 ;	Peephole 112.b	changed ljmp to sjmp
                           4642 ;	Peephole 198.a	optimized misc jump sequence
   129B BA 03 0B           4643 	cjne	r2,#0x03,00126$
   129E BB 00 08           4644 	cjne	r3,#0x00,00126$
                           4645 ;	Peephole 200.b	removed redundant sjmp
                           4646 ;	Peephole 300	removed redundant label 00164$
                           4647 ;	Peephole 300	removed redundant label 00165$
                           4648 ;	main.c:512: {TH0 =   0xBF; TL0 =   0x75;}
                           4649 ;	genAssign
   12A1 75 8C BF           4650 	mov	_TH0,#0xBF
                           4651 ;	genAssign
   12A4 75 8A 75           4652 	mov	_TL0,#0x75
                           4653 ;	Peephole 112.b	changed ljmp to sjmp
   12A7 80 22              4654 	sjmp	00132$
   12A9                    4655 00126$:
                           4656 ;	main.c:513: else if(timers==2){TH0 =   0xB5; TL0 =   0x00;}
                           4657 ;	genCmpEq
                           4658 ;	gencjneshort
                           4659 ;	Peephole 112.b	changed ljmp to sjmp
                           4660 ;	Peephole 198.a	optimized misc jump sequence
   12A9 BA 02 0B           4661 	cjne	r2,#0x02,00123$
   12AC BB 00 08           4662 	cjne	r3,#0x00,00123$
                           4663 ;	Peephole 200.b	removed redundant sjmp
                           4664 ;	Peephole 300	removed redundant label 00166$
                           4665 ;	Peephole 300	removed redundant label 00167$
                           4666 ;	genAssign
   12AF 75 8C B5           4667 	mov	_TH0,#0xB5
                           4668 ;	genAssign
   12B2 75 8A 00           4669 	mov	_TL0,#0x00
                           4670 ;	Peephole 112.b	changed ljmp to sjmp
   12B5 80 14              4671 	sjmp	00132$
   12B7                    4672 00123$:
                           4673 ;	main.c:514: else if(timers==1){TH0 =   0x90;  TL0 =   0x00;}
                           4674 ;	genCmpEq
                           4675 ;	gencjneshort
                           4676 ;	Peephole 112.b	changed ljmp to sjmp
                           4677 ;	Peephole 198.a	optimized misc jump sequence
   12B7 BA 01 0B           4678 	cjne	r2,#0x01,00120$
   12BA BB 00 08           4679 	cjne	r3,#0x00,00120$
                           4680 ;	Peephole 200.b	removed redundant sjmp
                           4681 ;	Peephole 300	removed redundant label 00168$
                           4682 ;	Peephole 300	removed redundant label 00169$
                           4683 ;	genAssign
   12BD 75 8C 90           4684 	mov	_TH0,#0x90
                           4685 ;	genAssign
   12C0 75 8A 00           4686 	mov	_TL0,#0x00
                           4687 ;	Peephole 112.b	changed ljmp to sjmp
   12C3 80 06              4688 	sjmp	00132$
   12C5                    4689 00120$:
                           4690 ;	main.c:517: TH0 =   0x6F;
                           4691 ;	genAssign
   12C5 75 8C 6F           4692 	mov	_TH0,#0x6F
                           4693 ;	main.c:518: TL0 =   0x00;
                           4694 ;	genAssign
   12C8 75 8A 00           4695 	mov	_TL0,#0x00
   12CB                    4696 00132$:
   12CB D0 D0              4697 	pop	psw
   12CD D0 01              4698 	pop	(0+1)
   12CF D0 00              4699 	pop	(0+0)
   12D1 D0 07              4700 	pop	(0+7)
   12D3 D0 06              4701 	pop	(0+6)
   12D5 D0 05              4702 	pop	(0+5)
   12D7 D0 04              4703 	pop	(0+4)
   12D9 D0 03              4704 	pop	(0+3)
   12DB D0 02              4705 	pop	(0+2)
   12DD D0 83              4706 	pop	dph
   12DF D0 82              4707 	pop	dpl
   12E1 D0 F0              4708 	pop	b
   12E3 D0 E0              4709 	pop	acc
   12E5 32                 4710 	reti
                           4711 	.area CSEG    (CODE)
                           4712 	.area CONST   (CODE)
   0000                    4713 __str_1:
   0000 43 6F 75 6E 74 2D  4714 	.ascii "Count-0"
        30
   0007 00                 4715 	.db 0x00
   0008                    4716 __str_2:
   0008 54 69 6D 65 72     4717 	.ascii "Timer"
   000D 00                 4718 	.db 0x00
   000E                    4719 __str_3:
   000E 2D 44              4720 	.ascii "-D"
   0010 00                 4721 	.db 0x00
   0011                    4722 __str_4:
   0011 0A                 4723 	.db 0x0A
   0012 0A                 4724 	.db 0x0A
   0013 0D                 4725 	.db 0x0D
   0014 09                 4726 	.db 0x09
   0015 09                 4727 	.db 0x09
   0016 09                 4728 	.db 0x09
   0017 09                 4729 	.db 0x09
   0018 09                 4730 	.db 0x09
   0019 2A 2A 2A 2A 2A 2A  4731 	.ascii "******** Clock Control Commands ********"
        2A 2A 20 43 6C 6F
        63 6B 20 43 6F 6E
        74 72 6F 6C 20 43
        6F 6D 6D 61 6E 64
        73 20 2A 2A 2A 2A
        2A 2A 2A 2A
   0041 0A                 4732 	.db 0x0A
   0042 0A                 4733 	.db 0x0A
   0043 0D                 4734 	.db 0x0D
   0044 09                 4735 	.db 0x09
   0045 31 2E 20 53 74 6F  4736 	.ascii "1. Stop "
        70 20
   004D 43 6C 6F 63 6B 20  4737 	.ascii "Clock "
   0053 09                 4738 	.db 0x09
   0054 09                 4739 	.db 0x09
   0055 09                 4740 	.db 0x09
   0056 09                 4741 	.db 0x09
   0057 09                 4742 	.db 0x09
   0058 09                 4743 	.db 0x09
   0059 32 2E 20 52 65 73  4744 	.ascii "2. Restart Clock "
        74 61 72 74 20 43
        6C 6F 63 6B 20
   006A 09                 4745 	.db 0x09
   006B 09                 4746 	.db 0x09
   006C 09                 4747 	.db 0x09
   006D 33 2E 20 52 65 73  4748 	.ascii "3. Reset Clock"
        65 74 20 43 6C 6F
        63 6B
   007B 0A                 4749 	.db 0x0A
   007C 0D                 4750 	.db 0x0D
   007D 09                 4751 	.db 0x09
   007E 34 2E 20 53 65 6C  4752 	.ascii "4. Select C"
        65 63 74 20 43
   0089 6F 75 6E 74 2D 44  4753 	.ascii "ount-Down Timer and Value "
        6F 77 6E 20 54 69
        6D 65 72 20 61 6E
        64 20 56 61 6C 75
        65 20
   00A3 09                 4754 	.db 0x09
   00A4 09                 4755 	.db 0x09
   00A5 09                 4756 	.db 0x09
   00A6 35 2E 20 54 69 6D  4757 	.ascii "5. Timer Enable "
        65 72 20 45 6E 61
        62 6C 65 20
   00B6 09                 4758 	.db 0x09
   00B7 09                 4759 	.db 0x09
   00B8 09                 4760 	.db 0x09
   00B9 36 2E 20 54 69 6D  4761 	.ascii "6. Timer Dis"
        65 72 20 44 69 73
   00C5 61 62 6C 65 20     4762 	.ascii "able "
   00CA 00                 4763 	.db 0x00
   00CB                    4764 __str_5:
   00CB 0A                 4765 	.db 0x0A
   00CC 0A                 4766 	.db 0x0A
   00CD 0A                 4767 	.db 0x0A
   00CE 0D                 4768 	.db 0x0D
   00CF 09                 4769 	.db 0x09
   00D0 09                 4770 	.db 0x09
   00D1 09                 4771 	.db 0x09
   00D2 09                 4772 	.db 0x09
   00D3 09                 4773 	.db 0x09
   00D4 2A 2A 2A 2A 2A 2A  4774 	.ascii "******** LCD Commands ********"
        2A 2A 20 4C 43 44
        20 43 6F 6D 6D 61
        6E 64 73 20 2A 2A
        2A 2A 2A 2A 2A 2A
   00F2 0A                 4775 	.db 0x0A
   00F3 0A                 4776 	.db 0x0A
   00F4 0D                 4777 	.db 0x0D
   00F5 09                 4778 	.db 0x09
   00F6 37 2E 20 43 72 65  4779 	.ascii "7. Create Custom "
        61 74 65 20 43 75
        73 74 6F 6D 20
   0107 43 68 61 72 61 63  4780 	.ascii "Character"
        74 65 72
   0110 09                 4781 	.db 0x09
   0111 09                 4782 	.db 0x09
   0112 09                 4783 	.db 0x09
   0113 38 2E 20 44 69 73  4784 	.ascii "8. Display Custom Character"
        70 6C 61 79 20 43
        75 73 74 6F 6D 20
        43 68 61 72 61 63
        74 65 72
   012E 09                 4785 	.db 0x09
   012F 09                 4786 	.db 0x09
   0130 09                 4787 	.db 0x09
   0131 27 63 27 2E 20 43  4788 	.ascii "'c'. CGRAM Dump"
        47 52 41 4D 20 44
        75 6D 70
   0140 09                 4789 	.db 0x09
   0141 09                 4790 	.db 0x09
   0142 09                 4791 	.db 0x09
   0143 27 64 27 2E 20 44  4792 	.ascii "'d'. DDRAM Dump"
        44 52 41 4D 20 44
        75 6D 70
   0152 0A                 4793 	.db 0x0A
   0153 0D                 4794 	.db 0x0D
   0154 09                 4795 	.db 0x09
   0155 27 6C 27 2E 45 45  4796 	.ascii "'l'.EEPROM Content on LCD Display"
        50 52 4F 4D 20 43
        6F 6E 74 65 6E 74
        20 6F 6E 20 4C 43
        44 20 44 69 73 70
        6C 61 79
   0176 09                 4797 	.db 0x09
   0177 09                 4798 	.db 0x09
   0178 27 71 27 2E 20 43  4799 	.ascii "'q'. Cl"
        6C
   017F 65 61 72 20 4C 43  4800 	.ascii "ear LCD Display"
        44 20 44 69 73 70
        6C 61 79
   018E 00                 4801 	.db 0x00
   018F                    4802 __str_6:
   018F 0A                 4803 	.db 0x0A
   0190 0A                 4804 	.db 0x0A
   0191 0A                 4805 	.db 0x0A
   0192 0D                 4806 	.db 0x0D
   0193 09                 4807 	.db 0x09
   0194 09                 4808 	.db 0x09
   0195 09                 4809 	.db 0x09
   0196 09                 4810 	.db 0x09
   0197 09                 4811 	.db 0x09
   0198 2A 2A 2A 2A 2A 2A  4812 	.ascii "******** IO Expander Control Commands ********"
        2A 2A 20 49 4F 20
        45 78 70 61 6E 64
        65 72 20 43 6F 6E
        74 72 6F 6C 20 43
        6F 6D 6D 61 6E 64
        73 20 2A 2A 2A 2A
        2A 2A 2A 2A
   01C6 0A                 4813 	.db 0x0A
   01C7 0A                 4814 	.db 0x0A
   01C8 0D                 4815 	.db 0x0D
   01C9 09                 4816 	.db 0x09
   01CA 27                 4817 	.ascii "'"
   01CB 78 27 2E 20 52 65  4818 	.ascii "x'. Reset Counter"
        73 65 74 20 43 6F
        75 6E 74 65 72
   01DC 09                 4819 	.db 0x09
   01DD 09                 4820 	.db 0x09
   01DE 09                 4821 	.db 0x09
   01DF 09                 4822 	.db 0x09
   01E0 27 69 27 2E 20 43  4823 	.ascii "'i'. Configure IO Pins"
        6F 6E 66 69 67 75
        72 65 20 49 4F 20
        50 69 6E 73
   01F6 09                 4824 	.db 0x09
   01F7 09                 4825 	.db 0x09
   01F8 09                 4826 	.db 0x09
   01F9 09                 4827 	.db 0x09
   01FA 27 73 27 2E 20 53  4828 	.ascii "'s'. Status o"
        74 61 74 75 73 20
        6F
   0207 66 20 49 4F 5F 45  4829 	.ascii "f IO_Expander"
        78 70 61 6E 64 65
        72
   0214 00                 4830 	.db 0x00
   0215                    4831 __str_7:
   0215 0A                 4832 	.db 0x0A
   0216 0A                 4833 	.db 0x0A
   0217 0A                 4834 	.db 0x0A
   0218 0D                 4835 	.db 0x0D
   0219 09                 4836 	.db 0x09
   021A 09                 4837 	.db 0x09
   021B 09                 4838 	.db 0x09
   021C 09                 4839 	.db 0x09
   021D 09                 4840 	.db 0x09
   021E 2A 2A 2A 2A 2A 2A  4841 	.ascii "******** EEPROM Control Commands ******** "
        2A 2A 20 45 45 50
        52 4F 4D 20 43 6F
        6E 74 72 6F 6C 20
        43 6F 6D 6D 61 6E
        64 73 20 2A 2A 2A
        2A 2A 2A 2A 2A 20
   0248 0A                 4842 	.db 0x0A
   0249 0A                 4843 	.db 0x0A
   024A 0D                 4844 	.db 0x0D
   024B 09                 4845 	.db 0x09
   024C 27 77 27 2E 20     4846 	.ascii "'w'. "
   0251 45 45 50 52 4F 4D  4847 	.ascii "EEPROM Write "
        20 57 72 69 74 65
        20
   025E 09                 4848 	.db 0x09
   025F 09                 4849 	.db 0x09
   0260 09                 4850 	.db 0x09
   0261 27 72 27 2E 20 45  4851 	.ascii "'r'. EEPROM Read "
        45 50 52 4F 4D 20
        52 65 61 64 20
   0272 09                 4852 	.db 0x09
   0273 09                 4853 	.db 0x09
   0274 09                 4854 	.db 0x09
   0275 09                 4855 	.db 0x09
   0276 27 68 27 2E 20 48  4856 	.ascii "'h'. HEX Dump"
        45 58 20 44 75 6D
        70
   0283 09                 4857 	.db 0x09
   0284 0A                 4858 	.db 0x0A
   0285 0D                 4859 	.db 0x0D
   0286 09                 4860 	.db 0x09
   0287 00                 4861 	.db 0x00
   0288                    4862 __str_8:
   0288 0A                 4863 	.db 0x0A
   0289 0A                 4864 	.db 0x0A
   028A 0D                 4865 	.db 0x0D
   028B 09                 4866 	.db 0x09
   028C 09                 4867 	.db 0x09
   028D 09                 4868 	.db 0x09
   028E 09                 4869 	.db 0x09
   028F 09                 4870 	.db 0x09
   0290 2A 2A 2A 2A 2A 2A  4871 	.ascii "******** Demo Commands ******** "
        2A 2A 20 44 65 6D
        6F 20 43 6F 6D 6D
        61 6E 64 73 20 2A
        2A 2A 2A 2A 2A 2A
        2A 20
   02B0 0A                 4872 	.db 0x0A
   02B1 0A                 4873 	.db 0x0A
   02B2 0D                 4874 	.db 0x0D
   02B3 09                 4875 	.db 0x09
   02B4 27 79 27 2E 20 57  4876 	.ascii "'y'. Watchdog De"
        61 74 63 68 64 6F
        67 20 44 65
   02C4 6D 6F 20           4877 	.ascii "mo "
   02C7 09                 4878 	.db 0x09
   02C8 09                 4879 	.db 0x09
   02C9 09                 4880 	.db 0x09
   02CA 27 39 27 2E 20 4C  4881 	.ascii "'9'. LOGO Creation Demo "
        4F 47 4F 20 43 72
        65 61 74 69 6F 6E
        20 44 65 6D 6F 20
   02E2 09                 4882 	.db 0x09
   02E3 09                 4883 	.db 0x09
   02E4 09                 4884 	.db 0x09
   02E5 27 74 27 45 45 50  4885 	.ascii "'t'EEPROM Time Measure"
        52 4F 4D 20 54 69
        6D 65 20 4D 65 61
        73 75 72 65
   02FB 0A                 4886 	.db 0x0A
   02FC 0D                 4887 	.db 0x0D
   02FD 09                 4888 	.db 0x09
   02FE 27 62              4889 	.ascii "'b"
   0300 27 2E 20 45 45 50  4890 	.ascii "'. EEPROM Block Fill "
        52 4F 4D 20 42 6C
        6F 63 6B 20 46 69
        6C 6C 20
   0315 00                 4891 	.db 0x00
   0316                    4892 __str_9:
   0316 0A                 4893 	.db 0x0A
   0317 0A                 4894 	.db 0x0A
   0318 0D                 4895 	.db 0x0D
   0319 09                 4896 	.db 0x09
   031A 09                 4897 	.db 0x09
   031B 20 2A 2A 2A 2A 2A  4898 	.ascii " ******  Stop Clock  *****"
        2A 20 20 53 74 6F
        70 20 43 6C 6F 63
        6B 20 20 2A 2A 2A
        2A 2A
   0335 00                 4899 	.db 0x00
   0336                    4900 __str_10:
   0336 0A                 4901 	.db 0x0A
   0337 0A                 4902 	.db 0x0A
   0338 0D                 4903 	.db 0x0D
   0339 09                 4904 	.db 0x09
   033A 09                 4905 	.db 0x09
   033B 20 2A 2A 2A 2A 2A  4906 	.ascii " ******  Restart Clock  ******"
        2A 20 20 52 65 73
        74 61 72 74 20 43
        6C 6F 63 6B 20 20
        2A 2A 2A 2A 2A 2A
   0359 00                 4907 	.db 0x00
   035A                    4908 __str_11:
   035A 0A                 4909 	.db 0x0A
   035B 0A                 4910 	.db 0x0A
   035C 0D                 4911 	.db 0x0D
   035D 09                 4912 	.db 0x09
   035E 09                 4913 	.db 0x09
   035F 20 2A 2A 2A 2A 2A  4914 	.ascii " ******  Reset Clock  ******"
        2A 20 20 52 65 73
        65 74 20 43 6C 6F
        63 6B 20 20 2A 2A
        2A 2A 2A 2A
   037B 00                 4915 	.db 0x00
   037C                    4916 __str_12:
   037C 0A                 4917 	.db 0x0A
   037D 0A                 4918 	.db 0x0A
   037E 0D                 4919 	.db 0x0D
   037F 09                 4920 	.db 0x09
   0380 09                 4921 	.db 0x09
   0381 20 2A 2A 2A 2A 2A  4922 	.ascii " ******  Load Counter Value ******"
        2A 20 20 4C 6F 61
        64 20 43 6F 75 6E
        74 65 72 20 56 61
        6C 75 65 20 2A 2A
        2A 2A 2A 2A
   03A3 00                 4923 	.db 0x00
   03A4                    4924 __str_13:
   03A4 0A                 4925 	.db 0x0A
   03A5 0A                 4926 	.db 0x0A
   03A6 0D                 4927 	.db 0x0D
   03A7 09                 4928 	.db 0x09
   03A8 09                 4929 	.db 0x09
   03A9 20 2A 2A 2A 2A 2A  4930 	.ascii " ******  Timer Enable  ******"
        2A 20 20 54 69 6D
        65 72 20 45 6E 61
        62 6C 65 20 20 2A
        2A 2A 2A 2A 2A
   03C6 00                 4931 	.db 0x00
   03C7                    4932 __str_14:
   03C7 0A                 4933 	.db 0x0A
   03C8 0A                 4934 	.db 0x0A
   03C9 0D                 4935 	.db 0x0D
   03CA 09                 4936 	.db 0x09
   03CB 09                 4937 	.db 0x09
   03CC 20 2A 2A 2A 2A 2A  4938 	.ascii " ******  Timer Disable  ******"
        2A 20 20 54 69 6D
        65 72 20 44 69 73
        61 62 6C 65 20 20
        2A 2A 2A 2A 2A 2A
   03EA 00                 4939 	.db 0x00
   03EB                    4940 __str_15:
   03EB 0A                 4941 	.db 0x0A
   03EC 0A                 4942 	.db 0x0A
   03ED 0D                 4943 	.db 0x0D
   03EE 09                 4944 	.db 0x09
   03EF 09                 4945 	.db 0x09
   03F0 20 2A 2A 2A 2A 2A  4946 	.ascii " ******  Custom Character  ******"
        2A 20 20 43 75 73
        74 6F 6D 20 43 68
        61 72 61 63 74 65
        72 20 20 2A 2A 2A
        2A 2A 2A
   0411 00                 4947 	.db 0x00
   0412                    4948 __str_16:
   0412 0A                 4949 	.db 0x0A
   0413 0A                 4950 	.db 0x0A
   0414 0D                 4951 	.db 0x0D
   0415 09                 4952 	.db 0x09
   0416 09                 4953 	.db 0x09
   0417 20 2A 2A 2A 2A 2A  4954 	.ascii " ******  Reset Counter  ******"
        2A 20 20 52 65 73
        65 74 20 43 6F 75
        6E 74 65 72 20 20
        2A 2A 2A 2A 2A 2A
   0435 00                 4955 	.db 0x00
   0436                    4956 __str_17:
   0436 0A                 4957 	.db 0x0A
   0437 0A                 4958 	.db 0x0A
   0438 0D                 4959 	.db 0x0D
   0439 09                 4960 	.db 0x09
   043A 09                 4961 	.db 0x09
   043B 20 2A 2A 2A 2A 2A  4962 	.ascii " ******  Configure IO Pins  ******"
        2A 20 20 43 6F 6E
        66 69 67 75 72 65
        20 49 4F 20 50 69
        6E 73 20 20 2A 2A
        2A 2A 2A 2A
   045D 00                 4963 	.db 0x00
   045E                    4964 __str_18:
   045E 0A                 4965 	.db 0x0A
   045F 0A                 4966 	.db 0x0A
   0460 0D                 4967 	.db 0x0D
   0461 09                 4968 	.db 0x09
   0462 09                 4969 	.db 0x09
   0463 20 2A 2A 2A 2A 2A  4970 	.ascii " ******  Status of IO Expander  ******"
        2A 20 20 53 74 61
        74 75 73 20 6F 66
        20 49 4F 20 45 78
        70 61 6E 64 65 72
        20 20 2A 2A 2A 2A
        2A 2A
   0489 00                 4971 	.db 0x00
   048A                    4972 __str_19:
   048A 0A                 4973 	.db 0x0A
   048B 0A                 4974 	.db 0x0A
   048C 0D                 4975 	.db 0x0D
   048D 09                 4976 	.db 0x09
   048E 09                 4977 	.db 0x09
   048F 20 2A 2A 2A 2A 2A  4978 	.ascii " ******  EEPROM Write  ******"
        2A 20 20 45 45 50
        52 4F 4D 20 57 72
        69 74 65 20 20 2A
        2A 2A 2A 2A 2A
   04AC 00                 4979 	.db 0x00
   04AD                    4980 __str_20:
   04AD 0A                 4981 	.db 0x0A
   04AE 0A                 4982 	.db 0x0A
   04AF 0D                 4983 	.db 0x0D
   04B0 09                 4984 	.db 0x09
   04B1 09                 4985 	.db 0x09
   04B2 20 2A 2A 2A 2A 2A  4986 	.ascii " ******  EEPROM Read  ******"
        2A 20 20 45 45 50
        52 4F 4D 20 52 65
        61 64 20 20 2A 2A
        2A 2A 2A 2A
   04CE 00                 4987 	.db 0x00
   04CF                    4988 __str_21:
   04CF 0A                 4989 	.db 0x0A
   04D0 0A                 4990 	.db 0x0A
   04D1 0D                 4991 	.db 0x0D
   04D2 09                 4992 	.db 0x09
   04D3 09                 4993 	.db 0x09
   04D4 20 2A 2A 2A 2A 2A  4994 	.ascii " ******  CGRAM Dump  ******"
        2A 20 20 43 47 52
        41 4D 20 44 75 6D
        70 20 20 2A 2A 2A
        2A 2A 2A
   04EF 00                 4995 	.db 0x00
   04F0                    4996 __str_22:
   04F0 0A                 4997 	.db 0x0A
   04F1 0A                 4998 	.db 0x0A
   04F2 0D                 4999 	.db 0x0D
   04F3 09                 5000 	.db 0x09
   04F4 09                 5001 	.db 0x09
   04F5 20 2A 2A 2A 2A 2A  5002 	.ascii " ******  DDRAM Dump  ******"
        2A 20 20 44 44 52
        41 4D 20 44 75 6D
        70 20 20 2A 2A 2A
        2A 2A 2A
   0510 00                 5003 	.db 0x00
   0511                    5004 __str_23:
   0511 0A                 5005 	.db 0x0A
   0512 0A                 5006 	.db 0x0A
   0513 0D                 5007 	.db 0x0D
   0514 09                 5008 	.db 0x09
   0515 09                 5009 	.db 0x09
   0516 20 2A 2A 2A 2A 2A  5010 	.ascii " ******  Hex Dump  ******"
        2A 20 20 48 65 78
        20 44 75 6D 70 20
        20 2A 2A 2A 2A 2A
        2A
   052F 00                 5011 	.db 0x00
   0530                    5012 __str_24:
   0530 0A                 5013 	.db 0x0A
   0531 0A                 5014 	.db 0x0A
   0532 0D                 5015 	.db 0x0D
   0533 09                 5016 	.db 0x09
   0534 09                 5017 	.db 0x09
   0535 20 2A 2A 2A 2A 2A  5018 	.ascii " ******  LCD DISPLAY  ******"
        2A 20 20 4C 43 44
        20 44 49 53 50 4C
        41 59 20 20 2A 2A
        2A 2A 2A 2A
   0551 00                 5019 	.db 0x00
   0552                    5020 __str_25:
   0552 0A                 5021 	.db 0x0A
   0553 0A                 5022 	.db 0x0A
   0554 0D                 5023 	.db 0x0D
   0555 09                 5024 	.db 0x09
   0556 09                 5025 	.db 0x09
   0557 20 2A 2A 2A 2A 2A  5026 	.ascii " ******  Clear LCD  ******"
        2A 20 20 43 6C 65
        61 72 20 4C 43 44
        20 20 2A 2A 2A 2A
        2A 2A
   0571 00                 5027 	.db 0x00
   0572                    5028 __str_26:
   0572 0A                 5029 	.db 0x0A
   0573 0A                 5030 	.db 0x0A
   0574 0D                 5031 	.db 0x0D
   0575 09                 5032 	.db 0x09
   0576 20 53 65 6C 65 63  5033 	.ascii " Select timer number between 0 to 2: "
        74 20 74 69 6D 65
        72 20 6E 75 6D 62
        65 72 20 62 65 74
        77 65 65 6E 20 30
        20 74 6F 20 32 3A
        20
   059B 09                 5034 	.db 0x09
   059C 00                 5035 	.db 0x00
   059D                    5036 __str_27:
   059D 0A                 5037 	.db 0x0A
   059E 0A                 5038 	.db 0x0A
   059F 0D                 5039 	.db 0x0D
   05A0 20 2A 2D 45 52 52  5040 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   05AA 0A                 5041 	.db 0x0A
   05AB 0D                 5042 	.db 0x0D
   05AC 09                 5043 	.db 0x09
   05AD 20 45 6E 74 65 72  5044 	.ascii " Enter a valid number between 0 to 2"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 32
   05D1 00                 5045 	.db 0x00
   05D2                    5046 __str_28:
   05D2 0A                 5047 	.db 0x0A
   05D3 0A                 5048 	.db 0x0A
   05D4 0D                 5049 	.db 0x0D
   05D5 45 6E 74 65 72 20  5050 	.ascii "Enter minutes for timer %d between 0 to 59: "
        6D 69 6E 75 74 65
        73 20 66 6F 72 20
        74 69 6D 65 72 20
        25 64 20 62 65 74
        77 65 65 6E 20 30
        20 74 6F 20 35 39
        3A 20
   0601 09                 5051 	.db 0x09
   0602 00                 5052 	.db 0x00
   0603                    5053 __str_29:
   0603 0A                 5054 	.db 0x0A
   0604 0A                 5055 	.db 0x0A
   0605 0D                 5056 	.db 0x0D
   0606 20 2A 2D 45 52 52  5057 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0610 0A                 5058 	.db 0x0A
   0611 0D                 5059 	.db 0x0D
   0612 09                 5060 	.db 0x09
   0613 20 45 6E 74 65 72  5061 	.ascii " Enter a valid number between 0 to 59"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 35
        39
   0638 00                 5062 	.db 0x00
   0639                    5063 __str_30:
   0639 0A                 5064 	.db 0x0A
   063A 0A                 5065 	.db 0x0A
   063B 0D                 5066 	.db 0x0D
   063C 45 6E 74 65 72 20  5067 	.ascii "Enter seconds for timer %d between 1 to 59: "
        73 65 63 6F 6E 64
        73 20 66 6F 72 20
        74 69 6D 65 72 20
        25 64 20 62 65 74
        77 65 65 6E 20 31
        20 74 6F 20 35 39
        3A 20
   0668 09                 5068 	.db 0x09
   0669 00                 5069 	.db 0x00
   066A                    5070 __str_31:
   066A 0A                 5071 	.db 0x0A
   066B 0A                 5072 	.db 0x0A
   066C 0D                 5073 	.db 0x0D
   066D 45 6E 74 65 72 20  5074 	.ascii "Enter milisec for timer %d between 0 to 9: "
        6D 69 6C 69 73 65
        63 20 66 6F 72 20
        74 69 6D 65 72 20
        25 64 20 62 65 74
        77 65 65 6E 20 30
        20 74 6F 20 39 3A
        20
   0698 09                 5075 	.db 0x09
   0699 00                 5076 	.db 0x00
   069A                    5077 __str_32:
   069A 0A                 5078 	.db 0x0A
   069B 0A                 5079 	.db 0x0A
   069C 0D                 5080 	.db 0x0D
   069D 20 2A 2D 45 52 52  5081 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   06A7 0A                 5082 	.db 0x0A
   06A8 0D                 5083 	.db 0x0D
   06A9 09                 5084 	.db 0x09
   06AA 20 45 6E 74 65 72  5085 	.ascii " Enter a valid number between 0 to 9"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 39
   06CE 00                 5086 	.db 0x00
   06CF                    5087 __str_33:
   06CF 0A                 5088 	.db 0x0A
   06D0 0A                 5089 	.db 0x0A
   06D1 0D                 5090 	.db 0x0D
   06D2 09                 5091 	.db 0x09
   06D3 57 68 69 63 68 20  5092 	.ascii "Which timer to enable between 0 to 2:"
        74 69 6D 65 72 20
        74 6F 20 65 6E 61
        62 6C 65 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 32
        3A
   06F8 09                 5093 	.db 0x09
   06F9 00                 5094 	.db 0x00
   06FA                    5095 __str_34:
   06FA 2D 45              5096 	.ascii "-E"
   06FC 00                 5097 	.db 0x00
   06FD                    5098 __str_35:
   06FD 0A                 5099 	.db 0x0A
   06FE 0A                 5100 	.db 0x0A
   06FF 0D                 5101 	.db 0x0D
   0700 57 68 69 63 68 20  5102 	.ascii "Which timer to Disable between 0 to 2:"
        74 69 6D 65 72 20
        74 6F 20 44 69 73
        61 62 6C 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        32 3A
   0726 09                 5103 	.db 0x09
   0727 00                 5104 	.db 0x00
   0728                    5105 __str_36:
   0728 44 69 73 61 62 6C  5106 	.ascii "Disabled"
        65 64
   0730 00                 5107 	.db 0x00
   0731                    5108 __str_37:
   0731 0A                 5109 	.db 0x0A
   0732 0A                 5110 	.db 0x0A
   0733 09                 5111 	.db 0x09
   0734 09                 5112 	.db 0x09
   0735 20 44 69 73 61 62  5113 	.ascii " Disabling..."
        6C 69 6E 67 2E 2E
        2E
   0742 0A                 5114 	.db 0x0A
   0743 0D                 5115 	.db 0x0D
   0744 00                 5116 	.db 0x00
   0745                    5117 __str_38:
   0745 0A                 5118 	.db 0x0A
   0746 0A                 5119 	.db 0x0A
   0747 0D                 5120 	.db 0x0D
   0748 09                 5121 	.db 0x09
   0749 20 53 65 6C 65 63  5122 	.ascii " Select Character code between 0 to 7: "
        74 20 43 68 61 72
        61 63 74 65 72 20
        63 6F 64 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        37 3A 20
   0770 09                 5123 	.db 0x09
   0771 00                 5124 	.db 0x00
   0772                    5125 __str_39:
   0772 0A                 5126 	.db 0x0A
   0773 0A                 5127 	.db 0x0A
   0774 0D                 5128 	.db 0x0D
   0775 20 2A 2D 45 52 52  5129 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   077F 0A                 5130 	.db 0x0A
   0780 0D                 5131 	.db 0x0D
   0781 09                 5132 	.db 0x09
   0782 20 45 6E 74 65 72  5133 	.ascii " Enter a valid number between 0 to 7"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 37
   07A6 00                 5134 	.db 0x00
   07A7                    5135 __str_40:
   07A7 0A                 5136 	.db 0x0A
   07A8 0A                 5137 	.db 0x0A
   07A9 0D                 5138 	.db 0x0D
   07AA 09                 5139 	.db 0x09
   07AB 20 45 6E 74 65 72  5140 	.ascii " Enter pixel map in HEX in HH format from 00 to 1F: "
        20 70 69 78 65 6C
        20 6D 61 70 20 69
        6E 20 48 45 58 20
        69 6E 20 48 48 20
        66 6F 72 6D 61 74
        20 66 72 6F 6D 20
        30 30 20 74 6F 20
        31 46 3A 20
   07DF 09                 5141 	.db 0x09
   07E0 00                 5142 	.db 0x00
   07E1                    5143 __str_41:
   07E1 0A                 5144 	.db 0x0A
   07E2 0D                 5145 	.db 0x0D
   07E3 09                 5146 	.db 0x09
   07E4 20 44 61 74 61 20  5147 	.ascii " Data in row number %d: "
        69 6E 20 72 6F 77
        20 6E 75 6D 62 65
        72 20 25 64 3A 20
   07FC 09                 5148 	.db 0x09
   07FD 00                 5149 	.db 0x00
   07FE                    5150 __str_42:
   07FE 0A                 5151 	.db 0x0A
   07FF 0A                 5152 	.db 0x0A
   0800 0D                 5153 	.db 0x0D
   0801 20 2A 2D 45 52 52  5154 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   080B 0A                 5155 	.db 0x0A
   080C 0D                 5156 	.db 0x0D
   080D 09                 5157 	.db 0x09
   080E 20 45 6E 74 65 72  5158 	.ascii " Enter a valid HEX number between 00 to 1F i"
        20 61 20 76 61 6C
        69 64 20 48 45 58
        20 6E 75 6D 62 65
        72 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 31 46
        20 69
   083A 6E 20 48 48 20 66  5159 	.ascii "n HH format:"
        6F 72 6D 61 74 3A
   0846 09                 5160 	.db 0x09
   0847 00                 5161 	.db 0x00
   0848                    5162 __str_43:
   0848 0A                 5163 	.db 0x0A
   0849 0D                 5164 	.db 0x0D
   084A 09                 5165 	.db 0x09
   084B 09                 5166 	.db 0x09
   084C 20 20 20 20 20 20  5167 	.ascii "      "
   0852 09                 5168 	.db 0x09
   0853 31 32 33 34 35     5169 	.ascii "12345"
   0858 00                 5170 	.db 0x00
   0859                    5171 __str_44:
   0859 0A                 5172 	.db 0x0A
   085A 0D                 5173 	.db 0x0D
   085B 09                 5174 	.db 0x09
   085C 09                 5175 	.db 0x09
   085D 52 4F 57 20 25 64  5176 	.ascii "ROW %d:"
        3A
   0864 09                 5177 	.db 0x09
   0865 00                 5178 	.db 0x00
   0866                    5179 __str_45:
   0866 25 63              5180 	.ascii "%c"
   0868 00                 5181 	.db 0x00
   0869                    5182 __str_46:
   0869 0A                 5183 	.db 0x0A
   086A 0A                 5184 	.db 0x0A
   086B 0D                 5185 	.db 0x0D
   086C 09                 5186 	.db 0x09
   086D 20 53 65 6C 65 63  5187 	.ascii " Select Character code between 0 to 7 to display: "
        74 20 43 68 61 72
        61 63 74 65 72 20
        63 6F 64 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        37 20 74 6F 20 64
        69 73 70 6C 61 79
        3A 20
   089F 09                 5188 	.db 0x09
   08A0 00                 5189 	.db 0x00
   08A1                    5190 __str_47:
   08A1 0A                 5191 	.db 0x0A
   08A2 0A                 5192 	.db 0x0A
   08A3 0D                 5193 	.db 0x0D
   08A4 20 45 6E 74 65 72  5194 	.ascii " Enter Address in Hex in HHH format between 000 to 7FF: "
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20 37 46 46
        3A 20
   08DC 00                 5195 	.db 0x00
   08DD                    5196 __str_48:
   08DD 0A                 5197 	.db 0x0A
   08DE 0A                 5198 	.db 0x0A
   08DF 0D                 5199 	.db 0x0D
   08E0 20 2A 2D 45 52 52  5200 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   08EA 09                 5201 	.db 0x09
   08EB 20 50 6C 65 61 73  5202 	.ascii " Please Enter valid Address betweem 000 and 7F"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 41 64 64 72
        65 73 73 20 62 65
        74 77 65 65 6D 20
        30 30 30 20 61 6E
        64 20 37 46
   0919 46 3A 20           5203 	.ascii "F: "
   091C 00                 5204 	.db 0x00
   091D                    5205 __str_49:
   091D 0A                 5206 	.db 0x0A
   091E 0A                 5207 	.db 0x0A
   091F 0D                 5208 	.db 0x0D
   0920 20 45 6E 74 65 72  5209 	.ascii " Enter Data in Hex in HH format between 00 to FF: "
        20 44 61 74 61 20
        69 6E 20 48 65 78
        20 69 6E 20 48 48
        20 66 6F 72 6D 61
        74 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 46 46
        3A 20
   0952 00                 5210 	.db 0x00
   0953                    5211 __str_50:
   0953 0A                 5212 	.db 0x0A
   0954 0A                 5213 	.db 0x0A
   0955 0D                 5214 	.db 0x0D
   0956 20 2A 2D 45 52 52  5215 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0960 09                 5216 	.db 0x09
   0961 20 50 6C 65 61 73  5217 	.ascii " Please Enter valid data in Hex in HH format b"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 64 61 74 61
        20 69 6E 20 48 65
        78 20 69 6E 20 48
        48 20 66 6F 72 6D
        61 74 20 62
   098F 65 74 77 65 65 6E  5218 	.ascii "etween 00 to FF: "
        20 30 30 20 74 6F
        20 46 46 3A 20
   09A0 00                 5219 	.db 0x00
   09A1                    5220 __str_51:
   09A1 0A                 5221 	.db 0x0A
   09A2 0A                 5222 	.db 0x0A
   09A3 0D                 5223 	.db 0x0D
   09A4 09                 5224 	.db 0x09
   09A5 09                 5225 	.db 0x09
   09A6 09                 5226 	.db 0x09
   09A7 25 78 20 3A 20 25  5227 	.ascii "%x : %x "
        78 20
   09AF 0A                 5228 	.db 0x0A
   09B0 00                 5229 	.db 0x00
   09B1                    5230 __str_52:
   09B1 0A                 5231 	.db 0x0A
   09B2 0A                 5232 	.db 0x0A
   09B3 0D                 5233 	.db 0x0D
   09B4 09                 5234 	.db 0x09
   09B5 20 43 75 72 72 65  5235 	.ascii " Current Status of the IO_Expander pins is: 0x%x"
        6E 74 20 53 74 61
        74 75 73 20 6F 66
        20 74 68 65 20 49
        4F 5F 45 78 70 61
        6E 64 65 72 20 70
        69 6E 73 20 69 73
        3A 20 30 78 25 78
   09E5 0A                 5236 	.db 0x0A
   09E6 0A                 5237 	.db 0x0A
   09E7 0D                 5238 	.db 0x0D
   09E8 00                 5239 	.db 0x00
   09E9                    5240 __str_53:
   09E9 0A                 5241 	.db 0x0A
   09EA 0A                 5242 	.db 0x0A
   09EB 0A                 5243 	.db 0x0A
   09EC 0D                 5244 	.db 0x0D
   09ED 57 61 74 63 68 64  5245 	.ascii "Watchdog RESET Demo"
        6F 67 20 52 45 53
        45 54 20 44 65 6D
        6F
   0A00 00                 5246 	.db 0x00
   0A01                    5247 __str_54:
   0A01 0A                 5248 	.db 0x0A
   0A02 0A                 5249 	.db 0x0A
   0A03 0A                 5250 	.db 0x0A
   0A04 0D                 5251 	.db 0x0D
   0A05 09                 5252 	.db 0x09
   0A06 09                 5253 	.db 0x09
   0A07 09                 5254 	.db 0x09
   0A08 09                 5255 	.db 0x09
   0A09 09                 5256 	.db 0x09
   0A0A 2A 2A 2A 2A 2A 2A  5257 	.ascii "******** LCD Commands ********"
        2A 2A 20 4C 43 44
        20 43 6F 6D 6D 61
        6E 64 73 20 2A 2A
        2A 2A 2A 2A 2A 2A
   0A28 0A                 5258 	.db 0x0A
   0A29 0A                 5259 	.db 0x0A
   0A2A 0D                 5260 	.db 0x0D
   0A2B 09                 5261 	.db 0x09
   0A2C 37 2E 20 43 72 65  5262 	.ascii "7. Create Custom "
        61 74 65 20 43 75
        73 74 6F 6D 20
   0A3D 43 68 61 72 61 63  5263 	.ascii "Character"
        74 65 72
   0A46 09                 5264 	.db 0x09
   0A47 09                 5265 	.db 0x09
   0A48 09                 5266 	.db 0x09
   0A49 38 2E 20 44 69 73  5267 	.ascii "8. Display Custom Character"
        70 6C 61 79 20 43
        75 73 74 6F 6D 20
        43 68 61 72 61 63
        74 65 72
   0A64 09                 5268 	.db 0x09
   0A65 09                 5269 	.db 0x09
   0A66 09                 5270 	.db 0x09
   0A67 27 63 27 2E 20 43  5271 	.ascii "'c'. CGRAM Dump"
        47 52 41 4D 20 44
        75 6D 70
   0A76 09                 5272 	.db 0x09
   0A77 09                 5273 	.db 0x09
   0A78 09                 5274 	.db 0x09
   0A79 27 64 27 2E 20 44  5275 	.ascii "'d'. DDRAM Dump"
        44 52 41 4D 20 44
        75 6D 70
   0A88 0A                 5276 	.db 0x0A
   0A89 0D                 5277 	.db 0x0D
   0A8A 09                 5278 	.db 0x09
   0A8B 27 6C 27 2E 20 4C  5279 	.ascii "'l'. LCD Display"
        43 44 20 44 69 73
        70 6C 61 79
   0A9B 09                 5280 	.db 0x09
   0A9C 09                 5281 	.db 0x09
   0A9D 09                 5282 	.db 0x09
   0A9E 09                 5283 	.db 0x09
   0A9F 27 71 27 2E 20 43  5284 	.ascii "'q'. Clear LCD Display"
        6C 65 61 72 20 4C
        43 44 20 44 69 73
        70 6C 61 79
   0AB5 00                 5285 	.db 0x00
   0AB6                    5286 __str_55:
   0AB6 0A                 5287 	.db 0x0A
   0AB7 0A                 5288 	.db 0x0A
   0AB8 0D                 5289 	.db 0x0D
   0AB9 09                 5290 	.db 0x09
   0ABA 20 50 72 65 73 73  5291 	.ascii " Press 'm' to see the Menu again or Press Command Key:"
        20 27 6D 27 20 74
        6F 20 73 65 65 20
        74 68 65 20 4D 65
        6E 75 20 61 67 61
        69 6E 20 6F 72 20
        50 72 65 73 73 20
        43 6F 6D 6D 61 6E
        64 20 4B 65 79 3A
   0AF0 09                 5292 	.db 0x09
   0AF1 00                 5293 	.db 0x00
                           5294 	.area XINIT   (CODE)
   0000                    5295 __xinit__flag:
   0000 00                 5296 	.db #0x00
   0001                    5297 __xinit__timers:
   0001 00 00              5298 	.byte #0x00,#0x00
