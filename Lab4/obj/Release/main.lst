                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Thu Nov 17 23:43:17 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _timer_isr
                             13 	.globl _ext_zero
                             14 	.globl _main
                             15 	.globl __sdcc_external_startup
                             16 	.globl _P5_7
                             17 	.globl _P5_6
                             18 	.globl _P5_5
                             19 	.globl _P5_4
                             20 	.globl _P5_3
                             21 	.globl _P5_2
                             22 	.globl _P5_1
                             23 	.globl _P5_0
                             24 	.globl _P4_7
                             25 	.globl _P4_6
                             26 	.globl _P4_5
                             27 	.globl _P4_4
                             28 	.globl _P4_3
                             29 	.globl _P4_2
                             30 	.globl _P4_1
                             31 	.globl _P4_0
                             32 	.globl _PX0L
                             33 	.globl _PT0L
                             34 	.globl _PX1L
                             35 	.globl _PT1L
                             36 	.globl _PLS
                             37 	.globl _PT2L
                             38 	.globl _PPCL
                             39 	.globl _EC
                             40 	.globl _CCF0
                             41 	.globl _CCF1
                             42 	.globl _CCF2
                             43 	.globl _CCF3
                             44 	.globl _CCF4
                             45 	.globl _CR
                             46 	.globl _CF
                             47 	.globl _TF2
                             48 	.globl _EXF2
                             49 	.globl _RCLK
                             50 	.globl _TCLK
                             51 	.globl _EXEN2
                             52 	.globl _TR2
                             53 	.globl _C_T2
                             54 	.globl _CP_RL2
                             55 	.globl _T2CON_7
                             56 	.globl _T2CON_6
                             57 	.globl _T2CON_5
                             58 	.globl _T2CON_4
                             59 	.globl _T2CON_3
                             60 	.globl _T2CON_2
                             61 	.globl _T2CON_1
                             62 	.globl _T2CON_0
                             63 	.globl _PT2
                             64 	.globl _ET2
                             65 	.globl _CY
                             66 	.globl _AC
                             67 	.globl _F0
                             68 	.globl _RS1
                             69 	.globl _RS0
                             70 	.globl _OV
                             71 	.globl _F1
                             72 	.globl _P
                             73 	.globl _PS
                             74 	.globl _PT1
                             75 	.globl _PX1
                             76 	.globl _PT0
                             77 	.globl _PX0
                             78 	.globl _RD
                             79 	.globl _WR
                             80 	.globl _T1
                             81 	.globl _T0
                             82 	.globl _INT1
                             83 	.globl _INT0
                             84 	.globl _TXD
                             85 	.globl _RXD
                             86 	.globl _P3_7
                             87 	.globl _P3_6
                             88 	.globl _P3_5
                             89 	.globl _P3_4
                             90 	.globl _P3_3
                             91 	.globl _P3_2
                             92 	.globl _P3_1
                             93 	.globl _P3_0
                             94 	.globl _EA
                             95 	.globl _ES
                             96 	.globl _ET1
                             97 	.globl _EX1
                             98 	.globl _ET0
                             99 	.globl _EX0
                            100 	.globl _P2_7
                            101 	.globl _P2_6
                            102 	.globl _P2_5
                            103 	.globl _P2_4
                            104 	.globl _P2_3
                            105 	.globl _P2_2
                            106 	.globl _P2_1
                            107 	.globl _P2_0
                            108 	.globl _SM0
                            109 	.globl _SM1
                            110 	.globl _SM2
                            111 	.globl _REN
                            112 	.globl _TB8
                            113 	.globl _RB8
                            114 	.globl _TI
                            115 	.globl _RI
                            116 	.globl _P1_7
                            117 	.globl _P1_6
                            118 	.globl _P1_5
                            119 	.globl _P1_4
                            120 	.globl _P1_3
                            121 	.globl _P1_2
                            122 	.globl _P1_1
                            123 	.globl _P1_0
                            124 	.globl _TF1
                            125 	.globl _TR1
                            126 	.globl _TF0
                            127 	.globl _TR0
                            128 	.globl _IE1
                            129 	.globl _IT1
                            130 	.globl _IE0
                            131 	.globl _IT0
                            132 	.globl _P0_7
                            133 	.globl _P0_6
                            134 	.globl _P0_5
                            135 	.globl _P0_4
                            136 	.globl _P0_3
                            137 	.globl _P0_2
                            138 	.globl _P0_1
                            139 	.globl _P0_0
                            140 	.globl _EECON
                            141 	.globl _KBF
                            142 	.globl _KBE
                            143 	.globl _KBLS
                            144 	.globl _BRL
                            145 	.globl _BDRCON
                            146 	.globl _T2MOD
                            147 	.globl _SPDAT
                            148 	.globl _SPSTA
                            149 	.globl _SPCON
                            150 	.globl _SADEN
                            151 	.globl _SADDR
                            152 	.globl _WDTPRG
                            153 	.globl _WDTRST
                            154 	.globl _P5
                            155 	.globl _P4
                            156 	.globl _IPH1
                            157 	.globl _IPL1
                            158 	.globl _IPH0
                            159 	.globl _IPL0
                            160 	.globl _IEN1
                            161 	.globl _IEN0
                            162 	.globl _CMOD
                            163 	.globl _CL
                            164 	.globl _CH
                            165 	.globl _CCON
                            166 	.globl _CCAPM4
                            167 	.globl _CCAPM3
                            168 	.globl _CCAPM2
                            169 	.globl _CCAPM1
                            170 	.globl _CCAPM0
                            171 	.globl _CCAP4L
                            172 	.globl _CCAP3L
                            173 	.globl _CCAP2L
                            174 	.globl _CCAP1L
                            175 	.globl _CCAP0L
                            176 	.globl _CCAP4H
                            177 	.globl _CCAP3H
                            178 	.globl _CCAP2H
                            179 	.globl _CCAP1H
                            180 	.globl _CCAP0H
                            181 	.globl _CKCKON1
                            182 	.globl _CKCKON0
                            183 	.globl _CKRL
                            184 	.globl _AUXR1
                            185 	.globl _AUXR
                            186 	.globl _TH2
                            187 	.globl _TL2
                            188 	.globl _RCAP2H
                            189 	.globl _RCAP2L
                            190 	.globl _T2CON
                            191 	.globl _B
                            192 	.globl _ACC
                            193 	.globl _PSW
                            194 	.globl _IP
                            195 	.globl _P3
                            196 	.globl _IE
                            197 	.globl _P2
                            198 	.globl _SBUF
                            199 	.globl _SCON
                            200 	.globl _P1
                            201 	.globl _TH1
                            202 	.globl _TH0
                            203 	.globl _TL1
                            204 	.globl _TL0
                            205 	.globl _TMOD
                            206 	.globl _TCON
                            207 	.globl _PCON
                            208 	.globl _DPH
                            209 	.globl _DPL
                            210 	.globl _SP
                            211 	.globl _P0
                            212 	.globl _timers
                            213 	.globl _flag
                            214 	.globl _io_counter
                            215 	.globl _nmi
                            216 	.globl _nsec
                            217 	.globl _nms
                            218 	.globl _cnt
                            219 	.globl _mi
                            220 	.globl _sec
                            221 	.globl _ms
                            222 ;--------------------------------------------------------
                            223 ; special function registers
                            224 ;--------------------------------------------------------
                            225 	.area RSEG    (DATA)
                    0080    226 _P0	=	0x0080
                    0081    227 _SP	=	0x0081
                    0082    228 _DPL	=	0x0082
                    0083    229 _DPH	=	0x0083
                    0087    230 _PCON	=	0x0087
                    0088    231 _TCON	=	0x0088
                    0089    232 _TMOD	=	0x0089
                    008A    233 _TL0	=	0x008a
                    008B    234 _TL1	=	0x008b
                    008C    235 _TH0	=	0x008c
                    008D    236 _TH1	=	0x008d
                    0090    237 _P1	=	0x0090
                    0098    238 _SCON	=	0x0098
                    0099    239 _SBUF	=	0x0099
                    00A0    240 _P2	=	0x00a0
                    00A8    241 _IE	=	0x00a8
                    00B0    242 _P3	=	0x00b0
                    00B8    243 _IP	=	0x00b8
                    00D0    244 _PSW	=	0x00d0
                    00E0    245 _ACC	=	0x00e0
                    00F0    246 _B	=	0x00f0
                    00C8    247 _T2CON	=	0x00c8
                    00CA    248 _RCAP2L	=	0x00ca
                    00CB    249 _RCAP2H	=	0x00cb
                    00CC    250 _TL2	=	0x00cc
                    00CD    251 _TH2	=	0x00cd
                    008E    252 _AUXR	=	0x008e
                    00A2    253 _AUXR1	=	0x00a2
                    0097    254 _CKRL	=	0x0097
                    008F    255 _CKCKON0	=	0x008f
                    008F    256 _CKCKON1	=	0x008f
                    00FA    257 _CCAP0H	=	0x00fa
                    00FB    258 _CCAP1H	=	0x00fb
                    00FC    259 _CCAP2H	=	0x00fc
                    00FD    260 _CCAP3H	=	0x00fd
                    00FE    261 _CCAP4H	=	0x00fe
                    00EA    262 _CCAP0L	=	0x00ea
                    00EB    263 _CCAP1L	=	0x00eb
                    00EC    264 _CCAP2L	=	0x00ec
                    00ED    265 _CCAP3L	=	0x00ed
                    00EE    266 _CCAP4L	=	0x00ee
                    00DA    267 _CCAPM0	=	0x00da
                    00DB    268 _CCAPM1	=	0x00db
                    00DC    269 _CCAPM2	=	0x00dc
                    00DD    270 _CCAPM3	=	0x00dd
                    00DE    271 _CCAPM4	=	0x00de
                    00D8    272 _CCON	=	0x00d8
                    00F9    273 _CH	=	0x00f9
                    00E9    274 _CL	=	0x00e9
                    00D9    275 _CMOD	=	0x00d9
                    00A8    276 _IEN0	=	0x00a8
                    00B1    277 _IEN1	=	0x00b1
                    00B8    278 _IPL0	=	0x00b8
                    00B7    279 _IPH0	=	0x00b7
                    00B2    280 _IPL1	=	0x00b2
                    00B3    281 _IPH1	=	0x00b3
                    00C0    282 _P4	=	0x00c0
                    00D8    283 _P5	=	0x00d8
                    00A6    284 _WDTRST	=	0x00a6
                    00A7    285 _WDTPRG	=	0x00a7
                    00A9    286 _SADDR	=	0x00a9
                    00B9    287 _SADEN	=	0x00b9
                    00C3    288 _SPCON	=	0x00c3
                    00C4    289 _SPSTA	=	0x00c4
                    00C5    290 _SPDAT	=	0x00c5
                    00C9    291 _T2MOD	=	0x00c9
                    009B    292 _BDRCON	=	0x009b
                    009A    293 _BRL	=	0x009a
                    009C    294 _KBLS	=	0x009c
                    009D    295 _KBE	=	0x009d
                    009E    296 _KBF	=	0x009e
                    00D2    297 _EECON	=	0x00d2
                            298 ;--------------------------------------------------------
                            299 ; special function bits
                            300 ;--------------------------------------------------------
                            301 	.area RSEG    (DATA)
                    0080    302 _P0_0	=	0x0080
                    0081    303 _P0_1	=	0x0081
                    0082    304 _P0_2	=	0x0082
                    0083    305 _P0_3	=	0x0083
                    0084    306 _P0_4	=	0x0084
                    0085    307 _P0_5	=	0x0085
                    0086    308 _P0_6	=	0x0086
                    0087    309 _P0_7	=	0x0087
                    0088    310 _IT0	=	0x0088
                    0089    311 _IE0	=	0x0089
                    008A    312 _IT1	=	0x008a
                    008B    313 _IE1	=	0x008b
                    008C    314 _TR0	=	0x008c
                    008D    315 _TF0	=	0x008d
                    008E    316 _TR1	=	0x008e
                    008F    317 _TF1	=	0x008f
                    0090    318 _P1_0	=	0x0090
                    0091    319 _P1_1	=	0x0091
                    0092    320 _P1_2	=	0x0092
                    0093    321 _P1_3	=	0x0093
                    0094    322 _P1_4	=	0x0094
                    0095    323 _P1_5	=	0x0095
                    0096    324 _P1_6	=	0x0096
                    0097    325 _P1_7	=	0x0097
                    0098    326 _RI	=	0x0098
                    0099    327 _TI	=	0x0099
                    009A    328 _RB8	=	0x009a
                    009B    329 _TB8	=	0x009b
                    009C    330 _REN	=	0x009c
                    009D    331 _SM2	=	0x009d
                    009E    332 _SM1	=	0x009e
                    009F    333 _SM0	=	0x009f
                    00A0    334 _P2_0	=	0x00a0
                    00A1    335 _P2_1	=	0x00a1
                    00A2    336 _P2_2	=	0x00a2
                    00A3    337 _P2_3	=	0x00a3
                    00A4    338 _P2_4	=	0x00a4
                    00A5    339 _P2_5	=	0x00a5
                    00A6    340 _P2_6	=	0x00a6
                    00A7    341 _P2_7	=	0x00a7
                    00A8    342 _EX0	=	0x00a8
                    00A9    343 _ET0	=	0x00a9
                    00AA    344 _EX1	=	0x00aa
                    00AB    345 _ET1	=	0x00ab
                    00AC    346 _ES	=	0x00ac
                    00AF    347 _EA	=	0x00af
                    00B0    348 _P3_0	=	0x00b0
                    00B1    349 _P3_1	=	0x00b1
                    00B2    350 _P3_2	=	0x00b2
                    00B3    351 _P3_3	=	0x00b3
                    00B4    352 _P3_4	=	0x00b4
                    00B5    353 _P3_5	=	0x00b5
                    00B6    354 _P3_6	=	0x00b6
                    00B7    355 _P3_7	=	0x00b7
                    00B0    356 _RXD	=	0x00b0
                    00B1    357 _TXD	=	0x00b1
                    00B2    358 _INT0	=	0x00b2
                    00B3    359 _INT1	=	0x00b3
                    00B4    360 _T0	=	0x00b4
                    00B5    361 _T1	=	0x00b5
                    00B6    362 _WR	=	0x00b6
                    00B7    363 _RD	=	0x00b7
                    00B8    364 _PX0	=	0x00b8
                    00B9    365 _PT0	=	0x00b9
                    00BA    366 _PX1	=	0x00ba
                    00BB    367 _PT1	=	0x00bb
                    00BC    368 _PS	=	0x00bc
                    00D0    369 _P	=	0x00d0
                    00D1    370 _F1	=	0x00d1
                    00D2    371 _OV	=	0x00d2
                    00D3    372 _RS0	=	0x00d3
                    00D4    373 _RS1	=	0x00d4
                    00D5    374 _F0	=	0x00d5
                    00D6    375 _AC	=	0x00d6
                    00D7    376 _CY	=	0x00d7
                    00AD    377 _ET2	=	0x00ad
                    00BD    378 _PT2	=	0x00bd
                    00C8    379 _T2CON_0	=	0x00c8
                    00C9    380 _T2CON_1	=	0x00c9
                    00CA    381 _T2CON_2	=	0x00ca
                    00CB    382 _T2CON_3	=	0x00cb
                    00CC    383 _T2CON_4	=	0x00cc
                    00CD    384 _T2CON_5	=	0x00cd
                    00CE    385 _T2CON_6	=	0x00ce
                    00CF    386 _T2CON_7	=	0x00cf
                    00C8    387 _CP_RL2	=	0x00c8
                    00C9    388 _C_T2	=	0x00c9
                    00CA    389 _TR2	=	0x00ca
                    00CB    390 _EXEN2	=	0x00cb
                    00CC    391 _TCLK	=	0x00cc
                    00CD    392 _RCLK	=	0x00cd
                    00CE    393 _EXF2	=	0x00ce
                    00CF    394 _TF2	=	0x00cf
                    00DF    395 _CF	=	0x00df
                    00DE    396 _CR	=	0x00de
                    00DC    397 _CCF4	=	0x00dc
                    00DB    398 _CCF3	=	0x00db
                    00DA    399 _CCF2	=	0x00da
                    00D9    400 _CCF1	=	0x00d9
                    00D8    401 _CCF0	=	0x00d8
                    00AE    402 _EC	=	0x00ae
                    00BE    403 _PPCL	=	0x00be
                    00BD    404 _PT2L	=	0x00bd
                    00BC    405 _PLS	=	0x00bc
                    00BB    406 _PT1L	=	0x00bb
                    00BA    407 _PX1L	=	0x00ba
                    00B9    408 _PT0L	=	0x00b9
                    00B8    409 _PX0L	=	0x00b8
                    00C0    410 _P4_0	=	0x00c0
                    00C1    411 _P4_1	=	0x00c1
                    00C2    412 _P4_2	=	0x00c2
                    00C3    413 _P4_3	=	0x00c3
                    00C4    414 _P4_4	=	0x00c4
                    00C5    415 _P4_5	=	0x00c5
                    00C6    416 _P4_6	=	0x00c6
                    00C7    417 _P4_7	=	0x00c7
                    00D8    418 _P5_0	=	0x00d8
                    00D9    419 _P5_1	=	0x00d9
                    00DA    420 _P5_2	=	0x00da
                    00DB    421 _P5_3	=	0x00db
                    00DC    422 _P5_4	=	0x00dc
                    00DD    423 _P5_5	=	0x00dd
                    00DE    424 _P5_6	=	0x00de
                    00DF    425 _P5_7	=	0x00df
                            426 ;--------------------------------------------------------
                            427 ; overlayable register banks
                            428 ;--------------------------------------------------------
                            429 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     430 	.ds 8
                            431 ;--------------------------------------------------------
                            432 ; internal ram data
                            433 ;--------------------------------------------------------
                            434 	.area DSEG    (DATA)
   0000                     435 _main_sloc0_1_0:
   0000                     436 	.ds 2
   0002                     437 _main_sloc1_1_0:
   0002                     438 	.ds 2
   0004                     439 _timer_isr_sloc0_1_0:
   0004                     440 	.ds 2
   0006                     441 _timer_isr_sloc1_1_0:
   0006                     442 	.ds 2
                            443 ;--------------------------------------------------------
                            444 ; overlayable items in internal ram 
                            445 ;--------------------------------------------------------
                            446 	.area OSEG    (OVR,DATA)
                            447 ;--------------------------------------------------------
                            448 ; Stack segment in internal ram 
                            449 ;--------------------------------------------------------
                            450 	.area	SSEG	(DATA)
   0000                     451 __start__stack:
   0000                     452 	.ds	1
                            453 
                            454 ;--------------------------------------------------------
                            455 ; indirectly addressable internal ram data
                            456 ;--------------------------------------------------------
                            457 	.area ISEG    (DATA)
                            458 ;--------------------------------------------------------
                            459 ; bit data
                            460 ;--------------------------------------------------------
                            461 	.area BSEG    (BIT)
                            462 ;--------------------------------------------------------
                            463 ; paged external ram data
                            464 ;--------------------------------------------------------
                            465 	.area PSEG    (PAG,XDATA)
                            466 ;--------------------------------------------------------
                            467 ; external ram data
                            468 ;--------------------------------------------------------
                            469 	.area XSEG    (XDATA)
   0000                     470 _ms::
   0000                     471 	.ds 1
   0001                     472 _sec::
   0001                     473 	.ds 1
   0002                     474 _mi::
   0002                     475 	.ds 1
   0003                     476 _cnt::
   0003                     477 	.ds 3
   0006                     478 _nms::
   0006                     479 	.ds 6
   000C                     480 _nsec::
   000C                     481 	.ds 6
   0012                     482 _nmi::
   0012                     483 	.ds 6
   0018                     484 _io_counter::
   0018                     485 	.ds 2
   001A                     486 _main_c_1_1:
   001A                     487 	.ds 4
   001E                     488 _main_d_1_1:
   001E                     489 	.ds 5
   0023                     490 _main_name_1_1:
   0023                     491 	.ds 3
   0026                     492 _main_b_1_1:
   0026                     493 	.ds 5
   002B                     494 _main_flag_1_1:
   002B                     495 	.ds 2
   002D                     496 _main_row_val_1_1:
   002D                     497 	.ds 8
   0035                     498 _main_disp_1_1:
   0035                     499 	.ds 8
                            500 ;--------------------------------------------------------
                            501 ; external initialized ram data
                            502 ;--------------------------------------------------------
                            503 	.area XISEG   (XDATA)
   0000                     504 _flag::
   0000                     505 	.ds 1
   0001                     506 _timers::
   0001                     507 	.ds 2
                            508 	.area HOME    (CODE)
                            509 	.area GSINIT0 (CODE)
                            510 	.area GSINIT1 (CODE)
                            511 	.area GSINIT2 (CODE)
                            512 	.area GSINIT3 (CODE)
                            513 	.area GSINIT4 (CODE)
                            514 	.area GSINIT5 (CODE)
                            515 	.area GSINIT  (CODE)
                            516 	.area GSFINAL (CODE)
                            517 	.area CSEG    (CODE)
                            518 ;--------------------------------------------------------
                            519 ; interrupt vector 
                            520 ;--------------------------------------------------------
                            521 	.area HOME    (CODE)
   0000                     522 __interrupt_vect:
   0000 02s00r00            523 	ljmp	__sdcc_gsinit_startup
   0003 02s0FrED            524 	ljmp	_ext_zero
   0006                     525 	.ds	5
   000B 02s10r67            526 	ljmp	_timer_isr
                            527 ;--------------------------------------------------------
                            528 ; global & static initialisations
                            529 ;--------------------------------------------------------
                            530 	.area HOME    (CODE)
                            531 	.area GSINIT  (CODE)
                            532 	.area GSFINAL (CODE)
                            533 	.area GSINIT  (CODE)
                            534 	.globl __sdcc_gsinit_startup
                            535 	.globl __sdcc_program_startup
                            536 	.globl __start__stack
                            537 	.globl __mcs51_genXINIT
                            538 	.globl __mcs51_genXRAMCLEAR
                            539 	.globl __mcs51_genRAMCLEAR
                            540 	.area GSFINAL (CODE)
   0000 02s00r00            541 	ljmp	__sdcc_program_startup
                            542 ;--------------------------------------------------------
                            543 ; Home
                            544 ;--------------------------------------------------------
                            545 	.area HOME    (CODE)
                            546 	.area CSEG    (CODE)
   0000                     547 __sdcc_program_startup:
   0000 12s00r0F            548 	lcall	_main
                            549 ;	return from main will lock up
   0003 80 FE               550 	sjmp .
                            551 ;--------------------------------------------------------
                            552 ; code
                            553 ;--------------------------------------------------------
                            554 	.area CSEG    (CODE)
                            555 ;------------------------------------------------------------
                            556 ;Allocation info for local variables in function '_sdcc_external_startup'
                            557 ;------------------------------------------------------------
                            558 ;------------------------------------------------------------
                            559 ;	main.c:29: _sdcc_external_startup()
                            560 ;	-----------------------------------------
                            561 ;	 function _sdcc_external_startup
                            562 ;	-----------------------------------------
   0005                     563 __sdcc_external_startup:
                    0002    564 	ar2 = 0x02
                    0003    565 	ar3 = 0x03
                    0004    566 	ar4 = 0x04
                    0005    567 	ar5 = 0x05
                    0006    568 	ar6 = 0x06
                    0007    569 	ar7 = 0x07
                    0000    570 	ar0 = 0x00
                    0001    571 	ar1 = 0x01
                            572 ;	main.c:31: AUXR |= 0x0C;
                            573 ;	genOr
   0005 43 8E 0C            574 	orl	_AUXR,#0x0C
                            575 ;	main.c:32: CKCKON0 = 0xFB;
                            576 ;	genAssign
   0008 75 8F FB            577 	mov	_CKCKON0,#0xFB
                            578 ;	main.c:33: return 0;
                            579 ;	genRet
                            580 ;	Peephole 182.b	used 16 bit load of dptr
   000B 90 00 00            581 	mov	dptr,#0x0000
                            582 ;	Peephole 300	removed redundant label 00101$
   000E 22                  583 	ret
                            584 ;------------------------------------------------------------
                            585 ;Allocation info for local variables in function 'main'
                            586 ;------------------------------------------------------------
                            587 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                            588 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                            589 ;store                     Allocated with name '_main_store_1_1'
                            590 ;c                         Allocated with name '_main_c_1_1'
                            591 ;d                         Allocated with name '_main_d_1_1'
                            592 ;name                      Allocated with name '_main_name_1_1'
                            593 ;b                         Allocated with name '_main_b_1_1'
                            594 ;num                       Allocated with name '_main_num_1_1'
                            595 ;i                         Allocated with name '_main_i_1_1'
                            596 ;j                         Allocated with name '_main_j_1_1'
                            597 ;k                         Allocated with name '_main_k_1_1'
                            598 ;page                      Allocated with name '_main_page_1_1'
                            599 ;addr                      Allocated with name '_main_addr_1_1'
                            600 ;flag                      Allocated with name '_main_flag_1_1'
                            601 ;dat                       Allocated with name '_main_dat_1_1'
                            602 ;time                      Allocated with name '_main_time_1_1'
                            603 ;row_val                   Allocated with name '_main_row_val_1_1'
                            604 ;ccode                     Allocated with name '_main_ccode_1_1'
                            605 ;rd                        Allocated with name '_main_rd_1_1'
                            606 ;disp                      Allocated with name '_main_disp_1_1'
                            607 ;------------------------------------------------------------
                            608 ;	main.c:38: void main(void)
                            609 ;	-----------------------------------------
                            610 ;	 function main
                            611 ;	-----------------------------------------
   000F                     612 _main:
                            613 ;	main.c:40: char store,c[4],d[5],name[3]="012",b[5];        // c,d,b are used for taking input from the user
                            614 ;	genPointerSet
                            615 ;     genFarPointerSet
   000F 90s00r23            616 	mov	dptr,#_main_name_1_1
   0012 74 30               617 	mov	a,#0x30
   0014 F0                  618 	movx	@dptr,a
                            619 ;	genPointerSet
                            620 ;     genFarPointerSet
   0015 90s00r24            621 	mov	dptr,#(_main_name_1_1 + 0x0001)
   0018 74 31               622 	mov	a,#0x31
   001A F0                  623 	movx	@dptr,a
                            624 ;	genPointerSet
                            625 ;     genFarPointerSet
   001B 90s00r25            626 	mov	dptr,#(_main_name_1_1 + 0x0002)
   001E 74 32               627 	mov	a,#0x32
   0020 F0                  628 	movx	@dptr,a
                            629 ;	main.c:45: lcd_init();                                     // Initilaize LCD
                            630 ;	genCall
   0021 12s00r00            631 	lcall	_lcd_init
                            632 ;	main.c:46: uart_init()	;                                   // Initilalize UART
                            633 ;	genCall
   0024 12s00r00            634 	lcall	_uart_init
                            635 ;	main.c:47: timer_init();                                   // Initialize the Timer
                            636 ;	genCall
   0027 12s00r00            637 	lcall	_timer_init
                            638 ;	main.c:50: P1_0=0;
                            639 ;	genAssign
   002A C2 90               640 	clr	_P1_0
                            641 ;	main.c:51: eereset();                                      // EEPROM is reset at every powerup
                            642 ;	genCall
   002C 12s00r00            643 	lcall	_eereset
                            644 ;	main.c:54: lcdgotoxy(4,1);
                            645 ;	genAssign
   002F 90s00r00            646 	mov	dptr,#_lcdgotoxy_PARM_2
   0032 74 01               647 	mov	a,#0x01
   0034 F0                  648 	movx	@dptr,a
                            649 ;	genCall
   0035 75 82 04            650 	mov	dpl,#0x04
   0038 12s00r00            651 	lcall	_lcdgotoxy
                            652 ;	main.c:55: lcdputstr("Count-0");
                            653 ;	genCall
                            654 ;	Peephole 182.a	used 16 bit load of DPTR
   003B 90s00r00            655 	mov	dptr,#__str_1
   003E 75 F0 80            656 	mov	b,#0x80
   0041 12s00r00            657 	lcall	_lcdputstr
                            658 ;	main.c:57: lcdgotoxy(4,15);
                            659 ;	genAssign
   0044 90s00r00            660 	mov	dptr,#_lcdgotoxy_PARM_2
   0047 74 0F               661 	mov	a,#0x0F
   0049 F0                  662 	movx	@dptr,a
                            663 ;	genCall
   004A 75 82 04            664 	mov	dpl,#0x04
   004D 12s00r00            665 	lcall	_lcdgotoxy
                            666 ;	main.c:58: lcdputch('.');
                            667 ;	genCall
   0050 75 82 2E            668 	mov	dpl,#0x2E
   0053 12s00r00            669 	lcall	_lcdputch
                            670 ;	main.c:59: lcdgotoxy(4,12);
                            671 ;	genAssign
   0056 90s00r00            672 	mov	dptr,#_lcdgotoxy_PARM_2
   0059 74 0C               673 	mov	a,#0x0C
   005B F0                  674 	movx	@dptr,a
                            675 ;	genCall
   005C 75 82 04            676 	mov	dpl,#0x04
   005F 12s00r00            677 	lcall	_lcdgotoxy
                            678 ;	main.c:60: lcdputch(':');
                            679 ;	genCall
   0062 75 82 3A            680 	mov	dpl,#0x3A
   0065 12s00r00            681 	lcall	_lcdputch
                            682 ;	main.c:61: IOEX_WriteByte(0x01);
                            683 ;	genCall
   0068 75 82 01            684 	mov	dpl,#0x01
   006B 12s00r00            685 	lcall	_IOEX_WriteByte
                            686 ;	main.c:64: for(i=0;i<3;i++)
                            687 ;	genAssign
   006E 7A 00               688 	mov	r2,#0x00
   0070 7B 00               689 	mov	r3,#0x00
   0072                     690 00291$:
                            691 ;	genCmpLt
                            692 ;	genCmp
   0072 C3                  693 	clr	c
   0073 EA                  694 	mov	a,r2
   0074 94 03               695 	subb	a,#0x03
   0076 EB                  696 	mov	a,r3
   0077 64 80               697 	xrl	a,#0x80
   0079 94 80               698 	subb	a,#0x80
                            699 ;	genIfxJump
   007B 40 03               700 	jc	00408$
   007D 02s01r61            701 	ljmp	00294$
   0080                     702 00408$:
                            703 ;	main.c:66: EA=0;
                            704 ;	genAssign
   0080 C2 AF               705 	clr	_EA
                            706 ;	main.c:67: countdown_alarm(0,0,0,2,i);     // Display Initial Status of the C/D timer as 0.0.0
                            707 ;	genAssign
   0082 90s00r00            708 	mov	dptr,#_countdown_alarm_PARM_2
   0085 E4                  709 	clr	a
   0086 F0                  710 	movx	@dptr,a
   0087 A3                  711 	inc	dptr
   0088 F0                  712 	movx	@dptr,a
                            713 ;	genAssign
   0089 90s00r00            714 	mov	dptr,#_countdown_alarm_PARM_3
   008C E4                  715 	clr	a
   008D F0                  716 	movx	@dptr,a
   008E A3                  717 	inc	dptr
   008F F0                  718 	movx	@dptr,a
                            719 ;	genAssign
   0090 90s00r00            720 	mov	dptr,#_countdown_alarm_PARM_4
   0093 74 02               721 	mov	a,#0x02
   0095 F0                  722 	movx	@dptr,a
                            723 ;	genAssign
   0096 90s00r00            724 	mov	dptr,#_countdown_alarm_PARM_5
   0099 EA                  725 	mov	a,r2
   009A F0                  726 	movx	@dptr,a
   009B A3                  727 	inc	dptr
   009C EB                  728 	mov	a,r3
   009D F0                  729 	movx	@dptr,a
                            730 ;	genCall
                            731 ;	Peephole 182.b	used 16 bit load of dptr
   009E 90 00 00            732 	mov	dptr,#0x0000
   00A1 C0 02               733 	push	ar2
   00A3 C0 03               734 	push	ar3
   00A5 12s00r00            735 	lcall	_countdown_alarm
   00A8 D0 03               736 	pop	ar3
   00AA D0 02               737 	pop	ar2
                            738 ;	main.c:68: lcdgotoxy(i+1,1);
                            739 ;	genCast
   00AC 8A 04               740 	mov	ar4,r2
                            741 ;	genPlus
                            742 ;     genPlusIncr
   00AE 0C                  743 	inc	r4
                            744 ;	genAssign
   00AF 90s00r00            745 	mov	dptr,#_lcdgotoxy_PARM_2
   00B2 74 01               746 	mov	a,#0x01
   00B4 F0                  747 	movx	@dptr,a
                            748 ;	genCall
   00B5 8C 82               749 	mov	dpl,r4
   00B7 C0 02               750 	push	ar2
   00B9 C0 03               751 	push	ar3
   00BB C0 04               752 	push	ar4
   00BD 12s00r00            753 	lcall	_lcdgotoxy
   00C0 D0 04               754 	pop	ar4
   00C2 D0 03               755 	pop	ar3
   00C4 D0 02               756 	pop	ar2
                            757 ;	main.c:69: lcdputstr("Timer");
                            758 ;	genCall
                            759 ;	Peephole 182.a	used 16 bit load of DPTR
   00C6 90s00r08            760 	mov	dptr,#__str_2
   00C9 75 F0 80            761 	mov	b,#0x80
   00CC C0 02               762 	push	ar2
   00CE C0 03               763 	push	ar3
   00D0 C0 04               764 	push	ar4
   00D2 12s00r00            765 	lcall	_lcdputstr
   00D5 D0 04               766 	pop	ar4
   00D7 D0 03               767 	pop	ar3
   00D9 D0 02               768 	pop	ar2
                            769 ;	main.c:70: lcdputch(name[i]);
                            770 ;	genPlus
                            771 ;	Peephole 236.g	used r2 instead of ar2
   00DB EA                  772 	mov	a,r2
   00DC 24r23               773 	add	a,#_main_name_1_1
   00DE F5 82               774 	mov	dpl,a
                            775 ;	Peephole 236.g	used r3 instead of ar3
   00E0 EB                  776 	mov	a,r3
   00E1 34s00               777 	addc	a,#(_main_name_1_1 >> 8)
   00E3 F5 83               778 	mov	dph,a
                            779 ;	genPointerGet
                            780 ;	genFarPointerGet
   00E5 E0                  781 	movx	a,@dptr
                            782 ;	genCall
   00E6 FD                  783 	mov	r5,a
                            784 ;	Peephole 244.c	loading dpl from a instead of r5
   00E7 F5 82               785 	mov	dpl,a
   00E9 C0 02               786 	push	ar2
   00EB C0 03               787 	push	ar3
   00ED C0 04               788 	push	ar4
   00EF 12s00r00            789 	lcall	_lcdputch
   00F2 D0 04               790 	pop	ar4
   00F4 D0 03               791 	pop	ar3
   00F6 D0 02               792 	pop	ar2
                            793 ;	main.c:71: lcdputstr("-D");
                            794 ;	genCall
                            795 ;	Peephole 182.a	used 16 bit load of DPTR
   00F8 90s00r0E            796 	mov	dptr,#__str_3
   00FB 75 F0 80            797 	mov	b,#0x80
   00FE C0 02               798 	push	ar2
   0100 C0 03               799 	push	ar3
   0102 C0 04               800 	push	ar4
   0104 12s00r00            801 	lcall	_lcdputstr
   0107 D0 04               802 	pop	ar4
   0109 D0 03               803 	pop	ar3
   010B D0 02               804 	pop	ar2
                            805 ;	main.c:72: lcdgotoxy(i+1,12);
                            806 ;	genAssign
   010D 90s00r00            807 	mov	dptr,#_lcdgotoxy_PARM_2
   0110 74 0C               808 	mov	a,#0x0C
   0112 F0                  809 	movx	@dptr,a
                            810 ;	genCall
   0113 8C 82               811 	mov	dpl,r4
   0115 C0 02               812 	push	ar2
   0117 C0 03               813 	push	ar3
   0119 C0 04               814 	push	ar4
   011B 12s00r00            815 	lcall	_lcdgotoxy
   011E D0 04               816 	pop	ar4
   0120 D0 03               817 	pop	ar3
   0122 D0 02               818 	pop	ar2
                            819 ;	main.c:73: lcdputch(':');
                            820 ;	genCall
   0124 75 82 3A            821 	mov	dpl,#0x3A
   0127 C0 02               822 	push	ar2
   0129 C0 03               823 	push	ar3
   012B C0 04               824 	push	ar4
   012D 12s00r00            825 	lcall	_lcdputch
   0130 D0 04               826 	pop	ar4
   0132 D0 03               827 	pop	ar3
   0134 D0 02               828 	pop	ar2
                            829 ;	main.c:74: lcdgotoxy(i+1,15);
                            830 ;	genAssign
   0136 90s00r00            831 	mov	dptr,#_lcdgotoxy_PARM_2
   0139 74 0F               832 	mov	a,#0x0F
   013B F0                  833 	movx	@dptr,a
                            834 ;	genCall
   013C 8C 82               835 	mov	dpl,r4
   013E C0 02               836 	push	ar2
   0140 C0 03               837 	push	ar3
   0142 12s00r00            838 	lcall	_lcdgotoxy
   0145 D0 03               839 	pop	ar3
   0147 D0 02               840 	pop	ar2
                            841 ;	main.c:75: lcdputch('.');
                            842 ;	genCall
   0149 75 82 2E            843 	mov	dpl,#0x2E
   014C C0 02               844 	push	ar2
   014E C0 03               845 	push	ar3
   0150 12s00r00            846 	lcall	_lcdputch
   0153 D0 03               847 	pop	ar3
   0155 D0 02               848 	pop	ar2
                            849 ;	main.c:78: EA=1;
                            850 ;	genAssign
   0157 D2 AF               851 	setb	_EA
                            852 ;	main.c:64: for(i=0;i<3;i++)
                            853 ;	genPlus
                            854 ;     genPlusIncr
   0159 0A                  855 	inc	r2
   015A BA 00 01            856 	cjne	r2,#0x00,00409$
   015D 0B                  857 	inc	r3
   015E                     858 00409$:
   015E 02s00r72            859 	ljmp	00291$
   0161                     860 00294$:
                            861 ;	main.c:82: printf_tiny("\n\n\r\t\t\t\t\t******** Clock Control Commands ********\n\n\r\t1. Stop Clock \t\t\t\t\t\t2. Restart Clock \t\t\t3. Reset Clock\n\r\t4. Select Count-Down Timer and Value \t\t\t5. Timer Enable \t\t\t6. Timer Disable ");
                            862 ;	genIpush
   0161 74r11               863 	mov	a,#__str_4
   0163 C0 E0               864 	push	acc
   0165 74s00               865 	mov	a,#(__str_4 >> 8)
   0167 C0 E0               866 	push	acc
                            867 ;	genCall
   0169 12s00r00            868 	lcall	_printf_tiny
   016C 15 81               869 	dec	sp
   016E 15 81               870 	dec	sp
                            871 ;	main.c:83: printf_tiny("\n\n\n\r\t\t\t\t\t******** LCD Commands ********\n\n\r\t7. Create Custom Character\t\t\t8. Display Custom Character\t\t\t'c'. CGRAM Dump\t\t\t'd'. DDRAM Dump\n\r\t'l'.EEPROM Content on LCD Display\t\t'q'. Clear LCD Display");
                            872 ;	genIpush
   0170 74rCB               873 	mov	a,#__str_5
   0172 C0 E0               874 	push	acc
   0174 74s00               875 	mov	a,#(__str_5 >> 8)
   0176 C0 E0               876 	push	acc
                            877 ;	genCall
   0178 12s00r00            878 	lcall	_printf_tiny
   017B 15 81               879 	dec	sp
   017D 15 81               880 	dec	sp
                            881 ;	main.c:84: printf_tiny("\n\n\n\r\t\t\t\t\t******** IO Expander Control Commands ********\n\n\r\t'x'. Reset Counter\t\t\t\t'i'. Configure IO Pins\t\t\t\t's'. Status of IO_Expander");
                            882 ;	genIpush
   017F 74r8F               883 	mov	a,#__str_6
   0181 C0 E0               884 	push	acc
   0183 74s01               885 	mov	a,#(__str_6 >> 8)
   0185 C0 E0               886 	push	acc
                            887 ;	genCall
   0187 12s00r00            888 	lcall	_printf_tiny
   018A 15 81               889 	dec	sp
   018C 15 81               890 	dec	sp
                            891 ;	main.c:85: printf_tiny("\n\n\n\r\t\t\t\t\t******** EEPROM Control Commands ******** \n\n\r\t'w'. EEPROM Write \t\t\t'r'. EEPROM Read \t\t\t\t'h'. HEX Dump\t\n\r\t");
                            892 ;	genIpush
   018E 74r15               893 	mov	a,#__str_7
   0190 C0 E0               894 	push	acc
   0192 74s02               895 	mov	a,#(__str_7 >> 8)
   0194 C0 E0               896 	push	acc
                            897 ;	genCall
   0196 12s00r00            898 	lcall	_printf_tiny
   0199 15 81               899 	dec	sp
   019B 15 81               900 	dec	sp
                            901 ;	main.c:86: printf_tiny("\n\n\r\t\t\t\t\t******** Demo Commands ******** \n\n\r\t'y'. Watchdog Demo \t\t\t'9'. LOGO Creation Demo ");
                            902 ;	genIpush
   019D 74r88               903 	mov	a,#__str_8
   019F C0 E0               904 	push	acc
   01A1 74s02               905 	mov	a,#(__str_8 >> 8)
   01A3 C0 E0               906 	push	acc
                            907 ;	genCall
   01A5 12s00r00            908 	lcall	_printf_tiny
   01A8 15 81               909 	dec	sp
   01AA 15 81               910 	dec	sp
                            911 ;	main.c:87: while(1)
   01AC                     912 00289$:
                            913 ;	genIfx
                            914 ;	genIfxJump
   01AC 20 98 03            915 	jb	_RI,00410$
   01AF 02s0FrDB            916 	ljmp	00286$
   01B2                     917 00410$:
                            918 ;	main.c:93: store=getchar();
                            919 ;	genCall
   01B2 12s00r00            920 	lcall	_getchar
                            921 ;	main.c:94: putchar(store);
                            922 ;	genCall
   01B5 AA 82               923 	mov  r2,dpl
                            924 ;	Peephole 177.a	removed redundant mov
   01B7 C0 02               925 	push	ar2
   01B9 12s00r00            926 	lcall	_putchar
   01BC D0 02               927 	pop	ar2
                            928 ;	main.c:95: if(store=='1'){printf_tiny("\n\n\r\t\t ******  Stop Clock  *****"); }
                            929 ;	genCmpEq
                            930 ;	gencjne
                            931 ;	gencjneshort
                            932 ;	Peephole 241.d	optimized compare
   01BE E4                  933 	clr	a
   01BF BA 31 01            934 	cjne	r2,#0x31,00411$
   01C2 04                  935 	inc	a
   01C3                     936 00411$:
                            937 ;	Peephole 300	removed redundant label 00412$
                            938 ;	genIfx
   01C3 FB                  939 	mov	r3,a
                            940 ;	Peephole 105	removed redundant mov
                            941 ;	genIfxJump
                            942 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01C4 60 1A               943 	jz	00163$
                            944 ;	Peephole 300	removed redundant label 00413$
                            945 ;	genIpush
   01C6 C0 02               946 	push	ar2
   01C8 C0 03               947 	push	ar3
   01CA 74rE3               948 	mov	a,#__str_9
   01CC C0 E0               949 	push	acc
   01CE 74s02               950 	mov	a,#(__str_9 >> 8)
   01D0 C0 E0               951 	push	acc
                            952 ;	genCall
   01D2 12s00r00            953 	lcall	_printf_tiny
   01D5 15 81               954 	dec	sp
   01D7 15 81               955 	dec	sp
   01D9 D0 03               956 	pop	ar3
   01DB D0 02               957 	pop	ar2
   01DD 02s04r98            958 	ljmp	00164$
   01E0                     959 00163$:
                            960 ;	main.c:96: else if(store=='2' && timers<2){printf_tiny("\n\n\r\t\t ******  Restart Clock  ******"); }
                            961 ;	genCmpEq
                            962 ;	gencjneshort
                            963 ;	Peephole 112.b	changed ljmp to sjmp
                            964 ;	Peephole 198.b	optimized misc jump sequence
   01E0 BA 32 2B            965 	cjne	r2,#0x32,00159$
                            966 ;	Peephole 200.b	removed redundant sjmp
                            967 ;	Peephole 300	removed redundant label 00414$
                            968 ;	Peephole 300	removed redundant label 00415$
                            969 ;	genAssign
   01E3 90s00r01            970 	mov	dptr,#_timers
   01E6 E0                  971 	movx	a,@dptr
   01E7 FC                  972 	mov	r4,a
   01E8 A3                  973 	inc	dptr
   01E9 E0                  974 	movx	a,@dptr
   01EA FD                  975 	mov	r5,a
                            976 ;	genCmpLt
                            977 ;	genCmp
   01EB C3                  978 	clr	c
   01EC EC                  979 	mov	a,r4
   01ED 94 02               980 	subb	a,#0x02
   01EF ED                  981 	mov	a,r5
   01F0 94 00               982 	subb	a,#0x00
                            983 ;	genIfxJump
                            984 ;	Peephole 108.a	removed ljmp by inverse jump logic
   01F2 50 1A               985 	jnc	00159$
                            986 ;	Peephole 300	removed redundant label 00416$
                            987 ;	genIpush
   01F4 C0 02               988 	push	ar2
   01F6 C0 03               989 	push	ar3
   01F8 74r03               990 	mov	a,#__str_10
   01FA C0 E0               991 	push	acc
   01FC 74s03               992 	mov	a,#(__str_10 >> 8)
   01FE C0 E0               993 	push	acc
                            994 ;	genCall
   0200 12s00r00            995 	lcall	_printf_tiny
   0203 15 81               996 	dec	sp
   0205 15 81               997 	dec	sp
   0207 D0 03               998 	pop	ar3
   0209 D0 02               999 	pop	ar2
   020B 02s04r98           1000 	ljmp	00164$
   020E                    1001 00159$:
                           1002 ;	main.c:97: else if(store=='3' && timers<2){printf_tiny("\n\n\r\t\t ******  Reset Clock  ******"); }
                           1003 ;	genCmpEq
                           1004 ;	gencjneshort
                           1005 ;	Peephole 112.b	changed ljmp to sjmp
                           1006 ;	Peephole 198.b	optimized misc jump sequence
   020E BA 33 2B           1007 	cjne	r2,#0x33,00155$
                           1008 ;	Peephole 200.b	removed redundant sjmp
                           1009 ;	Peephole 300	removed redundant label 00417$
                           1010 ;	Peephole 300	removed redundant label 00418$
                           1011 ;	genAssign
   0211 90s00r01           1012 	mov	dptr,#_timers
   0214 E0                 1013 	movx	a,@dptr
   0215 FC                 1014 	mov	r4,a
   0216 A3                 1015 	inc	dptr
   0217 E0                 1016 	movx	a,@dptr
   0218 FD                 1017 	mov	r5,a
                           1018 ;	genCmpLt
                           1019 ;	genCmp
   0219 C3                 1020 	clr	c
   021A EC                 1021 	mov	a,r4
   021B 94 02              1022 	subb	a,#0x02
   021D ED                 1023 	mov	a,r5
   021E 94 00              1024 	subb	a,#0x00
                           1025 ;	genIfxJump
                           1026 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0220 50 1A              1027 	jnc	00155$
                           1028 ;	Peephole 300	removed redundant label 00419$
                           1029 ;	genIpush
   0222 C0 02              1030 	push	ar2
   0224 C0 03              1031 	push	ar3
   0226 74r27              1032 	mov	a,#__str_11
   0228 C0 E0              1033 	push	acc
   022A 74s03              1034 	mov	a,#(__str_11 >> 8)
   022C C0 E0              1035 	push	acc
                           1036 ;	genCall
   022E 12s00r00           1037 	lcall	_printf_tiny
   0231 15 81              1038 	dec	sp
   0233 15 81              1039 	dec	sp
   0235 D0 03              1040 	pop	ar3
   0237 D0 02              1041 	pop	ar2
   0239 02s04r98           1042 	ljmp	00164$
   023C                    1043 00155$:
                           1044 ;	main.c:98: else if(store=='4'&& timers<2){printf_tiny("\n\n\r\t\t ******  Load Counter Value ******"); }
                           1045 ;	genCmpEq
                           1046 ;	gencjneshort
                           1047 ;	Peephole 112.b	changed ljmp to sjmp
                           1048 ;	Peephole 198.b	optimized misc jump sequence
   023C BA 34 2B           1049 	cjne	r2,#0x34,00151$
                           1050 ;	Peephole 200.b	removed redundant sjmp
                           1051 ;	Peephole 300	removed redundant label 00420$
                           1052 ;	Peephole 300	removed redundant label 00421$
                           1053 ;	genAssign
   023F 90s00r01           1054 	mov	dptr,#_timers
   0242 E0                 1055 	movx	a,@dptr
   0243 FC                 1056 	mov	r4,a
   0244 A3                 1057 	inc	dptr
   0245 E0                 1058 	movx	a,@dptr
   0246 FD                 1059 	mov	r5,a
                           1060 ;	genCmpLt
                           1061 ;	genCmp
   0247 C3                 1062 	clr	c
   0248 EC                 1063 	mov	a,r4
   0249 94 02              1064 	subb	a,#0x02
   024B ED                 1065 	mov	a,r5
   024C 94 00              1066 	subb	a,#0x00
                           1067 ;	genIfxJump
                           1068 ;	Peephole 108.a	removed ljmp by inverse jump logic
   024E 50 1A              1069 	jnc	00151$
                           1070 ;	Peephole 300	removed redundant label 00422$
                           1071 ;	genIpush
   0250 C0 02              1072 	push	ar2
   0252 C0 03              1073 	push	ar3
   0254 74r49              1074 	mov	a,#__str_12
   0256 C0 E0              1075 	push	acc
   0258 74s03              1076 	mov	a,#(__str_12 >> 8)
   025A C0 E0              1077 	push	acc
                           1078 ;	genCall
   025C 12s00r00           1079 	lcall	_printf_tiny
   025F 15 81              1080 	dec	sp
   0261 15 81              1081 	dec	sp
   0263 D0 03              1082 	pop	ar3
   0265 D0 02              1083 	pop	ar2
   0267 02s04r98           1084 	ljmp	00164$
   026A                    1085 00151$:
                           1086 ;	main.c:99: else if(store=='5' && timers<2){printf_tiny("\n\n\r\t\t ******  Timer Enable  ******"); }
                           1087 ;	genCmpEq
                           1088 ;	gencjneshort
                           1089 ;	Peephole 112.b	changed ljmp to sjmp
                           1090 ;	Peephole 198.b	optimized misc jump sequence
   026A BA 35 2B           1091 	cjne	r2,#0x35,00147$
                           1092 ;	Peephole 200.b	removed redundant sjmp
                           1093 ;	Peephole 300	removed redundant label 00423$
                           1094 ;	Peephole 300	removed redundant label 00424$
                           1095 ;	genAssign
   026D 90s00r01           1096 	mov	dptr,#_timers
   0270 E0                 1097 	movx	a,@dptr
   0271 FC                 1098 	mov	r4,a
   0272 A3                 1099 	inc	dptr
   0273 E0                 1100 	movx	a,@dptr
   0274 FD                 1101 	mov	r5,a
                           1102 ;	genCmpLt
                           1103 ;	genCmp
   0275 C3                 1104 	clr	c
   0276 EC                 1105 	mov	a,r4
   0277 94 02              1106 	subb	a,#0x02
   0279 ED                 1107 	mov	a,r5
   027A 94 00              1108 	subb	a,#0x00
                           1109 ;	genIfxJump
                           1110 ;	Peephole 108.a	removed ljmp by inverse jump logic
   027C 50 1A              1111 	jnc	00147$
                           1112 ;	Peephole 300	removed redundant label 00425$
                           1113 ;	genIpush
   027E C0 02              1114 	push	ar2
   0280 C0 03              1115 	push	ar3
   0282 74r71              1116 	mov	a,#__str_13
   0284 C0 E0              1117 	push	acc
   0286 74s03              1118 	mov	a,#(__str_13 >> 8)
   0288 C0 E0              1119 	push	acc
                           1120 ;	genCall
   028A 12s00r00           1121 	lcall	_printf_tiny
   028D 15 81              1122 	dec	sp
   028F 15 81              1123 	dec	sp
   0291 D0 03              1124 	pop	ar3
   0293 D0 02              1125 	pop	ar2
   0295 02s04r98           1126 	ljmp	00164$
   0298                    1127 00147$:
                           1128 ;	main.c:100: else if(store=='6' && timers<2){printf_tiny("\n\n\r\t\t ******  Timer Disable  ******"); }
                           1129 ;	genCmpEq
                           1130 ;	gencjneshort
                           1131 ;	Peephole 112.b	changed ljmp to sjmp
                           1132 ;	Peephole 198.b	optimized misc jump sequence
   0298 BA 36 2B           1133 	cjne	r2,#0x36,00143$
                           1134 ;	Peephole 200.b	removed redundant sjmp
                           1135 ;	Peephole 300	removed redundant label 00426$
                           1136 ;	Peephole 300	removed redundant label 00427$
                           1137 ;	genAssign
   029B 90s00r01           1138 	mov	dptr,#_timers
   029E E0                 1139 	movx	a,@dptr
   029F FC                 1140 	mov	r4,a
   02A0 A3                 1141 	inc	dptr
   02A1 E0                 1142 	movx	a,@dptr
   02A2 FD                 1143 	mov	r5,a
                           1144 ;	genCmpLt
                           1145 ;	genCmp
   02A3 C3                 1146 	clr	c
   02A4 EC                 1147 	mov	a,r4
   02A5 94 02              1148 	subb	a,#0x02
   02A7 ED                 1149 	mov	a,r5
   02A8 94 00              1150 	subb	a,#0x00
                           1151 ;	genIfxJump
                           1152 ;	Peephole 108.a	removed ljmp by inverse jump logic
   02AA 50 1A              1153 	jnc	00143$
                           1154 ;	Peephole 300	removed redundant label 00428$
                           1155 ;	genIpush
   02AC C0 02              1156 	push	ar2
   02AE C0 03              1157 	push	ar3
   02B0 74r94              1158 	mov	a,#__str_14
   02B2 C0 E0              1159 	push	acc
   02B4 74s03              1160 	mov	a,#(__str_14 >> 8)
   02B6 C0 E0              1161 	push	acc
                           1162 ;	genCall
   02B8 12s00r00           1163 	lcall	_printf_tiny
   02BB 15 81              1164 	dec	sp
   02BD 15 81              1165 	dec	sp
   02BF D0 03              1166 	pop	ar3
   02C1 D0 02              1167 	pop	ar2
   02C3 02s04r98           1168 	ljmp	00164$
   02C6                    1169 00143$:
                           1170 ;	main.c:101: else if(store=='7' && timers<2){printf_tiny("\n\n\r\t\t ******  Custom Character  ******"); }
                           1171 ;	genCmpEq
                           1172 ;	gencjneshort
                           1173 ;	Peephole 112.b	changed ljmp to sjmp
                           1174 ;	Peephole 198.b	optimized misc jump sequence
   02C6 BA 37 2B           1175 	cjne	r2,#0x37,00139$
                           1176 ;	Peephole 200.b	removed redundant sjmp
                           1177 ;	Peephole 300	removed redundant label 00429$
                           1178 ;	Peephole 300	removed redundant label 00430$
                           1179 ;	genAssign
   02C9 90s00r01           1180 	mov	dptr,#_timers
   02CC E0                 1181 	movx	a,@dptr
   02CD FC                 1182 	mov	r4,a
   02CE A3                 1183 	inc	dptr
   02CF E0                 1184 	movx	a,@dptr
   02D0 FD                 1185 	mov	r5,a
                           1186 ;	genCmpLt
                           1187 ;	genCmp
   02D1 C3                 1188 	clr	c
   02D2 EC                 1189 	mov	a,r4
   02D3 94 02              1190 	subb	a,#0x02
   02D5 ED                 1191 	mov	a,r5
   02D6 94 00              1192 	subb	a,#0x00
                           1193 ;	genIfxJump
                           1194 ;	Peephole 108.a	removed ljmp by inverse jump logic
   02D8 50 1A              1195 	jnc	00139$
                           1196 ;	Peephole 300	removed redundant label 00431$
                           1197 ;	genIpush
   02DA C0 02              1198 	push	ar2
   02DC C0 03              1199 	push	ar3
   02DE 74rB8              1200 	mov	a,#__str_15
   02E0 C0 E0              1201 	push	acc
   02E2 74s03              1202 	mov	a,#(__str_15 >> 8)
   02E4 C0 E0              1203 	push	acc
                           1204 ;	genCall
   02E6 12s00r00           1205 	lcall	_printf_tiny
   02E9 15 81              1206 	dec	sp
   02EB 15 81              1207 	dec	sp
   02ED D0 03              1208 	pop	ar3
   02EF D0 02              1209 	pop	ar2
   02F1 02s04r98           1210 	ljmp	00164$
   02F4                    1211 00139$:
                           1212 ;	main.c:102: else if(store=='x' && timers<2){printf_tiny("\n\n\r\t\t ******  Reset Counter  ******"); }
                           1213 ;	genCmpEq
                           1214 ;	gencjneshort
                           1215 ;	Peephole 112.b	changed ljmp to sjmp
                           1216 ;	Peephole 198.b	optimized misc jump sequence
   02F4 BA 78 2B           1217 	cjne	r2,#0x78,00135$
                           1218 ;	Peephole 200.b	removed redundant sjmp
                           1219 ;	Peephole 300	removed redundant label 00432$
                           1220 ;	Peephole 300	removed redundant label 00433$
                           1221 ;	genAssign
   02F7 90s00r01           1222 	mov	dptr,#_timers
   02FA E0                 1223 	movx	a,@dptr
   02FB FC                 1224 	mov	r4,a
   02FC A3                 1225 	inc	dptr
   02FD E0                 1226 	movx	a,@dptr
   02FE FD                 1227 	mov	r5,a
                           1228 ;	genCmpLt
                           1229 ;	genCmp
   02FF C3                 1230 	clr	c
   0300 EC                 1231 	mov	a,r4
   0301 94 02              1232 	subb	a,#0x02
   0303 ED                 1233 	mov	a,r5
   0304 94 00              1234 	subb	a,#0x00
                           1235 ;	genIfxJump
                           1236 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0306 50 1A              1237 	jnc	00135$
                           1238 ;	Peephole 300	removed redundant label 00434$
                           1239 ;	genIpush
   0308 C0 02              1240 	push	ar2
   030A C0 03              1241 	push	ar3
   030C 74rDF              1242 	mov	a,#__str_16
   030E C0 E0              1243 	push	acc
   0310 74s03              1244 	mov	a,#(__str_16 >> 8)
   0312 C0 E0              1245 	push	acc
                           1246 ;	genCall
   0314 12s00r00           1247 	lcall	_printf_tiny
   0317 15 81              1248 	dec	sp
   0319 15 81              1249 	dec	sp
   031B D0 03              1250 	pop	ar3
   031D D0 02              1251 	pop	ar2
   031F 02s04r98           1252 	ljmp	00164$
   0322                    1253 00135$:
                           1254 ;	main.c:103: else if(store=='i' && timers<2){printf_tiny("\n\n\r\t\t ******  Configure IO Pins  ******"); }
                           1255 ;	genCmpEq
                           1256 ;	gencjneshort
                           1257 ;	Peephole 112.b	changed ljmp to sjmp
                           1258 ;	Peephole 198.b	optimized misc jump sequence
   0322 BA 69 2B           1259 	cjne	r2,#0x69,00131$
                           1260 ;	Peephole 200.b	removed redundant sjmp
                           1261 ;	Peephole 300	removed redundant label 00435$
                           1262 ;	Peephole 300	removed redundant label 00436$
                           1263 ;	genAssign
   0325 90s00r01           1264 	mov	dptr,#_timers
   0328 E0                 1265 	movx	a,@dptr
   0329 FC                 1266 	mov	r4,a
   032A A3                 1267 	inc	dptr
   032B E0                 1268 	movx	a,@dptr
   032C FD                 1269 	mov	r5,a
                           1270 ;	genCmpLt
                           1271 ;	genCmp
   032D C3                 1272 	clr	c
   032E EC                 1273 	mov	a,r4
   032F 94 02              1274 	subb	a,#0x02
   0331 ED                 1275 	mov	a,r5
   0332 94 00              1276 	subb	a,#0x00
                           1277 ;	genIfxJump
                           1278 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0334 50 1A              1279 	jnc	00131$
                           1280 ;	Peephole 300	removed redundant label 00437$
                           1281 ;	genIpush
   0336 C0 02              1282 	push	ar2
   0338 C0 03              1283 	push	ar3
   033A 74r03              1284 	mov	a,#__str_17
   033C C0 E0              1285 	push	acc
   033E 74s04              1286 	mov	a,#(__str_17 >> 8)
   0340 C0 E0              1287 	push	acc
                           1288 ;	genCall
   0342 12s00r00           1289 	lcall	_printf_tiny
   0345 15 81              1290 	dec	sp
   0347 15 81              1291 	dec	sp
   0349 D0 03              1292 	pop	ar3
   034B D0 02              1293 	pop	ar2
   034D 02s04r98           1294 	ljmp	00164$
   0350                    1295 00131$:
                           1296 ;	main.c:104: else if(store=='s' && timers<2){printf_tiny("\n\n\r\t\t ******  Status of IO Expander  ******"); }
                           1297 ;	genCmpEq
                           1298 ;	gencjneshort
                           1299 ;	Peephole 112.b	changed ljmp to sjmp
                           1300 ;	Peephole 198.b	optimized misc jump sequence
   0350 BA 73 2B           1301 	cjne	r2,#0x73,00127$
                           1302 ;	Peephole 200.b	removed redundant sjmp
                           1303 ;	Peephole 300	removed redundant label 00438$
                           1304 ;	Peephole 300	removed redundant label 00439$
                           1305 ;	genAssign
   0353 90s00r01           1306 	mov	dptr,#_timers
   0356 E0                 1307 	movx	a,@dptr
   0357 FC                 1308 	mov	r4,a
   0358 A3                 1309 	inc	dptr
   0359 E0                 1310 	movx	a,@dptr
   035A FD                 1311 	mov	r5,a
                           1312 ;	genCmpLt
                           1313 ;	genCmp
   035B C3                 1314 	clr	c
   035C EC                 1315 	mov	a,r4
   035D 94 02              1316 	subb	a,#0x02
   035F ED                 1317 	mov	a,r5
   0360 94 00              1318 	subb	a,#0x00
                           1319 ;	genIfxJump
                           1320 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0362 50 1A              1321 	jnc	00127$
                           1322 ;	Peephole 300	removed redundant label 00440$
                           1323 ;	genIpush
   0364 C0 02              1324 	push	ar2
   0366 C0 03              1325 	push	ar3
   0368 74r2B              1326 	mov	a,#__str_18
   036A C0 E0              1327 	push	acc
   036C 74s04              1328 	mov	a,#(__str_18 >> 8)
   036E C0 E0              1329 	push	acc
                           1330 ;	genCall
   0370 12s00r00           1331 	lcall	_printf_tiny
   0373 15 81              1332 	dec	sp
   0375 15 81              1333 	dec	sp
   0377 D0 03              1334 	pop	ar3
   0379 D0 02              1335 	pop	ar2
   037B 02s04r98           1336 	ljmp	00164$
   037E                    1337 00127$:
                           1338 ;	main.c:105: else if(store=='w' && timers<2){printf_tiny("\n\n\r\t\t ******  EEPROM Write  ******"); }
                           1339 ;	genCmpEq
                           1340 ;	gencjneshort
                           1341 ;	Peephole 112.b	changed ljmp to sjmp
                           1342 ;	Peephole 198.b	optimized misc jump sequence
   037E BA 77 2B           1343 	cjne	r2,#0x77,00123$
                           1344 ;	Peephole 200.b	removed redundant sjmp
                           1345 ;	Peephole 300	removed redundant label 00441$
                           1346 ;	Peephole 300	removed redundant label 00442$
                           1347 ;	genAssign
   0381 90s00r01           1348 	mov	dptr,#_timers
   0384 E0                 1349 	movx	a,@dptr
   0385 FC                 1350 	mov	r4,a
   0386 A3                 1351 	inc	dptr
   0387 E0                 1352 	movx	a,@dptr
   0388 FD                 1353 	mov	r5,a
                           1354 ;	genCmpLt
                           1355 ;	genCmp
   0389 C3                 1356 	clr	c
   038A EC                 1357 	mov	a,r4
   038B 94 02              1358 	subb	a,#0x02
   038D ED                 1359 	mov	a,r5
   038E 94 00              1360 	subb	a,#0x00
                           1361 ;	genIfxJump
                           1362 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0390 50 1A              1363 	jnc	00123$
                           1364 ;	Peephole 300	removed redundant label 00443$
                           1365 ;	genIpush
   0392 C0 02              1366 	push	ar2
   0394 C0 03              1367 	push	ar3
   0396 74r57              1368 	mov	a,#__str_19
   0398 C0 E0              1369 	push	acc
   039A 74s04              1370 	mov	a,#(__str_19 >> 8)
   039C C0 E0              1371 	push	acc
                           1372 ;	genCall
   039E 12s00r00           1373 	lcall	_printf_tiny
   03A1 15 81              1374 	dec	sp
   03A3 15 81              1375 	dec	sp
   03A5 D0 03              1376 	pop	ar3
   03A7 D0 02              1377 	pop	ar2
   03A9 02s04r98           1378 	ljmp	00164$
   03AC                    1379 00123$:
                           1380 ;	main.c:106: else if(store=='r' && timers<2){printf_tiny("\n\n\r\t\t ******  EEPROM Read  ******"); }
                           1381 ;	genCmpEq
                           1382 ;	gencjneshort
                           1383 ;	Peephole 112.b	changed ljmp to sjmp
                           1384 ;	Peephole 198.b	optimized misc jump sequence
   03AC BA 72 2B           1385 	cjne	r2,#0x72,00119$
                           1386 ;	Peephole 200.b	removed redundant sjmp
                           1387 ;	Peephole 300	removed redundant label 00444$
                           1388 ;	Peephole 300	removed redundant label 00445$
                           1389 ;	genAssign
   03AF 90s00r01           1390 	mov	dptr,#_timers
   03B2 E0                 1391 	movx	a,@dptr
   03B3 FC                 1392 	mov	r4,a
   03B4 A3                 1393 	inc	dptr
   03B5 E0                 1394 	movx	a,@dptr
   03B6 FD                 1395 	mov	r5,a
                           1396 ;	genCmpLt
                           1397 ;	genCmp
   03B7 C3                 1398 	clr	c
   03B8 EC                 1399 	mov	a,r4
   03B9 94 02              1400 	subb	a,#0x02
   03BB ED                 1401 	mov	a,r5
   03BC 94 00              1402 	subb	a,#0x00
                           1403 ;	genIfxJump
                           1404 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03BE 50 1A              1405 	jnc	00119$
                           1406 ;	Peephole 300	removed redundant label 00446$
                           1407 ;	genIpush
   03C0 C0 02              1408 	push	ar2
   03C2 C0 03              1409 	push	ar3
   03C4 74r7A              1410 	mov	a,#__str_20
   03C6 C0 E0              1411 	push	acc
   03C8 74s04              1412 	mov	a,#(__str_20 >> 8)
   03CA C0 E0              1413 	push	acc
                           1414 ;	genCall
   03CC 12s00r00           1415 	lcall	_printf_tiny
   03CF 15 81              1416 	dec	sp
   03D1 15 81              1417 	dec	sp
   03D3 D0 03              1418 	pop	ar3
   03D5 D0 02              1419 	pop	ar2
   03D7 02s04r98           1420 	ljmp	00164$
   03DA                    1421 00119$:
                           1422 ;	main.c:107: else if(store=='c' && timers<2){printf_tiny("\n\n\r\t\t ******  CGRAM Dump  ******"); }
                           1423 ;	genCmpEq
                           1424 ;	gencjneshort
                           1425 ;	Peephole 112.b	changed ljmp to sjmp
                           1426 ;	Peephole 198.b	optimized misc jump sequence
   03DA BA 63 2B           1427 	cjne	r2,#0x63,00115$
                           1428 ;	Peephole 200.b	removed redundant sjmp
                           1429 ;	Peephole 300	removed redundant label 00447$
                           1430 ;	Peephole 300	removed redundant label 00448$
                           1431 ;	genAssign
   03DD 90s00r01           1432 	mov	dptr,#_timers
   03E0 E0                 1433 	movx	a,@dptr
   03E1 FC                 1434 	mov	r4,a
   03E2 A3                 1435 	inc	dptr
   03E3 E0                 1436 	movx	a,@dptr
   03E4 FD                 1437 	mov	r5,a
                           1438 ;	genCmpLt
                           1439 ;	genCmp
   03E5 C3                 1440 	clr	c
   03E6 EC                 1441 	mov	a,r4
   03E7 94 02              1442 	subb	a,#0x02
   03E9 ED                 1443 	mov	a,r5
   03EA 94 00              1444 	subb	a,#0x00
                           1445 ;	genIfxJump
                           1446 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03EC 50 1A              1447 	jnc	00115$
                           1448 ;	Peephole 300	removed redundant label 00449$
                           1449 ;	genIpush
   03EE C0 02              1450 	push	ar2
   03F0 C0 03              1451 	push	ar3
   03F2 74r9C              1452 	mov	a,#__str_21
   03F4 C0 E0              1453 	push	acc
   03F6 74s04              1454 	mov	a,#(__str_21 >> 8)
   03F8 C0 E0              1455 	push	acc
                           1456 ;	genCall
   03FA 12s00r00           1457 	lcall	_printf_tiny
   03FD 15 81              1458 	dec	sp
   03FF 15 81              1459 	dec	sp
   0401 D0 03              1460 	pop	ar3
   0403 D0 02              1461 	pop	ar2
   0405 02s04r98           1462 	ljmp	00164$
   0408                    1463 00115$:
                           1464 ;	main.c:108: else if(store=='d' && timers<2){printf_tiny("\n\n\r\t\t ******  DDRAM Dump  ******"); }
                           1465 ;	genCmpEq
                           1466 ;	gencjneshort
                           1467 ;	Peephole 112.b	changed ljmp to sjmp
                           1468 ;	Peephole 198.b	optimized misc jump sequence
   0408 BA 64 2A           1469 	cjne	r2,#0x64,00111$
                           1470 ;	Peephole 200.b	removed redundant sjmp
                           1471 ;	Peephole 300	removed redundant label 00450$
                           1472 ;	Peephole 300	removed redundant label 00451$
                           1473 ;	genAssign
   040B 90s00r01           1474 	mov	dptr,#_timers
   040E E0                 1475 	movx	a,@dptr
   040F FC                 1476 	mov	r4,a
   0410 A3                 1477 	inc	dptr
   0411 E0                 1478 	movx	a,@dptr
   0412 FD                 1479 	mov	r5,a
                           1480 ;	genCmpLt
                           1481 ;	genCmp
   0413 C3                 1482 	clr	c
   0414 EC                 1483 	mov	a,r4
   0415 94 02              1484 	subb	a,#0x02
   0417 ED                 1485 	mov	a,r5
   0418 94 00              1486 	subb	a,#0x00
                           1487 ;	genIfxJump
                           1488 ;	Peephole 108.a	removed ljmp by inverse jump logic
   041A 50 19              1489 	jnc	00111$
                           1490 ;	Peephole 300	removed redundant label 00452$
                           1491 ;	genIpush
   041C C0 02              1492 	push	ar2
   041E C0 03              1493 	push	ar3
   0420 74rBD              1494 	mov	a,#__str_22
   0422 C0 E0              1495 	push	acc
   0424 74s04              1496 	mov	a,#(__str_22 >> 8)
   0426 C0 E0              1497 	push	acc
                           1498 ;	genCall
   0428 12s00r00           1499 	lcall	_printf_tiny
   042B 15 81              1500 	dec	sp
   042D 15 81              1501 	dec	sp
   042F D0 03              1502 	pop	ar3
   0431 D0 02              1503 	pop	ar2
                           1504 ;	Peephole 112.b	changed ljmp to sjmp
   0433 80 63              1505 	sjmp	00164$
   0435                    1506 00111$:
                           1507 ;	main.c:109: else if(store=='h' && timers<2){printf_tiny("\n\n\r\t\t ******  Hex Dump  ******"); }
                           1508 ;	genCmpEq
                           1509 ;	gencjneshort
                           1510 ;	Peephole 112.b	changed ljmp to sjmp
                           1511 ;	Peephole 198.b	optimized misc jump sequence
   0435 BA 68 2A           1512 	cjne	r2,#0x68,00107$
                           1513 ;	Peephole 200.b	removed redundant sjmp
                           1514 ;	Peephole 300	removed redundant label 00453$
                           1515 ;	Peephole 300	removed redundant label 00454$
                           1516 ;	genAssign
   0438 90s00r01           1517 	mov	dptr,#_timers
   043B E0                 1518 	movx	a,@dptr
   043C FC                 1519 	mov	r4,a
   043D A3                 1520 	inc	dptr
   043E E0                 1521 	movx	a,@dptr
   043F FD                 1522 	mov	r5,a
                           1523 ;	genCmpLt
                           1524 ;	genCmp
   0440 C3                 1525 	clr	c
   0441 EC                 1526 	mov	a,r4
   0442 94 02              1527 	subb	a,#0x02
   0444 ED                 1528 	mov	a,r5
   0445 94 00              1529 	subb	a,#0x00
                           1530 ;	genIfxJump
                           1531 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0447 50 19              1532 	jnc	00107$
                           1533 ;	Peephole 300	removed redundant label 00455$
                           1534 ;	genIpush
   0449 C0 02              1535 	push	ar2
   044B C0 03              1536 	push	ar3
   044D 74rDE              1537 	mov	a,#__str_23
   044F C0 E0              1538 	push	acc
   0451 74s04              1539 	mov	a,#(__str_23 >> 8)
   0453 C0 E0              1540 	push	acc
                           1541 ;	genCall
   0455 12s00r00           1542 	lcall	_printf_tiny
   0458 15 81              1543 	dec	sp
   045A 15 81              1544 	dec	sp
   045C D0 03              1545 	pop	ar3
   045E D0 02              1546 	pop	ar2
                           1547 ;	Peephole 112.b	changed ljmp to sjmp
   0460 80 36              1548 	sjmp	00164$
   0462                    1549 00107$:
                           1550 ;	main.c:110: else if(store=='l'){printf_tiny("\n\n\r\t\t ******  LCD DISPLAY  ******"); }
                           1551 ;	genCmpEq
                           1552 ;	gencjneshort
                           1553 ;	Peephole 112.b	changed ljmp to sjmp
                           1554 ;	Peephole 198.b	optimized misc jump sequence
   0462 BA 6C 19           1555 	cjne	r2,#0x6C,00104$
                           1556 ;	Peephole 200.b	removed redundant sjmp
                           1557 ;	Peephole 300	removed redundant label 00456$
                           1558 ;	Peephole 300	removed redundant label 00457$
                           1559 ;	genIpush
   0465 C0 02              1560 	push	ar2
   0467 C0 03              1561 	push	ar3
   0469 74rFD              1562 	mov	a,#__str_24
   046B C0 E0              1563 	push	acc
   046D 74s04              1564 	mov	a,#(__str_24 >> 8)
   046F C0 E0              1565 	push	acc
                           1566 ;	genCall
   0471 12s00r00           1567 	lcall	_printf_tiny
   0474 15 81              1568 	dec	sp
   0476 15 81              1569 	dec	sp
   0478 D0 03              1570 	pop	ar3
   047A D0 02              1571 	pop	ar2
                           1572 ;	Peephole 112.b	changed ljmp to sjmp
   047C 80 1A              1573 	sjmp	00164$
   047E                    1574 00104$:
                           1575 ;	main.c:111: else if(store=='q'){printf_tiny("\n\n\r\t\t ******  Clear LCD  ******"); }
                           1576 ;	genCmpEq
                           1577 ;	gencjneshort
                           1578 ;	Peephole 112.b	changed ljmp to sjmp
                           1579 ;	Peephole 198.b	optimized misc jump sequence
   047E BA 71 17           1580 	cjne	r2,#0x71,00164$
                           1581 ;	Peephole 200.b	removed redundant sjmp
                           1582 ;	Peephole 300	removed redundant label 00458$
                           1583 ;	Peephole 300	removed redundant label 00459$
                           1584 ;	genIpush
   0481 C0 02              1585 	push	ar2
   0483 C0 03              1586 	push	ar3
   0485 74r1F              1587 	mov	a,#__str_25
   0487 C0 E0              1588 	push	acc
   0489 74s05              1589 	mov	a,#(__str_25 >> 8)
   048B C0 E0              1590 	push	acc
                           1591 ;	genCall
   048D 12s00r00           1592 	lcall	_printf_tiny
   0490 15 81              1593 	dec	sp
   0492 15 81              1594 	dec	sp
   0494 D0 03              1595 	pop	ar3
   0496 D0 02              1596 	pop	ar2
   0498                    1597 00164$:
                           1598 ;	main.c:116: if(store=='1')
                           1599 ;	genIfx
   0498 EB                 1600 	mov	a,r3
                           1601 ;	genIfxJump
                           1602 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0499 60 05              1603 	jz	00234$
                           1604 ;	Peephole 300	removed redundant label 00460$
                           1605 ;	main.c:118: EA=0;
                           1606 ;	genAssign
   049B C2 AF              1607 	clr	_EA
   049D 02s0Dr37           1608 	ljmp	00235$
   04A0                    1609 00234$:
                           1610 ;	main.c:122: else if(store=='2' && EA==0)
                           1611 ;	genCmpEq
                           1612 ;	gencjneshort
                           1613 ;	Peephole 112.b	changed ljmp to sjmp
                           1614 ;	Peephole 198.b	optimized misc jump sequence
   04A0 BA 32 08           1615 	cjne	r2,#0x32,00230$
                           1616 ;	Peephole 200.b	removed redundant sjmp
                           1617 ;	Peephole 300	removed redundant label 00461$
                           1618 ;	Peephole 300	removed redundant label 00462$
                           1619 ;	genIfx
                           1620 ;	genIfxJump
                           1621 ;	Peephole 108.e	removed ljmp by inverse jump logic
   04A3 20 AF 05           1622 	jb	_EA,00230$
                           1623 ;	Peephole 300	removed redundant label 00463$
                           1624 ;	main.c:124: EA=1;
                           1625 ;	genAssign
   04A6 D2 AF              1626 	setb	_EA
   04A8 02s0Dr37           1627 	ljmp	00235$
   04AB                    1628 00230$:
                           1629 ;	main.c:128: else if(store=='3')
                           1630 ;	genCmpEq
                           1631 ;	gencjneshort
                           1632 ;	Peephole 112.b	changed ljmp to sjmp
                           1633 ;	Peephole 198.b	optimized misc jump sequence
   04AB BA 33 13           1634 	cjne	r2,#0x33,00227$
                           1635 ;	Peephole 200.b	removed redundant sjmp
                           1636 ;	Peephole 300	removed redundant label 00464$
                           1637 ;	Peephole 300	removed redundant label 00465$
                           1638 ;	main.c:130: WDTPRG |=0x07;
                           1639 ;	genOr
   04AE 43 A7 07           1640 	orl	_WDTPRG,#0x07
                           1641 ;	main.c:131: WDTRST = 0x01E;
                           1642 ;	genAssign
   04B1 75 A6 1E           1643 	mov	_WDTRST,#0x1E
                           1644 ;	main.c:132: WDTRST = 0x0E1;
                           1645 ;	genAssign
   04B4 75 A6 E1           1646 	mov	_WDTRST,#0xE1
                           1647 ;	main.c:133: clock_reset();
                           1648 ;	genCall
   04B7 C0 02              1649 	push	ar2
   04B9 12s00r00           1650 	lcall	_clock_reset
   04BC D0 02              1651 	pop	ar2
   04BE 02s0Dr37           1652 	ljmp	00235$
   04C1                    1653 00227$:
                           1654 ;	main.c:137: else if(store=='4')
                           1655 ;	genCmpEq
                           1656 ;	gencjneshort
   04C1 BA 34 02           1657 	cjne	r2,#0x34,00466$
   04C4 80 03              1658 	sjmp	00467$
   04C6                    1659 00466$:
   04C6 02s08r1D           1660 	ljmp	00224$
   04C9                    1661 00467$:
                           1662 ;	main.c:139: printf_tiny("\n\n\r\t Select timer number between 0 to 2: \t");
                           1663 ;	genIpush
   04C9 C0 02              1664 	push	ar2
   04CB 74r3F              1665 	mov	a,#__str_26
   04CD C0 E0              1666 	push	acc
   04CF 74s05              1667 	mov	a,#(__str_26 >> 8)
   04D1 C0 E0              1668 	push	acc
                           1669 ;	genCall
   04D3 12s00r00           1670 	lcall	_printf_tiny
   04D6 15 81              1671 	dec	sp
   04D8 15 81              1672 	dec	sp
   04DA D0 02              1673 	pop	ar2
                           1674 ;	main.c:141: do
   04DC                    1675 00167$:
                           1676 ;	main.c:144: gets(c);
                           1677 ;	genCall
                           1678 ;	Peephole 182.a	used 16 bit load of DPTR
   04DC 90s00r1A           1679 	mov	dptr,#_main_c_1_1
   04DF 75 F0 00           1680 	mov	b,#0x00
   04E2 C0 02              1681 	push	ar2
   04E4 12s00r00           1682 	lcall	_gets
   04E7 D0 02              1683 	pop	ar2
                           1684 ;	main.c:145: num=atoi(c);
                           1685 ;	genCall
                           1686 ;	Peephole 182.a	used 16 bit load of DPTR
   04E9 90s00r1A           1687 	mov	dptr,#_main_c_1_1
   04EC 75 F0 00           1688 	mov	b,#0x00
   04EF C0 02              1689 	push	ar2
   04F1 12s00r00           1690 	lcall	_atoi
   04F4 AB 82              1691 	mov	r3,dpl
   04F6 AC 83              1692 	mov	r4,dph
   04F8 D0 02              1693 	pop	ar2
                           1694 ;	main.c:146: if(num>2){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 2");}
                           1695 ;	genCmpGt
                           1696 ;	genCmp
   04FA C3                 1697 	clr	c
   04FB 74 02              1698 	mov	a,#0x02
   04FD 9B                 1699 	subb	a,r3
                           1700 ;	Peephole 159	avoided xrl during execution
   04FE 74 80              1701 	mov	a,#(0x00 ^ 0x80)
   0500 8C F0              1702 	mov	b,r4
   0502 63 F0 80           1703 	xrl	b,#0x80
   0505 95 F0              1704 	subb	a,b
   0507 E4                 1705 	clr	a
   0508 33                 1706 	rlc	a
                           1707 ;	genIfx
   0509 FD                 1708 	mov	r5,a
                           1709 ;	Peephole 105	removed redundant mov
                           1710 ;	genIfxJump
                           1711 ;	Peephole 108.c	removed ljmp by inverse jump logic
   050A 60 1F              1712 	jz	00168$
                           1713 ;	Peephole 300	removed redundant label 00468$
                           1714 ;	genIpush
   050C C0 02              1715 	push	ar2
   050E C0 03              1716 	push	ar3
   0510 C0 04              1717 	push	ar4
   0512 C0 05              1718 	push	ar5
   0514 74r6A              1719 	mov	a,#__str_27
   0516 C0 E0              1720 	push	acc
   0518 74s05              1721 	mov	a,#(__str_27 >> 8)
   051A C0 E0              1722 	push	acc
                           1723 ;	genCall
   051C 12s00r00           1724 	lcall	_printf_tiny
   051F 15 81              1725 	dec	sp
   0521 15 81              1726 	dec	sp
   0523 D0 05              1727 	pop	ar5
   0525 D0 04              1728 	pop	ar4
   0527 D0 03              1729 	pop	ar3
   0529 D0 02              1730 	pop	ar2
   052B                    1731 00168$:
                           1732 ;	main.c:147: }while(num>2);
                           1733 ;	genIfx
   052B ED                 1734 	mov	a,r5
                           1735 ;	genIfxJump
                           1736 ;	Peephole 108.b	removed ljmp by inverse jump logic
   052C 70 AE              1737 	jnz	00167$
                           1738 ;	Peephole 300	removed redundant label 00469$
                           1739 ;	main.c:150: printf_tiny("\n\n\rEnter minutes for timer %d between 0 to 59: \t",num);
                           1740 ;	genIpush
   052E C0 02              1741 	push	ar2
   0530 C0 03              1742 	push	ar3
   0532 C0 04              1743 	push	ar4
   0534 C0 03              1744 	push	ar3
   0536 C0 04              1745 	push	ar4
                           1746 ;	genIpush
   0538 74r9F              1747 	mov	a,#__str_28
   053A C0 E0              1748 	push	acc
   053C 74s05              1749 	mov	a,#(__str_28 >> 8)
   053E C0 E0              1750 	push	acc
                           1751 ;	genCall
   0540 12s00r00           1752 	lcall	_printf_tiny
   0543 E5 81              1753 	mov	a,sp
   0545 24 FC              1754 	add	a,#0xfc
   0547 F5 81              1755 	mov	sp,a
   0549 D0 04              1756 	pop	ar4
   054B D0 03              1757 	pop	ar3
   054D D0 02              1758 	pop	ar2
                           1759 ;	main.c:151: do{
                           1760 ;	genLeftShift
                           1761 ;	genLeftShiftLiteral
                           1762 ;	genlshTwo
   054F 8B 05              1763 	mov	ar5,r3
   0551 EC                 1764 	mov	a,r4
   0552 CD                 1765 	xch	a,r5
   0553 25 E0              1766 	add	a,acc
   0555 CD                 1767 	xch	a,r5
   0556 33                 1768 	rlc	a
   0557 FE                 1769 	mov	r6,a
                           1770 ;	genPlus
                           1771 ;	Peephole 236.g	used r5 instead of ar5
   0558 ED                 1772 	mov	a,r5
   0559 24r12              1773 	add	a,#_nmi
   055B F5*00              1774 	mov	_main_sloc0_1_0,a
                           1775 ;	Peephole 236.g	used r6 instead of ar6
   055D EE                 1776 	mov	a,r6
   055E 34s00              1777 	addc	a,#(_nmi >> 8)
   0560 F5*01              1778 	mov	(_main_sloc0_1_0 + 1),a
   0562                    1779 00172$:
                           1780 ;	main.c:153: gets(c);
                           1781 ;	genIpush
   0562 C0 02              1782 	push	ar2
                           1783 ;	genCall
                           1784 ;	Peephole 182.a	used 16 bit load of DPTR
   0564 90s00r1A           1785 	mov	dptr,#_main_c_1_1
   0567 75 F0 00           1786 	mov	b,#0x00
   056A C0 02              1787 	push	ar2
   056C C0 03              1788 	push	ar3
   056E C0 04              1789 	push	ar4
   0570 C0 05              1790 	push	ar5
   0572 C0 06              1791 	push	ar6
   0574 12s00r00           1792 	lcall	_gets
   0577 D0 06              1793 	pop	ar6
   0579 D0 05              1794 	pop	ar5
   057B D0 04              1795 	pop	ar4
   057D D0 03              1796 	pop	ar3
   057F D0 02              1797 	pop	ar2
                           1798 ;	main.c:154: nmi[num]=atoi(c);
                           1799 ;	genPlus
                           1800 ;	Peephole 236.g	used r5 instead of ar5
   0581 ED                 1801 	mov	a,r5
   0582 24r12              1802 	add	a,#_nmi
   0584 F9                 1803 	mov	r1,a
                           1804 ;	Peephole 236.g	used r6 instead of ar6
   0585 EE                 1805 	mov	a,r6
   0586 34s00              1806 	addc	a,#(_nmi >> 8)
   0588 FA                 1807 	mov	r2,a
                           1808 ;	genCall
                           1809 ;	Peephole 182.a	used 16 bit load of DPTR
   0589 90s00r1A           1810 	mov	dptr,#_main_c_1_1
   058C 75 F0 00           1811 	mov	b,#0x00
   058F C0 02              1812 	push	ar2
   0591 C0 03              1813 	push	ar3
   0593 C0 04              1814 	push	ar4
   0595 C0 05              1815 	push	ar5
   0597 C0 06              1816 	push	ar6
   0599 C0 01              1817 	push	ar1
   059B 12s00r00           1818 	lcall	_atoi
   059E AF 82              1819 	mov	r7,dpl
   05A0 A8 83              1820 	mov	r0,dph
   05A2 D0 01              1821 	pop	ar1
   05A4 D0 06              1822 	pop	ar6
   05A6 D0 05              1823 	pop	ar5
   05A8 D0 04              1824 	pop	ar4
   05AA D0 03              1825 	pop	ar3
   05AC D0 02              1826 	pop	ar2
                           1827 ;	genPointerSet
                           1828 ;     genFarPointerSet
   05AE 89 82              1829 	mov	dpl,r1
   05B0 8A 83              1830 	mov	dph,r2
   05B2 EF                 1831 	mov	a,r7
   05B3 F0                 1832 	movx	@dptr,a
   05B4 A3                 1833 	inc	dptr
   05B5 E8                 1834 	mov	a,r0
   05B6 F0                 1835 	movx	@dptr,a
                           1836 ;	main.c:155: if(nmi[num]>59){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 59");}
                           1837 ;	genPointerGet
                           1838 ;	genFarPointerGet
   05B7 85*00 82           1839 	mov	dpl,_main_sloc0_1_0
   05BA 85*01 83           1840 	mov	dph,(_main_sloc0_1_0 + 1)
   05BD E0                 1841 	movx	a,@dptr
   05BE FA                 1842 	mov	r2,a
   05BF A3                 1843 	inc	dptr
   05C0 E0                 1844 	movx	a,@dptr
   05C1 FF                 1845 	mov	r7,a
                           1846 ;	genCmpGt
                           1847 ;	genCmp
   05C2 C3                 1848 	clr	c
   05C3 74 3B              1849 	mov	a,#0x3B
   05C5 9A                 1850 	subb	a,r2
                           1851 ;	Peephole 181	changed mov to clr
   05C6 E4                 1852 	clr	a
   05C7 9F                 1853 	subb	a,r7
   05C8 E4                 1854 	clr	a
   05C9 33                 1855 	rlc	a
                           1856 ;	genIpop
   05CA D0 02              1857 	pop	ar2
                           1858 ;	genIfx
                           1859 ;	genIfxJump
                           1860 ;	Peephole 108.c	removed ljmp by inverse jump logic
   05CC 60 23              1861 	jz	00173$
                           1862 ;	Peephole 300	removed redundant label 00470$
                           1863 ;	genIpush
   05CE C0 02              1864 	push	ar2
   05D0 C0 03              1865 	push	ar3
   05D2 C0 04              1866 	push	ar4
   05D4 C0 05              1867 	push	ar5
   05D6 C0 06              1868 	push	ar6
   05D8 74rD0              1869 	mov	a,#__str_29
   05DA C0 E0              1870 	push	acc
   05DC 74s05              1871 	mov	a,#(__str_29 >> 8)
   05DE C0 E0              1872 	push	acc
                           1873 ;	genCall
   05E0 12s00r00           1874 	lcall	_printf_tiny
   05E3 15 81              1875 	dec	sp
   05E5 15 81              1876 	dec	sp
   05E7 D0 06              1877 	pop	ar6
   05E9 D0 05              1878 	pop	ar5
   05EB D0 04              1879 	pop	ar4
   05ED D0 03              1880 	pop	ar3
   05EF D0 02              1881 	pop	ar2
   05F1                    1882 00173$:
                           1883 ;	main.c:156: }while(nmi[num]>59);
                           1884 ;	genPlus
                           1885 ;	Peephole 236.g	used r5 instead of ar5
   05F1 ED                 1886 	mov	a,r5
   05F2 24r12              1887 	add	a,#_nmi
   05F4 F5 82              1888 	mov	dpl,a
                           1889 ;	Peephole 236.g	used r6 instead of ar6
   05F6 EE                 1890 	mov	a,r6
   05F7 34s00              1891 	addc	a,#(_nmi >> 8)
   05F9 F5 83              1892 	mov	dph,a
                           1893 ;	genPointerGet
                           1894 ;	genFarPointerGet
   05FB E0                 1895 	movx	a,@dptr
   05FC FF                 1896 	mov	r7,a
   05FD A3                 1897 	inc	dptr
   05FE E0                 1898 	movx	a,@dptr
   05FF F8                 1899 	mov	r0,a
                           1900 ;	genCmpGt
                           1901 ;	genCmp
   0600 C3                 1902 	clr	c
   0601 74 3B              1903 	mov	a,#0x3B
   0603 9F                 1904 	subb	a,r7
                           1905 ;	Peephole 181	changed mov to clr
   0604 E4                 1906 	clr	a
   0605 98                 1907 	subb	a,r0
                           1908 ;	genIfxJump
   0606 50 03              1909 	jnc	00471$
   0608 02s05r62           1910 	ljmp	00172$
   060B                    1911 00471$:
                           1912 ;	main.c:159: printf_tiny("\n\n\rEnter seconds for timer %d between 1 to 59: \t",num);
                           1913 ;	genIpush
   060B C0 02              1914 	push	ar2
   060D C0 03              1915 	push	ar3
   060F C0 04              1916 	push	ar4
   0611 C0 05              1917 	push	ar5
   0613 C0 06              1918 	push	ar6
   0615 C0 03              1919 	push	ar3
   0617 C0 04              1920 	push	ar4
                           1921 ;	genIpush
   0619 74r06              1922 	mov	a,#__str_30
   061B C0 E0              1923 	push	acc
   061D 74s06              1924 	mov	a,#(__str_30 >> 8)
   061F C0 E0              1925 	push	acc
                           1926 ;	genCall
   0621 12s00r00           1927 	lcall	_printf_tiny
   0624 E5 81              1928 	mov	a,sp
   0626 24 FC              1929 	add	a,#0xfc
   0628 F5 81              1930 	mov	sp,a
   062A D0 06              1931 	pop	ar6
   062C D0 05              1932 	pop	ar5
   062E D0 04              1933 	pop	ar4
   0630 D0 03              1934 	pop	ar3
   0632 D0 02              1935 	pop	ar2
                           1936 ;	main.c:160: do{
                           1937 ;	genPlus
                           1938 ;	Peephole 236.g	used r5 instead of ar5
   0634 ED                 1939 	mov	a,r5
   0635 24r0C              1940 	add	a,#_nsec
   0637 F5*02              1941 	mov	_main_sloc1_1_0,a
                           1942 ;	Peephole 236.g	used r6 instead of ar6
   0639 EE                 1943 	mov	a,r6
   063A 34s00              1944 	addc	a,#(_nsec >> 8)
   063C F5*03              1945 	mov	(_main_sloc1_1_0 + 1),a
                           1946 ;	genPlus
                           1947 ;	Peephole 236.g	used r5 instead of ar5
   063E ED                 1948 	mov	a,r5
   063F 24r0C              1949 	add	a,#_nsec
   0641 F5*00              1950 	mov	_main_sloc0_1_0,a
                           1951 ;	Peephole 236.g	used r6 instead of ar6
   0643 EE                 1952 	mov	a,r6
   0644 34s00              1953 	addc	a,#(_nsec >> 8)
   0646 F5*01              1954 	mov	(_main_sloc0_1_0 + 1),a
   0648                    1955 00177$:
                           1956 ;	main.c:162: gets(c);
                           1957 ;	genIpush
   0648 C0 02              1958 	push	ar2
                           1959 ;	genCall
                           1960 ;	Peephole 182.a	used 16 bit load of DPTR
   064A 90s00r1A           1961 	mov	dptr,#_main_c_1_1
   064D 75 F0 00           1962 	mov	b,#0x00
   0650 C0 02              1963 	push	ar2
   0652 C0 03              1964 	push	ar3
   0654 C0 04              1965 	push	ar4
   0656 C0 05              1966 	push	ar5
   0658 C0 06              1967 	push	ar6
   065A 12s00r00           1968 	lcall	_gets
   065D D0 06              1969 	pop	ar6
   065F D0 05              1970 	pop	ar5
   0661 D0 04              1971 	pop	ar4
   0663 D0 03              1972 	pop	ar3
   0665 D0 02              1973 	pop	ar2
                           1974 ;	main.c:163: nsec[num]=atoi(c);
                           1975 ;	genPlus
                           1976 ;	Peephole 236.g	used r5 instead of ar5
   0667 ED                 1977 	mov	a,r5
   0668 24r0C              1978 	add	a,#_nsec
   066A F9                 1979 	mov	r1,a
                           1980 ;	Peephole 236.g	used r6 instead of ar6
   066B EE                 1981 	mov	a,r6
   066C 34s00              1982 	addc	a,#(_nsec >> 8)
   066E FA                 1983 	mov	r2,a
                           1984 ;	genCall
                           1985 ;	Peephole 182.a	used 16 bit load of DPTR
   066F 90s00r1A           1986 	mov	dptr,#_main_c_1_1
   0672 75 F0 00           1987 	mov	b,#0x00
   0675 C0 02              1988 	push	ar2
   0677 C0 03              1989 	push	ar3
   0679 C0 04              1990 	push	ar4
   067B C0 05              1991 	push	ar5
   067D C0 06              1992 	push	ar6
   067F C0 01              1993 	push	ar1
   0681 12s00r00           1994 	lcall	_atoi
   0684 AF 82              1995 	mov	r7,dpl
   0686 A8 83              1996 	mov	r0,dph
   0688 D0 01              1997 	pop	ar1
   068A D0 06              1998 	pop	ar6
   068C D0 05              1999 	pop	ar5
   068E D0 04              2000 	pop	ar4
   0690 D0 03              2001 	pop	ar3
   0692 D0 02              2002 	pop	ar2
                           2003 ;	genPointerSet
                           2004 ;     genFarPointerSet
   0694 89 82              2005 	mov	dpl,r1
   0696 8A 83              2006 	mov	dph,r2
   0698 EF                 2007 	mov	a,r7
   0699 F0                 2008 	movx	@dptr,a
   069A A3                 2009 	inc	dptr
   069B E8                 2010 	mov	a,r0
   069C F0                 2011 	movx	@dptr,a
                           2012 ;	main.c:164: if(nsec[num]>59){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 59");}
                           2013 ;	genPointerGet
                           2014 ;	genFarPointerGet
   069D 85*00 82           2015 	mov	dpl,_main_sloc0_1_0
   06A0 85*01 83           2016 	mov	dph,(_main_sloc0_1_0 + 1)
   06A3 E0                 2017 	movx	a,@dptr
   06A4 FA                 2018 	mov	r2,a
   06A5 A3                 2019 	inc	dptr
   06A6 E0                 2020 	movx	a,@dptr
   06A7 FF                 2021 	mov	r7,a
                           2022 ;	genCmpGt
                           2023 ;	genCmp
   06A8 C3                 2024 	clr	c
   06A9 74 3B              2025 	mov	a,#0x3B
   06AB 9A                 2026 	subb	a,r2
                           2027 ;	Peephole 181	changed mov to clr
   06AC E4                 2028 	clr	a
   06AD 9F                 2029 	subb	a,r7
   06AE E4                 2030 	clr	a
   06AF 33                 2031 	rlc	a
                           2032 ;	genIpop
   06B0 D0 02              2033 	pop	ar2
                           2034 ;	genIfx
                           2035 ;	genIfxJump
                           2036 ;	Peephole 108.c	removed ljmp by inverse jump logic
   06B2 60 23              2037 	jz	00178$
                           2038 ;	Peephole 300	removed redundant label 00472$
                           2039 ;	genIpush
   06B4 C0 02              2040 	push	ar2
   06B6 C0 03              2041 	push	ar3
   06B8 C0 04              2042 	push	ar4
   06BA C0 05              2043 	push	ar5
   06BC C0 06              2044 	push	ar6
   06BE 74rD0              2045 	mov	a,#__str_29
   06C0 C0 E0              2046 	push	acc
   06C2 74s05              2047 	mov	a,#(__str_29 >> 8)
   06C4 C0 E0              2048 	push	acc
                           2049 ;	genCall
   06C6 12s00r00           2050 	lcall	_printf_tiny
   06C9 15 81              2051 	dec	sp
   06CB 15 81              2052 	dec	sp
   06CD D0 06              2053 	pop	ar6
   06CF D0 05              2054 	pop	ar5
   06D1 D0 04              2055 	pop	ar4
   06D3 D0 03              2056 	pop	ar3
   06D5 D0 02              2057 	pop	ar2
   06D7                    2058 00178$:
                           2059 ;	main.c:165: }while(nsec[num]>59);
                           2060 ;	genPointerGet
                           2061 ;	genFarPointerGet
   06D7 85*02 82           2062 	mov	dpl,_main_sloc1_1_0
   06DA 85*03 83           2063 	mov	dph,(_main_sloc1_1_0 + 1)
   06DD E0                 2064 	movx	a,@dptr
   06DE FF                 2065 	mov	r7,a
   06DF A3                 2066 	inc	dptr
   06E0 E0                 2067 	movx	a,@dptr
   06E1 F8                 2068 	mov	r0,a
                           2069 ;	genCmpGt
                           2070 ;	genCmp
   06E2 C3                 2071 	clr	c
   06E3 74 3B              2072 	mov	a,#0x3B
   06E5 9F                 2073 	subb	a,r7
                           2074 ;	Peephole 181	changed mov to clr
   06E6 E4                 2075 	clr	a
   06E7 98                 2076 	subb	a,r0
                           2077 ;	genIfxJump
   06E8 50 03              2078 	jnc	00473$
   06EA 02s06r48           2079 	ljmp	00177$
   06ED                    2080 00473$:
                           2081 ;	main.c:169: printf_tiny("\n\n\rEnter milisec for timer %d between 0 to 9: \t",num);
                           2082 ;	genIpush
   06ED C0 02              2083 	push	ar2
   06EF C0 03              2084 	push	ar3
   06F1 C0 04              2085 	push	ar4
   06F3 C0 05              2086 	push	ar5
   06F5 C0 06              2087 	push	ar6
   06F7 C0 03              2088 	push	ar3
   06F9 C0 04              2089 	push	ar4
                           2090 ;	genIpush
   06FB 74r37              2091 	mov	a,#__str_31
   06FD C0 E0              2092 	push	acc
   06FF 74s06              2093 	mov	a,#(__str_31 >> 8)
   0701 C0 E0              2094 	push	acc
                           2095 ;	genCall
   0703 12s00r00           2096 	lcall	_printf_tiny
   0706 E5 81              2097 	mov	a,sp
   0708 24 FC              2098 	add	a,#0xfc
   070A F5 81              2099 	mov	sp,a
   070C D0 06              2100 	pop	ar6
   070E D0 05              2101 	pop	ar5
   0710 D0 04              2102 	pop	ar4
   0712 D0 03              2103 	pop	ar3
   0714 D0 02              2104 	pop	ar2
                           2105 ;	main.c:170: do{
                           2106 ;	genPlus
                           2107 ;	Peephole 236.g	used r5 instead of ar5
   0716 ED                 2108 	mov	a,r5
   0717 24r06              2109 	add	a,#_nms
   0719 F5*00              2110 	mov	_main_sloc0_1_0,a
                           2111 ;	Peephole 236.g	used r6 instead of ar6
   071B EE                 2112 	mov	a,r6
   071C 34s00              2113 	addc	a,#(_nms >> 8)
   071E F5*01              2114 	mov	(_main_sloc0_1_0 + 1),a
                           2115 ;	genPlus
                           2116 ;	Peephole 236.g	used r5 instead of ar5
   0720 ED                 2117 	mov	a,r5
   0721 24r06              2118 	add	a,#_nms
   0723 F5*02              2119 	mov	_main_sloc1_1_0,a
                           2120 ;	Peephole 236.g	used r6 instead of ar6
   0725 EE                 2121 	mov	a,r6
   0726 34s00              2122 	addc	a,#(_nms >> 8)
   0728 F5*03              2123 	mov	(_main_sloc1_1_0 + 1),a
   072A                    2124 00182$:
                           2125 ;	main.c:172: gets(d);
                           2126 ;	genIpush
   072A C0 02              2127 	push	ar2
                           2128 ;	genCall
                           2129 ;	Peephole 182.a	used 16 bit load of DPTR
   072C 90s00r1E           2130 	mov	dptr,#_main_d_1_1
   072F 75 F0 00           2131 	mov	b,#0x00
   0732 C0 02              2132 	push	ar2
   0734 C0 03              2133 	push	ar3
   0736 C0 04              2134 	push	ar4
   0738 C0 05              2135 	push	ar5
   073A C0 06              2136 	push	ar6
   073C 12s00r00           2137 	lcall	_gets
   073F D0 06              2138 	pop	ar6
   0741 D0 05              2139 	pop	ar5
   0743 D0 04              2140 	pop	ar4
   0745 D0 03              2141 	pop	ar3
   0747 D0 02              2142 	pop	ar2
                           2143 ;	main.c:173: nms[num]=atoi(d);
                           2144 ;	genPlus
                           2145 ;	Peephole 236.g	used r5 instead of ar5
   0749 ED                 2146 	mov	a,r5
   074A 24r06              2147 	add	a,#_nms
   074C F9                 2148 	mov	r1,a
                           2149 ;	Peephole 236.g	used r6 instead of ar6
   074D EE                 2150 	mov	a,r6
   074E 34s00              2151 	addc	a,#(_nms >> 8)
   0750 FA                 2152 	mov	r2,a
                           2153 ;	genCall
                           2154 ;	Peephole 182.a	used 16 bit load of DPTR
   0751 90s00r1E           2155 	mov	dptr,#_main_d_1_1
   0754 75 F0 00           2156 	mov	b,#0x00
   0757 C0 02              2157 	push	ar2
   0759 C0 03              2158 	push	ar3
   075B C0 04              2159 	push	ar4
   075D C0 05              2160 	push	ar5
   075F C0 06              2161 	push	ar6
   0761 C0 01              2162 	push	ar1
   0763 12s00r00           2163 	lcall	_atoi
   0766 AF 82              2164 	mov	r7,dpl
   0768 A8 83              2165 	mov	r0,dph
   076A D0 01              2166 	pop	ar1
   076C D0 06              2167 	pop	ar6
   076E D0 05              2168 	pop	ar5
   0770 D0 04              2169 	pop	ar4
   0772 D0 03              2170 	pop	ar3
   0774 D0 02              2171 	pop	ar2
                           2172 ;	genPointerSet
                           2173 ;     genFarPointerSet
   0776 89 82              2174 	mov	dpl,r1
   0778 8A 83              2175 	mov	dph,r2
   077A EF                 2176 	mov	a,r7
   077B F0                 2177 	movx	@dptr,a
   077C A3                 2178 	inc	dptr
   077D E8                 2179 	mov	a,r0
   077E F0                 2180 	movx	@dptr,a
                           2181 ;	main.c:174: if(nms[num]>9 ){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 9");}
                           2182 ;	genPointerGet
                           2183 ;	genFarPointerGet
   077F 85*02 82           2184 	mov	dpl,_main_sloc1_1_0
   0782 85*03 83           2185 	mov	dph,(_main_sloc1_1_0 + 1)
   0785 E0                 2186 	movx	a,@dptr
   0786 FA                 2187 	mov	r2,a
   0787 A3                 2188 	inc	dptr
   0788 E0                 2189 	movx	a,@dptr
   0789 FF                 2190 	mov	r7,a
                           2191 ;	genCmpGt
                           2192 ;	genCmp
   078A C3                 2193 	clr	c
   078B 74 09              2194 	mov	a,#0x09
   078D 9A                 2195 	subb	a,r2
                           2196 ;	Peephole 181	changed mov to clr
   078E E4                 2197 	clr	a
   078F 9F                 2198 	subb	a,r7
   0790 E4                 2199 	clr	a
   0791 33                 2200 	rlc	a
                           2201 ;	genIpop
   0792 D0 02              2202 	pop	ar2
                           2203 ;	genIfx
                           2204 ;	genIfxJump
                           2205 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0794 60 23              2206 	jz	00183$
                           2207 ;	Peephole 300	removed redundant label 00474$
                           2208 ;	genIpush
   0796 C0 02              2209 	push	ar2
   0798 C0 03              2210 	push	ar3
   079A C0 04              2211 	push	ar4
   079C C0 05              2212 	push	ar5
   079E C0 06              2213 	push	ar6
   07A0 74r67              2214 	mov	a,#__str_32
   07A2 C0 E0              2215 	push	acc
   07A4 74s06              2216 	mov	a,#(__str_32 >> 8)
   07A6 C0 E0              2217 	push	acc
                           2218 ;	genCall
   07A8 12s00r00           2219 	lcall	_printf_tiny
   07AB 15 81              2220 	dec	sp
   07AD 15 81              2221 	dec	sp
   07AF D0 06              2222 	pop	ar6
   07B1 D0 05              2223 	pop	ar5
   07B3 D0 04              2224 	pop	ar4
   07B5 D0 03              2225 	pop	ar3
   07B7 D0 02              2226 	pop	ar2
   07B9                    2227 00183$:
                           2228 ;	main.c:175: }while(nms[num]>9);
                           2229 ;	genPointerGet
                           2230 ;	genFarPointerGet
   07B9 85*00 82           2231 	mov	dpl,_main_sloc0_1_0
   07BC 85*01 83           2232 	mov	dph,(_main_sloc0_1_0 + 1)
   07BF E0                 2233 	movx	a,@dptr
   07C0 FF                 2234 	mov	r7,a
   07C1 A3                 2235 	inc	dptr
   07C2 E0                 2236 	movx	a,@dptr
   07C3 F8                 2237 	mov	r0,a
                           2238 ;	genCmpGt
                           2239 ;	genCmp
   07C4 C3                 2240 	clr	c
   07C5 74 09              2241 	mov	a,#0x09
   07C7 9F                 2242 	subb	a,r7
                           2243 ;	Peephole 181	changed mov to clr
   07C8 E4                 2244 	clr	a
   07C9 98                 2245 	subb	a,r0
                           2246 ;	genIfxJump
   07CA 50 03              2247 	jnc	00475$
   07CC 02s07r2A           2248 	ljmp	00182$
   07CF                    2249 00475$:
                           2250 ;	main.c:178: countdown_alarm(nms[num],nsec[num],nmi[num],2,num);
                           2251 ;	genIpush
   07CF C0 02              2252 	push	ar2
                           2253 ;	genPlus
                           2254 ;	Peephole 236.g	used r5 instead of ar5
   07D1 ED                 2255 	mov	a,r5
   07D2 24r0C              2256 	add	a,#_nsec
   07D4 F5 82              2257 	mov	dpl,a
                           2258 ;	Peephole 236.g	used r6 instead of ar6
   07D6 EE                 2259 	mov	a,r6
   07D7 34s00              2260 	addc	a,#(_nsec >> 8)
   07D9 F5 83              2261 	mov	dph,a
                           2262 ;	genPointerGet
                           2263 ;	genFarPointerGet
   07DB E0                 2264 	movx	a,@dptr
   07DC F9                 2265 	mov	r1,a
   07DD A3                 2266 	inc	dptr
   07DE E0                 2267 	movx	a,@dptr
   07DF FA                 2268 	mov	r2,a
                           2269 ;	genPlus
                           2270 ;	Peephole 236.g	used r5 instead of ar5
   07E0 ED                 2271 	mov	a,r5
   07E1 24r12              2272 	add	a,#_nmi
   07E3 F5 82              2273 	mov	dpl,a
                           2274 ;	Peephole 236.g	used r6 instead of ar6
   07E5 EE                 2275 	mov	a,r6
   07E6 34s00              2276 	addc	a,#(_nmi >> 8)
   07E8 F5 83              2277 	mov	dph,a
                           2278 ;	genPointerGet
                           2279 ;	genFarPointerGet
   07EA E0                 2280 	movx	a,@dptr
   07EB FD                 2281 	mov	r5,a
   07EC A3                 2282 	inc	dptr
   07ED E0                 2283 	movx	a,@dptr
   07EE FE                 2284 	mov	r6,a
                           2285 ;	genAssign
   07EF 90s00r00           2286 	mov	dptr,#_countdown_alarm_PARM_2
   07F2 E9                 2287 	mov	a,r1
   07F3 F0                 2288 	movx	@dptr,a
   07F4 A3                 2289 	inc	dptr
   07F5 EA                 2290 	mov	a,r2
   07F6 F0                 2291 	movx	@dptr,a
                           2292 ;	genAssign
   07F7 90s00r00           2293 	mov	dptr,#_countdown_alarm_PARM_3
   07FA ED                 2294 	mov	a,r5
   07FB F0                 2295 	movx	@dptr,a
   07FC A3                 2296 	inc	dptr
   07FD EE                 2297 	mov	a,r6
   07FE F0                 2298 	movx	@dptr,a
                           2299 ;	genAssign
   07FF 90s00r00           2300 	mov	dptr,#_countdown_alarm_PARM_4
   0802 74 02              2301 	mov	a,#0x02
   0804 F0                 2302 	movx	@dptr,a
                           2303 ;	genAssign
   0805 90s00r00           2304 	mov	dptr,#_countdown_alarm_PARM_5
   0808 EB                 2305 	mov	a,r3
   0809 F0                 2306 	movx	@dptr,a
   080A A3                 2307 	inc	dptr
   080B EC                 2308 	mov	a,r4
   080C F0                 2309 	movx	@dptr,a
                           2310 ;	genCall
   080D 8F 82              2311 	mov	dpl,r7
   080F 88 83              2312 	mov	dph,r0
   0811 C0 02              2313 	push	ar2
   0813 12s00r00           2314 	lcall	_countdown_alarm
   0816 D0 02              2315 	pop	ar2
                           2316 ;	genIpop
   0818 D0 02              2317 	pop	ar2
   081A 02s0Dr37           2318 	ljmp	00235$
   081D                    2319 00224$:
                           2320 ;	main.c:182: else if(store=='5')
                           2321 ;	genCmpEq
                           2322 ;	gencjneshort
   081D BA 35 02           2323 	cjne	r2,#0x35,00476$
   0820 80 03              2324 	sjmp	00477$
   0822                    2325 00476$:
   0822 02s08rCB           2326 	ljmp	00221$
   0825                    2327 00477$:
                           2328 ;	main.c:185: printf_tiny("\n\n\r\tWhich timer to enable between 0 to 2:\t");
                           2329 ;	genIpush
   0825 C0 02              2330 	push	ar2
   0827 74r9C              2331 	mov	a,#__str_33
   0829 C0 E0              2332 	push	acc
   082B 74s06              2333 	mov	a,#(__str_33 >> 8)
   082D C0 E0              2334 	push	acc
                           2335 ;	genCall
   082F 12s00r00           2336 	lcall	_printf_tiny
   0832 15 81              2337 	dec	sp
   0834 15 81              2338 	dec	sp
   0836 D0 02              2339 	pop	ar2
                           2340 ;	main.c:187: gets(c);
                           2341 ;	genCall
                           2342 ;	Peephole 182.a	used 16 bit load of DPTR
   0838 90s00r1A           2343 	mov	dptr,#_main_c_1_1
   083B 75 F0 00           2344 	mov	b,#0x00
   083E C0 02              2345 	push	ar2
   0840 12s00r00           2346 	lcall	_gets
   0843 D0 02              2347 	pop	ar2
                           2348 ;	main.c:188: num=atoi(c);
                           2349 ;	genCall
                           2350 ;	Peephole 182.a	used 16 bit load of DPTR
   0845 90s00r1A           2351 	mov	dptr,#_main_c_1_1
   0848 75 F0 00           2352 	mov	b,#0x00
   084B C0 02              2353 	push	ar2
   084D 12s00r00           2354 	lcall	_atoi
   0850 AB 82              2355 	mov	r3,dpl
   0852 AC 83              2356 	mov	r4,dph
   0854 D0 02              2357 	pop	ar2
                           2358 ;	main.c:189: EA=0;
                           2359 ;	genAssign
   0856 C2 AF              2360 	clr	_EA
                           2361 ;	main.c:190: lcdgotoxy(num+1,1);
                           2362 ;	genCast
   0858 8B 05              2363 	mov	ar5,r3
                           2364 ;	genPlus
                           2365 ;     genPlusIncr
   085A 0D                 2366 	inc	r5
                           2367 ;	genAssign
   085B 90s00r00           2368 	mov	dptr,#_lcdgotoxy_PARM_2
   085E 74 01              2369 	mov	a,#0x01
   0860 F0                 2370 	movx	@dptr,a
                           2371 ;	genCall
   0861 8D 82              2372 	mov	dpl,r5
   0863 C0 02              2373 	push	ar2
   0865 C0 03              2374 	push	ar3
   0867 C0 04              2375 	push	ar4
   0869 12s00r00           2376 	lcall	_lcdgotoxy
   086C D0 04              2377 	pop	ar4
   086E D0 03              2378 	pop	ar3
   0870 D0 02              2379 	pop	ar2
                           2380 ;	main.c:191: lcdputstr("Timer");
                           2381 ;	genCall
                           2382 ;	Peephole 182.a	used 16 bit load of DPTR
   0872 90s00r08           2383 	mov	dptr,#__str_2
   0875 75 F0 80           2384 	mov	b,#0x80
   0878 C0 02              2385 	push	ar2
   087A C0 03              2386 	push	ar3
   087C C0 04              2387 	push	ar4
   087E 12s00r00           2388 	lcall	_lcdputstr
   0881 D0 04              2389 	pop	ar4
   0883 D0 03              2390 	pop	ar3
   0885 D0 02              2391 	pop	ar2
                           2392 ;	main.c:192: lcdputch(name[num]);
                           2393 ;	genPlus
                           2394 ;	Peephole 236.g	used r3 instead of ar3
   0887 EB                 2395 	mov	a,r3
   0888 24r23              2396 	add	a,#_main_name_1_1
   088A F5 82              2397 	mov	dpl,a
                           2398 ;	Peephole 236.g	used r4 instead of ar4
   088C EC                 2399 	mov	a,r4
   088D 34s00              2400 	addc	a,#(_main_name_1_1 >> 8)
   088F F5 83              2401 	mov	dph,a
                           2402 ;	genPointerGet
                           2403 ;	genFarPointerGet
   0891 E0                 2404 	movx	a,@dptr
                           2405 ;	genCall
   0892 FD                 2406 	mov	r5,a
                           2407 ;	Peephole 244.c	loading dpl from a instead of r5
   0893 F5 82              2408 	mov	dpl,a
   0895 C0 02              2409 	push	ar2
   0897 C0 03              2410 	push	ar3
   0899 C0 04              2411 	push	ar4
   089B 12s00r00           2412 	lcall	_lcdputch
   089E D0 04              2413 	pop	ar4
   08A0 D0 03              2414 	pop	ar3
   08A2 D0 02              2415 	pop	ar2
                           2416 ;	main.c:193: lcdputstr("-E");
                           2417 ;	genCall
                           2418 ;	Peephole 182.a	used 16 bit load of DPTR
   08A4 90s06rC7           2419 	mov	dptr,#__str_34
   08A7 75 F0 80           2420 	mov	b,#0x80
   08AA C0 02              2421 	push	ar2
   08AC C0 03              2422 	push	ar3
   08AE C0 04              2423 	push	ar4
   08B0 12s00r00           2424 	lcall	_lcdputstr
   08B3 D0 04              2425 	pop	ar4
   08B5 D0 03              2426 	pop	ar3
   08B7 D0 02              2427 	pop	ar2
                           2428 ;	main.c:194: cnt[num]=1;
                           2429 ;	genPlus
                           2430 ;	Peephole 236.g	used r3 instead of ar3
   08B9 EB                 2431 	mov	a,r3
   08BA 24r03              2432 	add	a,#_cnt
   08BC F5 82              2433 	mov	dpl,a
                           2434 ;	Peephole 236.g	used r4 instead of ar4
   08BE EC                 2435 	mov	a,r4
   08BF 34s00              2436 	addc	a,#(_cnt >> 8)
   08C1 F5 83              2437 	mov	dph,a
                           2438 ;	genPointerSet
                           2439 ;     genFarPointerSet
   08C3 74 01              2440 	mov	a,#0x01
   08C5 F0                 2441 	movx	@dptr,a
                           2442 ;	main.c:195: EA=1;
                           2443 ;	genAssign
   08C6 D2 AF              2444 	setb	_EA
   08C8 02s0Dr37           2445 	ljmp	00235$
   08CB                    2446 00221$:
                           2447 ;	main.c:199: else if(store=='6')
                           2448 ;	genCmpEq
                           2449 ;	gencjneshort
   08CB BA 36 02           2450 	cjne	r2,#0x36,00478$
   08CE 80 03              2451 	sjmp	00479$
   08D0                    2452 00478$:
   08D0 02s09rD1           2453 	ljmp	00218$
   08D3                    2454 00479$:
                           2455 ;	main.c:202: printf_tiny("\n\n\rWhich timer to Disable between 0 to 2:\t");
                           2456 ;	genIpush
   08D3 C0 02              2457 	push	ar2
   08D5 74rCA              2458 	mov	a,#__str_35
   08D7 C0 E0              2459 	push	acc
   08D9 74s06              2460 	mov	a,#(__str_35 >> 8)
   08DB C0 E0              2461 	push	acc
                           2462 ;	genCall
   08DD 12s00r00           2463 	lcall	_printf_tiny
   08E0 15 81              2464 	dec	sp
   08E2 15 81              2465 	dec	sp
   08E4 D0 02              2466 	pop	ar2
                           2467 ;	main.c:204: gets(c);
                           2468 ;	genCall
                           2469 ;	Peephole 182.a	used 16 bit load of DPTR
   08E6 90s00r1A           2470 	mov	dptr,#_main_c_1_1
   08E9 75 F0 00           2471 	mov	b,#0x00
   08EC C0 02              2472 	push	ar2
   08EE 12s00r00           2473 	lcall	_gets
   08F1 D0 02              2474 	pop	ar2
                           2475 ;	main.c:205: num=atoi(c);
                           2476 ;	genCall
                           2477 ;	Peephole 182.a	used 16 bit load of DPTR
   08F3 90s00r1A           2478 	mov	dptr,#_main_c_1_1
   08F6 75 F0 00           2479 	mov	b,#0x00
   08F9 C0 02              2480 	push	ar2
   08FB 12s00r00           2481 	lcall	_atoi
   08FE AB 82              2482 	mov	r3,dpl
   0900 AC 83              2483 	mov	r4,dph
   0902 D0 02              2484 	pop	ar2
                           2485 ;	main.c:206: EA=0;
                           2486 ;	genAssign
   0904 C2 AF              2487 	clr	_EA
                           2488 ;	main.c:208: lcdgotoxy(num+1,1);  // Print Disabled on LCD
                           2489 ;	genCast
   0906 8B 05              2490 	mov	ar5,r3
                           2491 ;	genPlus
                           2492 ;     genPlusIncr
   0908 0D                 2493 	inc	r5
                           2494 ;	genAssign
   0909 90s00r00           2495 	mov	dptr,#_lcdgotoxy_PARM_2
   090C 74 01              2496 	mov	a,#0x01
   090E F0                 2497 	movx	@dptr,a
                           2498 ;	genCall
   090F 8D 82              2499 	mov	dpl,r5
   0911 C0 02              2500 	push	ar2
   0913 C0 03              2501 	push	ar3
   0915 C0 04              2502 	push	ar4
   0917 C0 05              2503 	push	ar5
   0919 12s00r00           2504 	lcall	_lcdgotoxy
   091C D0 05              2505 	pop	ar5
   091E D0 04              2506 	pop	ar4
   0920 D0 03              2507 	pop	ar3
   0922 D0 02              2508 	pop	ar2
                           2509 ;	main.c:209: lcdputstr("Disabled");
                           2510 ;	genCall
                           2511 ;	Peephole 182.a	used 16 bit load of DPTR
   0924 90s06rF5           2512 	mov	dptr,#__str_36
   0927 75 F0 80           2513 	mov	b,#0x80
   092A C0 02              2514 	push	ar2
   092C C0 03              2515 	push	ar3
   092E C0 04              2516 	push	ar4
   0930 C0 05              2517 	push	ar5
   0932 12s00r00           2518 	lcall	_lcdputstr
   0935 D0 05              2519 	pop	ar5
   0937 D0 04              2520 	pop	ar4
   0939 D0 03              2521 	pop	ar3
   093B D0 02              2522 	pop	ar2
                           2523 ;	main.c:210: printf_tiny("\n\n\t\t Disabling...\n\r");
                           2524 ;	genIpush
   093D C0 02              2525 	push	ar2
   093F C0 03              2526 	push	ar3
   0941 C0 04              2527 	push	ar4
   0943 C0 05              2528 	push	ar5
   0945 74rFE              2529 	mov	a,#__str_37
   0947 C0 E0              2530 	push	acc
   0949 74s06              2531 	mov	a,#(__str_37 >> 8)
   094B C0 E0              2532 	push	acc
                           2533 ;	genCall
   094D 12s00r00           2534 	lcall	_printf_tiny
   0950 15 81              2535 	dec	sp
   0952 15 81              2536 	dec	sp
   0954 D0 05              2537 	pop	ar5
   0956 D0 04              2538 	pop	ar4
   0958 D0 03              2539 	pop	ar3
   095A D0 02              2540 	pop	ar2
                           2541 ;	main.c:211: delay_ms(500);      // Wait for 500 ms
                           2542 ;	genCall
                           2543 ;	Peephole 182.b	used 16 bit load of dptr
   095C 90 01 F4           2544 	mov	dptr,#0x01F4
   095F C0 02              2545 	push	ar2
   0961 C0 03              2546 	push	ar3
   0963 C0 04              2547 	push	ar4
   0965 C0 05              2548 	push	ar5
   0967 12s00r00           2549 	lcall	_delay_ms
   096A D0 05              2550 	pop	ar5
   096C D0 04              2551 	pop	ar4
   096E D0 03              2552 	pop	ar3
   0970 D0 02              2553 	pop	ar2
                           2554 ;	main.c:212: cnt[num]=0;         // Disable the counter by putting 0 in cnt array
                           2555 ;	genPlus
                           2556 ;	Peephole 236.g	used r3 instead of ar3
   0972 EB                 2557 	mov	a,r3
   0973 24r03              2558 	add	a,#_cnt
   0975 F5 82              2559 	mov	dpl,a
                           2560 ;	Peephole 236.g	used r4 instead of ar4
   0977 EC                 2561 	mov	a,r4
   0978 34s00              2562 	addc	a,#(_cnt >> 8)
   097A F5 83              2563 	mov	dph,a
                           2564 ;	genPointerSet
                           2565 ;     genFarPointerSet
                           2566 ;	Peephole 181	changed mov to clr
   097C E4                 2567 	clr	a
   097D F0                 2568 	movx	@dptr,a
                           2569 ;	main.c:214: lcdgotoxy(num+1,1);
                           2570 ;	genAssign
   097E 90s00r00           2571 	mov	dptr,#_lcdgotoxy_PARM_2
   0981 74 01              2572 	mov	a,#0x01
   0983 F0                 2573 	movx	@dptr,a
                           2574 ;	genCall
   0984 8D 82              2575 	mov	dpl,r5
   0986 C0 02              2576 	push	ar2
   0988 C0 03              2577 	push	ar3
   098A C0 04              2578 	push	ar4
   098C 12s00r00           2579 	lcall	_lcdgotoxy
   098F D0 04              2580 	pop	ar4
   0991 D0 03              2581 	pop	ar3
   0993 D0 02              2582 	pop	ar2
                           2583 ;	main.c:215: lcdputstr("Timer");
                           2584 ;	genCall
                           2585 ;	Peephole 182.a	used 16 bit load of DPTR
   0995 90s00r08           2586 	mov	dptr,#__str_2
   0998 75 F0 80           2587 	mov	b,#0x80
   099B C0 02              2588 	push	ar2
   099D C0 03              2589 	push	ar3
   099F C0 04              2590 	push	ar4
   09A1 12s00r00           2591 	lcall	_lcdputstr
   09A4 D0 04              2592 	pop	ar4
   09A6 D0 03              2593 	pop	ar3
   09A8 D0 02              2594 	pop	ar2
                           2595 ;	main.c:216: lcdputch(name[num]);
                           2596 ;	genPlus
                           2597 ;	Peephole 236.g	used r3 instead of ar3
   09AA EB                 2598 	mov	a,r3
   09AB 24r23              2599 	add	a,#_main_name_1_1
   09AD F5 82              2600 	mov	dpl,a
                           2601 ;	Peephole 236.g	used r4 instead of ar4
   09AF EC                 2602 	mov	a,r4
   09B0 34s00              2603 	addc	a,#(_main_name_1_1 >> 8)
   09B2 F5 83              2604 	mov	dph,a
                           2605 ;	genPointerGet
                           2606 ;	genFarPointerGet
   09B4 E0                 2607 	movx	a,@dptr
                           2608 ;	genCall
   09B5 FB                 2609 	mov	r3,a
                           2610 ;	Peephole 244.c	loading dpl from a instead of r3
   09B6 F5 82              2611 	mov	dpl,a
   09B8 C0 02              2612 	push	ar2
   09BA 12s00r00           2613 	lcall	_lcdputch
   09BD D0 02              2614 	pop	ar2
                           2615 ;	main.c:217: lcdputstr("-D");
                           2616 ;	genCall
                           2617 ;	Peephole 182.a	used 16 bit load of DPTR
   09BF 90s00r0E           2618 	mov	dptr,#__str_3
   09C2 75 F0 80           2619 	mov	b,#0x80
   09C5 C0 02              2620 	push	ar2
   09C7 12s00r00           2621 	lcall	_lcdputstr
   09CA D0 02              2622 	pop	ar2
                           2623 ;	main.c:218: EA=1;
                           2624 ;	genAssign
   09CC D2 AF              2625 	setb	_EA
   09CE 02s0Dr37           2626 	ljmp	00235$
   09D1                    2627 00218$:
                           2628 ;	main.c:221: else if(store=='7')
                           2629 ;	genCmpEq
                           2630 ;	gencjneshort
   09D1 BA 37 02           2631 	cjne	r2,#0x37,00480$
   09D4 80 03              2632 	sjmp	00481$
   09D6                    2633 00480$:
   09D6 02s0Cr8E           2634 	ljmp	00215$
   09D9                    2635 00481$:
                           2636 ;	main.c:223: printf_tiny("\n\n\r\t Select Character code between 0 to 7: \t");
                           2637 ;	genIpush
   09D9 C0 02              2638 	push	ar2
   09DB 74r12              2639 	mov	a,#__str_38
   09DD C0 E0              2640 	push	acc
   09DF 74s07              2641 	mov	a,#(__str_38 >> 8)
   09E1 C0 E0              2642 	push	acc
                           2643 ;	genCall
   09E3 12s00r00           2644 	lcall	_printf_tiny
   09E6 15 81              2645 	dec	sp
   09E8 15 81              2646 	dec	sp
   09EA D0 02              2647 	pop	ar2
                           2648 ;	main.c:225: do
   09EC                    2649 00187$:
                           2650 ;	main.c:227: gets(c);
                           2651 ;	genCall
                           2652 ;	Peephole 182.a	used 16 bit load of DPTR
   09EC 90s00r1A           2653 	mov	dptr,#_main_c_1_1
   09EF 75 F0 00           2654 	mov	b,#0x00
   09F2 C0 02              2655 	push	ar2
   09F4 12s00r00           2656 	lcall	_gets
   09F7 D0 02              2657 	pop	ar2
                           2658 ;	main.c:228: num=atoi(c);
                           2659 ;	genCall
                           2660 ;	Peephole 182.a	used 16 bit load of DPTR
   09F9 90s00r1A           2661 	mov	dptr,#_main_c_1_1
   09FC 75 F0 00           2662 	mov	b,#0x00
   09FF C0 02              2663 	push	ar2
   0A01 12s00r00           2664 	lcall	_atoi
   0A04 AB 82              2665 	mov	r3,dpl
   0A06 AC 83              2666 	mov	r4,dph
   0A08 D0 02              2667 	pop	ar2
                           2668 ;	main.c:229: if(num>7){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 7");}
                           2669 ;	genCmpGt
                           2670 ;	genCmp
   0A0A C3                 2671 	clr	c
   0A0B 74 07              2672 	mov	a,#0x07
   0A0D 9B                 2673 	subb	a,r3
                           2674 ;	Peephole 159	avoided xrl during execution
   0A0E 74 80              2675 	mov	a,#(0x00 ^ 0x80)
   0A10 8C F0              2676 	mov	b,r4
   0A12 63 F0 80           2677 	xrl	b,#0x80
   0A15 95 F0              2678 	subb	a,b
   0A17 E4                 2679 	clr	a
   0A18 33                 2680 	rlc	a
                           2681 ;	genIfx
   0A19 FD                 2682 	mov	r5,a
                           2683 ;	Peephole 105	removed redundant mov
                           2684 ;	genIfxJump
                           2685 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0A1A 60 1F              2686 	jz	00188$
                           2687 ;	Peephole 300	removed redundant label 00482$
                           2688 ;	genIpush
   0A1C C0 02              2689 	push	ar2
   0A1E C0 03              2690 	push	ar3
   0A20 C0 04              2691 	push	ar4
   0A22 C0 05              2692 	push	ar5
   0A24 74r3F              2693 	mov	a,#__str_39
   0A26 C0 E0              2694 	push	acc
   0A28 74s07              2695 	mov	a,#(__str_39 >> 8)
   0A2A C0 E0              2696 	push	acc
                           2697 ;	genCall
   0A2C 12s00r00           2698 	lcall	_printf_tiny
   0A2F 15 81              2699 	dec	sp
   0A31 15 81              2700 	dec	sp
   0A33 D0 05              2701 	pop	ar5
   0A35 D0 04              2702 	pop	ar4
   0A37 D0 03              2703 	pop	ar3
   0A39 D0 02              2704 	pop	ar2
   0A3B                    2705 00188$:
                           2706 ;	main.c:230: }while(num>7);
                           2707 ;	genIfx
   0A3B ED                 2708 	mov	a,r5
                           2709 ;	genIfxJump
                           2710 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0A3C 70 AE              2711 	jnz	00187$
                           2712 ;	Peephole 300	removed redundant label 00483$
                           2713 ;	main.c:231: ccode=num;
                           2714 ;	genCast
                           2715 ;	main.c:234: printf_tiny("\n\n\r\t Enter pixel map in HEX in HH format from 00 to 1F: \t");
                           2716 ;	genIpush
   0A3E C0 02              2717 	push	ar2
   0A40 C0 03              2718 	push	ar3
   0A42 74r74              2719 	mov	a,#__str_40
   0A44 C0 E0              2720 	push	acc
   0A46 74s07              2721 	mov	a,#(__str_40 >> 8)
   0A48 C0 E0              2722 	push	acc
                           2723 ;	genCall
   0A4A 12s00r00           2724 	lcall	_printf_tiny
   0A4D 15 81              2725 	dec	sp
   0A4F 15 81              2726 	dec	sp
   0A51 D0 03              2727 	pop	ar3
   0A53 D0 02              2728 	pop	ar2
                           2729 ;	main.c:235: for(i=0;i<8;i++)
                           2730 ;	genAssign
   0A55 7C 00              2731 	mov	r4,#0x00
   0A57 7D 00              2732 	mov	r5,#0x00
   0A59                    2733 00303$:
                           2734 ;	genCmpLt
                           2735 ;	genCmp
   0A59 C3                 2736 	clr	c
   0A5A EC                 2737 	mov	a,r4
   0A5B 94 08              2738 	subb	a,#0x08
   0A5D ED                 2739 	mov	a,r5
   0A5E 64 80              2740 	xrl	a,#0x80
   0A60 94 80              2741 	subb	a,#0x80
                           2742 ;	genIfxJump
   0A62 40 03              2743 	jc	00484$
   0A64 02s0Cr74           2744 	ljmp	00306$
   0A67                    2745 00484$:
                           2746 ;	main.c:237: printf_tiny("\n\r\t Data in row number %d: \t",i);
                           2747 ;	genIpush
   0A67 C0 02              2748 	push	ar2
   0A69 C0 03              2749 	push	ar3
   0A6B C0 04              2750 	push	ar4
   0A6D C0 05              2751 	push	ar5
   0A6F C0 04              2752 	push	ar4
   0A71 C0 05              2753 	push	ar5
                           2754 ;	genIpush
   0A73 74rAE              2755 	mov	a,#__str_41
   0A75 C0 E0              2756 	push	acc
   0A77 74s07              2757 	mov	a,#(__str_41 >> 8)
   0A79 C0 E0              2758 	push	acc
                           2759 ;	genCall
   0A7B 12s00r00           2760 	lcall	_printf_tiny
   0A7E E5 81              2761 	mov	a,sp
   0A80 24 FC              2762 	add	a,#0xfc
   0A82 F5 81              2763 	mov	sp,a
   0A84 D0 05              2764 	pop	ar5
   0A86 D0 04              2765 	pop	ar4
   0A88 D0 03              2766 	pop	ar3
   0A8A D0 02              2767 	pop	ar2
                           2768 ;	main.c:238: do
   0A8C                    2769 00192$:
                           2770 ;	main.c:240: gets(c);
                           2771 ;	genCall
                           2772 ;	Peephole 182.a	used 16 bit load of DPTR
   0A8C 90s00r1A           2773 	mov	dptr,#_main_c_1_1
   0A8F 75 F0 00           2774 	mov	b,#0x00
   0A92 C0 02              2775 	push	ar2
   0A94 C0 03              2776 	push	ar3
   0A96 C0 04              2777 	push	ar4
   0A98 C0 05              2778 	push	ar5
   0A9A 12s00r00           2779 	lcall	_gets
   0A9D D0 05              2780 	pop	ar5
   0A9F D0 04              2781 	pop	ar4
   0AA1 D0 03              2782 	pop	ar3
   0AA3 D0 02              2783 	pop	ar2
                           2784 ;	main.c:241: num=atoh_data(c);// atoh_data function converts ascii values to the HEX numbers
                           2785 ;	genCall
                           2786 ;	Peephole 182.a	used 16 bit load of DPTR
   0AA5 90s00r1A           2787 	mov	dptr,#_main_c_1_1
   0AA8 75 F0 00           2788 	mov	b,#0x00
   0AAB C0 02              2789 	push	ar2
   0AAD C0 03              2790 	push	ar3
   0AAF C0 04              2791 	push	ar4
   0AB1 C0 05              2792 	push	ar5
   0AB3 12s00r00           2793 	lcall	_atoh_data
   0AB6 AE 82              2794 	mov	r6,dpl
   0AB8 AF 83              2795 	mov	r7,dph
   0ABA D0 05              2796 	pop	ar5
   0ABC D0 04              2797 	pop	ar4
   0ABE D0 03              2798 	pop	ar3
   0AC0 D0 02              2799 	pop	ar2
                           2800 ;	main.c:243: if(num>31){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid HEX number between 00 to 1F in HH format:\t");}
                           2801 ;	genCmpGt
                           2802 ;	genCmp
   0AC2 C3                 2803 	clr	c
   0AC3 74 1F              2804 	mov	a,#0x1F
   0AC5 9E                 2805 	subb	a,r6
                           2806 ;	Peephole 159	avoided xrl during execution
   0AC6 74 80              2807 	mov	a,#(0x00 ^ 0x80)
   0AC8 8F F0              2808 	mov	b,r7
   0ACA 63 F0 80           2809 	xrl	b,#0x80
   0ACD 95 F0              2810 	subb	a,b
   0ACF E4                 2811 	clr	a
   0AD0 33                 2812 	rlc	a
                           2813 ;	genIfx
   0AD1 F8                 2814 	mov	r0,a
                           2815 ;	Peephole 105	removed redundant mov
                           2816 ;	genIfxJump
                           2817 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0AD2 60 2B              2818 	jz	00193$
                           2819 ;	Peephole 300	removed redundant label 00485$
                           2820 ;	genIpush
   0AD4 C0 02              2821 	push	ar2
   0AD6 C0 03              2822 	push	ar3
   0AD8 C0 04              2823 	push	ar4
   0ADA C0 05              2824 	push	ar5
   0ADC C0 06              2825 	push	ar6
   0ADE C0 07              2826 	push	ar7
   0AE0 C0 00              2827 	push	ar0
   0AE2 74rCB              2828 	mov	a,#__str_42
   0AE4 C0 E0              2829 	push	acc
   0AE6 74s07              2830 	mov	a,#(__str_42 >> 8)
   0AE8 C0 E0              2831 	push	acc
                           2832 ;	genCall
   0AEA 12s00r00           2833 	lcall	_printf_tiny
   0AED 15 81              2834 	dec	sp
   0AEF 15 81              2835 	dec	sp
   0AF1 D0 00              2836 	pop	ar0
   0AF3 D0 07              2837 	pop	ar7
   0AF5 D0 06              2838 	pop	ar6
   0AF7 D0 05              2839 	pop	ar5
   0AF9 D0 04              2840 	pop	ar4
   0AFB D0 03              2841 	pop	ar3
   0AFD D0 02              2842 	pop	ar2
   0AFF                    2843 00193$:
                           2844 ;	main.c:244: }while(num>31);
                           2845 ;	genIfx
   0AFF E8                 2846 	mov	a,r0
                           2847 ;	genIfxJump
   0B00 60 03              2848 	jz	00486$
   0B02 02s0Ar8C           2849 	ljmp	00192$
   0B05                    2850 00486$:
                           2851 ;	main.c:246: row_val[i]=num;         // Store data from user into row_val[] array
                           2852 ;	genPlus
                           2853 ;	Peephole 236.g	used r4 instead of ar4
   0B05 EC                 2854 	mov	a,r4
   0B06 24r2D              2855 	add	a,#_main_row_val_1_1
   0B08 F5 82              2856 	mov	dpl,a
                           2857 ;	Peephole 236.g	used r5 instead of ar5
   0B0A ED                 2858 	mov	a,r5
   0B0B 34s00              2859 	addc	a,#(_main_row_val_1_1 >> 8)
   0B0D F5 83              2860 	mov	dph,a
                           2861 ;	genCast
                           2862 ;	genPointerSet
                           2863 ;     genFarPointerSet
   0B0F EE                 2864 	mov	a,r6
   0B10 F0                 2865 	movx	@dptr,a
                           2866 ;	main.c:247: disp[i]=atob(num);
                           2867 ;	genPlus
                           2868 ;	Peephole 236.g	used r4 instead of ar4
   0B11 EC                 2869 	mov	a,r4
   0B12 24r35              2870 	add	a,#_main_disp_1_1
   0B14 FF                 2871 	mov	r7,a
                           2872 ;	Peephole 236.g	used r5 instead of ar5
   0B15 ED                 2873 	mov	a,r5
   0B16 34s00              2874 	addc	a,#(_main_disp_1_1 >> 8)
   0B18 F8                 2875 	mov	r0,a
                           2876 ;	genCall
   0B19 8E 82              2877 	mov	dpl,r6
   0B1B C0 02              2878 	push	ar2
   0B1D C0 03              2879 	push	ar3
   0B1F C0 04              2880 	push	ar4
   0B21 C0 05              2881 	push	ar5
   0B23 C0 07              2882 	push	ar7
   0B25 C0 00              2883 	push	ar0
   0B27 12s00r00           2884 	lcall	_atob
   0B2A AE 82              2885 	mov	r6,dpl
   0B2C D0 00              2886 	pop	ar0
   0B2E D0 07              2887 	pop	ar7
   0B30 D0 05              2888 	pop	ar5
   0B32 D0 04              2889 	pop	ar4
   0B34 D0 03              2890 	pop	ar3
   0B36 D0 02              2891 	pop	ar2
                           2892 ;	genPointerSet
                           2893 ;     genFarPointerSet
   0B38 8F 82              2894 	mov	dpl,r7
   0B3A 88 83              2895 	mov	dph,r0
   0B3C EE                 2896 	mov	a,r6
   0B3D F0                 2897 	movx	@dptr,a
                           2898 ;	main.c:248: printf_tiny("\n\r\t\t      \t12345");
                           2899 ;	genIpush
   0B3E C0 02              2900 	push	ar2
   0B40 C0 03              2901 	push	ar3
   0B42 C0 04              2902 	push	ar4
   0B44 C0 05              2903 	push	ar5
   0B46 74r15              2904 	mov	a,#__str_43
   0B48 C0 E0              2905 	push	acc
   0B4A 74s08              2906 	mov	a,#(__str_43 >> 8)
   0B4C C0 E0              2907 	push	acc
                           2908 ;	genCall
   0B4E 12s00r00           2909 	lcall	_printf_tiny
   0B51 15 81              2910 	dec	sp
   0B53 15 81              2911 	dec	sp
   0B55 D0 05              2912 	pop	ar5
   0B57 D0 04              2913 	pop	ar4
   0B59 D0 03              2914 	pop	ar3
   0B5B D0 02              2915 	pop	ar2
                           2916 ;	main.c:249: for(j=0;j<=i;j++)          // This fop loop is used for displaying the contents of the ROW_val on the screen
                           2917 ;	genAssign
   0B5D 8C 06              2918 	mov	ar6,r4
   0B5F 8D 07              2919 	mov	ar7,r5
                           2920 ;	genAssign
   0B61 78 00              2921 	mov	r0,#0x00
   0B63 79 00              2922 	mov	r1,#0x00
   0B65                    2923 00299$:
                           2924 ;	genCmpGt
                           2925 ;	genCmp
   0B65 C3                 2926 	clr	c
   0B66 EE                 2927 	mov	a,r6
   0B67 98                 2928 	subb	a,r0
   0B68 EF                 2929 	mov	a,r7
   0B69 64 80              2930 	xrl	a,#0x80
   0B6B 89 F0              2931 	mov	b,r1
   0B6D 63 F0 80           2932 	xrl	b,#0x80
   0B70 95 F0              2933 	subb	a,b
                           2934 ;	genIfxJump
   0B72 50 03              2935 	jnc	00487$
   0B74 02s0Cr6A           2936 	ljmp	00305$
   0B77                    2937 00487$:
                           2938 ;	main.c:250: {  printf_tiny("\n\r\t\tROW %d:\t",j);
                           2939 ;	genIpush
   0B77 C0 02              2940 	push	ar2
   0B79 C0 03              2941 	push	ar3
   0B7B C0 06              2942 	push	ar6
   0B7D C0 07              2943 	push	ar7
   0B7F C0 00              2944 	push	ar0
   0B81 C0 01              2945 	push	ar1
   0B83 C0 00              2946 	push	ar0
   0B85 C0 01              2947 	push	ar1
                           2948 ;	genIpush
   0B87 74r26              2949 	mov	a,#__str_44
   0B89 C0 E0              2950 	push	acc
   0B8B 74s08              2951 	mov	a,#(__str_44 >> 8)
   0B8D C0 E0              2952 	push	acc
                           2953 ;	genCall
   0B8F 12s00r00           2954 	lcall	_printf_tiny
   0B92 E5 81              2955 	mov	a,sp
   0B94 24 FC              2956 	add	a,#0xfc
   0B96 F5 81              2957 	mov	sp,a
   0B98 D0 01              2958 	pop	ar1
   0B9A D0 00              2959 	pop	ar0
   0B9C D0 07              2960 	pop	ar7
   0B9E D0 06              2961 	pop	ar6
   0BA0 D0 03              2962 	pop	ar3
   0BA2 D0 02              2963 	pop	ar2
                           2964 ;	main.c:251: for(k=3;k<8;k++)
                           2965 ;	genPlus
                           2966 ;	Peephole 236.g	used r0 instead of ar0
   0BA4 E8                 2967 	mov	a,r0
   0BA5 24r35              2968 	add	a,#_main_disp_1_1
   0BA7 FC                 2969 	mov	r4,a
                           2970 ;	Peephole 236.g	used r1 instead of ar1
   0BA8 E9                 2971 	mov	a,r1
   0BA9 34s00              2972 	addc	a,#(_main_disp_1_1 >> 8)
   0BAB FD                 2973 	mov	r5,a
                           2974 ;	genAssign
   0BAC 75*00 03           2975 	mov	_main_sloc0_1_0,#0x03
   0BAF E4                 2976 	clr	a
   0BB0 F5*01              2977 	mov	(_main_sloc0_1_0 + 1),a
   0BB2                    2978 00295$:
                           2979 ;	genCmpLt
                           2980 ;	genCmp
   0BB2 C3                 2981 	clr	c
   0BB3 E5*00              2982 	mov	a,_main_sloc0_1_0
   0BB5 94 08              2983 	subb	a,#0x08
   0BB7 E5*01              2984 	mov	a,(_main_sloc0_1_0 + 1)
   0BB9 64 80              2985 	xrl	a,#0x80
   0BBB 94 80              2986 	subb	a,#0x80
                           2987 ;	genIfxJump
   0BBD 40 03              2988 	jc	00488$
   0BBF 02s0Cr62           2989 	ljmp	00301$
   0BC2                    2990 00488$:
                           2991 ;	main.c:253: if((disp[j]>>k)&1)
                           2992 ;	genIpush
   0BC2 C0 03              2993 	push	ar3
                           2994 ;	genPointerGet
                           2995 ;	genFarPointerGet
   0BC4 8C 82              2996 	mov	dpl,r4
   0BC6 8D 83              2997 	mov	dph,r5
   0BC8 E0                 2998 	movx	a,@dptr
   0BC9 FB                 2999 	mov	r3,a
                           3000 ;	genRightShift
   0BCA 85*00 F0           3001 	mov	b,_main_sloc0_1_0
   0BCD 05 F0              3002 	inc	b
   0BCF EB                 3003 	mov	a,r3
   0BD0 80 02              3004 	sjmp	00490$
   0BD2                    3005 00489$:
   0BD2 C3                 3006 	clr	c
   0BD3 13                 3007 	rrc	a
   0BD4                    3008 00490$:
   0BD4 D5 F0 FB           3009 	djnz	b,00489$
                           3010 ;	genAnd
   0BD7 54 01              3011 	anl	a,#0x01
                           3012 ;	genIpop
   0BD9 D0 03              3013 	pop	ar3
                           3014 ;	genIfx
                           3015 ;	genIfxJump
                           3016 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0BDB 60 3E              3017 	jz	00196$
                           3018 ;	Peephole 300	removed redundant label 00491$
                           3019 ;	main.c:254: {printf("%c",0xFF);}
                           3020 ;	genIpush
   0BDD C0 02              3021 	push	ar2
   0BDF C0 03              3022 	push	ar3
   0BE1 C0 04              3023 	push	ar4
   0BE3 C0 05              3024 	push	ar5
   0BE5 C0 06              3025 	push	ar6
   0BE7 C0 07              3026 	push	ar7
   0BE9 C0 00              3027 	push	ar0
   0BEB C0 01              3028 	push	ar1
   0BED 74 FF              3029 	mov	a,#0xFF
   0BEF C0 E0              3030 	push	acc
                           3031 ;	Peephole 181	changed mov to clr
   0BF1 E4                 3032 	clr	a
   0BF2 C0 E0              3033 	push	acc
                           3034 ;	genIpush
   0BF4 74r33              3035 	mov	a,#__str_45
   0BF6 C0 E0              3036 	push	acc
   0BF8 74s08              3037 	mov	a,#(__str_45 >> 8)
   0BFA C0 E0              3038 	push	acc
   0BFC 74 80              3039 	mov	a,#0x80
   0BFE C0 E0              3040 	push	acc
                           3041 ;	genCall
   0C00 12s00r00           3042 	lcall	_printf
   0C03 E5 81              3043 	mov	a,sp
   0C05 24 FB              3044 	add	a,#0xfb
   0C07 F5 81              3045 	mov	sp,a
   0C09 D0 01              3046 	pop	ar1
   0C0B D0 00              3047 	pop	ar0
   0C0D D0 07              3048 	pop	ar7
   0C0F D0 06              3049 	pop	ar6
   0C11 D0 05              3050 	pop	ar5
   0C13 D0 04              3051 	pop	ar4
   0C15 D0 03              3052 	pop	ar3
   0C17 D0 02              3053 	pop	ar2
                           3054 ;	Peephole 112.b	changed ljmp to sjmp
   0C19 80 3C              3055 	sjmp	00297$
   0C1B                    3056 00196$:
                           3057 ;	main.c:256: {printf("%c",'_');}
                           3058 ;	genIpush
   0C1B C0 02              3059 	push	ar2
   0C1D C0 03              3060 	push	ar3
   0C1F C0 04              3061 	push	ar4
   0C21 C0 05              3062 	push	ar5
   0C23 C0 06              3063 	push	ar6
   0C25 C0 07              3064 	push	ar7
   0C27 C0 00              3065 	push	ar0
   0C29 C0 01              3066 	push	ar1
   0C2B 74 5F              3067 	mov	a,#0x5F
   0C2D C0 E0              3068 	push	acc
                           3069 ;	Peephole 181	changed mov to clr
   0C2F E4                 3070 	clr	a
   0C30 C0 E0              3071 	push	acc
                           3072 ;	genIpush
   0C32 74r33              3073 	mov	a,#__str_45
   0C34 C0 E0              3074 	push	acc
   0C36 74s08              3075 	mov	a,#(__str_45 >> 8)
   0C38 C0 E0              3076 	push	acc
   0C3A 74 80              3077 	mov	a,#0x80
   0C3C C0 E0              3078 	push	acc
                           3079 ;	genCall
   0C3E 12s00r00           3080 	lcall	_printf
   0C41 E5 81              3081 	mov	a,sp
   0C43 24 FB              3082 	add	a,#0xfb
   0C45 F5 81              3083 	mov	sp,a
   0C47 D0 01              3084 	pop	ar1
   0C49 D0 00              3085 	pop	ar0
   0C4B D0 07              3086 	pop	ar7
   0C4D D0 06              3087 	pop	ar6
   0C4F D0 05              3088 	pop	ar5
   0C51 D0 04              3089 	pop	ar4
   0C53 D0 03              3090 	pop	ar3
   0C55 D0 02              3091 	pop	ar2
   0C57                    3092 00297$:
                           3093 ;	main.c:251: for(k=3;k<8;k++)
                           3094 ;	genPlus
                           3095 ;     genPlusIncr
   0C57 05*00              3096 	inc	_main_sloc0_1_0
   0C59 E4                 3097 	clr	a
   0C5A B5*00 02           3098 	cjne	a,_main_sloc0_1_0,00492$
   0C5D 05*01              3099 	inc	(_main_sloc0_1_0 + 1)
   0C5F                    3100 00492$:
   0C5F 02s0BrB2           3101 	ljmp	00295$
   0C62                    3102 00301$:
                           3103 ;	main.c:249: for(j=0;j<=i;j++)          // This fop loop is used for displaying the contents of the ROW_val on the screen
                           3104 ;	genPlus
                           3105 ;     genPlusIncr
   0C62 08                 3106 	inc	r0
   0C63 B8 00 01           3107 	cjne	r0,#0x00,00493$
   0C66 09                 3108 	inc	r1
   0C67                    3109 00493$:
   0C67 02s0Br65           3110 	ljmp	00299$
   0C6A                    3111 00305$:
                           3112 ;	main.c:235: for(i=0;i<8;i++)
                           3113 ;	genPlus
                           3114 ;     genPlusIncr
   0C6A 74 01              3115 	mov	a,#0x01
                           3116 ;	Peephole 236.a	used r6 instead of ar6
   0C6C 2E                 3117 	add	a,r6
   0C6D FC                 3118 	mov	r4,a
                           3119 ;	Peephole 181	changed mov to clr
   0C6E E4                 3120 	clr	a
                           3121 ;	Peephole 236.b	used r7 instead of ar7
   0C6F 3F                 3122 	addc	a,r7
   0C70 FD                 3123 	mov	r5,a
   0C71 02s0Ar59           3124 	ljmp	00303$
   0C74                    3125 00306$:
                           3126 ;	main.c:260: lcdcreatechar(ccode,row_val);           // After getting all 7 values, new character  is storedin CGRAM
                           3127 ;	genCast
   0C74 90s00r00           3128 	mov	dptr,#_lcdcreatechar_PARM_2
   0C77 74r2D              3129 	mov	a,#_main_row_val_1_1
   0C79 F0                 3130 	movx	@dptr,a
   0C7A A3                 3131 	inc	dptr
   0C7B 74s00              3132 	mov	a,#(_main_row_val_1_1 >> 8)
   0C7D F0                 3133 	movx	@dptr,a
   0C7E A3                 3134 	inc	dptr
   0C7F 74 00              3135 	mov	a,#0x0
   0C81 F0                 3136 	movx	@dptr,a
                           3137 ;	genCall
   0C82 8B 82              3138 	mov	dpl,r3
   0C84 C0 02              3139 	push	ar2
   0C86 12s00r00           3140 	lcall	_lcdcreatechar
   0C89 D0 02              3141 	pop	ar2
   0C8B 02s0Dr37           3142 	ljmp	00235$
   0C8E                    3143 00215$:
                           3144 ;	main.c:265: else if(store=='8')
                           3145 ;	genCmpEq
                           3146 ;	gencjneshort
   0C8E BA 38 02           3147 	cjne	r2,#0x38,00494$
   0C91 80 03              3148 	sjmp	00495$
   0C93                    3149 00494$:
   0C93 02s0Dr12           3150 	ljmp	00212$
   0C96                    3151 00495$:
                           3152 ;	main.c:267: printf_tiny("\n\n\r\t Select Character code between 0 to 7 to display: \t");
                           3153 ;	genIpush
   0C96 C0 02              3154 	push	ar2
   0C98 74r36              3155 	mov	a,#__str_46
   0C9A C0 E0              3156 	push	acc
   0C9C 74s08              3157 	mov	a,#(__str_46 >> 8)
   0C9E C0 E0              3158 	push	acc
                           3159 ;	genCall
   0CA0 12s00r00           3160 	lcall	_printf_tiny
   0CA3 15 81              3161 	dec	sp
   0CA5 15 81              3162 	dec	sp
   0CA7 D0 02              3163 	pop	ar2
                           3164 ;	main.c:268: do
   0CA9                    3165 00200$:
                           3166 ;	main.c:270: gets(c);
                           3167 ;	genCall
                           3168 ;	Peephole 182.a	used 16 bit load of DPTR
   0CA9 90s00r1A           3169 	mov	dptr,#_main_c_1_1
   0CAC 75 F0 00           3170 	mov	b,#0x00
   0CAF C0 02              3171 	push	ar2
   0CB1 12s00r00           3172 	lcall	_gets
   0CB4 D0 02              3173 	pop	ar2
                           3174 ;	main.c:271: num=atoi(c);
                           3175 ;	genCall
                           3176 ;	Peephole 182.a	used 16 bit load of DPTR
   0CB6 90s00r1A           3177 	mov	dptr,#_main_c_1_1
   0CB9 75 F0 00           3178 	mov	b,#0x00
   0CBC C0 02              3179 	push	ar2
   0CBE 12s00r00           3180 	lcall	_atoi
   0CC1 AB 82              3181 	mov	r3,dpl
   0CC3 AC 83              3182 	mov	r4,dph
   0CC5 D0 02              3183 	pop	ar2
                           3184 ;	main.c:272: if(num>7){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 7");}
                           3185 ;	genCmpGt
                           3186 ;	genCmp
   0CC7 C3                 3187 	clr	c
   0CC8 74 07              3188 	mov	a,#0x07
   0CCA 9B                 3189 	subb	a,r3
                           3190 ;	Peephole 159	avoided xrl during execution
   0CCB 74 80              3191 	mov	a,#(0x00 ^ 0x80)
   0CCD 8C F0              3192 	mov	b,r4
   0CCF 63 F0 80           3193 	xrl	b,#0x80
   0CD2 95 F0              3194 	subb	a,b
   0CD4 E4                 3195 	clr	a
   0CD5 33                 3196 	rlc	a
                           3197 ;	genIfx
   0CD6 FD                 3198 	mov	r5,a
                           3199 ;	Peephole 105	removed redundant mov
                           3200 ;	genIfxJump
                           3201 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0CD7 60 1F              3202 	jz	00201$
                           3203 ;	Peephole 300	removed redundant label 00496$
                           3204 ;	genIpush
   0CD9 C0 02              3205 	push	ar2
   0CDB C0 03              3206 	push	ar3
   0CDD C0 04              3207 	push	ar4
   0CDF C0 05              3208 	push	ar5
   0CE1 74r3F              3209 	mov	a,#__str_39
   0CE3 C0 E0              3210 	push	acc
   0CE5 74s07              3211 	mov	a,#(__str_39 >> 8)
   0CE7 C0 E0              3212 	push	acc
                           3213 ;	genCall
   0CE9 12s00r00           3214 	lcall	_printf_tiny
   0CEC 15 81              3215 	dec	sp
   0CEE 15 81              3216 	dec	sp
   0CF0 D0 05              3217 	pop	ar5
   0CF2 D0 04              3218 	pop	ar4
   0CF4 D0 03              3219 	pop	ar3
   0CF6 D0 02              3220 	pop	ar2
   0CF8                    3221 00201$:
                           3222 ;	main.c:273: }while(num>7);
                           3223 ;	genIfx
   0CF8 ED                 3224 	mov	a,r5
                           3225 ;	genIfxJump
                           3226 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0CF9 70 AE              3227 	jnz	00200$
                           3228 ;	Peephole 300	removed redundant label 00497$
                           3229 ;	main.c:274: ccode=num;
                           3230 ;	genCast
                           3231 ;	main.c:275: lcd_dis_cus(ccode,2,3);
                           3232 ;	genAssign
   0CFB 90s00r00           3233 	mov	dptr,#_lcd_dis_cus_PARM_2
   0CFE 74 02              3234 	mov	a,#0x02
   0D00 F0                 3235 	movx	@dptr,a
                           3236 ;	genAssign
   0D01 90s00r00           3237 	mov	dptr,#_lcd_dis_cus_PARM_3
   0D04 74 03              3238 	mov	a,#0x03
   0D06 F0                 3239 	movx	@dptr,a
                           3240 ;	genCall
   0D07 8B 82              3241 	mov	dpl,r3
   0D09 C0 02              3242 	push	ar2
   0D0B 12s00r00           3243 	lcall	_lcd_dis_cus
   0D0E D0 02              3244 	pop	ar2
                           3245 ;	Peephole 112.b	changed ljmp to sjmp
   0D10 80 25              3246 	sjmp	00235$
   0D12                    3247 00212$:
                           3248 ;	main.c:280: else if(store=='q')
                           3249 ;	genCmpEq
                           3250 ;	gencjneshort
                           3251 ;	Peephole 112.b	changed ljmp to sjmp
                           3252 ;	Peephole 198.b	optimized misc jump sequence
   0D12 BA 71 0C           3253 	cjne	r2,#0x71,00209$
                           3254 ;	Peephole 200.b	removed redundant sjmp
                           3255 ;	Peephole 300	removed redundant label 00498$
                           3256 ;	Peephole 300	removed redundant label 00499$
                           3257 ;	main.c:282: lcdputcmd(1);
                           3258 ;	genCall
   0D15 75 82 01           3259 	mov	dpl,#0x01
   0D18 C0 02              3260 	push	ar2
   0D1A 12s00r00           3261 	lcall	_lcdputcmd
   0D1D D0 02              3262 	pop	ar2
                           3263 ;	Peephole 112.b	changed ljmp to sjmp
   0D1F 80 16              3264 	sjmp	00235$
   0D21                    3265 00209$:
                           3266 ;	main.c:286: else if(store=='c')
                           3267 ;	genCmpEq
                           3268 ;	gencjneshort
                           3269 ;	Peephole 112.b	changed ljmp to sjmp
                           3270 ;	Peephole 198.b	optimized misc jump sequence
   0D21 BA 63 09           3271 	cjne	r2,#0x63,00206$
                           3272 ;	Peephole 200.b	removed redundant sjmp
                           3273 ;	Peephole 300	removed redundant label 00500$
                           3274 ;	Peephole 300	removed redundant label 00501$
                           3275 ;	main.c:288: CGRAM_dump();
                           3276 ;	genCall
   0D24 C0 02              3277 	push	ar2
   0D26 12s00r00           3278 	lcall	_CGRAM_dump
   0D29 D0 02              3279 	pop	ar2
                           3280 ;	Peephole 112.b	changed ljmp to sjmp
   0D2B 80 0A              3281 	sjmp	00235$
   0D2D                    3282 00206$:
                           3283 ;	main.c:291: else if(store=='d')
                           3284 ;	genCmpEq
                           3285 ;	gencjneshort
                           3286 ;	Peephole 112.b	changed ljmp to sjmp
                           3287 ;	Peephole 198.b	optimized misc jump sequence
   0D2D BA 64 07           3288 	cjne	r2,#0x64,00235$
                           3289 ;	Peephole 200.b	removed redundant sjmp
                           3290 ;	Peephole 300	removed redundant label 00502$
                           3291 ;	Peephole 300	removed redundant label 00503$
                           3292 ;	main.c:293: DDRAM_dump();
                           3293 ;	genCall
   0D30 C0 02              3294 	push	ar2
   0D32 12s00r00           3295 	lcall	_DDRAM_dump
   0D35 D0 02              3296 	pop	ar2
   0D37                    3297 00235$:
                           3298 ;	main.c:296: if(store=='w' || store=='r' || store=='l')
                           3299 ;	genCmpEq
                           3300 ;	gencjne
                           3301 ;	gencjneshort
                           3302 ;	Peephole 241.d	optimized compare
   0D37 E4                 3303 	clr	a
   0D38 BA 77 01           3304 	cjne	r2,#0x77,00504$
   0D3B 04                 3305 	inc	a
   0D3C                    3306 00504$:
                           3307 ;	Peephole 300	removed redundant label 00505$
                           3308 ;	genIfx
   0D3C FB                 3309 	mov	r3,a
                           3310 ;	Peephole 105	removed redundant mov
                           3311 ;	genIfxJump
                           3312 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0D3D 70 0D              3313 	jnz	00276$
                           3314 ;	Peephole 300	removed redundant label 00506$
                           3315 ;	genCmpEq
                           3316 ;	gencjneshort
   0D3F BA 72 02           3317 	cjne	r2,#0x72,00507$
                           3318 ;	Peephole 112.b	changed ljmp to sjmp
   0D42 80 08              3319 	sjmp	00276$
   0D44                    3320 00507$:
                           3321 ;	genCmpEq
                           3322 ;	gencjneshort
   0D44 BA 6C 02           3323 	cjne	r2,#0x6C,00508$
   0D47 80 03              3324 	sjmp	00509$
   0D49                    3325 00508$:
   0D49 02s0Fr01           3326 	ljmp	00277$
   0D4C                    3327 00509$:
   0D4C                    3328 00276$:
                           3329 ;	main.c:299: printf_tiny("\n\n\r Enter Address in Hex in HHH format between 000 to 7FF: ");  // Promt user to input address in the specified range
                           3330 ;	genIpush
   0D4C C0 02              3331 	push	ar2
   0D4E C0 03              3332 	push	ar3
   0D50 74r6E              3333 	mov	a,#__str_47
   0D52 C0 E0              3334 	push	acc
   0D54 74s08              3335 	mov	a,#(__str_47 >> 8)
   0D56 C0 E0              3336 	push	acc
                           3337 ;	genCall
   0D58 12s00r00           3338 	lcall	_printf_tiny
   0D5B 15 81              3339 	dec	sp
   0D5D 15 81              3340 	dec	sp
   0D5F D0 03              3341 	pop	ar3
   0D61 D0 02              3342 	pop	ar2
                           3343 ;	main.c:302: do{
   0D63                    3344 00239$:
                           3345 ;	main.c:303: flag=0;
                           3346 ;	genAssign
   0D63 90s00r2B           3347 	mov	dptr,#_main_flag_1_1
   0D66 E4                 3348 	clr	a
   0D67 F0                 3349 	movx	@dptr,a
   0D68 A3                 3350 	inc	dptr
   0D69 F0                 3351 	movx	@dptr,a
                           3352 ;	main.c:304: gets(b);
                           3353 ;	genCall
                           3354 ;	Peephole 182.a	used 16 bit load of DPTR
   0D6A 90s00r26           3355 	mov	dptr,#_main_b_1_1
   0D6D 75 F0 00           3356 	mov	b,#0x00
   0D70 C0 02              3357 	push	ar2
   0D72 C0 03              3358 	push	ar3
   0D74 12s00r00           3359 	lcall	_gets
   0D77 D0 03              3360 	pop	ar3
   0D79 D0 02              3361 	pop	ar2
                           3362 ;	main.c:305: addr=atoh(b);            // Get data from the user    //Conver that data into hex
                           3363 ;	genCall
                           3364 ;	Peephole 182.a	used 16 bit load of DPTR
   0D7B 90s00r26           3365 	mov	dptr,#_main_b_1_1
   0D7E 75 F0 00           3366 	mov	b,#0x00
   0D81 C0 02              3367 	push	ar2
   0D83 C0 03              3368 	push	ar3
   0D85 12s00r00           3369 	lcall	_atoh
   0D88 AC 82              3370 	mov	r4,dpl
   0D8A AD 83              3371 	mov	r5,dph
   0D8C D0 03              3372 	pop	ar3
   0D8E D0 02              3373 	pop	ar2
                           3374 ;	main.c:306: if(addr<2048)              // Check if address is in valid range
                           3375 ;	genAssign
   0D90 8C 06              3376 	mov	ar6,r4
   0D92 8D 07              3377 	mov	ar7,r5
                           3378 ;	genCmpLt
                           3379 ;	genCmp
                           3380 ;	genIfxJump
                           3381 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           3382 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0D94 74 F8              3383 	mov	a,#0x100 - 0x08
   0D96 2F                 3384 	add	a,r7
   0D97 40 0B              3385 	jc	00237$
                           3386 ;	Peephole 300	removed redundant label 00510$
                           3387 ;	main.c:308: flag=1;
                           3388 ;	genAssign
   0D99 90s00r2B           3389 	mov	dptr,#_main_flag_1_1
   0D9C 74 01              3390 	mov	a,#0x01
   0D9E F0                 3391 	movx	@dptr,a
   0D9F E4                 3392 	clr	a
   0DA0 A3                 3393 	inc	dptr
   0DA1 F0                 3394 	movx	@dptr,a
                           3395 ;	Peephole 112.b	changed ljmp to sjmp
   0DA2 80 1F              3396 	sjmp	00240$
   0DA4                    3397 00237$:
                           3398 ;	main.c:313: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address betweem 000 and 7FF: ");
                           3399 ;	genIpush
   0DA4 C0 02              3400 	push	ar2
   0DA6 C0 03              3401 	push	ar3
   0DA8 C0 04              3402 	push	ar4
   0DAA C0 05              3403 	push	ar5
   0DAC 74rAA              3404 	mov	a,#__str_48
   0DAE C0 E0              3405 	push	acc
   0DB0 74s08              3406 	mov	a,#(__str_48 >> 8)
   0DB2 C0 E0              3407 	push	acc
                           3408 ;	genCall
   0DB4 12s00r00           3409 	lcall	_printf_tiny
   0DB7 15 81              3410 	dec	sp
   0DB9 15 81              3411 	dec	sp
   0DBB D0 05              3412 	pop	ar5
   0DBD D0 04              3413 	pop	ar4
   0DBF D0 03              3414 	pop	ar3
   0DC1 D0 02              3415 	pop	ar2
   0DC3                    3416 00240$:
                           3417 ;	main.c:315: }while(flag==0);
                           3418 ;	genAssign
   0DC3 90s00r2B           3419 	mov	dptr,#_main_flag_1_1
   0DC6 E0                 3420 	movx	a,@dptr
   0DC7 FE                 3421 	mov	r6,a
   0DC8 A3                 3422 	inc	dptr
   0DC9 E0                 3423 	movx	a,@dptr
                           3424 ;	genIfx
   0DCA FF                 3425 	mov	r7,a
                           3426 ;	Peephole 135	removed redundant mov
   0DCB 4E                 3427 	orl	a,r6
                           3428 ;	genIfxJump
                           3429 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0DCC 60 95              3430 	jz	00239$
                           3431 ;	Peephole 300	removed redundant label 00511$
                           3432 ;	main.c:317: page=addr/256;          // Calculate PAage block from the address
                           3433 ;	genAssign
   0DCE 8C 06              3434 	mov	ar6,r4
   0DD0 8D 07              3435 	mov	ar7,r5
                           3436 ;	genRightShift
                           3437 ;	genRightShiftLiteral
                           3438 ;	genrshTwo
   0DD2 8F*02              3439 	mov	_main_sloc1_1_0,r7
   0DD4 75*03 00           3440 	mov	(_main_sloc1_1_0 + 1),#0x00
                           3441 ;	main.c:319: if(store=='w')
                           3442 ;	genIfx
   0DD7 EB                 3443 	mov	a,r3
                           3444 ;	genIfxJump
   0DD8 70 03              3445 	jnz	00512$
   0DDA 02s0Er8C           3446 	ljmp	00254$
   0DDD                    3447 00512$:
                           3448 ;	main.c:323: printf_tiny("\n\n\r Enter Data in Hex in HH format between 00 to FF: ");
                           3449 ;	genIpush
   0DDD C0 02              3450 	push	ar2
   0DDF C0 04              3451 	push	ar4
   0DE1 C0 05              3452 	push	ar5
   0DE3 74rEA              3453 	mov	a,#__str_49
   0DE5 C0 E0              3454 	push	acc
   0DE7 74s08              3455 	mov	a,#(__str_49 >> 8)
   0DE9 C0 E0              3456 	push	acc
                           3457 ;	genCall
   0DEB 12s00r00           3458 	lcall	_printf_tiny
   0DEE 15 81              3459 	dec	sp
   0DF0 15 81              3460 	dec	sp
   0DF2 D0 05              3461 	pop	ar5
   0DF4 D0 04              3462 	pop	ar4
   0DF6 D0 02              3463 	pop	ar2
                           3464 ;	main.c:324: do{
   0DF8                    3465 00245$:
                           3466 ;	main.c:325: flag=0;
                           3467 ;	genIpush
                           3468 ;	genAssign
   0DF8 90s00r2B           3469 	mov	dptr,#_main_flag_1_1
   0DFB E4                 3470 	clr	a
   0DFC F0                 3471 	movx	@dptr,a
   0DFD A3                 3472 	inc	dptr
   0DFE F0                 3473 	movx	@dptr,a
                           3474 ;	main.c:326: gets(d);            // Get data from the user
                           3475 ;	genCall
                           3476 ;	Peephole 182.a	used 16 bit load of DPTR
   0DFF 90s00r1E           3477 	mov	dptr,#_main_d_1_1
   0E02 75 F0 00           3478 	mov	b,#0x00
   0E05 C0 02              3479 	push	ar2
   0E07 C0 04              3480 	push	ar4
   0E09 C0 05              3481 	push	ar5
   0E0B 12s00r00           3482 	lcall	_gets
   0E0E D0 05              3483 	pop	ar5
   0E10 D0 04              3484 	pop	ar4
   0E12 D0 02              3485 	pop	ar2
                           3486 ;	main.c:327: dat=atoh_data(d);   //Conver that data into hex
                           3487 ;	genCall
                           3488 ;	Peephole 182.a	used 16 bit load of DPTR
   0E14 90s00r1E           3489 	mov	dptr,#_main_d_1_1
   0E17 75 F0 00           3490 	mov	b,#0x00
   0E1A C0 02              3491 	push	ar2
   0E1C C0 04              3492 	push	ar4
   0E1E C0 05              3493 	push	ar5
   0E20 12s00r00           3494 	lcall	_atoh_data
   0E23 AB 82              3495 	mov	r3,dpl
   0E25 A8 83              3496 	mov	r0,dph
   0E27 D0 05              3497 	pop	ar5
   0E29 D0 04              3498 	pop	ar4
   0E2B D0 02              3499 	pop	ar2
                           3500 ;	main.c:328: if(dat<256)
                           3501 ;	genAssign
   0E2D 8B 01              3502 	mov	ar1,r3
   0E2F 88 06              3503 	mov	ar6,r0
                           3504 ;	genCmpLt
                           3505 ;	genCmp
                           3506 ;	genIpop
                           3507 ;	genIfx
                           3508 ;	genIfxJump
                           3509 ;	Peephole 108.c	removed ljmp by inverse jump logic
                           3510 ;	Peephole 128	jump optimization
                           3511 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0E31 74 FF              3512 	mov	a,#0x100 - 0x01
   0E33 2E                 3513 	add	a,r6
   0E34 40 0B              3514 	jc	00243$
                           3515 ;	Peephole 300	removed redundant label 00513$
                           3516 ;	main.c:330: flag=1;
                           3517 ;	genAssign
   0E36 90s00r2B           3518 	mov	dptr,#_main_flag_1_1
   0E39 74 01              3519 	mov	a,#0x01
   0E3B F0                 3520 	movx	@dptr,a
   0E3C E4                 3521 	clr	a
   0E3D A3                 3522 	inc	dptr
   0E3E F0                 3523 	movx	@dptr,a
                           3524 ;	Peephole 112.b	changed ljmp to sjmp
   0E3F 80 23              3525 	sjmp	00246$
   0E41                    3526 00243$:
                           3527 ;	main.c:335: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid data in Hex in HH format between 00 to FF: ");
                           3528 ;	genIpush
   0E41 C0 02              3529 	push	ar2
   0E43 C0 03              3530 	push	ar3
   0E45 C0 04              3531 	push	ar4
   0E47 C0 05              3532 	push	ar5
   0E49 C0 00              3533 	push	ar0
   0E4B 74r20              3534 	mov	a,#__str_50
   0E4D C0 E0              3535 	push	acc
   0E4F 74s09              3536 	mov	a,#(__str_50 >> 8)
   0E51 C0 E0              3537 	push	acc
                           3538 ;	genCall
   0E53 12s00r00           3539 	lcall	_printf_tiny
   0E56 15 81              3540 	dec	sp
   0E58 15 81              3541 	dec	sp
   0E5A D0 00              3542 	pop	ar0
   0E5C D0 05              3543 	pop	ar5
   0E5E D0 04              3544 	pop	ar4
   0E60 D0 03              3545 	pop	ar3
   0E62 D0 02              3546 	pop	ar2
   0E64                    3547 00246$:
                           3548 ;	main.c:337: }while(flag==0);
                           3549 ;	genAssign
   0E64 90s00r2B           3550 	mov	dptr,#_main_flag_1_1
   0E67 E0                 3551 	movx	a,@dptr
   0E68 F9                 3552 	mov	r1,a
   0E69 A3                 3553 	inc	dptr
   0E6A E0                 3554 	movx	a,@dptr
                           3555 ;	genIfx
   0E6B FE                 3556 	mov	r6,a
                           3557 ;	Peephole 135	removed redundant mov
   0E6C 49                 3558 	orl	a,r1
                           3559 ;	genIfxJump
   0E6D 70 03              3560 	jnz	00514$
   0E6F 02s0DrF8           3561 	ljmp	00245$
   0E72                    3562 00514$:
                           3563 ;	main.c:339: EEPROM_WriteByte((addr-page*256),dat,page);     // Write byte to the specified address
                           3564 ;	genAssign
   0E72 8C 06              3565 	mov	ar6,r4
                           3566 ;	genCast
                           3567 ;	genCast
                           3568 ;	peephole 177.f	removed redundant move
   0E74 AF*02              3569 	mov	r7,_main_sloc1_1_0
                           3570 ;	genAssign
                           3571 ;	genCast
   0E76 90s00r00           3572 	mov	dptr,#_EEPROM_WriteByte_PARM_2
   0E79 EB                 3573 	mov	a,r3
   0E7A F0                 3574 	movx	@dptr,a
                           3575 ;	genAssign
   0E7B 90s00r00           3576 	mov	dptr,#_EEPROM_WriteByte_PARM_3
   0E7E EF                 3577 	mov	a,r7
   0E7F F0                 3578 	movx	@dptr,a
                           3579 ;	genCall
   0E80 8E 82              3580 	mov	dpl,r6
   0E82 C0 02              3581 	push	ar2
   0E84 12s00r00           3582 	lcall	_EEPROM_WriteByte
   0E87 D0 02              3583 	pop	ar2
   0E89 02s0Fr7B           3584 	ljmp	00278$
   0E8C                    3585 00254$:
                           3586 ;	main.c:342: else if(store=='r')
                           3587 ;	genCmpEq
                           3588 ;	gencjneshort
                           3589 ;	Peephole 112.b	changed ljmp to sjmp
                           3590 ;	Peephole 198.b	optimized misc jump sequence
   0E8C BA 72 3F           3591 	cjne	r2,#0x72,00251$
                           3592 ;	Peephole 200.b	removed redundant sjmp
                           3593 ;	Peephole 300	removed redundant label 00515$
                           3594 ;	Peephole 300	removed redundant label 00516$
                           3595 ;	main.c:346: rd=EEPROM_ReadByte((addr-page*256),page);
                           3596 ;	genAssign
   0E8F 8C 03              3597 	mov	ar3,r4
   0E91 8D 06              3598 	mov	ar6,r5
                           3599 ;	genCast
                           3600 ;	genCast
   0E93 90s00r00           3601 	mov	dptr,#_EEPROM_ReadByte_PARM_2
   0E96 E5*02              3602 	mov	a,_main_sloc1_1_0
   0E98 F0                 3603 	movx	@dptr,a
                           3604 ;	genCall
   0E99 8B 82              3605 	mov	dpl,r3
   0E9B C0 02              3606 	push	ar2
   0E9D C0 04              3607 	push	ar4
   0E9F C0 05              3608 	push	ar5
   0EA1 12s00r00           3609 	lcall	_EEPROM_ReadByte
   0EA4 AB 82              3610 	mov	r3,dpl
   0EA6 D0 05              3611 	pop	ar5
   0EA8 D0 04              3612 	pop	ar4
   0EAA D0 02              3613 	pop	ar2
                           3614 ;	main.c:347: printf_tiny("\n\n\r\t\t\t%x : %x \n",addr,rd);  //Data is printed in AAA:DD format
                           3615 ;	genCast
   0EAC 7E 00              3616 	mov	r6,#0x00
                           3617 ;	genIpush
   0EAE C0 02              3618 	push	ar2
   0EB0 C0 03              3619 	push	ar3
   0EB2 C0 06              3620 	push	ar6
                           3621 ;	genIpush
   0EB4 C0 04              3622 	push	ar4
   0EB6 C0 05              3623 	push	ar5
                           3624 ;	genIpush
   0EB8 74r6E              3625 	mov	a,#__str_51
   0EBA C0 E0              3626 	push	acc
   0EBC 74s09              3627 	mov	a,#(__str_51 >> 8)
   0EBE C0 E0              3628 	push	acc
                           3629 ;	genCall
   0EC0 12s00r00           3630 	lcall	_printf_tiny
   0EC3 E5 81              3631 	mov	a,sp
   0EC5 24 FA              3632 	add	a,#0xfa
   0EC7 F5 81              3633 	mov	sp,a
   0EC9 D0 02              3634 	pop	ar2
   0ECB 02s0Fr7B           3635 	ljmp	00278$
   0ECE                    3636 00251$:
                           3637 ;	main.c:349: else if(store=='l')
                           3638 ;	genCmpEq
                           3639 ;	gencjneshort
   0ECE BA 6C 02           3640 	cjne	r2,#0x6C,00517$
   0ED1 80 03              3641 	sjmp	00518$
   0ED3                    3642 00517$:
   0ED3 02s0Fr7B           3643 	ljmp	00278$
   0ED6                    3644 00518$:
                           3645 ;	main.c:351: rd=EEPROM_ReadByte((addr-page*256),page);
                           3646 ;	genAssign
                           3647 ;	genCast
                           3648 ;	genCast
   0ED6 90s00r00           3649 	mov	dptr,#_EEPROM_ReadByte_PARM_2
   0ED9 E5*02              3650 	mov	a,_main_sloc1_1_0
   0EDB F0                 3651 	movx	@dptr,a
                           3652 ;	genCall
   0EDC 8C 82              3653 	mov	dpl,r4
   0EDE C0 02              3654 	push	ar2
   0EE0 12s00r00           3655 	lcall	_EEPROM_ReadByte
   0EE3 AB 82              3656 	mov	r3,dpl
   0EE5 D0 02              3657 	pop	ar2
                           3658 ;	main.c:352: lcd_display(rd,b);
                           3659 ;	genCast
   0EE7 90s00r00           3660 	mov	dptr,#_lcd_display_PARM_2
   0EEA 74r26              3661 	mov	a,#_main_b_1_1
   0EEC F0                 3662 	movx	@dptr,a
   0EED A3                 3663 	inc	dptr
   0EEE 74s00              3664 	mov	a,#(_main_b_1_1 >> 8)
   0EF0 F0                 3665 	movx	@dptr,a
   0EF1 A3                 3666 	inc	dptr
   0EF2 74 00              3667 	mov	a,#0x0
   0EF4 F0                 3668 	movx	@dptr,a
                           3669 ;	genCall
   0EF5 8B 82              3670 	mov	dpl,r3
   0EF7 C0 02              3671 	push	ar2
   0EF9 12s00r00           3672 	lcall	_lcd_display
   0EFC D0 02              3673 	pop	ar2
   0EFE 02s0Fr7B           3674 	ljmp	00278$
   0F01                    3675 00277$:
                           3676 ;	main.c:357: else if(store=='h')
                           3677 ;	genCmpEq
                           3678 ;	gencjneshort
                           3679 ;	Peephole 112.b	changed ljmp to sjmp
                           3680 ;	Peephole 198.b	optimized misc jump sequence
   0F01 BA 68 0A           3681 	cjne	r2,#0x68,00274$
                           3682 ;	Peephole 200.b	removed redundant sjmp
                           3683 ;	Peephole 300	removed redundant label 00519$
                           3684 ;	Peephole 300	removed redundant label 00520$
                           3685 ;	main.c:359: hex_dump();
                           3686 ;	genCall
   0F04 C0 02              3687 	push	ar2
   0F06 12s00r00           3688 	lcall	_hex_dump
   0F09 D0 02              3689 	pop	ar2
   0F0B 02s0Fr7B           3690 	ljmp	00278$
   0F0E                    3691 00274$:
                           3692 ;	main.c:362: else if(store=='x')
                           3693 ;	genCmpEq
                           3694 ;	gencjneshort
                           3695 ;	Peephole 112.b	changed ljmp to sjmp
                           3696 ;	Peephole 198.b	optimized misc jump sequence
   0F0E BA 78 13           3697 	cjne	r2,#0x78,00271$
                           3698 ;	Peephole 200.b	removed redundant sjmp
                           3699 ;	Peephole 300	removed redundant label 00521$
                           3700 ;	Peephole 300	removed redundant label 00522$
                           3701 ;	main.c:364: io_counter=0;
                           3702 ;	genAssign
   0F11 90s00r18           3703 	mov	dptr,#_io_counter
   0F14 E4                 3704 	clr	a
   0F15 F0                 3705 	movx	@dptr,a
   0F16 A3                 3706 	inc	dptr
   0F17 F0                 3707 	movx	@dptr,a
                           3708 ;	main.c:365: io_cnt(io_counter);
                           3709 ;	genCall
                           3710 ;	Peephole 182.b	used 16 bit load of dptr
   0F18 90 00 00           3711 	mov	dptr,#0x0000
   0F1B C0 02              3712 	push	ar2
   0F1D 12s00r00           3713 	lcall	_io_cnt
   0F20 D0 02              3714 	pop	ar2
                           3715 ;	Peephole 112.b	changed ljmp to sjmp
   0F22 80 57              3716 	sjmp	00278$
   0F24                    3717 00271$:
                           3718 ;	main.c:369: else if(store=='i')
                           3719 ;	genCmpEq
                           3720 ;	gencjneshort
                           3721 ;	Peephole 112.b	changed ljmp to sjmp
                           3722 ;	Peephole 198.b	optimized misc jump sequence
   0F24 BA 69 09           3723 	cjne	r2,#0x69,00268$
                           3724 ;	Peephole 200.b	removed redundant sjmp
                           3725 ;	Peephole 300	removed redundant label 00523$
                           3726 ;	Peephole 300	removed redundant label 00524$
                           3727 ;	main.c:371: io_exp_dir();
                           3728 ;	genCall
   0F27 C0 02              3729 	push	ar2
   0F29 12s00r00           3730 	lcall	_io_exp_dir
   0F2C D0 02              3731 	pop	ar2
                           3732 ;	Peephole 112.b	changed ljmp to sjmp
   0F2E 80 4B              3733 	sjmp	00278$
   0F30                    3734 00268$:
                           3735 ;	main.c:376: else if(store=='s')
                           3736 ;	genCmpEq
                           3737 ;	gencjneshort
                           3738 ;	Peephole 112.b	changed ljmp to sjmp
                           3739 ;	Peephole 198.b	optimized misc jump sequence
   0F30 BA 73 26           3740 	cjne	r2,#0x73,00265$
                           3741 ;	Peephole 200.b	removed redundant sjmp
                           3742 ;	Peephole 300	removed redundant label 00525$
                           3743 ;	Peephole 300	removed redundant label 00526$
                           3744 ;	main.c:378: printf_tiny("\n\n\r\t Current Status of the IO_Expander pins is: 0x%x\n\n\r",IOEX_ReadByte());
                           3745 ;	genCall
   0F33 C0 02              3746 	push	ar2
   0F35 12s00r00           3747 	lcall	_IOEX_ReadByte
   0F38 AB 82              3748 	mov	r3,dpl
   0F3A D0 02              3749 	pop	ar2
                           3750 ;	genCast
   0F3C 7C 00              3751 	mov	r4,#0x00
                           3752 ;	genIpush
   0F3E C0 02              3753 	push	ar2
   0F40 C0 03              3754 	push	ar3
   0F42 C0 04              3755 	push	ar4
                           3756 ;	genIpush
   0F44 74r7E              3757 	mov	a,#__str_52
   0F46 C0 E0              3758 	push	acc
   0F48 74s09              3759 	mov	a,#(__str_52 >> 8)
   0F4A C0 E0              3760 	push	acc
                           3761 ;	genCall
   0F4C 12s00r00           3762 	lcall	_printf_tiny
   0F4F E5 81              3763 	mov	a,sp
   0F51 24 FC              3764 	add	a,#0xfc
   0F53 F5 81              3765 	mov	sp,a
   0F55 D0 02              3766 	pop	ar2
                           3767 ;	Peephole 112.b	changed ljmp to sjmp
   0F57 80 22              3768 	sjmp	00278$
   0F59                    3769 00265$:
                           3770 ;	main.c:383: else if(store=='9')
                           3771 ;	genCmpEq
                           3772 ;	gencjneshort
                           3773 ;	Peephole 112.b	changed ljmp to sjmp
                           3774 ;	Peephole 198.b	optimized misc jump sequence
   0F59 BA 39 09           3775 	cjne	r2,#0x39,00262$
                           3776 ;	Peephole 200.b	removed redundant sjmp
                           3777 ;	Peephole 300	removed redundant label 00527$
                           3778 ;	Peephole 300	removed redundant label 00528$
                           3779 ;	main.c:385: logo_creator();
                           3780 ;	genCall
   0F5C C0 02              3781 	push	ar2
   0F5E 12s00r00           3782 	lcall	_logo_creator
   0F61 D0 02              3783 	pop	ar2
                           3784 ;	Peephole 112.b	changed ljmp to sjmp
   0F63 80 16              3785 	sjmp	00278$
   0F65                    3786 00262$:
                           3787 ;	main.c:389: else if(store=='y')
                           3788 ;	genCmpEq
                           3789 ;	gencjneshort
                           3790 ;	Peephole 112.b	changed ljmp to sjmp
                           3791 ;	Peephole 198.b	optimized misc jump sequence
   0F65 BA 79 13           3792 	cjne	r2,#0x79,00278$
                           3793 ;	Peephole 200.b	removed redundant sjmp
                           3794 ;	Peephole 300	removed redundant label 00529$
                           3795 ;	Peephole 300	removed redundant label 00530$
                           3796 ;	main.c:391: printf_tiny("\n\n\n\rWatchdog RESET Demo");
                           3797 ;	genIpush
   0F68 74rB6              3798 	mov	a,#__str_53
   0F6A C0 E0              3799 	push	acc
   0F6C 74s09              3800 	mov	a,#(__str_53 >> 8)
   0F6E C0 E0              3801 	push	acc
                           3802 ;	genCall
   0F70 12s00r00           3803 	lcall	_printf_tiny
   0F73 15 81              3804 	dec	sp
   0F75 15 81              3805 	dec	sp
                           3806 ;	main.c:392: EA=0;
                           3807 ;	genAssign
   0F77 C2 AF              3808 	clr	_EA
                           3809 ;	main.c:393: while(1);
   0F79                    3810 00257$:
                           3811 ;	Peephole 112.b	changed ljmp to sjmp
   0F79 80 FE              3812 	sjmp	00257$
   0F7B                    3813 00278$:
                           3814 ;	main.c:398: if(store=='m')
                           3815 ;	genCmpEq
                           3816 ;	gencjneshort
                           3817 ;	Peephole 112.b	changed ljmp to sjmp
                           3818 ;	Peephole 198.b	optimized misc jump sequence
   0F7B BA 6D 4B           3819 	cjne	r2,#0x6D,00282$
                           3820 ;	Peephole 200.b	removed redundant sjmp
                           3821 ;	Peephole 300	removed redundant label 00531$
                           3822 ;	Peephole 300	removed redundant label 00532$
                           3823 ;	main.c:400: printf_tiny("\n\n\r\t\t\t\t\t******** Clock Control Commands ********\n\n\r\t1. Stop Clock \t\t\t\t\t\t2. Restart Clock \t\t\t3. Reset Clock\n\r\t4. Select Count-Down Timer and Value \t\t\t5. Timer Enable \t\t\t6. Timer Disable ");
                           3824 ;	genIpush
   0F7E 74r11              3825 	mov	a,#__str_4
   0F80 C0 E0              3826 	push	acc
   0F82 74s00              3827 	mov	a,#(__str_4 >> 8)
   0F84 C0 E0              3828 	push	acc
                           3829 ;	genCall
   0F86 12s00r00           3830 	lcall	_printf_tiny
   0F89 15 81              3831 	dec	sp
   0F8B 15 81              3832 	dec	sp
                           3833 ;	main.c:401: printf_tiny("\n\n\n\r\t\t\t\t\t******** LCD Commands ********\n\n\r\t7. Create Custom Character\t\t\t8. Display Custom Character\t\t\t'c'. CGRAM Dump\t\t\t'd'. DDRAM Dump\n\r\t'l'. LCD Display\t\t\t\t'q'. Clear LCD Display");
                           3834 ;	genIpush
   0F8D 74rCE              3835 	mov	a,#__str_54
   0F8F C0 E0              3836 	push	acc
   0F91 74s09              3837 	mov	a,#(__str_54 >> 8)
   0F93 C0 E0              3838 	push	acc
                           3839 ;	genCall
   0F95 12s00r00           3840 	lcall	_printf_tiny
   0F98 15 81              3841 	dec	sp
   0F9A 15 81              3842 	dec	sp
                           3843 ;	main.c:402: printf_tiny("\n\n\n\r\t\t\t\t\t******** IO Expander Control Commands ********\n\n\r\t'x'. Reset Counter\t\t\t\t'i'. Configure IO Pins\t\t\t\t's'. Status of IO_Expander");
                           3844 ;	genIpush
   0F9C 74r8F              3845 	mov	a,#__str_6
   0F9E C0 E0              3846 	push	acc
   0FA0 74s01              3847 	mov	a,#(__str_6 >> 8)
   0FA2 C0 E0              3848 	push	acc
                           3849 ;	genCall
   0FA4 12s00r00           3850 	lcall	_printf_tiny
   0FA7 15 81              3851 	dec	sp
   0FA9 15 81              3852 	dec	sp
                           3853 ;	main.c:403: printf_tiny("\n\n\n\r\t\t\t\t\t******** EEPROM Control Commands ******** \n\n\r\t'w'. EEPROM Write \t\t\t'r'. EEPROM Read \t\t\t\t'h'. HEX Dump\t\n\r\t");
                           3854 ;	genIpush
   0FAB 74r15              3855 	mov	a,#__str_7
   0FAD C0 E0              3856 	push	acc
   0FAF 74s02              3857 	mov	a,#(__str_7 >> 8)
   0FB1 C0 E0              3858 	push	acc
                           3859 ;	genCall
   0FB3 12s00r00           3860 	lcall	_printf_tiny
   0FB6 15 81              3861 	dec	sp
   0FB8 15 81              3862 	dec	sp
                           3863 ;	main.c:404: printf_tiny("\n\n\r\t\t\t\t\t******** Demo Commands ******** \n\n\r\t'y'. Watchdog Demo \t\t\t'9'. LOGO Creation Demo ");
                           3864 ;	genIpush
   0FBA 74r88              3865 	mov	a,#__str_8
   0FBC C0 E0              3866 	push	acc
   0FBE 74s02              3867 	mov	a,#(__str_8 >> 8)
   0FC0 C0 E0              3868 	push	acc
                           3869 ;	genCall
   0FC2 12s00r00           3870 	lcall	_printf_tiny
   0FC5 15 81              3871 	dec	sp
   0FC7 15 81              3872 	dec	sp
   0FC9                    3873 00282$:
                           3874 ;	main.c:407: printf_tiny("\n\n\r\t Press 'm' to see the Menu again or Press Command Key:\t");
                           3875 ;	genIpush
   0FC9 74r83              3876 	mov	a,#__str_55
   0FCB C0 E0              3877 	push	acc
   0FCD 74s0A              3878 	mov	a,#(__str_55 >> 8)
   0FCF C0 E0              3879 	push	acc
                           3880 ;	genCall
   0FD1 12s00r00           3881 	lcall	_printf_tiny
   0FD4 15 81              3882 	dec	sp
   0FD6 15 81              3883 	dec	sp
   0FD8 02s01rAC           3884 	ljmp	00289$
   0FDB                    3885 00286$:
                           3886 ;	genIfx
                           3887 ;	genIfxJump
   0FDB 30 AF 03           3888 	jnb	_EA,00533$
   0FDE 02s01rAC           3889 	ljmp	00289$
   0FE1                    3890 00533$:
                           3891 ;	main.c:414: WDTPRG |=0x07;
                           3892 ;	genOr
   0FE1 43 A7 07           3893 	orl	_WDTPRG,#0x07
                           3894 ;	main.c:415: WDTRST = 0x01E;
                           3895 ;	genAssign
   0FE4 75 A6 1E           3896 	mov	_WDTRST,#0x1E
                           3897 ;	main.c:416: WDTRST = 0x0E1;
                           3898 ;	genAssign
   0FE7 75 A6 E1           3899 	mov	_WDTRST,#0xE1
   0FEA 02s01rAC           3900 	ljmp	00289$
                           3901 ;	Peephole 259.b	removed redundant label 00307$ and ret
                           3902 ;
                           3903 ;------------------------------------------------------------
                           3904 ;Allocation info for local variables in function 'ext_zero'
                           3905 ;------------------------------------------------------------
                           3906 ;------------------------------------------------------------
                           3907 ;	main.c:438: void ext_zero() interrupt 0
                           3908 ;	-----------------------------------------
                           3909 ;	 function ext_zero
                           3910 ;	-----------------------------------------
   0FED                    3911 _ext_zero:
   0FED C0 E0              3912 	push	acc
   0FEF C0 F0              3913 	push	b
   0FF1 C0 82              3914 	push	dpl
   0FF3 C0 83              3915 	push	dph
   0FF5 C0 02              3916 	push	(0+2)
   0FF7 C0 03              3917 	push	(0+3)
   0FF9 C0 04              3918 	push	(0+4)
   0FFB C0 05              3919 	push	(0+5)
   0FFD C0 06              3920 	push	(0+6)
   0FFF C0 07              3921 	push	(0+7)
   1001 C0 00              3922 	push	(0+0)
   1003 C0 01              3923 	push	(0+1)
   1005 C0 D0              3924 	push	psw
   1007 75 D0 00           3925 	mov	psw,#0x00
                           3926 ;	main.c:441: io_counter++;
                           3927 ;	genAssign
   100A 90s00r18           3928 	mov	dptr,#_io_counter
   100D E0                 3929 	movx	a,@dptr
   100E FA                 3930 	mov	r2,a
   100F A3                 3931 	inc	dptr
   1010 E0                 3932 	movx	a,@dptr
   1011 FB                 3933 	mov	r3,a
                           3934 ;	genPlus
   1012 90s00r18           3935 	mov	dptr,#_io_counter
                           3936 ;     genPlusIncr
   1015 74 01              3937 	mov	a,#0x01
                           3938 ;	Peephole 236.a	used r2 instead of ar2
   1017 2A                 3939 	add	a,r2
   1018 F0                 3940 	movx	@dptr,a
                           3941 ;	Peephole 181	changed mov to clr
   1019 E4                 3942 	clr	a
                           3943 ;	Peephole 236.b	used r3 instead of ar3
   101A 3B                 3944 	addc	a,r3
   101B A3                 3945 	inc	dptr
   101C F0                 3946 	movx	@dptr,a
                           3947 ;	main.c:442: if(io_counter==32)
                           3948 ;	genAssign
   101D 90s00r18           3949 	mov	dptr,#_io_counter
   1020 E0                 3950 	movx	a,@dptr
   1021 FA                 3951 	mov	r2,a
   1022 A3                 3952 	inc	dptr
   1023 E0                 3953 	movx	a,@dptr
   1024 FB                 3954 	mov	r3,a
                           3955 ;	genCmpEq
                           3956 ;	gencjneshort
                           3957 ;	Peephole 112.b	changed ljmp to sjmp
                           3958 ;	Peephole 198.a	optimized misc jump sequence
   1025 BA 20 0A           3959 	cjne	r2,#0x20,00102$
   1028 BB 00 07           3960 	cjne	r3,#0x00,00102$
                           3961 ;	Peephole 200.b	removed redundant sjmp
                           3962 ;	Peephole 300	removed redundant label 00109$
                           3963 ;	Peephole 300	removed redundant label 00110$
                           3964 ;	main.c:444: io_counter=0;
                           3965 ;	genAssign
   102B 90s00r18           3966 	mov	dptr,#_io_counter
   102E E4                 3967 	clr	a
   102F F0                 3968 	movx	@dptr,a
   1030 A3                 3969 	inc	dptr
   1031 F0                 3970 	movx	@dptr,a
   1032                    3971 00102$:
                           3972 ;	main.c:446: if(io_counter%2==0){io_cnt(io_counter/2);}
                           3973 ;	genAssign
   1032 90s00r18           3974 	mov	dptr,#_io_counter
   1035 E0                 3975 	movx	a,@dptr
   1036 FA                 3976 	mov	r2,a
   1037 A3                 3977 	inc	dptr
   1038 E0                 3978 	movx	a,@dptr
   1039 FB                 3979 	mov	r3,a
                           3980 ;	genAnd
   103A EA                 3981 	mov	a,r2
                           3982 ;	genIfxJump
                           3983 ;	Peephole 108.e	removed ljmp by inverse jump logic
   103B 20 E0 0E           3984 	jb	acc.0,00105$
                           3985 ;	Peephole 300	removed redundant label 00111$
                           3986 ;	genRightShift
                           3987 ;	genRightShiftLiteral
                           3988 ;	genrshTwo
   103E EB                 3989 	mov	a,r3
   103F C3                 3990 	clr	c
   1040 13                 3991 	rrc	a
   1041 CA                 3992 	xch	a,r2
   1042 13                 3993 	rrc	a
   1043 CA                 3994 	xch	a,r2
   1044 FB                 3995 	mov	r3,a
                           3996 ;	genCall
   1045 8A 82              3997 	mov	dpl,r2
   1047 8B 83              3998 	mov	dph,r3
   1049 12s00r00           3999 	lcall	_io_cnt
   104C                    4000 00105$:
   104C D0 D0              4001 	pop	psw
   104E D0 01              4002 	pop	(0+1)
   1050 D0 00              4003 	pop	(0+0)
   1052 D0 07              4004 	pop	(0+7)
   1054 D0 06              4005 	pop	(0+6)
   1056 D0 05              4006 	pop	(0+5)
   1058 D0 04              4007 	pop	(0+4)
   105A D0 03              4008 	pop	(0+3)
   105C D0 02              4009 	pop	(0+2)
   105E D0 83              4010 	pop	dph
   1060 D0 82              4011 	pop	dpl
   1062 D0 F0              4012 	pop	b
   1064 D0 E0              4013 	pop	acc
   1066 32                 4014 	reti
                           4015 ;------------------------------------------------------------
                           4016 ;Allocation info for local variables in function 'timer_isr'
                           4017 ;------------------------------------------------------------
                           4018 ;sloc0                     Allocated with name '_timer_isr_sloc0_1_0'
                           4019 ;sloc1                     Allocated with name '_timer_isr_sloc1_1_0'
                           4020 ;i                         Allocated with name '_timer_isr_i_1_1'
                           4021 ;------------------------------------------------------------
                           4022 ;	main.c:461: void timer_isr() interrupt 1
                           4023 ;	-----------------------------------------
                           4024 ;	 function timer_isr
                           4025 ;	-----------------------------------------
   1067                    4026 _timer_isr:
   1067 C0 E0              4027 	push	acc
   1069 C0 F0              4028 	push	b
   106B C0 82              4029 	push	dpl
   106D C0 83              4030 	push	dph
   106F C0 02              4031 	push	(0+2)
   1071 C0 03              4032 	push	(0+3)
   1073 C0 04              4033 	push	(0+4)
   1075 C0 05              4034 	push	(0+5)
   1077 C0 06              4035 	push	(0+6)
   1079 C0 07              4036 	push	(0+7)
   107B C0 00              4037 	push	(0+0)
   107D C0 01              4038 	push	(0+1)
   107F C0 D0              4039 	push	psw
   1081 75 D0 00           4040 	mov	psw,#0x00
                           4041 ;	main.c:464: flag++;
                           4042 ;	genAssign
   1084 90s00r00           4043 	mov	dptr,#_flag
   1087 E0                 4044 	movx	a,@dptr
   1088 FA                 4045 	mov	r2,a
                           4046 ;	genPlus
   1089 90s00r00           4047 	mov	dptr,#_flag
                           4048 ;     genPlusIncr
   108C 74 01              4049 	mov	a,#0x01
                           4050 ;	Peephole 236.a	used r2 instead of ar2
   108E 2A                 4051 	add	a,r2
   108F F0                 4052 	movx	@dptr,a
                           4053 ;	main.c:465: timers=cnt[0]+cnt[1]+cnt[2];
                           4054 ;	genPointerGet
                           4055 ;	genFarPointerGet
   1090 90s00r03           4056 	mov	dptr,#_cnt
   1093 E0                 4057 	movx	a,@dptr
                           4058 ;	genCast
   1094 FA                 4059 	mov	r2,a
                           4060 ;	Peephole 105	removed redundant mov
   1095 33                 4061 	rlc	a
   1096 95 E0              4062 	subb	a,acc
   1098 FB                 4063 	mov	r3,a
                           4064 ;	genPointerGet
                           4065 ;	genFarPointerGet
   1099 90s00r04           4066 	mov	dptr,#(_cnt + 0x0001)
   109C E0                 4067 	movx	a,@dptr
                           4068 ;	genCast
   109D FC                 4069 	mov	r4,a
                           4070 ;	Peephole 105	removed redundant mov
   109E 33                 4071 	rlc	a
   109F 95 E0              4072 	subb	a,acc
   10A1 FD                 4073 	mov	r5,a
                           4074 ;	genPlus
                           4075 ;	Peephole 236.g	used r4 instead of ar4
   10A2 EC                 4076 	mov	a,r4
                           4077 ;	Peephole 236.a	used r2 instead of ar2
   10A3 2A                 4078 	add	a,r2
   10A4 FA                 4079 	mov	r2,a
                           4080 ;	Peephole 236.g	used r5 instead of ar5
   10A5 ED                 4081 	mov	a,r5
                           4082 ;	Peephole 236.b	used r3 instead of ar3
   10A6 3B                 4083 	addc	a,r3
   10A7 FB                 4084 	mov	r3,a
                           4085 ;	genPointerGet
                           4086 ;	genFarPointerGet
   10A8 90s00r05           4087 	mov	dptr,#(_cnt + 0x0002)
   10AB E0                 4088 	movx	a,@dptr
                           4089 ;	genCast
   10AC FC                 4090 	mov	r4,a
                           4091 ;	Peephole 105	removed redundant mov
   10AD 33                 4092 	rlc	a
   10AE 95 E0              4093 	subb	a,acc
   10B0 FD                 4094 	mov	r5,a
                           4095 ;	genPlus
   10B1 90s00r01           4096 	mov	dptr,#_timers
                           4097 ;	Peephole 236.g	used r4 instead of ar4
   10B4 EC                 4098 	mov	a,r4
                           4099 ;	Peephole 236.a	used r2 instead of ar2
   10B5 2A                 4100 	add	a,r2
   10B6 F0                 4101 	movx	@dptr,a
                           4102 ;	Peephole 236.g	used r5 instead of ar5
   10B7 ED                 4103 	mov	a,r5
                           4104 ;	Peephole 236.b	used r3 instead of ar3
   10B8 3B                 4105 	addc	a,r3
   10B9 A3                 4106 	inc	dptr
   10BA F0                 4107 	movx	@dptr,a
                           4108 ;	main.c:467: if(flag==2)
                           4109 ;	genAssign
   10BB 90s00r00           4110 	mov	dptr,#_flag
   10BE E0                 4111 	movx	a,@dptr
   10BF FA                 4112 	mov	r2,a
                           4113 ;	genCmpEq
                           4114 ;	gencjneshort
   10C0 BA 02 02           4115 	cjne	r2,#0x02,00149$
   10C3 80 03              4116 	sjmp	00150$
   10C5                    4117 00149$:
   10C5 02s12r99           4118 	ljmp	00118$
   10C8                    4119 00150$:
                           4120 ;	main.c:470: clock_control();
                           4121 ;	genCall
   10C8 12s00r00           4122 	lcall	_clock_control
                           4123 ;	main.c:471: flag=0;
                           4124 ;	genAssign
   10CB 90s00r00           4125 	mov	dptr,#_flag
                           4126 ;	Peephole 181	changed mov to clr
   10CE E4                 4127 	clr	a
   10CF F0                 4128 	movx	@dptr,a
                           4129 ;	main.c:473: for(i=0;i<3;i++)
                           4130 ;	genAssign
   10D0 7A 00              4131 	mov	r2,#0x00
   10D2 7B 00              4132 	mov	r3,#0x00
   10D4                    4133 00128$:
                           4134 ;	genCmpLt
                           4135 ;	genCmp
   10D4 C3                 4136 	clr	c
   10D5 EA                 4137 	mov	a,r2
   10D6 94 03              4138 	subb	a,#0x03
   10D8 EB                 4139 	mov	a,r3
   10D9 64 80              4140 	xrl	a,#0x80
   10DB 94 80              4141 	subb	a,#0x80
                           4142 ;	genIfxJump
   10DD 40 03              4143 	jc	00151$
   10DF 02s12r99           4144 	ljmp	00118$
   10E2                    4145 00151$:
                           4146 ;	main.c:476: if(cnt[i]==1)
                           4147 ;	genPlus
                           4148 ;	Peephole 236.g	used r2 instead of ar2
   10E2 EA                 4149 	mov	a,r2
   10E3 24r03              4150 	add	a,#_cnt
   10E5 F5 82              4151 	mov	dpl,a
                           4152 ;	Peephole 236.g	used r3 instead of ar3
   10E7 EB                 4153 	mov	a,r3
   10E8 34s00              4154 	addc	a,#(_cnt >> 8)
   10EA F5 83              4155 	mov	dph,a
                           4156 ;	genPointerGet
                           4157 ;	genFarPointerGet
   10EC E0                 4158 	movx	a,@dptr
   10ED FC                 4159 	mov	r4,a
                           4160 ;	genCmpEq
                           4161 ;	gencjneshort
   10EE BC 01 02           4162 	cjne	r4,#0x01,00152$
   10F1 80 03              4163 	sjmp	00153$
   10F3                    4164 00152$:
   10F3 02s12r91           4165 	ljmp	00130$
   10F6                    4166 00153$:
                           4167 ;	main.c:479: if(nms[i]==0)
                           4168 ;	genLeftShift
                           4169 ;	genLeftShiftLiteral
                           4170 ;	genlshTwo
   10F6 8A 04              4171 	mov	ar4,r2
   10F8 EB                 4172 	mov	a,r3
   10F9 CC                 4173 	xch	a,r4
   10FA 25 E0              4174 	add	a,acc
   10FC CC                 4175 	xch	a,r4
   10FD 33                 4176 	rlc	a
   10FE FD                 4177 	mov	r5,a
                           4178 ;	genPlus
                           4179 ;	Peephole 236.g	used r4 instead of ar4
   10FF EC                 4180 	mov	a,r4
   1100 24r06              4181 	add	a,#_nms
   1102 FE                 4182 	mov	r6,a
                           4183 ;	Peephole 236.g	used r5 instead of ar5
   1103 ED                 4184 	mov	a,r5
   1104 34s00              4185 	addc	a,#(_nms >> 8)
   1106 FF                 4186 	mov	r7,a
                           4187 ;	genPointerGet
                           4188 ;	genFarPointerGet
   1107 8E 82              4189 	mov	dpl,r6
   1109 8F 83              4190 	mov	dph,r7
   110B E0                 4191 	movx	a,@dptr
   110C F8                 4192 	mov	r0,a
   110D A3                 4193 	inc	dptr
   110E E0                 4194 	movx	a,@dptr
                           4195 ;	genIfx
   110F F9                 4196 	mov	r1,a
                           4197 ;	Peephole 135	removed redundant mov
   1110 48                 4198 	orl	a,r0
                           4199 ;	genIfxJump
                           4200 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1111 70 36              4201 	jnz	00105$
                           4202 ;	Peephole 300	removed redundant label 00154$
                           4203 ;	main.c:481: nms[i]=9;
                           4204 ;	genPointerSet
                           4205 ;     genFarPointerSet
   1113 8E 82              4206 	mov	dpl,r6
   1115 8F 83              4207 	mov	dph,r7
   1117 74 09              4208 	mov	a,#0x09
   1119 F0                 4209 	movx	@dptr,a
   111A A3                 4210 	inc	dptr
                           4211 ;	Peephole 181	changed mov to clr
   111B E4                 4212 	clr	a
   111C F0                 4213 	movx	@dptr,a
                           4214 ;	main.c:482: if(nsec[i]>0){nsec[i]--;}else{nsec[i]=0;}
                           4215 ;	genPlus
                           4216 ;	Peephole 236.g	used r4 instead of ar4
   111D EC                 4217 	mov	a,r4
   111E 24r0C              4218 	add	a,#_nsec
   1120 FE                 4219 	mov	r6,a
                           4220 ;	Peephole 236.g	used r5 instead of ar5
   1121 ED                 4221 	mov	a,r5
   1122 34s00              4222 	addc	a,#(_nsec >> 8)
   1124 FF                 4223 	mov	r7,a
                           4224 ;	genPointerGet
                           4225 ;	genFarPointerGet
   1125 8E 82              4226 	mov	dpl,r6
   1127 8F 83              4227 	mov	dph,r7
   1129 E0                 4228 	movx	a,@dptr
   112A F8                 4229 	mov	r0,a
   112B A3                 4230 	inc	dptr
   112C E0                 4231 	movx	a,@dptr
                           4232 ;	genIfx
   112D F9                 4233 	mov	r1,a
                           4234 ;	Peephole 135	removed redundant mov
   112E 48                 4235 	orl	a,r0
                           4236 ;	genIfxJump
                           4237 ;	Peephole 108.c	removed ljmp by inverse jump logic
   112F 60 10              4238 	jz	00102$
                           4239 ;	Peephole 300	removed redundant label 00155$
                           4240 ;	genMinus
                           4241 ;	genMinusDec
   1131 18                 4242 	dec	r0
   1132 B8 FF 01           4243 	cjne	r0,#0xff,00156$
   1135 19                 4244 	dec	r1
   1136                    4245 00156$:
                           4246 ;	genPointerSet
                           4247 ;     genFarPointerSet
   1136 8E 82              4248 	mov	dpl,r6
   1138 8F 83              4249 	mov	dph,r7
   113A E8                 4250 	mov	a,r0
   113B F0                 4251 	movx	@dptr,a
   113C A3                 4252 	inc	dptr
   113D E9                 4253 	mov	a,r1
   113E F0                 4254 	movx	@dptr,a
                           4255 ;	Peephole 112.b	changed ljmp to sjmp
   113F 80 08              4256 	sjmp	00105$
   1141                    4257 00102$:
                           4258 ;	genPointerSet
                           4259 ;     genFarPointerSet
   1141 8E 82              4260 	mov	dpl,r6
   1143 8F 83              4261 	mov	dph,r7
                           4262 ;	Peephole 181	changed mov to clr
   1145 E4                 4263 	clr	a
   1146 F0                 4264 	movx	@dptr,a
   1147 A3                 4265 	inc	dptr
                           4266 ;	Peephole 101	removed redundant mov
   1148 F0                 4267 	movx	@dptr,a
   1149                    4268 00105$:
                           4269 ;	main.c:484: if(nsec[i]==00)
                           4270 ;	genPlus
                           4271 ;	Peephole 236.g	used r4 instead of ar4
   1149 EC                 4272 	mov	a,r4
   114A 24r0C              4273 	add	a,#_nsec
   114C FE                 4274 	mov	r6,a
                           4275 ;	Peephole 236.g	used r5 instead of ar5
   114D ED                 4276 	mov	a,r5
   114E 34s00              4277 	addc	a,#(_nsec >> 8)
   1150 FF                 4278 	mov	r7,a
                           4279 ;	genPointerGet
                           4280 ;	genFarPointerGet
   1151 8E 82              4281 	mov	dpl,r6
   1153 8F 83              4282 	mov	dph,r7
   1155 E0                 4283 	movx	a,@dptr
   1156 F8                 4284 	mov	r0,a
   1157 A3                 4285 	inc	dptr
   1158 E0                 4286 	movx	a,@dptr
                           4287 ;	genIfx
   1159 F9                 4288 	mov	r1,a
                           4289 ;	Peephole 135	removed redundant mov
   115A 48                 4290 	orl	a,r0
                           4291 ;	genIfxJump
                           4292 ;	Peephole 108.b	removed ljmp by inverse jump logic
   115B 70 5E              4293 	jnz	00110$
                           4294 ;	Peephole 300	removed redundant label 00157$
                           4295 ;	main.c:486: nsec[i]=59;
                           4296 ;	genPointerSet
                           4297 ;     genFarPointerSet
   115D 8E 82              4298 	mov	dpl,r6
   115F 8F 83              4299 	mov	dph,r7
   1161 74 3B              4300 	mov	a,#0x3B
   1163 F0                 4301 	movx	@dptr,a
   1164 A3                 4302 	inc	dptr
                           4303 ;	Peephole 181	changed mov to clr
   1165 E4                 4304 	clr	a
   1166 F0                 4305 	movx	@dptr,a
                           4306 ;	main.c:487: if(nmi[i]>0){nmi[i]--;}
                           4307 ;	genPlus
                           4308 ;	Peephole 236.g	used r4 instead of ar4
   1167 EC                 4309 	mov	a,r4
   1168 24r12              4310 	add	a,#_nmi
   116A F8                 4311 	mov	r0,a
                           4312 ;	Peephole 236.g	used r5 instead of ar5
   116B ED                 4313 	mov	a,r5
   116C 34s00              4314 	addc	a,#(_nmi >> 8)
   116E F9                 4315 	mov	r1,a
                           4316 ;	genPointerGet
                           4317 ;	genFarPointerGet
   116F 88 82              4318 	mov	dpl,r0
   1171 89 83              4319 	mov	dph,r1
   1173 E0                 4320 	movx	a,@dptr
   1174 F5*04              4321 	mov	_timer_isr_sloc0_1_0,a
   1176 A3                 4322 	inc	dptr
   1177 E0                 4323 	movx	a,@dptr
   1178 F5*05              4324 	mov	(_timer_isr_sloc0_1_0 + 1),a
                           4325 ;	genIfx
   117A E5*04              4326 	mov	a,_timer_isr_sloc0_1_0
   117C 45*05              4327 	orl	a,(_timer_isr_sloc0_1_0 + 1)
                           4328 ;	genIfxJump
                           4329 ;	Peephole 108.c	removed ljmp by inverse jump logic
   117E 60 1D              4330 	jz	00107$
                           4331 ;	Peephole 300	removed redundant label 00158$
                           4332 ;	genIpush
   1180 C0 02              4333 	push	ar2
   1182 C0 03              4334 	push	ar3
                           4335 ;	genMinus
                           4336 ;	genMinusDec
   1184 E5*04              4337 	mov	a,_timer_isr_sloc0_1_0
   1186 24 FF              4338 	add	a,#0xff
   1188 FA                 4339 	mov	r2,a
   1189 E5*05              4340 	mov	a,(_timer_isr_sloc0_1_0 + 1)
   118B 34 FF              4341 	addc	a,#0xff
   118D FB                 4342 	mov	r3,a
                           4343 ;	genPointerSet
                           4344 ;     genFarPointerSet
   118E 88 82              4345 	mov	dpl,r0
   1190 89 83              4346 	mov	dph,r1
   1192 EA                 4347 	mov	a,r2
   1193 F0                 4348 	movx	@dptr,a
   1194 A3                 4349 	inc	dptr
   1195 EB                 4350 	mov	a,r3
   1196 F0                 4351 	movx	@dptr,a
                           4352 ;	genIpop
   1197 D0 03              4353 	pop	ar3
   1199 D0 02              4354 	pop	ar2
                           4355 ;	Peephole 112.b	changed ljmp to sjmp
   119B 80 1E              4356 	sjmp	00110$
   119D                    4357 00107$:
                           4358 ;	main.c:488: else{nmi[i]=0;nms[i]=0; nsec[i]=0;}
                           4359 ;	genPointerSet
                           4360 ;     genFarPointerSet
   119D 88 82              4361 	mov	dpl,r0
   119F 89 83              4362 	mov	dph,r1
                           4363 ;	Peephole 181	changed mov to clr
   11A1 E4                 4364 	clr	a
   11A2 F0                 4365 	movx	@dptr,a
   11A3 A3                 4366 	inc	dptr
                           4367 ;	Peephole 101	removed redundant mov
   11A4 F0                 4368 	movx	@dptr,a
                           4369 ;	genPlus
                           4370 ;	Peephole 236.g	used r4 instead of ar4
   11A5 EC                 4371 	mov	a,r4
   11A6 24r06              4372 	add	a,#_nms
   11A8 F5 82              4373 	mov	dpl,a
                           4374 ;	Peephole 236.g	used r5 instead of ar5
   11AA ED                 4375 	mov	a,r5
   11AB 34s00              4376 	addc	a,#(_nms >> 8)
   11AD F5 83              4377 	mov	dph,a
                           4378 ;	genPointerSet
                           4379 ;     genFarPointerSet
                           4380 ;	Peephole 181	changed mov to clr
   11AF E4                 4381 	clr	a
   11B0 F0                 4382 	movx	@dptr,a
   11B1 A3                 4383 	inc	dptr
                           4384 ;	Peephole 101	removed redundant mov
   11B2 F0                 4385 	movx	@dptr,a
                           4386 ;	genPointerSet
                           4387 ;     genFarPointerSet
   11B3 8E 82              4388 	mov	dpl,r6
   11B5 8F 83              4389 	mov	dph,r7
                           4390 ;	Peephole 181	changed mov to clr
   11B7 E4                 4391 	clr	a
   11B8 F0                 4392 	movx	@dptr,a
   11B9 A3                 4393 	inc	dptr
                           4394 ;	Peephole 101	removed redundant mov
   11BA F0                 4395 	movx	@dptr,a
   11BB                    4396 00110$:
                           4397 ;	main.c:490: if(nmi[i]==0 &&nms[i]==0 && nsec[i]==0)
                           4398 ;	genPlus
                           4399 ;	Peephole 236.g	used r4 instead of ar4
   11BB EC                 4400 	mov	a,r4
   11BC 24r12              4401 	add	a,#_nmi
   11BE F5 82              4402 	mov	dpl,a
                           4403 ;	Peephole 236.g	used r5 instead of ar5
   11C0 ED                 4404 	mov	a,r5
   11C1 34s00              4405 	addc	a,#(_nmi >> 8)
   11C3 F5 83              4406 	mov	dph,a
                           4407 ;	genPointerGet
                           4408 ;	genFarPointerGet
   11C5 E0                 4409 	movx	a,@dptr
   11C6 FE                 4410 	mov	r6,a
   11C7 A3                 4411 	inc	dptr
   11C8 E0                 4412 	movx	a,@dptr
                           4413 ;	genIfx
   11C9 FF                 4414 	mov	r7,a
                           4415 ;	Peephole 135	removed redundant mov
   11CA 4E                 4416 	orl	a,r6
                           4417 ;	genIfxJump
                           4418 ;	Peephole 108.b	removed ljmp by inverse jump logic
   11CB 70 30              4419 	jnz	00112$
                           4420 ;	Peephole 300	removed redundant label 00159$
                           4421 ;	genPlus
                           4422 ;	Peephole 236.g	used r4 instead of ar4
   11CD EC                 4423 	mov	a,r4
   11CE 24r06              4424 	add	a,#_nms
   11D0 F5 82              4425 	mov	dpl,a
                           4426 ;	Peephole 236.g	used r5 instead of ar5
   11D2 ED                 4427 	mov	a,r5
   11D3 34s00              4428 	addc	a,#(_nms >> 8)
   11D5 F5 83              4429 	mov	dph,a
                           4430 ;	genPointerGet
                           4431 ;	genFarPointerGet
   11D7 E0                 4432 	movx	a,@dptr
   11D8 FE                 4433 	mov	r6,a
   11D9 A3                 4434 	inc	dptr
   11DA E0                 4435 	movx	a,@dptr
                           4436 ;	genIfx
   11DB FF                 4437 	mov	r7,a
                           4438 ;	Peephole 135	removed redundant mov
   11DC 4E                 4439 	orl	a,r6
                           4440 ;	genIfxJump
                           4441 ;	Peephole 108.b	removed ljmp by inverse jump logic
   11DD 70 1E              4442 	jnz	00112$
                           4443 ;	Peephole 300	removed redundant label 00160$
                           4444 ;	genPlus
                           4445 ;	Peephole 236.g	used r4 instead of ar4
   11DF EC                 4446 	mov	a,r4
   11E0 24r0C              4447 	add	a,#_nsec
   11E2 F5 82              4448 	mov	dpl,a
                           4449 ;	Peephole 236.g	used r5 instead of ar5
   11E4 ED                 4450 	mov	a,r5
   11E5 34s00              4451 	addc	a,#(_nsec >> 8)
   11E7 F5 83              4452 	mov	dph,a
                           4453 ;	genPointerGet
                           4454 ;	genFarPointerGet
   11E9 E0                 4455 	movx	a,@dptr
   11EA FE                 4456 	mov	r6,a
   11EB A3                 4457 	inc	dptr
   11EC E0                 4458 	movx	a,@dptr
                           4459 ;	genIfx
   11ED FF                 4460 	mov	r7,a
                           4461 ;	Peephole 135	removed redundant mov
   11EE 4E                 4462 	orl	a,r6
                           4463 ;	genIfxJump
                           4464 ;	Peephole 108.b	removed ljmp by inverse jump logic
   11EF 70 0C              4465 	jnz	00112$
                           4466 ;	Peephole 300	removed redundant label 00161$
                           4467 ;	main.c:492: cnt[i]=0;
                           4468 ;	genPlus
                           4469 ;	Peephole 236.g	used r2 instead of ar2
   11F1 EA                 4470 	mov	a,r2
   11F2 24r03              4471 	add	a,#_cnt
   11F4 F5 82              4472 	mov	dpl,a
                           4473 ;	Peephole 236.g	used r3 instead of ar3
   11F6 EB                 4474 	mov	a,r3
   11F7 34s00              4475 	addc	a,#(_cnt >> 8)
   11F9 F5 83              4476 	mov	dph,a
                           4477 ;	genPointerSet
                           4478 ;     genFarPointerSet
                           4479 ;	Peephole 181	changed mov to clr
   11FB E4                 4480 	clr	a
   11FC F0                 4481 	movx	@dptr,a
   11FD                    4482 00112$:
                           4483 ;	main.c:494: countdown_alarm(nms[i],nsec[i],nmi[i],cnt[i],i);
                           4484 ;	genPlus
                           4485 ;	Peephole 236.g	used r4 instead of ar4
   11FD EC                 4486 	mov	a,r4
   11FE 24r06              4487 	add	a,#_nms
   1200 F5 82              4488 	mov	dpl,a
                           4489 ;	Peephole 236.g	used r5 instead of ar5
   1202 ED                 4490 	mov	a,r5
   1203 34s00              4491 	addc	a,#(_nms >> 8)
   1205 F5 83              4492 	mov	dph,a
                           4493 ;	genPointerGet
                           4494 ;	genFarPointerGet
   1207 E0                 4495 	movx	a,@dptr
   1208 FE                 4496 	mov	r6,a
   1209 A3                 4497 	inc	dptr
   120A E0                 4498 	movx	a,@dptr
   120B FF                 4499 	mov	r7,a
                           4500 ;	genPlus
                           4501 ;	Peephole 236.g	used r4 instead of ar4
   120C EC                 4502 	mov	a,r4
   120D 24r0C              4503 	add	a,#_nsec
   120F F5 82              4504 	mov	dpl,a
                           4505 ;	Peephole 236.g	used r5 instead of ar5
   1211 ED                 4506 	mov	a,r5
   1212 34s00              4507 	addc	a,#(_nsec >> 8)
   1214 F5 83              4508 	mov	dph,a
                           4509 ;	genPointerGet
                           4510 ;	genFarPointerGet
   1216 E0                 4511 	movx	a,@dptr
   1217 F5*04              4512 	mov	_timer_isr_sloc0_1_0,a
   1219 A3                 4513 	inc	dptr
   121A E0                 4514 	movx	a,@dptr
   121B F5*05              4515 	mov	(_timer_isr_sloc0_1_0 + 1),a
                           4516 ;	genPlus
                           4517 ;	Peephole 236.g	used r4 instead of ar4
   121D EC                 4518 	mov	a,r4
   121E 24r12              4519 	add	a,#_nmi
   1220 F5 82              4520 	mov	dpl,a
                           4521 ;	Peephole 236.g	used r5 instead of ar5
   1222 ED                 4522 	mov	a,r5
   1223 34s00              4523 	addc	a,#(_nmi >> 8)
   1225 F5 83              4524 	mov	dph,a
                           4525 ;	genPointerGet
                           4526 ;	genFarPointerGet
   1227 E0                 4527 	movx	a,@dptr
   1228 F5*06              4528 	mov	_timer_isr_sloc1_1_0,a
   122A A3                 4529 	inc	dptr
   122B E0                 4530 	movx	a,@dptr
   122C F5*07              4531 	mov	(_timer_isr_sloc1_1_0 + 1),a
                           4532 ;	genPlus
                           4533 ;	Peephole 236.g	used r2 instead of ar2
   122E EA                 4534 	mov	a,r2
   122F 24r03              4535 	add	a,#_cnt
   1231 F5 82              4536 	mov	dpl,a
                           4537 ;	Peephole 236.g	used r3 instead of ar3
   1233 EB                 4538 	mov	a,r3
   1234 34s00              4539 	addc	a,#(_cnt >> 8)
   1236 F5 83              4540 	mov	dph,a
                           4541 ;	genPointerGet
                           4542 ;	genFarPointerGet
   1238 E0                 4543 	movx	a,@dptr
   1239 F8                 4544 	mov	r0,a
                           4545 ;	genAssign
   123A 90s00r00           4546 	mov	dptr,#_countdown_alarm_PARM_2
   123D E5*04              4547 	mov	a,_timer_isr_sloc0_1_0
   123F F0                 4548 	movx	@dptr,a
   1240 A3                 4549 	inc	dptr
   1241 E5*05              4550 	mov	a,(_timer_isr_sloc0_1_0 + 1)
   1243 F0                 4551 	movx	@dptr,a
                           4552 ;	genAssign
   1244 90s00r00           4553 	mov	dptr,#_countdown_alarm_PARM_3
   1247 E5*06              4554 	mov	a,_timer_isr_sloc1_1_0
   1249 F0                 4555 	movx	@dptr,a
   124A A3                 4556 	inc	dptr
   124B E5*07              4557 	mov	a,(_timer_isr_sloc1_1_0 + 1)
   124D F0                 4558 	movx	@dptr,a
                           4559 ;	genAssign
   124E 90s00r00           4560 	mov	dptr,#_countdown_alarm_PARM_4
   1251 E8                 4561 	mov	a,r0
   1252 F0                 4562 	movx	@dptr,a
                           4563 ;	genAssign
   1253 90s00r00           4564 	mov	dptr,#_countdown_alarm_PARM_5
   1256 EA                 4565 	mov	a,r2
   1257 F0                 4566 	movx	@dptr,a
   1258 A3                 4567 	inc	dptr
   1259 EB                 4568 	mov	a,r3
   125A F0                 4569 	movx	@dptr,a
                           4570 ;	genCall
   125B 8E 82              4571 	mov	dpl,r6
   125D 8F 83              4572 	mov	dph,r7
   125F C0 02              4573 	push	ar2
   1261 C0 03              4574 	push	ar3
   1263 C0 04              4575 	push	ar4
   1265 C0 05              4576 	push	ar5
   1267 12s00r00           4577 	lcall	_countdown_alarm
   126A D0 05              4578 	pop	ar5
   126C D0 04              4579 	pop	ar4
   126E D0 03              4580 	pop	ar3
   1270 D0 02              4581 	pop	ar2
                           4582 ;	main.c:496: nms[i]--;
                           4583 ;	genPlus
                           4584 ;	Peephole 236.g	used r4 instead of ar4
   1272 EC                 4585 	mov	a,r4
   1273 24r06              4586 	add	a,#_nms
   1275 FC                 4587 	mov	r4,a
                           4588 ;	Peephole 236.g	used r5 instead of ar5
   1276 ED                 4589 	mov	a,r5
   1277 34s00              4590 	addc	a,#(_nms >> 8)
   1279 FD                 4591 	mov	r5,a
                           4592 ;	genPointerGet
                           4593 ;	genFarPointerGet
   127A 8C 82              4594 	mov	dpl,r4
   127C 8D 83              4595 	mov	dph,r5
   127E E0                 4596 	movx	a,@dptr
   127F FE                 4597 	mov	r6,a
   1280 A3                 4598 	inc	dptr
   1281 E0                 4599 	movx	a,@dptr
   1282 FF                 4600 	mov	r7,a
                           4601 ;	genMinus
                           4602 ;	genMinusDec
   1283 1E                 4603 	dec	r6
   1284 BE FF 01           4604 	cjne	r6,#0xff,00162$
   1287 1F                 4605 	dec	r7
   1288                    4606 00162$:
                           4607 ;	genPointerSet
                           4608 ;     genFarPointerSet
   1288 8C 82              4609 	mov	dpl,r4
   128A 8D 83              4610 	mov	dph,r5
   128C EE                 4611 	mov	a,r6
   128D F0                 4612 	movx	@dptr,a
   128E A3                 4613 	inc	dptr
   128F EF                 4614 	mov	a,r7
   1290 F0                 4615 	movx	@dptr,a
   1291                    4616 00130$:
                           4617 ;	main.c:473: for(i=0;i<3;i++)
                           4618 ;	genPlus
                           4619 ;     genPlusIncr
   1291 0A                 4620 	inc	r2
   1292 BA 00 01           4621 	cjne	r2,#0x00,00163$
   1295 0B                 4622 	inc	r3
   1296                    4623 00163$:
   1296 02s10rD4           4624 	ljmp	00128$
   1299                    4625 00118$:
                           4626 ;	main.c:502: if(timers==3)
                           4627 ;	genAssign
   1299 90s00r01           4628 	mov	dptr,#_timers
   129C E0                 4629 	movx	a,@dptr
   129D FA                 4630 	mov	r2,a
   129E A3                 4631 	inc	dptr
   129F E0                 4632 	movx	a,@dptr
   12A0 FB                 4633 	mov	r3,a
                           4634 ;	genCmpEq
                           4635 ;	gencjneshort
                           4636 ;	Peephole 112.b	changed ljmp to sjmp
                           4637 ;	Peephole 198.a	optimized misc jump sequence
   12A1 BA 03 0B           4638 	cjne	r2,#0x03,00126$
   12A4 BB 00 08           4639 	cjne	r3,#0x00,00126$
                           4640 ;	Peephole 200.b	removed redundant sjmp
                           4641 ;	Peephole 300	removed redundant label 00164$
                           4642 ;	Peephole 300	removed redundant label 00165$
                           4643 ;	main.c:503: {TH0 =   0xBF; TL0 =   0x75;}
                           4644 ;	genAssign
   12A7 75 8C BF           4645 	mov	_TH0,#0xBF
                           4646 ;	genAssign
   12AA 75 8A 75           4647 	mov	_TL0,#0x75
                           4648 ;	Peephole 112.b	changed ljmp to sjmp
   12AD 80 22              4649 	sjmp	00132$
   12AF                    4650 00126$:
                           4651 ;	main.c:504: else if(timers==2){TH0 =   0xB5; TL0 =   0x00;}
                           4652 ;	genCmpEq
                           4653 ;	gencjneshort
                           4654 ;	Peephole 112.b	changed ljmp to sjmp
                           4655 ;	Peephole 198.a	optimized misc jump sequence
   12AF BA 02 0B           4656 	cjne	r2,#0x02,00123$
   12B2 BB 00 08           4657 	cjne	r3,#0x00,00123$
                           4658 ;	Peephole 200.b	removed redundant sjmp
                           4659 ;	Peephole 300	removed redundant label 00166$
                           4660 ;	Peephole 300	removed redundant label 00167$
                           4661 ;	genAssign
   12B5 75 8C B5           4662 	mov	_TH0,#0xB5
                           4663 ;	genAssign
   12B8 75 8A 00           4664 	mov	_TL0,#0x00
                           4665 ;	Peephole 112.b	changed ljmp to sjmp
   12BB 80 14              4666 	sjmp	00132$
   12BD                    4667 00123$:
                           4668 ;	main.c:505: else if(timers==1){TH0 =   0x90;  TL0 =   0x00;}
                           4669 ;	genCmpEq
                           4670 ;	gencjneshort
                           4671 ;	Peephole 112.b	changed ljmp to sjmp
                           4672 ;	Peephole 198.a	optimized misc jump sequence
   12BD BA 01 0B           4673 	cjne	r2,#0x01,00120$
   12C0 BB 00 08           4674 	cjne	r3,#0x00,00120$
                           4675 ;	Peephole 200.b	removed redundant sjmp
                           4676 ;	Peephole 300	removed redundant label 00168$
                           4677 ;	Peephole 300	removed redundant label 00169$
                           4678 ;	genAssign
   12C3 75 8C 90           4679 	mov	_TH0,#0x90
                           4680 ;	genAssign
   12C6 75 8A 00           4681 	mov	_TL0,#0x00
                           4682 ;	Peephole 112.b	changed ljmp to sjmp
   12C9 80 06              4683 	sjmp	00132$
   12CB                    4684 00120$:
                           4685 ;	main.c:508: TH0 =   0x6F;
                           4686 ;	genAssign
   12CB 75 8C 6F           4687 	mov	_TH0,#0x6F
                           4688 ;	main.c:509: TL0 =   0x00;
                           4689 ;	genAssign
   12CE 75 8A 00           4690 	mov	_TL0,#0x00
   12D1                    4691 00132$:
   12D1 D0 D0              4692 	pop	psw
   12D3 D0 01              4693 	pop	(0+1)
   12D5 D0 00              4694 	pop	(0+0)
   12D7 D0 07              4695 	pop	(0+7)
   12D9 D0 06              4696 	pop	(0+6)
   12DB D0 05              4697 	pop	(0+5)
   12DD D0 04              4698 	pop	(0+4)
   12DF D0 03              4699 	pop	(0+3)
   12E1 D0 02              4700 	pop	(0+2)
   12E3 D0 83              4701 	pop	dph
   12E5 D0 82              4702 	pop	dpl
   12E7 D0 F0              4703 	pop	b
   12E9 D0 E0              4704 	pop	acc
   12EB 32                 4705 	reti
                           4706 	.area CSEG    (CODE)
                           4707 	.area CONST   (CODE)
   0000                    4708 __str_1:
   0000 43 6F 75 6E 74 2D  4709 	.ascii "Count-0"
        30
   0007 00                 4710 	.db 0x00
   0008                    4711 __str_2:
   0008 54 69 6D 65 72     4712 	.ascii "Timer"
   000D 00                 4713 	.db 0x00
   000E                    4714 __str_3:
   000E 2D 44              4715 	.ascii "-D"
   0010 00                 4716 	.db 0x00
   0011                    4717 __str_4:
   0011 0A                 4718 	.db 0x0A
   0012 0A                 4719 	.db 0x0A
   0013 0D                 4720 	.db 0x0D
   0014 09                 4721 	.db 0x09
   0015 09                 4722 	.db 0x09
   0016 09                 4723 	.db 0x09
   0017 09                 4724 	.db 0x09
   0018 09                 4725 	.db 0x09
   0019 2A 2A 2A 2A 2A 2A  4726 	.ascii "******** Clock Control Commands ********"
        2A 2A 20 43 6C 6F
        63 6B 20 43 6F 6E
        74 72 6F 6C 20 43
        6F 6D 6D 61 6E 64
        73 20 2A 2A 2A 2A
        2A 2A 2A 2A
   0041 0A                 4727 	.db 0x0A
   0042 0A                 4728 	.db 0x0A
   0043 0D                 4729 	.db 0x0D
   0044 09                 4730 	.db 0x09
   0045 31 2E 20 53 74 6F  4731 	.ascii "1. Stop "
        70 20
   004D 43 6C 6F 63 6B 20  4732 	.ascii "Clock "
   0053 09                 4733 	.db 0x09
   0054 09                 4734 	.db 0x09
   0055 09                 4735 	.db 0x09
   0056 09                 4736 	.db 0x09
   0057 09                 4737 	.db 0x09
   0058 09                 4738 	.db 0x09
   0059 32 2E 20 52 65 73  4739 	.ascii "2. Restart Clock "
        74 61 72 74 20 43
        6C 6F 63 6B 20
   006A 09                 4740 	.db 0x09
   006B 09                 4741 	.db 0x09
   006C 09                 4742 	.db 0x09
   006D 33 2E 20 52 65 73  4743 	.ascii "3. Reset Clock"
        65 74 20 43 6C 6F
        63 6B
   007B 0A                 4744 	.db 0x0A
   007C 0D                 4745 	.db 0x0D
   007D 09                 4746 	.db 0x09
   007E 34 2E 20 53 65 6C  4747 	.ascii "4. Select C"
        65 63 74 20 43
   0089 6F 75 6E 74 2D 44  4748 	.ascii "ount-Down Timer and Value "
        6F 77 6E 20 54 69
        6D 65 72 20 61 6E
        64 20 56 61 6C 75
        65 20
   00A3 09                 4749 	.db 0x09
   00A4 09                 4750 	.db 0x09
   00A5 09                 4751 	.db 0x09
   00A6 35 2E 20 54 69 6D  4752 	.ascii "5. Timer Enable "
        65 72 20 45 6E 61
        62 6C 65 20
   00B6 09                 4753 	.db 0x09
   00B7 09                 4754 	.db 0x09
   00B8 09                 4755 	.db 0x09
   00B9 36 2E 20 54 69 6D  4756 	.ascii "6. Timer Dis"
        65 72 20 44 69 73
   00C5 61 62 6C 65 20     4757 	.ascii "able "
   00CA 00                 4758 	.db 0x00
   00CB                    4759 __str_5:
   00CB 0A                 4760 	.db 0x0A
   00CC 0A                 4761 	.db 0x0A
   00CD 0A                 4762 	.db 0x0A
   00CE 0D                 4763 	.db 0x0D
   00CF 09                 4764 	.db 0x09
   00D0 09                 4765 	.db 0x09
   00D1 09                 4766 	.db 0x09
   00D2 09                 4767 	.db 0x09
   00D3 09                 4768 	.db 0x09
   00D4 2A 2A 2A 2A 2A 2A  4769 	.ascii "******** LCD Commands ********"
        2A 2A 20 4C 43 44
        20 43 6F 6D 6D 61
        6E 64 73 20 2A 2A
        2A 2A 2A 2A 2A 2A
   00F2 0A                 4770 	.db 0x0A
   00F3 0A                 4771 	.db 0x0A
   00F4 0D                 4772 	.db 0x0D
   00F5 09                 4773 	.db 0x09
   00F6 37 2E 20 43 72 65  4774 	.ascii "7. Create Custom "
        61 74 65 20 43 75
        73 74 6F 6D 20
   0107 43 68 61 72 61 63  4775 	.ascii "Character"
        74 65 72
   0110 09                 4776 	.db 0x09
   0111 09                 4777 	.db 0x09
   0112 09                 4778 	.db 0x09
   0113 38 2E 20 44 69 73  4779 	.ascii "8. Display Custom Character"
        70 6C 61 79 20 43
        75 73 74 6F 6D 20
        43 68 61 72 61 63
        74 65 72
   012E 09                 4780 	.db 0x09
   012F 09                 4781 	.db 0x09
   0130 09                 4782 	.db 0x09
   0131 27 63 27 2E 20 43  4783 	.ascii "'c'. CGRAM Dump"
        47 52 41 4D 20 44
        75 6D 70
   0140 09                 4784 	.db 0x09
   0141 09                 4785 	.db 0x09
   0142 09                 4786 	.db 0x09
   0143 27 64 27 2E 20 44  4787 	.ascii "'d'. DDRAM Dump"
        44 52 41 4D 20 44
        75 6D 70
   0152 0A                 4788 	.db 0x0A
   0153 0D                 4789 	.db 0x0D
   0154 09                 4790 	.db 0x09
   0155 27 6C 27 2E 45 45  4791 	.ascii "'l'.EEPROM Content on LCD Display"
        50 52 4F 4D 20 43
        6F 6E 74 65 6E 74
        20 6F 6E 20 4C 43
        44 20 44 69 73 70
        6C 61 79
   0176 09                 4792 	.db 0x09
   0177 09                 4793 	.db 0x09
   0178 27 71 27 2E 20 43  4794 	.ascii "'q'. Cl"
        6C
   017F 65 61 72 20 4C 43  4795 	.ascii "ear LCD Display"
        44 20 44 69 73 70
        6C 61 79
   018E 00                 4796 	.db 0x00
   018F                    4797 __str_6:
   018F 0A                 4798 	.db 0x0A
   0190 0A                 4799 	.db 0x0A
   0191 0A                 4800 	.db 0x0A
   0192 0D                 4801 	.db 0x0D
   0193 09                 4802 	.db 0x09
   0194 09                 4803 	.db 0x09
   0195 09                 4804 	.db 0x09
   0196 09                 4805 	.db 0x09
   0197 09                 4806 	.db 0x09
   0198 2A 2A 2A 2A 2A 2A  4807 	.ascii "******** IO Expander Control Commands ********"
        2A 2A 20 49 4F 20
        45 78 70 61 6E 64
        65 72 20 43 6F 6E
        74 72 6F 6C 20 43
        6F 6D 6D 61 6E 64
        73 20 2A 2A 2A 2A
        2A 2A 2A 2A
   01C6 0A                 4808 	.db 0x0A
   01C7 0A                 4809 	.db 0x0A
   01C8 0D                 4810 	.db 0x0D
   01C9 09                 4811 	.db 0x09
   01CA 27                 4812 	.ascii "'"
   01CB 78 27 2E 20 52 65  4813 	.ascii "x'. Reset Counter"
        73 65 74 20 43 6F
        75 6E 74 65 72
   01DC 09                 4814 	.db 0x09
   01DD 09                 4815 	.db 0x09
   01DE 09                 4816 	.db 0x09
   01DF 09                 4817 	.db 0x09
   01E0 27 69 27 2E 20 43  4818 	.ascii "'i'. Configure IO Pins"
        6F 6E 66 69 67 75
        72 65 20 49 4F 20
        50 69 6E 73
   01F6 09                 4819 	.db 0x09
   01F7 09                 4820 	.db 0x09
   01F8 09                 4821 	.db 0x09
   01F9 09                 4822 	.db 0x09
   01FA 27 73 27 2E 20 53  4823 	.ascii "'s'. Status o"
        74 61 74 75 73 20
        6F
   0207 66 20 49 4F 5F 45  4824 	.ascii "f IO_Expander"
        78 70 61 6E 64 65
        72
   0214 00                 4825 	.db 0x00
   0215                    4826 __str_7:
   0215 0A                 4827 	.db 0x0A
   0216 0A                 4828 	.db 0x0A
   0217 0A                 4829 	.db 0x0A
   0218 0D                 4830 	.db 0x0D
   0219 09                 4831 	.db 0x09
   021A 09                 4832 	.db 0x09
   021B 09                 4833 	.db 0x09
   021C 09                 4834 	.db 0x09
   021D 09                 4835 	.db 0x09
   021E 2A 2A 2A 2A 2A 2A  4836 	.ascii "******** EEPROM Control Commands ******** "
        2A 2A 20 45 45 50
        52 4F 4D 20 43 6F
        6E 74 72 6F 6C 20
        43 6F 6D 6D 61 6E
        64 73 20 2A 2A 2A
        2A 2A 2A 2A 2A 20
   0248 0A                 4837 	.db 0x0A
   0249 0A                 4838 	.db 0x0A
   024A 0D                 4839 	.db 0x0D
   024B 09                 4840 	.db 0x09
   024C 27 77 27 2E 20     4841 	.ascii "'w'. "
   0251 45 45 50 52 4F 4D  4842 	.ascii "EEPROM Write "
        20 57 72 69 74 65
        20
   025E 09                 4843 	.db 0x09
   025F 09                 4844 	.db 0x09
   0260 09                 4845 	.db 0x09
   0261 27 72 27 2E 20 45  4846 	.ascii "'r'. EEPROM Read "
        45 50 52 4F 4D 20
        52 65 61 64 20
   0272 09                 4847 	.db 0x09
   0273 09                 4848 	.db 0x09
   0274 09                 4849 	.db 0x09
   0275 09                 4850 	.db 0x09
   0276 27 68 27 2E 20 48  4851 	.ascii "'h'. HEX Dump"
        45 58 20 44 75 6D
        70
   0283 09                 4852 	.db 0x09
   0284 0A                 4853 	.db 0x0A
   0285 0D                 4854 	.db 0x0D
   0286 09                 4855 	.db 0x09
   0287 00                 4856 	.db 0x00
   0288                    4857 __str_8:
   0288 0A                 4858 	.db 0x0A
   0289 0A                 4859 	.db 0x0A
   028A 0D                 4860 	.db 0x0D
   028B 09                 4861 	.db 0x09
   028C 09                 4862 	.db 0x09
   028D 09                 4863 	.db 0x09
   028E 09                 4864 	.db 0x09
   028F 09                 4865 	.db 0x09
   0290 2A 2A 2A 2A 2A 2A  4866 	.ascii "******** Demo Commands ******** "
        2A 2A 20 44 65 6D
        6F 20 43 6F 6D 6D
        61 6E 64 73 20 2A
        2A 2A 2A 2A 2A 2A
        2A 20
   02B0 0A                 4867 	.db 0x0A
   02B1 0A                 4868 	.db 0x0A
   02B2 0D                 4869 	.db 0x0D
   02B3 09                 4870 	.db 0x09
   02B4 27 79 27 2E 20 57  4871 	.ascii "'y'. Watchdog De"
        61 74 63 68 64 6F
        67 20 44 65
   02C4 6D 6F 20           4872 	.ascii "mo "
   02C7 09                 4873 	.db 0x09
   02C8 09                 4874 	.db 0x09
   02C9 09                 4875 	.db 0x09
   02CA 27 39 27 2E 20 4C  4876 	.ascii "'9'. LOGO Creation Demo "
        4F 47 4F 20 43 72
        65 61 74 69 6F 6E
        20 44 65 6D 6F 20
   02E2 00                 4877 	.db 0x00
   02E3                    4878 __str_9:
   02E3 0A                 4879 	.db 0x0A
   02E4 0A                 4880 	.db 0x0A
   02E5 0D                 4881 	.db 0x0D
   02E6 09                 4882 	.db 0x09
   02E7 09                 4883 	.db 0x09
   02E8 20 2A 2A 2A 2A 2A  4884 	.ascii " ******  Stop Clock  *****"
        2A 20 20 53 74 6F
        70 20 43 6C 6F 63
        6B 20 20 2A 2A 2A
        2A 2A
   0302 00                 4885 	.db 0x00
   0303                    4886 __str_10:
   0303 0A                 4887 	.db 0x0A
   0304 0A                 4888 	.db 0x0A
   0305 0D                 4889 	.db 0x0D
   0306 09                 4890 	.db 0x09
   0307 09                 4891 	.db 0x09
   0308 20 2A 2A 2A 2A 2A  4892 	.ascii " ******  Restart Clock  ******"
        2A 20 20 52 65 73
        74 61 72 74 20 43
        6C 6F 63 6B 20 20
        2A 2A 2A 2A 2A 2A
   0326 00                 4893 	.db 0x00
   0327                    4894 __str_11:
   0327 0A                 4895 	.db 0x0A
   0328 0A                 4896 	.db 0x0A
   0329 0D                 4897 	.db 0x0D
   032A 09                 4898 	.db 0x09
   032B 09                 4899 	.db 0x09
   032C 20 2A 2A 2A 2A 2A  4900 	.ascii " ******  Reset Clock  ******"
        2A 20 20 52 65 73
        65 74 20 43 6C 6F
        63 6B 20 20 2A 2A
        2A 2A 2A 2A
   0348 00                 4901 	.db 0x00
   0349                    4902 __str_12:
   0349 0A                 4903 	.db 0x0A
   034A 0A                 4904 	.db 0x0A
   034B 0D                 4905 	.db 0x0D
   034C 09                 4906 	.db 0x09
   034D 09                 4907 	.db 0x09
   034E 20 2A 2A 2A 2A 2A  4908 	.ascii " ******  Load Counter Value ******"
        2A 20 20 4C 6F 61
        64 20 43 6F 75 6E
        74 65 72 20 56 61
        6C 75 65 20 2A 2A
        2A 2A 2A 2A
   0370 00                 4909 	.db 0x00
   0371                    4910 __str_13:
   0371 0A                 4911 	.db 0x0A
   0372 0A                 4912 	.db 0x0A
   0373 0D                 4913 	.db 0x0D
   0374 09                 4914 	.db 0x09
   0375 09                 4915 	.db 0x09
   0376 20 2A 2A 2A 2A 2A  4916 	.ascii " ******  Timer Enable  ******"
        2A 20 20 54 69 6D
        65 72 20 45 6E 61
        62 6C 65 20 20 2A
        2A 2A 2A 2A 2A
   0393 00                 4917 	.db 0x00
   0394                    4918 __str_14:
   0394 0A                 4919 	.db 0x0A
   0395 0A                 4920 	.db 0x0A
   0396 0D                 4921 	.db 0x0D
   0397 09                 4922 	.db 0x09
   0398 09                 4923 	.db 0x09
   0399 20 2A 2A 2A 2A 2A  4924 	.ascii " ******  Timer Disable  ******"
        2A 20 20 54 69 6D
        65 72 20 44 69 73
        61 62 6C 65 20 20
        2A 2A 2A 2A 2A 2A
   03B7 00                 4925 	.db 0x00
   03B8                    4926 __str_15:
   03B8 0A                 4927 	.db 0x0A
   03B9 0A                 4928 	.db 0x0A
   03BA 0D                 4929 	.db 0x0D
   03BB 09                 4930 	.db 0x09
   03BC 09                 4931 	.db 0x09
   03BD 20 2A 2A 2A 2A 2A  4932 	.ascii " ******  Custom Character  ******"
        2A 20 20 43 75 73
        74 6F 6D 20 43 68
        61 72 61 63 74 65
        72 20 20 2A 2A 2A
        2A 2A 2A
   03DE 00                 4933 	.db 0x00
   03DF                    4934 __str_16:
   03DF 0A                 4935 	.db 0x0A
   03E0 0A                 4936 	.db 0x0A
   03E1 0D                 4937 	.db 0x0D
   03E2 09                 4938 	.db 0x09
   03E3 09                 4939 	.db 0x09
   03E4 20 2A 2A 2A 2A 2A  4940 	.ascii " ******  Reset Counter  ******"
        2A 20 20 52 65 73
        65 74 20 43 6F 75
        6E 74 65 72 20 20
        2A 2A 2A 2A 2A 2A
   0402 00                 4941 	.db 0x00
   0403                    4942 __str_17:
   0403 0A                 4943 	.db 0x0A
   0404 0A                 4944 	.db 0x0A
   0405 0D                 4945 	.db 0x0D
   0406 09                 4946 	.db 0x09
   0407 09                 4947 	.db 0x09
   0408 20 2A 2A 2A 2A 2A  4948 	.ascii " ******  Configure IO Pins  ******"
        2A 20 20 43 6F 6E
        66 69 67 75 72 65
        20 49 4F 20 50 69
        6E 73 20 20 2A 2A
        2A 2A 2A 2A
   042A 00                 4949 	.db 0x00
   042B                    4950 __str_18:
   042B 0A                 4951 	.db 0x0A
   042C 0A                 4952 	.db 0x0A
   042D 0D                 4953 	.db 0x0D
   042E 09                 4954 	.db 0x09
   042F 09                 4955 	.db 0x09
   0430 20 2A 2A 2A 2A 2A  4956 	.ascii " ******  Status of IO Expander  ******"
        2A 20 20 53 74 61
        74 75 73 20 6F 66
        20 49 4F 20 45 78
        70 61 6E 64 65 72
        20 20 2A 2A 2A 2A
        2A 2A
   0456 00                 4957 	.db 0x00
   0457                    4958 __str_19:
   0457 0A                 4959 	.db 0x0A
   0458 0A                 4960 	.db 0x0A
   0459 0D                 4961 	.db 0x0D
   045A 09                 4962 	.db 0x09
   045B 09                 4963 	.db 0x09
   045C 20 2A 2A 2A 2A 2A  4964 	.ascii " ******  EEPROM Write  ******"
        2A 20 20 45 45 50
        52 4F 4D 20 57 72
        69 74 65 20 20 2A
        2A 2A 2A 2A 2A
   0479 00                 4965 	.db 0x00
   047A                    4966 __str_20:
   047A 0A                 4967 	.db 0x0A
   047B 0A                 4968 	.db 0x0A
   047C 0D                 4969 	.db 0x0D
   047D 09                 4970 	.db 0x09
   047E 09                 4971 	.db 0x09
   047F 20 2A 2A 2A 2A 2A  4972 	.ascii " ******  EEPROM Read  ******"
        2A 20 20 45 45 50
        52 4F 4D 20 52 65
        61 64 20 20 2A 2A
        2A 2A 2A 2A
   049B 00                 4973 	.db 0x00
   049C                    4974 __str_21:
   049C 0A                 4975 	.db 0x0A
   049D 0A                 4976 	.db 0x0A
   049E 0D                 4977 	.db 0x0D
   049F 09                 4978 	.db 0x09
   04A0 09                 4979 	.db 0x09
   04A1 20 2A 2A 2A 2A 2A  4980 	.ascii " ******  CGRAM Dump  ******"
        2A 20 20 43 47 52
        41 4D 20 44 75 6D
        70 20 20 2A 2A 2A
        2A 2A 2A
   04BC 00                 4981 	.db 0x00
   04BD                    4982 __str_22:
   04BD 0A                 4983 	.db 0x0A
   04BE 0A                 4984 	.db 0x0A
   04BF 0D                 4985 	.db 0x0D
   04C0 09                 4986 	.db 0x09
   04C1 09                 4987 	.db 0x09
   04C2 20 2A 2A 2A 2A 2A  4988 	.ascii " ******  DDRAM Dump  ******"
        2A 20 20 44 44 52
        41 4D 20 44 75 6D
        70 20 20 2A 2A 2A
        2A 2A 2A
   04DD 00                 4989 	.db 0x00
   04DE                    4990 __str_23:
   04DE 0A                 4991 	.db 0x0A
   04DF 0A                 4992 	.db 0x0A
   04E0 0D                 4993 	.db 0x0D
   04E1 09                 4994 	.db 0x09
   04E2 09                 4995 	.db 0x09
   04E3 20 2A 2A 2A 2A 2A  4996 	.ascii " ******  Hex Dump  ******"
        2A 20 20 48 65 78
        20 44 75 6D 70 20
        20 2A 2A 2A 2A 2A
        2A
   04FC 00                 4997 	.db 0x00
   04FD                    4998 __str_24:
   04FD 0A                 4999 	.db 0x0A
   04FE 0A                 5000 	.db 0x0A
   04FF 0D                 5001 	.db 0x0D
   0500 09                 5002 	.db 0x09
   0501 09                 5003 	.db 0x09
   0502 20 2A 2A 2A 2A 2A  5004 	.ascii " ******  LCD DISPLAY  ******"
        2A 20 20 4C 43 44
        20 44 49 53 50 4C
        41 59 20 20 2A 2A
        2A 2A 2A 2A
   051E 00                 5005 	.db 0x00
   051F                    5006 __str_25:
   051F 0A                 5007 	.db 0x0A
   0520 0A                 5008 	.db 0x0A
   0521 0D                 5009 	.db 0x0D
   0522 09                 5010 	.db 0x09
   0523 09                 5011 	.db 0x09
   0524 20 2A 2A 2A 2A 2A  5012 	.ascii " ******  Clear LCD  ******"
        2A 20 20 43 6C 65
        61 72 20 4C 43 44
        20 20 2A 2A 2A 2A
        2A 2A
   053E 00                 5013 	.db 0x00
   053F                    5014 __str_26:
   053F 0A                 5015 	.db 0x0A
   0540 0A                 5016 	.db 0x0A
   0541 0D                 5017 	.db 0x0D
   0542 09                 5018 	.db 0x09
   0543 20 53 65 6C 65 63  5019 	.ascii " Select timer number between 0 to 2: "
        74 20 74 69 6D 65
        72 20 6E 75 6D 62
        65 72 20 62 65 74
        77 65 65 6E 20 30
        20 74 6F 20 32 3A
        20
   0568 09                 5020 	.db 0x09
   0569 00                 5021 	.db 0x00
   056A                    5022 __str_27:
   056A 0A                 5023 	.db 0x0A
   056B 0A                 5024 	.db 0x0A
   056C 0D                 5025 	.db 0x0D
   056D 20 2A 2D 45 52 52  5026 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0577 0A                 5027 	.db 0x0A
   0578 0D                 5028 	.db 0x0D
   0579 09                 5029 	.db 0x09
   057A 20 45 6E 74 65 72  5030 	.ascii " Enter a valid number between 0 to 2"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 32
   059E 00                 5031 	.db 0x00
   059F                    5032 __str_28:
   059F 0A                 5033 	.db 0x0A
   05A0 0A                 5034 	.db 0x0A
   05A1 0D                 5035 	.db 0x0D
   05A2 45 6E 74 65 72 20  5036 	.ascii "Enter minutes for timer %d between 0 to 59: "
        6D 69 6E 75 74 65
        73 20 66 6F 72 20
        74 69 6D 65 72 20
        25 64 20 62 65 74
        77 65 65 6E 20 30
        20 74 6F 20 35 39
        3A 20
   05CE 09                 5037 	.db 0x09
   05CF 00                 5038 	.db 0x00
   05D0                    5039 __str_29:
   05D0 0A                 5040 	.db 0x0A
   05D1 0A                 5041 	.db 0x0A
   05D2 0D                 5042 	.db 0x0D
   05D3 20 2A 2D 45 52 52  5043 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   05DD 0A                 5044 	.db 0x0A
   05DE 0D                 5045 	.db 0x0D
   05DF 09                 5046 	.db 0x09
   05E0 20 45 6E 74 65 72  5047 	.ascii " Enter a valid number between 0 to 59"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 35
        39
   0605 00                 5048 	.db 0x00
   0606                    5049 __str_30:
   0606 0A                 5050 	.db 0x0A
   0607 0A                 5051 	.db 0x0A
   0608 0D                 5052 	.db 0x0D
   0609 45 6E 74 65 72 20  5053 	.ascii "Enter seconds for timer %d between 1 to 59: "
        73 65 63 6F 6E 64
        73 20 66 6F 72 20
        74 69 6D 65 72 20
        25 64 20 62 65 74
        77 65 65 6E 20 31
        20 74 6F 20 35 39
        3A 20
   0635 09                 5054 	.db 0x09
   0636 00                 5055 	.db 0x00
   0637                    5056 __str_31:
   0637 0A                 5057 	.db 0x0A
   0638 0A                 5058 	.db 0x0A
   0639 0D                 5059 	.db 0x0D
   063A 45 6E 74 65 72 20  5060 	.ascii "Enter milisec for timer %d between 0 to 9: "
        6D 69 6C 69 73 65
        63 20 66 6F 72 20
        74 69 6D 65 72 20
        25 64 20 62 65 74
        77 65 65 6E 20 30
        20 74 6F 20 39 3A
        20
   0665 09                 5061 	.db 0x09
   0666 00                 5062 	.db 0x00
   0667                    5063 __str_32:
   0667 0A                 5064 	.db 0x0A
   0668 0A                 5065 	.db 0x0A
   0669 0D                 5066 	.db 0x0D
   066A 20 2A 2D 45 52 52  5067 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0674 0A                 5068 	.db 0x0A
   0675 0D                 5069 	.db 0x0D
   0676 09                 5070 	.db 0x09
   0677 20 45 6E 74 65 72  5071 	.ascii " Enter a valid number between 0 to 9"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 39
   069B 00                 5072 	.db 0x00
   069C                    5073 __str_33:
   069C 0A                 5074 	.db 0x0A
   069D 0A                 5075 	.db 0x0A
   069E 0D                 5076 	.db 0x0D
   069F 09                 5077 	.db 0x09
   06A0 57 68 69 63 68 20  5078 	.ascii "Which timer to enable between 0 to 2:"
        74 69 6D 65 72 20
        74 6F 20 65 6E 61
        62 6C 65 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 32
        3A
   06C5 09                 5079 	.db 0x09
   06C6 00                 5080 	.db 0x00
   06C7                    5081 __str_34:
   06C7 2D 45              5082 	.ascii "-E"
   06C9 00                 5083 	.db 0x00
   06CA                    5084 __str_35:
   06CA 0A                 5085 	.db 0x0A
   06CB 0A                 5086 	.db 0x0A
   06CC 0D                 5087 	.db 0x0D
   06CD 57 68 69 63 68 20  5088 	.ascii "Which timer to Disable between 0 to 2:"
        74 69 6D 65 72 20
        74 6F 20 44 69 73
        61 62 6C 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        32 3A
   06F3 09                 5089 	.db 0x09
   06F4 00                 5090 	.db 0x00
   06F5                    5091 __str_36:
   06F5 44 69 73 61 62 6C  5092 	.ascii "Disabled"
        65 64
   06FD 00                 5093 	.db 0x00
   06FE                    5094 __str_37:
   06FE 0A                 5095 	.db 0x0A
   06FF 0A                 5096 	.db 0x0A
   0700 09                 5097 	.db 0x09
   0701 09                 5098 	.db 0x09
   0702 20 44 69 73 61 62  5099 	.ascii " Disabling..."
        6C 69 6E 67 2E 2E
        2E
   070F 0A                 5100 	.db 0x0A
   0710 0D                 5101 	.db 0x0D
   0711 00                 5102 	.db 0x00
   0712                    5103 __str_38:
   0712 0A                 5104 	.db 0x0A
   0713 0A                 5105 	.db 0x0A
   0714 0D                 5106 	.db 0x0D
   0715 09                 5107 	.db 0x09
   0716 20 53 65 6C 65 63  5108 	.ascii " Select Character code between 0 to 7: "
        74 20 43 68 61 72
        61 63 74 65 72 20
        63 6F 64 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        37 3A 20
   073D 09                 5109 	.db 0x09
   073E 00                 5110 	.db 0x00
   073F                    5111 __str_39:
   073F 0A                 5112 	.db 0x0A
   0740 0A                 5113 	.db 0x0A
   0741 0D                 5114 	.db 0x0D
   0742 20 2A 2D 45 52 52  5115 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   074C 0A                 5116 	.db 0x0A
   074D 0D                 5117 	.db 0x0D
   074E 09                 5118 	.db 0x09
   074F 20 45 6E 74 65 72  5119 	.ascii " Enter a valid number between 0 to 7"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 37
   0773 00                 5120 	.db 0x00
   0774                    5121 __str_40:
   0774 0A                 5122 	.db 0x0A
   0775 0A                 5123 	.db 0x0A
   0776 0D                 5124 	.db 0x0D
   0777 09                 5125 	.db 0x09
   0778 20 45 6E 74 65 72  5126 	.ascii " Enter pixel map in HEX in HH format from 00 to 1F: "
        20 70 69 78 65 6C
        20 6D 61 70 20 69
        6E 20 48 45 58 20
        69 6E 20 48 48 20
        66 6F 72 6D 61 74
        20 66 72 6F 6D 20
        30 30 20 74 6F 20
        31 46 3A 20
   07AC 09                 5127 	.db 0x09
   07AD 00                 5128 	.db 0x00
   07AE                    5129 __str_41:
   07AE 0A                 5130 	.db 0x0A
   07AF 0D                 5131 	.db 0x0D
   07B0 09                 5132 	.db 0x09
   07B1 20 44 61 74 61 20  5133 	.ascii " Data in row number %d: "
        69 6E 20 72 6F 77
        20 6E 75 6D 62 65
        72 20 25 64 3A 20
   07C9 09                 5134 	.db 0x09
   07CA 00                 5135 	.db 0x00
   07CB                    5136 __str_42:
   07CB 0A                 5137 	.db 0x0A
   07CC 0A                 5138 	.db 0x0A
   07CD 0D                 5139 	.db 0x0D
   07CE 20 2A 2D 45 52 52  5140 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   07D8 0A                 5141 	.db 0x0A
   07D9 0D                 5142 	.db 0x0D
   07DA 09                 5143 	.db 0x09
   07DB 20 45 6E 74 65 72  5144 	.ascii " Enter a valid HEX number between 00 to 1F i"
        20 61 20 76 61 6C
        69 64 20 48 45 58
        20 6E 75 6D 62 65
        72 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 31 46
        20 69
   0807 6E 20 48 48 20 66  5145 	.ascii "n HH format:"
        6F 72 6D 61 74 3A
   0813 09                 5146 	.db 0x09
   0814 00                 5147 	.db 0x00
   0815                    5148 __str_43:
   0815 0A                 5149 	.db 0x0A
   0816 0D                 5150 	.db 0x0D
   0817 09                 5151 	.db 0x09
   0818 09                 5152 	.db 0x09
   0819 20 20 20 20 20 20  5153 	.ascii "      "
   081F 09                 5154 	.db 0x09
   0820 31 32 33 34 35     5155 	.ascii "12345"
   0825 00                 5156 	.db 0x00
   0826                    5157 __str_44:
   0826 0A                 5158 	.db 0x0A
   0827 0D                 5159 	.db 0x0D
   0828 09                 5160 	.db 0x09
   0829 09                 5161 	.db 0x09
   082A 52 4F 57 20 25 64  5162 	.ascii "ROW %d:"
        3A
   0831 09                 5163 	.db 0x09
   0832 00                 5164 	.db 0x00
   0833                    5165 __str_45:
   0833 25 63              5166 	.ascii "%c"
   0835 00                 5167 	.db 0x00
   0836                    5168 __str_46:
   0836 0A                 5169 	.db 0x0A
   0837 0A                 5170 	.db 0x0A
   0838 0D                 5171 	.db 0x0D
   0839 09                 5172 	.db 0x09
   083A 20 53 65 6C 65 63  5173 	.ascii " Select Character code between 0 to 7 to display: "
        74 20 43 68 61 72
        61 63 74 65 72 20
        63 6F 64 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        37 20 74 6F 20 64
        69 73 70 6C 61 79
        3A 20
   086C 09                 5174 	.db 0x09
   086D 00                 5175 	.db 0x00
   086E                    5176 __str_47:
   086E 0A                 5177 	.db 0x0A
   086F 0A                 5178 	.db 0x0A
   0870 0D                 5179 	.db 0x0D
   0871 20 45 6E 74 65 72  5180 	.ascii " Enter Address in Hex in HHH format between 000 to 7FF: "
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20 37 46 46
        3A 20
   08A9 00                 5181 	.db 0x00
   08AA                    5182 __str_48:
   08AA 0A                 5183 	.db 0x0A
   08AB 0A                 5184 	.db 0x0A
   08AC 0D                 5185 	.db 0x0D
   08AD 20 2A 2D 45 52 52  5186 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   08B7 09                 5187 	.db 0x09
   08B8 20 50 6C 65 61 73  5188 	.ascii " Please Enter valid Address betweem 000 and 7F"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 41 64 64 72
        65 73 73 20 62 65
        74 77 65 65 6D 20
        30 30 30 20 61 6E
        64 20 37 46
   08E6 46 3A 20           5189 	.ascii "F: "
   08E9 00                 5190 	.db 0x00
   08EA                    5191 __str_49:
   08EA 0A                 5192 	.db 0x0A
   08EB 0A                 5193 	.db 0x0A
   08EC 0D                 5194 	.db 0x0D
   08ED 20 45 6E 74 65 72  5195 	.ascii " Enter Data in Hex in HH format between 00 to FF: "
        20 44 61 74 61 20
        69 6E 20 48 65 78
        20 69 6E 20 48 48
        20 66 6F 72 6D 61
        74 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 46 46
        3A 20
   091F 00                 5196 	.db 0x00
   0920                    5197 __str_50:
   0920 0A                 5198 	.db 0x0A
   0921 0A                 5199 	.db 0x0A
   0922 0D                 5200 	.db 0x0D
   0923 20 2A 2D 45 52 52  5201 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   092D 09                 5202 	.db 0x09
   092E 20 50 6C 65 61 73  5203 	.ascii " Please Enter valid data in Hex in HH format b"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 64 61 74 61
        20 69 6E 20 48 65
        78 20 69 6E 20 48
        48 20 66 6F 72 6D
        61 74 20 62
   095C 65 74 77 65 65 6E  5204 	.ascii "etween 00 to FF: "
        20 30 30 20 74 6F
        20 46 46 3A 20
   096D 00                 5205 	.db 0x00
   096E                    5206 __str_51:
   096E 0A                 5207 	.db 0x0A
   096F 0A                 5208 	.db 0x0A
   0970 0D                 5209 	.db 0x0D
   0971 09                 5210 	.db 0x09
   0972 09                 5211 	.db 0x09
   0973 09                 5212 	.db 0x09
   0974 25 78 20 3A 20 25  5213 	.ascii "%x : %x "
        78 20
   097C 0A                 5214 	.db 0x0A
   097D 00                 5215 	.db 0x00
   097E                    5216 __str_52:
   097E 0A                 5217 	.db 0x0A
   097F 0A                 5218 	.db 0x0A
   0980 0D                 5219 	.db 0x0D
   0981 09                 5220 	.db 0x09
   0982 20 43 75 72 72 65  5221 	.ascii " Current Status of the IO_Expander pins is: 0x%x"
        6E 74 20 53 74 61
        74 75 73 20 6F 66
        20 74 68 65 20 49
        4F 5F 45 78 70 61
        6E 64 65 72 20 70
        69 6E 73 20 69 73
        3A 20 30 78 25 78
   09B2 0A                 5222 	.db 0x0A
   09B3 0A                 5223 	.db 0x0A
   09B4 0D                 5224 	.db 0x0D
   09B5 00                 5225 	.db 0x00
   09B6                    5226 __str_53:
   09B6 0A                 5227 	.db 0x0A
   09B7 0A                 5228 	.db 0x0A
   09B8 0A                 5229 	.db 0x0A
   09B9 0D                 5230 	.db 0x0D
   09BA 57 61 74 63 68 64  5231 	.ascii "Watchdog RESET Demo"
        6F 67 20 52 45 53
        45 54 20 44 65 6D
        6F
   09CD 00                 5232 	.db 0x00
   09CE                    5233 __str_54:
   09CE 0A                 5234 	.db 0x0A
   09CF 0A                 5235 	.db 0x0A
   09D0 0A                 5236 	.db 0x0A
   09D1 0D                 5237 	.db 0x0D
   09D2 09                 5238 	.db 0x09
   09D3 09                 5239 	.db 0x09
   09D4 09                 5240 	.db 0x09
   09D5 09                 5241 	.db 0x09
   09D6 09                 5242 	.db 0x09
   09D7 2A 2A 2A 2A 2A 2A  5243 	.ascii "******** LCD Commands ********"
        2A 2A 20 4C 43 44
        20 43 6F 6D 6D 61
        6E 64 73 20 2A 2A
        2A 2A 2A 2A 2A 2A
   09F5 0A                 5244 	.db 0x0A
   09F6 0A                 5245 	.db 0x0A
   09F7 0D                 5246 	.db 0x0D
   09F8 09                 5247 	.db 0x09
   09F9 37 2E 20 43 72 65  5248 	.ascii "7. Create Custom "
        61 74 65 20 43 75
        73 74 6F 6D 20
   0A0A 43 68 61 72 61 63  5249 	.ascii "Character"
        74 65 72
   0A13 09                 5250 	.db 0x09
   0A14 09                 5251 	.db 0x09
   0A15 09                 5252 	.db 0x09
   0A16 38 2E 20 44 69 73  5253 	.ascii "8. Display Custom Character"
        70 6C 61 79 20 43
        75 73 74 6F 6D 20
        43 68 61 72 61 63
        74 65 72
   0A31 09                 5254 	.db 0x09
   0A32 09                 5255 	.db 0x09
   0A33 09                 5256 	.db 0x09
   0A34 27 63 27 2E 20 43  5257 	.ascii "'c'. CGRAM Dump"
        47 52 41 4D 20 44
        75 6D 70
   0A43 09                 5258 	.db 0x09
   0A44 09                 5259 	.db 0x09
   0A45 09                 5260 	.db 0x09
   0A46 27 64 27 2E 20 44  5261 	.ascii "'d'. DDRAM Dump"
        44 52 41 4D 20 44
        75 6D 70
   0A55 0A                 5262 	.db 0x0A
   0A56 0D                 5263 	.db 0x0D
   0A57 09                 5264 	.db 0x09
   0A58 27 6C 27 2E 20 4C  5265 	.ascii "'l'. LCD Display"
        43 44 20 44 69 73
        70 6C 61 79
   0A68 09                 5266 	.db 0x09
   0A69 09                 5267 	.db 0x09
   0A6A 09                 5268 	.db 0x09
   0A6B 09                 5269 	.db 0x09
   0A6C 27 71 27 2E 20 43  5270 	.ascii "'q'. Clear LCD Display"
        6C 65 61 72 20 4C
        43 44 20 44 69 73
        70 6C 61 79
   0A82 00                 5271 	.db 0x00
   0A83                    5272 __str_55:
   0A83 0A                 5273 	.db 0x0A
   0A84 0A                 5274 	.db 0x0A
   0A85 0D                 5275 	.db 0x0D
   0A86 09                 5276 	.db 0x09
   0A87 20 50 72 65 73 73  5277 	.ascii " Press 'm' to see the Menu again or Press Command Key:"
        20 27 6D 27 20 74
        6F 20 73 65 65 20
        74 68 65 20 4D 65
        6E 75 20 61 67 61
        69 6E 20 6F 72 20
        50 72 65 73 73 20
        43 6F 6D 6D 61 6E
        64 20 4B 65 79 3A
   0ABD 09                 5278 	.db 0x09
   0ABE 00                 5279 	.db 0x00
                           5280 	.area XINIT   (CODE)
   0000                    5281 __xinit__flag:
   0000 00                 5282 	.db #0x00
   0001                    5283 __xinit__timers:
   0001 00 00              5284 	.byte #0x00,#0x00
