                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Wed Nov 16 16:21:03 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _ext_zero
                             13 	.globl _timer_isr
                             14 	.globl _main
                             15 	.globl __sdcc_external_startup
                             16 	.globl _P5_7
                             17 	.globl _P5_6
                             18 	.globl _P5_5
                             19 	.globl _P5_4
                             20 	.globl _P5_3
                             21 	.globl _P5_2
                             22 	.globl _P5_1
                             23 	.globl _P5_0
                             24 	.globl _P4_7
                             25 	.globl _P4_6
                             26 	.globl _P4_5
                             27 	.globl _P4_4
                             28 	.globl _P4_3
                             29 	.globl _P4_2
                             30 	.globl _P4_1
                             31 	.globl _P4_0
                             32 	.globl _PX0L
                             33 	.globl _PT0L
                             34 	.globl _PX1L
                             35 	.globl _PT1L
                             36 	.globl _PLS
                             37 	.globl _PT2L
                             38 	.globl _PPCL
                             39 	.globl _EC
                             40 	.globl _CCF0
                             41 	.globl _CCF1
                             42 	.globl _CCF2
                             43 	.globl _CCF3
                             44 	.globl _CCF4
                             45 	.globl _CR
                             46 	.globl _CF
                             47 	.globl _TF2
                             48 	.globl _EXF2
                             49 	.globl _RCLK
                             50 	.globl _TCLK
                             51 	.globl _EXEN2
                             52 	.globl _TR2
                             53 	.globl _C_T2
                             54 	.globl _CP_RL2
                             55 	.globl _T2CON_7
                             56 	.globl _T2CON_6
                             57 	.globl _T2CON_5
                             58 	.globl _T2CON_4
                             59 	.globl _T2CON_3
                             60 	.globl _T2CON_2
                             61 	.globl _T2CON_1
                             62 	.globl _T2CON_0
                             63 	.globl _PT2
                             64 	.globl _ET2
                             65 	.globl _CY
                             66 	.globl _AC
                             67 	.globl _F0
                             68 	.globl _RS1
                             69 	.globl _RS0
                             70 	.globl _OV
                             71 	.globl _F1
                             72 	.globl _P
                             73 	.globl _PS
                             74 	.globl _PT1
                             75 	.globl _PX1
                             76 	.globl _PT0
                             77 	.globl _PX0
                             78 	.globl _RD
                             79 	.globl _WR
                             80 	.globl _T1
                             81 	.globl _T0
                             82 	.globl _INT1
                             83 	.globl _INT0
                             84 	.globl _TXD
                             85 	.globl _RXD
                             86 	.globl _P3_7
                             87 	.globl _P3_6
                             88 	.globl _P3_5
                             89 	.globl _P3_4
                             90 	.globl _P3_3
                             91 	.globl _P3_2
                             92 	.globl _P3_1
                             93 	.globl _P3_0
                             94 	.globl _EA
                             95 	.globl _ES
                             96 	.globl _ET1
                             97 	.globl _EX1
                             98 	.globl _ET0
                             99 	.globl _EX0
                            100 	.globl _P2_7
                            101 	.globl _P2_6
                            102 	.globl _P2_5
                            103 	.globl _P2_4
                            104 	.globl _P2_3
                            105 	.globl _P2_2
                            106 	.globl _P2_1
                            107 	.globl _P2_0
                            108 	.globl _SM0
                            109 	.globl _SM1
                            110 	.globl _SM2
                            111 	.globl _REN
                            112 	.globl _TB8
                            113 	.globl _RB8
                            114 	.globl _TI
                            115 	.globl _RI
                            116 	.globl _P1_7
                            117 	.globl _P1_6
                            118 	.globl _P1_5
                            119 	.globl _P1_4
                            120 	.globl _P1_3
                            121 	.globl _P1_2
                            122 	.globl _P1_1
                            123 	.globl _P1_0
                            124 	.globl _TF1
                            125 	.globl _TR1
                            126 	.globl _TF0
                            127 	.globl _TR0
                            128 	.globl _IE1
                            129 	.globl _IT1
                            130 	.globl _IE0
                            131 	.globl _IT0
                            132 	.globl _P0_7
                            133 	.globl _P0_6
                            134 	.globl _P0_5
                            135 	.globl _P0_4
                            136 	.globl _P0_3
                            137 	.globl _P0_2
                            138 	.globl _P0_1
                            139 	.globl _P0_0
                            140 	.globl _EECON
                            141 	.globl _KBF
                            142 	.globl _KBE
                            143 	.globl _KBLS
                            144 	.globl _BRL
                            145 	.globl _BDRCON
                            146 	.globl _T2MOD
                            147 	.globl _SPDAT
                            148 	.globl _SPSTA
                            149 	.globl _SPCON
                            150 	.globl _SADEN
                            151 	.globl _SADDR
                            152 	.globl _WDTPRG
                            153 	.globl _WDTRST
                            154 	.globl _P5
                            155 	.globl _P4
                            156 	.globl _IPH1
                            157 	.globl _IPL1
                            158 	.globl _IPH0
                            159 	.globl _IPL0
                            160 	.globl _IEN1
                            161 	.globl _IEN0
                            162 	.globl _CMOD
                            163 	.globl _CL
                            164 	.globl _CH
                            165 	.globl _CCON
                            166 	.globl _CCAPM4
                            167 	.globl _CCAPM3
                            168 	.globl _CCAPM2
                            169 	.globl _CCAPM1
                            170 	.globl _CCAPM0
                            171 	.globl _CCAP4L
                            172 	.globl _CCAP3L
                            173 	.globl _CCAP2L
                            174 	.globl _CCAP1L
                            175 	.globl _CCAP0L
                            176 	.globl _CCAP4H
                            177 	.globl _CCAP3H
                            178 	.globl _CCAP2H
                            179 	.globl _CCAP1H
                            180 	.globl _CCAP0H
                            181 	.globl _CKCKON1
                            182 	.globl _CKCKON0
                            183 	.globl _CKRL
                            184 	.globl _AUXR1
                            185 	.globl _AUXR
                            186 	.globl _TH2
                            187 	.globl _TL2
                            188 	.globl _RCAP2H
                            189 	.globl _RCAP2L
                            190 	.globl _T2CON
                            191 	.globl _B
                            192 	.globl _ACC
                            193 	.globl _PSW
                            194 	.globl _IP
                            195 	.globl _P3
                            196 	.globl _IE
                            197 	.globl _P2
                            198 	.globl _SBUF
                            199 	.globl _SCON
                            200 	.globl _P1
                            201 	.globl _TH1
                            202 	.globl _TH0
                            203 	.globl _TL1
                            204 	.globl _TL0
                            205 	.globl _TMOD
                            206 	.globl _TCON
                            207 	.globl _PCON
                            208 	.globl _DPH
                            209 	.globl _DPL
                            210 	.globl _SP
                            211 	.globl _P0
                            212 	.globl _timers
                            213 	.globl _flag
                            214 	.globl _io_counter
                            215 	.globl _nmi
                            216 	.globl _nsec
                            217 	.globl _nms
                            218 	.globl _cnt
                            219 	.globl _mi
                            220 	.globl _sec
                            221 	.globl _ms
                            222 ;--------------------------------------------------------
                            223 ; special function registers
                            224 ;--------------------------------------------------------
                            225 	.area RSEG    (DATA)
                    0080    226 _P0	=	0x0080
                    0081    227 _SP	=	0x0081
                    0082    228 _DPL	=	0x0082
                    0083    229 _DPH	=	0x0083
                    0087    230 _PCON	=	0x0087
                    0088    231 _TCON	=	0x0088
                    0089    232 _TMOD	=	0x0089
                    008A    233 _TL0	=	0x008a
                    008B    234 _TL1	=	0x008b
                    008C    235 _TH0	=	0x008c
                    008D    236 _TH1	=	0x008d
                    0090    237 _P1	=	0x0090
                    0098    238 _SCON	=	0x0098
                    0099    239 _SBUF	=	0x0099
                    00A0    240 _P2	=	0x00a0
                    00A8    241 _IE	=	0x00a8
                    00B0    242 _P3	=	0x00b0
                    00B8    243 _IP	=	0x00b8
                    00D0    244 _PSW	=	0x00d0
                    00E0    245 _ACC	=	0x00e0
                    00F0    246 _B	=	0x00f0
                    00C8    247 _T2CON	=	0x00c8
                    00CA    248 _RCAP2L	=	0x00ca
                    00CB    249 _RCAP2H	=	0x00cb
                    00CC    250 _TL2	=	0x00cc
                    00CD    251 _TH2	=	0x00cd
                    008E    252 _AUXR	=	0x008e
                    00A2    253 _AUXR1	=	0x00a2
                    0097    254 _CKRL	=	0x0097
                    008F    255 _CKCKON0	=	0x008f
                    008F    256 _CKCKON1	=	0x008f
                    00FA    257 _CCAP0H	=	0x00fa
                    00FB    258 _CCAP1H	=	0x00fb
                    00FC    259 _CCAP2H	=	0x00fc
                    00FD    260 _CCAP3H	=	0x00fd
                    00FE    261 _CCAP4H	=	0x00fe
                    00EA    262 _CCAP0L	=	0x00ea
                    00EB    263 _CCAP1L	=	0x00eb
                    00EC    264 _CCAP2L	=	0x00ec
                    00ED    265 _CCAP3L	=	0x00ed
                    00EE    266 _CCAP4L	=	0x00ee
                    00DA    267 _CCAPM0	=	0x00da
                    00DB    268 _CCAPM1	=	0x00db
                    00DC    269 _CCAPM2	=	0x00dc
                    00DD    270 _CCAPM3	=	0x00dd
                    00DE    271 _CCAPM4	=	0x00de
                    00D8    272 _CCON	=	0x00d8
                    00F9    273 _CH	=	0x00f9
                    00E9    274 _CL	=	0x00e9
                    00D9    275 _CMOD	=	0x00d9
                    00A8    276 _IEN0	=	0x00a8
                    00B1    277 _IEN1	=	0x00b1
                    00B8    278 _IPL0	=	0x00b8
                    00B7    279 _IPH0	=	0x00b7
                    00B2    280 _IPL1	=	0x00b2
                    00B3    281 _IPH1	=	0x00b3
                    00C0    282 _P4	=	0x00c0
                    00D8    283 _P5	=	0x00d8
                    00A6    284 _WDTRST	=	0x00a6
                    00A7    285 _WDTPRG	=	0x00a7
                    00A9    286 _SADDR	=	0x00a9
                    00B9    287 _SADEN	=	0x00b9
                    00C3    288 _SPCON	=	0x00c3
                    00C4    289 _SPSTA	=	0x00c4
                    00C5    290 _SPDAT	=	0x00c5
                    00C9    291 _T2MOD	=	0x00c9
                    009B    292 _BDRCON	=	0x009b
                    009A    293 _BRL	=	0x009a
                    009C    294 _KBLS	=	0x009c
                    009D    295 _KBE	=	0x009d
                    009E    296 _KBF	=	0x009e
                    00D2    297 _EECON	=	0x00d2
                            298 ;--------------------------------------------------------
                            299 ; special function bits
                            300 ;--------------------------------------------------------
                            301 	.area RSEG    (DATA)
                    0080    302 _P0_0	=	0x0080
                    0081    303 _P0_1	=	0x0081
                    0082    304 _P0_2	=	0x0082
                    0083    305 _P0_3	=	0x0083
                    0084    306 _P0_4	=	0x0084
                    0085    307 _P0_5	=	0x0085
                    0086    308 _P0_6	=	0x0086
                    0087    309 _P0_7	=	0x0087
                    0088    310 _IT0	=	0x0088
                    0089    311 _IE0	=	0x0089
                    008A    312 _IT1	=	0x008a
                    008B    313 _IE1	=	0x008b
                    008C    314 _TR0	=	0x008c
                    008D    315 _TF0	=	0x008d
                    008E    316 _TR1	=	0x008e
                    008F    317 _TF1	=	0x008f
                    0090    318 _P1_0	=	0x0090
                    0091    319 _P1_1	=	0x0091
                    0092    320 _P1_2	=	0x0092
                    0093    321 _P1_3	=	0x0093
                    0094    322 _P1_4	=	0x0094
                    0095    323 _P1_5	=	0x0095
                    0096    324 _P1_6	=	0x0096
                    0097    325 _P1_7	=	0x0097
                    0098    326 _RI	=	0x0098
                    0099    327 _TI	=	0x0099
                    009A    328 _RB8	=	0x009a
                    009B    329 _TB8	=	0x009b
                    009C    330 _REN	=	0x009c
                    009D    331 _SM2	=	0x009d
                    009E    332 _SM1	=	0x009e
                    009F    333 _SM0	=	0x009f
                    00A0    334 _P2_0	=	0x00a0
                    00A1    335 _P2_1	=	0x00a1
                    00A2    336 _P2_2	=	0x00a2
                    00A3    337 _P2_3	=	0x00a3
                    00A4    338 _P2_4	=	0x00a4
                    00A5    339 _P2_5	=	0x00a5
                    00A6    340 _P2_6	=	0x00a6
                    00A7    341 _P2_7	=	0x00a7
                    00A8    342 _EX0	=	0x00a8
                    00A9    343 _ET0	=	0x00a9
                    00AA    344 _EX1	=	0x00aa
                    00AB    345 _ET1	=	0x00ab
                    00AC    346 _ES	=	0x00ac
                    00AF    347 _EA	=	0x00af
                    00B0    348 _P3_0	=	0x00b0
                    00B1    349 _P3_1	=	0x00b1
                    00B2    350 _P3_2	=	0x00b2
                    00B3    351 _P3_3	=	0x00b3
                    00B4    352 _P3_4	=	0x00b4
                    00B5    353 _P3_5	=	0x00b5
                    00B6    354 _P3_6	=	0x00b6
                    00B7    355 _P3_7	=	0x00b7
                    00B0    356 _RXD	=	0x00b0
                    00B1    357 _TXD	=	0x00b1
                    00B2    358 _INT0	=	0x00b2
                    00B3    359 _INT1	=	0x00b3
                    00B4    360 _T0	=	0x00b4
                    00B5    361 _T1	=	0x00b5
                    00B6    362 _WR	=	0x00b6
                    00B7    363 _RD	=	0x00b7
                    00B8    364 _PX0	=	0x00b8
                    00B9    365 _PT0	=	0x00b9
                    00BA    366 _PX1	=	0x00ba
                    00BB    367 _PT1	=	0x00bb
                    00BC    368 _PS	=	0x00bc
                    00D0    369 _P	=	0x00d0
                    00D1    370 _F1	=	0x00d1
                    00D2    371 _OV	=	0x00d2
                    00D3    372 _RS0	=	0x00d3
                    00D4    373 _RS1	=	0x00d4
                    00D5    374 _F0	=	0x00d5
                    00D6    375 _AC	=	0x00d6
                    00D7    376 _CY	=	0x00d7
                    00AD    377 _ET2	=	0x00ad
                    00BD    378 _PT2	=	0x00bd
                    00C8    379 _T2CON_0	=	0x00c8
                    00C9    380 _T2CON_1	=	0x00c9
                    00CA    381 _T2CON_2	=	0x00ca
                    00CB    382 _T2CON_3	=	0x00cb
                    00CC    383 _T2CON_4	=	0x00cc
                    00CD    384 _T2CON_5	=	0x00cd
                    00CE    385 _T2CON_6	=	0x00ce
                    00CF    386 _T2CON_7	=	0x00cf
                    00C8    387 _CP_RL2	=	0x00c8
                    00C9    388 _C_T2	=	0x00c9
                    00CA    389 _TR2	=	0x00ca
                    00CB    390 _EXEN2	=	0x00cb
                    00CC    391 _TCLK	=	0x00cc
                    00CD    392 _RCLK	=	0x00cd
                    00CE    393 _EXF2	=	0x00ce
                    00CF    394 _TF2	=	0x00cf
                    00DF    395 _CF	=	0x00df
                    00DE    396 _CR	=	0x00de
                    00DC    397 _CCF4	=	0x00dc
                    00DB    398 _CCF3	=	0x00db
                    00DA    399 _CCF2	=	0x00da
                    00D9    400 _CCF1	=	0x00d9
                    00D8    401 _CCF0	=	0x00d8
                    00AE    402 _EC	=	0x00ae
                    00BE    403 _PPCL	=	0x00be
                    00BD    404 _PT2L	=	0x00bd
                    00BC    405 _PLS	=	0x00bc
                    00BB    406 _PT1L	=	0x00bb
                    00BA    407 _PX1L	=	0x00ba
                    00B9    408 _PT0L	=	0x00b9
                    00B8    409 _PX0L	=	0x00b8
                    00C0    410 _P4_0	=	0x00c0
                    00C1    411 _P4_1	=	0x00c1
                    00C2    412 _P4_2	=	0x00c2
                    00C3    413 _P4_3	=	0x00c3
                    00C4    414 _P4_4	=	0x00c4
                    00C5    415 _P4_5	=	0x00c5
                    00C6    416 _P4_6	=	0x00c6
                    00C7    417 _P4_7	=	0x00c7
                    00D8    418 _P5_0	=	0x00d8
                    00D9    419 _P5_1	=	0x00d9
                    00DA    420 _P5_2	=	0x00da
                    00DB    421 _P5_3	=	0x00db
                    00DC    422 _P5_4	=	0x00dc
                    00DD    423 _P5_5	=	0x00dd
                    00DE    424 _P5_6	=	0x00de
                    00DF    425 _P5_7	=	0x00df
                            426 ;--------------------------------------------------------
                            427 ; overlayable register banks
                            428 ;--------------------------------------------------------
                            429 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     430 	.ds 8
                            431 ;--------------------------------------------------------
                            432 ; internal ram data
                            433 ;--------------------------------------------------------
                            434 	.area DSEG    (DATA)
   0000                     435 _main_sloc0_1_0:
   0000                     436 	.ds 2
   0002                     437 _main_sloc1_1_0:
   0002                     438 	.ds 2
   0004                     439 _timer_isr_sloc0_1_0:
   0004                     440 	.ds 2
   0006                     441 _timer_isr_sloc1_1_0:
   0006                     442 	.ds 2
                            443 ;--------------------------------------------------------
                            444 ; overlayable items in internal ram 
                            445 ;--------------------------------------------------------
                            446 	.area OSEG    (OVR,DATA)
                            447 ;--------------------------------------------------------
                            448 ; Stack segment in internal ram 
                            449 ;--------------------------------------------------------
                            450 	.area	SSEG	(DATA)
   0000                     451 __start__stack:
   0000                     452 	.ds	1
                            453 
                            454 ;--------------------------------------------------------
                            455 ; indirectly addressable internal ram data
                            456 ;--------------------------------------------------------
                            457 	.area ISEG    (DATA)
                            458 ;--------------------------------------------------------
                            459 ; bit data
                            460 ;--------------------------------------------------------
                            461 	.area BSEG    (BIT)
                            462 ;--------------------------------------------------------
                            463 ; paged external ram data
                            464 ;--------------------------------------------------------
                            465 	.area PSEG    (PAG,XDATA)
                            466 ;--------------------------------------------------------
                            467 ; external ram data
                            468 ;--------------------------------------------------------
                            469 	.area XSEG    (XDATA)
   0000                     470 _ms::
   0000                     471 	.ds 1
   0001                     472 _sec::
   0001                     473 	.ds 1
   0002                     474 _mi::
   0002                     475 	.ds 1
   0003                     476 _cnt::
   0003                     477 	.ds 3
   0006                     478 _nms::
   0006                     479 	.ds 6
   000C                     480 _nsec::
   000C                     481 	.ds 6
   0012                     482 _nmi::
   0012                     483 	.ds 6
   0018                     484 _io_counter::
   0018                     485 	.ds 2
   001A                     486 _main_c_1_1:
   001A                     487 	.ds 4
   001E                     488 _main_d_1_1:
   001E                     489 	.ds 5
   0023                     490 _main_name_1_1:
   0023                     491 	.ds 3
   0026                     492 _main_b_1_1:
   0026                     493 	.ds 5
   002B                     494 _main_flag_1_1:
   002B                     495 	.ds 2
   002D                     496 _main_row_val_1_1:
   002D                     497 	.ds 8
   0035                     498 _main_disp_1_1:
   0035                     499 	.ds 8
                            500 ;--------------------------------------------------------
                            501 ; external initialized ram data
                            502 ;--------------------------------------------------------
                            503 	.area XISEG   (XDATA)
   0000                     504 _flag::
   0000                     505 	.ds 1
   0001                     506 _timers::
   0001                     507 	.ds 2
                            508 	.area HOME    (CODE)
                            509 	.area GSINIT0 (CODE)
                            510 	.area GSINIT1 (CODE)
                            511 	.area GSINIT2 (CODE)
                            512 	.area GSINIT3 (CODE)
                            513 	.area GSINIT4 (CODE)
                            514 	.area GSINIT5 (CODE)
                            515 	.area GSINIT  (CODE)
                            516 	.area GSFINAL (CODE)
                            517 	.area CSEG    (CODE)
                            518 ;--------------------------------------------------------
                            519 ; interrupt vector 
                            520 ;--------------------------------------------------------
                            521 	.area HOME    (CODE)
   0000                     522 __interrupt_vect:
   0000 02s00r00            523 	ljmp	__sdcc_gsinit_startup
   0003 02s12r74            524 	ljmp	_ext_zero
   0006                     525 	.ds	5
   000B 02s0FrEF            526 	ljmp	_timer_isr
                            527 ;--------------------------------------------------------
                            528 ; global & static initialisations
                            529 ;--------------------------------------------------------
                            530 	.area HOME    (CODE)
                            531 	.area GSINIT  (CODE)
                            532 	.area GSFINAL (CODE)
                            533 	.area GSINIT  (CODE)
                            534 	.globl __sdcc_gsinit_startup
                            535 	.globl __sdcc_program_startup
                            536 	.globl __start__stack
                            537 	.globl __mcs51_genXINIT
                            538 	.globl __mcs51_genXRAMCLEAR
                            539 	.globl __mcs51_genRAMCLEAR
                            540 	.area GSFINAL (CODE)
   0000 02s00r00            541 	ljmp	__sdcc_program_startup
                            542 ;--------------------------------------------------------
                            543 ; Home
                            544 ;--------------------------------------------------------
                            545 	.area HOME    (CODE)
                            546 	.area CSEG    (CODE)
   0000                     547 __sdcc_program_startup:
   0000 12s00r0F            548 	lcall	_main
                            549 ;	return from main will lock up
   0003 80 FE               550 	sjmp .
                            551 ;--------------------------------------------------------
                            552 ; code
                            553 ;--------------------------------------------------------
                            554 	.area CSEG    (CODE)
                            555 ;------------------------------------------------------------
                            556 ;Allocation info for local variables in function '_sdcc_external_startup'
                            557 ;------------------------------------------------------------
                            558 ;------------------------------------------------------------
                            559 ;	main.c:28: _sdcc_external_startup()
                            560 ;	-----------------------------------------
                            561 ;	 function _sdcc_external_startup
                            562 ;	-----------------------------------------
   0005                     563 __sdcc_external_startup:
                    0002    564 	ar2 = 0x02
                    0003    565 	ar3 = 0x03
                    0004    566 	ar4 = 0x04
                    0005    567 	ar5 = 0x05
                    0006    568 	ar6 = 0x06
                    0007    569 	ar7 = 0x07
                    0000    570 	ar0 = 0x00
                    0001    571 	ar1 = 0x01
                            572 ;	main.c:30: AUXR |= 0x0C;
                            573 ;	genOr
   0005 43 8E 0C            574 	orl	_AUXR,#0x0C
                            575 ;	main.c:31: CKCKON0 = 0xFB;
                            576 ;	genAssign
   0008 75 8F FB            577 	mov	_CKCKON0,#0xFB
                            578 ;	main.c:32: return 0;
                            579 ;	genRet
                            580 ;	Peephole 182.b	used 16 bit load of dptr
   000B 90 00 00            581 	mov	dptr,#0x0000
                            582 ;	Peephole 300	removed redundant label 00101$
   000E 22                  583 	ret
                            584 ;------------------------------------------------------------
                            585 ;Allocation info for local variables in function 'main'
                            586 ;------------------------------------------------------------
                            587 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                            588 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                            589 ;store                     Allocated with name '_main_store_1_1'
                            590 ;c                         Allocated with name '_main_c_1_1'
                            591 ;d                         Allocated with name '_main_d_1_1'
                            592 ;name                      Allocated with name '_main_name_1_1'
                            593 ;b                         Allocated with name '_main_b_1_1'
                            594 ;num                       Allocated with name '_main_num_1_1'
                            595 ;i                         Allocated with name '_main_i_1_1'
                            596 ;j                         Allocated with name '_main_j_1_1'
                            597 ;k                         Allocated with name '_main_k_1_1'
                            598 ;page                      Allocated with name '_main_page_1_1'
                            599 ;addr                      Allocated with name '_main_addr_1_1'
                            600 ;flag                      Allocated with name '_main_flag_1_1'
                            601 ;dat                       Allocated with name '_main_dat_1_1'
                            602 ;time                      Allocated with name '_main_time_1_1'
                            603 ;row_val                   Allocated with name '_main_row_val_1_1'
                            604 ;ccode                     Allocated with name '_main_ccode_1_1'
                            605 ;rd                        Allocated with name '_main_rd_1_1'
                            606 ;disp                      Allocated with name '_main_disp_1_1'
                            607 ;------------------------------------------------------------
                            608 ;	main.c:36: void main(void)
                            609 ;	-----------------------------------------
                            610 ;	 function main
                            611 ;	-----------------------------------------
   000F                     612 _main:
                            613 ;	main.c:38: char store,c[4],d[5],name[3]="012",b[5];
                            614 ;	genPointerSet
                            615 ;     genFarPointerSet
   000F 90s00r23            616 	mov	dptr,#_main_name_1_1
   0012 74 30               617 	mov	a,#0x30
   0014 F0                  618 	movx	@dptr,a
                            619 ;	genPointerSet
                            620 ;     genFarPointerSet
   0015 90s00r24            621 	mov	dptr,#(_main_name_1_1 + 0x0001)
   0018 74 31               622 	mov	a,#0x31
   001A F0                  623 	movx	@dptr,a
                            624 ;	genPointerSet
                            625 ;     genFarPointerSet
   001B 90s00r25            626 	mov	dptr,#(_main_name_1_1 + 0x0002)
   001E 74 32               627 	mov	a,#0x32
   0020 F0                  628 	movx	@dptr,a
                            629 ;	main.c:43: lcd_init();                                     // Initilaize LCD
                            630 ;	genCall
   0021 12s00r00            631 	lcall	_lcd_init
                            632 ;	main.c:44: uart_init()	;                                   // Initilalize UART
                            633 ;	genCall
   0024 12s00r00            634 	lcall	_uart_init
                            635 ;	main.c:45: timer_init();
                            636 ;	genCall
   0027 12s00r00            637 	lcall	_timer_init
                            638 ;	main.c:48: P1_0=0;
                            639 ;	genAssign
   002A C2 90               640 	clr	_P1_0
                            641 ;	main.c:50: lcdgotoxy(4,1);
                            642 ;	genAssign
   002C 90s00r00            643 	mov	dptr,#_lcdgotoxy_PARM_2
   002F 74 01               644 	mov	a,#0x01
   0031 F0                  645 	movx	@dptr,a
                            646 ;	genCall
   0032 75 82 04            647 	mov	dpl,#0x04
   0035 12s00r00            648 	lcall	_lcdgotoxy
                            649 ;	main.c:51: lcdputstr("Count-0");
                            650 ;	genCall
                            651 ;	Peephole 182.a	used 16 bit load of DPTR
   0038 90s00r00            652 	mov	dptr,#__str_1
   003B 75 F0 80            653 	mov	b,#0x80
   003E 12s00r00            654 	lcall	_lcdputstr
                            655 ;	main.c:53: lcdgotoxy(4,15);
                            656 ;	genAssign
   0041 90s00r00            657 	mov	dptr,#_lcdgotoxy_PARM_2
   0044 74 0F               658 	mov	a,#0x0F
   0046 F0                  659 	movx	@dptr,a
                            660 ;	genCall
   0047 75 82 04            661 	mov	dpl,#0x04
   004A 12s00r00            662 	lcall	_lcdgotoxy
                            663 ;	main.c:54: lcdputch('.');
                            664 ;	genCall
   004D 75 82 2E            665 	mov	dpl,#0x2E
   0050 12s00r00            666 	lcall	_lcdputch
                            667 ;	main.c:55: lcdgotoxy(4,12);
                            668 ;	genAssign
   0053 90s00r00            669 	mov	dptr,#_lcdgotoxy_PARM_2
   0056 74 0C               670 	mov	a,#0x0C
   0058 F0                  671 	movx	@dptr,a
                            672 ;	genCall
   0059 75 82 04            673 	mov	dpl,#0x04
   005C 12s00r00            674 	lcall	_lcdgotoxy
                            675 ;	main.c:56: lcdputch(':');
                            676 ;	genCall
   005F 75 82 3A            677 	mov	dpl,#0x3A
   0062 12s00r00            678 	lcall	_lcdputch
                            679 ;	main.c:57: IOEX_WriteByte(0x01);
                            680 ;	genCall
   0065 75 82 01            681 	mov	dpl,#0x01
   0068 12s00r00            682 	lcall	_IOEX_WriteByte
                            683 ;	main.c:59: for(i=0;i<3;i++)
                            684 ;	genAssign
   006B 7A 00               685 	mov	r2,#0x00
   006D 7B 00               686 	mov	r3,#0x00
   006F                     687 00294$:
                            688 ;	genCmpLt
                            689 ;	genCmp
   006F C3                  690 	clr	c
   0070 EA                  691 	mov	a,r2
   0071 94 03               692 	subb	a,#0x03
   0073 EB                  693 	mov	a,r3
   0074 64 80               694 	xrl	a,#0x80
   0076 94 80               695 	subb	a,#0x80
                            696 ;	genIfxJump
   0078 40 03               697 	jc	00412$
   007A 02s01r5E            698 	ljmp	00297$
   007D                     699 00412$:
                            700 ;	main.c:61: EA=0;
                            701 ;	genAssign
   007D C2 AF               702 	clr	_EA
                            703 ;	main.c:62: countdown_alarm(0,0,0,2,i);
                            704 ;	genAssign
   007F 90s00r00            705 	mov	dptr,#_countdown_alarm_PARM_2
   0082 E4                  706 	clr	a
   0083 F0                  707 	movx	@dptr,a
   0084 A3                  708 	inc	dptr
   0085 F0                  709 	movx	@dptr,a
                            710 ;	genAssign
   0086 90s00r00            711 	mov	dptr,#_countdown_alarm_PARM_3
   0089 E4                  712 	clr	a
   008A F0                  713 	movx	@dptr,a
   008B A3                  714 	inc	dptr
   008C F0                  715 	movx	@dptr,a
                            716 ;	genAssign
   008D 90s00r00            717 	mov	dptr,#_countdown_alarm_PARM_4
   0090 74 02               718 	mov	a,#0x02
   0092 F0                  719 	movx	@dptr,a
                            720 ;	genAssign
   0093 90s00r00            721 	mov	dptr,#_countdown_alarm_PARM_5
   0096 EA                  722 	mov	a,r2
   0097 F0                  723 	movx	@dptr,a
   0098 A3                  724 	inc	dptr
   0099 EB                  725 	mov	a,r3
   009A F0                  726 	movx	@dptr,a
                            727 ;	genCall
                            728 ;	Peephole 182.b	used 16 bit load of dptr
   009B 90 00 00            729 	mov	dptr,#0x0000
   009E C0 02               730 	push	ar2
   00A0 C0 03               731 	push	ar3
   00A2 12s00r00            732 	lcall	_countdown_alarm
   00A5 D0 03               733 	pop	ar3
   00A7 D0 02               734 	pop	ar2
                            735 ;	main.c:63: lcdgotoxy(i+1,1);
                            736 ;	genCast
   00A9 8A 04               737 	mov	ar4,r2
                            738 ;	genPlus
                            739 ;     genPlusIncr
   00AB 0C                  740 	inc	r4
                            741 ;	genAssign
   00AC 90s00r00            742 	mov	dptr,#_lcdgotoxy_PARM_2
   00AF 74 01               743 	mov	a,#0x01
   00B1 F0                  744 	movx	@dptr,a
                            745 ;	genCall
   00B2 8C 82               746 	mov	dpl,r4
   00B4 C0 02               747 	push	ar2
   00B6 C0 03               748 	push	ar3
   00B8 C0 04               749 	push	ar4
   00BA 12s00r00            750 	lcall	_lcdgotoxy
   00BD D0 04               751 	pop	ar4
   00BF D0 03               752 	pop	ar3
   00C1 D0 02               753 	pop	ar2
                            754 ;	main.c:64: lcdputstr("Timer");
                            755 ;	genCall
                            756 ;	Peephole 182.a	used 16 bit load of DPTR
   00C3 90s00r08            757 	mov	dptr,#__str_2
   00C6 75 F0 80            758 	mov	b,#0x80
   00C9 C0 02               759 	push	ar2
   00CB C0 03               760 	push	ar3
   00CD C0 04               761 	push	ar4
   00CF 12s00r00            762 	lcall	_lcdputstr
   00D2 D0 04               763 	pop	ar4
   00D4 D0 03               764 	pop	ar3
   00D6 D0 02               765 	pop	ar2
                            766 ;	main.c:65: lcdputch(name[i]);
                            767 ;	genPlus
                            768 ;	Peephole 236.g	used r2 instead of ar2
   00D8 EA                  769 	mov	a,r2
   00D9 24r23               770 	add	a,#_main_name_1_1
   00DB F5 82               771 	mov	dpl,a
                            772 ;	Peephole 236.g	used r3 instead of ar3
   00DD EB                  773 	mov	a,r3
   00DE 34s00               774 	addc	a,#(_main_name_1_1 >> 8)
   00E0 F5 83               775 	mov	dph,a
                            776 ;	genPointerGet
                            777 ;	genFarPointerGet
   00E2 E0                  778 	movx	a,@dptr
                            779 ;	genCall
   00E3 FD                  780 	mov	r5,a
                            781 ;	Peephole 244.c	loading dpl from a instead of r5
   00E4 F5 82               782 	mov	dpl,a
   00E6 C0 02               783 	push	ar2
   00E8 C0 03               784 	push	ar3
   00EA C0 04               785 	push	ar4
   00EC 12s00r00            786 	lcall	_lcdputch
   00EF D0 04               787 	pop	ar4
   00F1 D0 03               788 	pop	ar3
   00F3 D0 02               789 	pop	ar2
                            790 ;	main.c:66: lcdputstr("-D");
                            791 ;	genCall
                            792 ;	Peephole 182.a	used 16 bit load of DPTR
   00F5 90s00r0E            793 	mov	dptr,#__str_3
   00F8 75 F0 80            794 	mov	b,#0x80
   00FB C0 02               795 	push	ar2
   00FD C0 03               796 	push	ar3
   00FF C0 04               797 	push	ar4
   0101 12s00r00            798 	lcall	_lcdputstr
   0104 D0 04               799 	pop	ar4
   0106 D0 03               800 	pop	ar3
   0108 D0 02               801 	pop	ar2
                            802 ;	main.c:67: lcdgotoxy(i+1,12);
                            803 ;	genAssign
   010A 90s00r00            804 	mov	dptr,#_lcdgotoxy_PARM_2
   010D 74 0C               805 	mov	a,#0x0C
   010F F0                  806 	movx	@dptr,a
                            807 ;	genCall
   0110 8C 82               808 	mov	dpl,r4
   0112 C0 02               809 	push	ar2
   0114 C0 03               810 	push	ar3
   0116 C0 04               811 	push	ar4
   0118 12s00r00            812 	lcall	_lcdgotoxy
   011B D0 04               813 	pop	ar4
   011D D0 03               814 	pop	ar3
   011F D0 02               815 	pop	ar2
                            816 ;	main.c:68: lcdputch(':');
                            817 ;	genCall
   0121 75 82 3A            818 	mov	dpl,#0x3A
   0124 C0 02               819 	push	ar2
   0126 C0 03               820 	push	ar3
   0128 C0 04               821 	push	ar4
   012A 12s00r00            822 	lcall	_lcdputch
   012D D0 04               823 	pop	ar4
   012F D0 03               824 	pop	ar3
   0131 D0 02               825 	pop	ar2
                            826 ;	main.c:69: lcdgotoxy(i+1,15);
                            827 ;	genAssign
   0133 90s00r00            828 	mov	dptr,#_lcdgotoxy_PARM_2
   0136 74 0F               829 	mov	a,#0x0F
   0138 F0                  830 	movx	@dptr,a
                            831 ;	genCall
   0139 8C 82               832 	mov	dpl,r4
   013B C0 02               833 	push	ar2
   013D C0 03               834 	push	ar3
   013F 12s00r00            835 	lcall	_lcdgotoxy
   0142 D0 03               836 	pop	ar3
   0144 D0 02               837 	pop	ar2
                            838 ;	main.c:70: lcdputch('.');
                            839 ;	genCall
   0146 75 82 2E            840 	mov	dpl,#0x2E
   0149 C0 02               841 	push	ar2
   014B C0 03               842 	push	ar3
   014D 12s00r00            843 	lcall	_lcdputch
   0150 D0 03               844 	pop	ar3
   0152 D0 02               845 	pop	ar2
                            846 ;	main.c:73: EA=1;
                            847 ;	genAssign
   0154 D2 AF               848 	setb	_EA
                            849 ;	main.c:59: for(i=0;i<3;i++)
                            850 ;	genPlus
                            851 ;     genPlusIncr
   0156 0A                  852 	inc	r2
   0157 BA 00 01            853 	cjne	r2,#0x00,00413$
   015A 0B                  854 	inc	r3
   015B                     855 00413$:
   015B 02s00r6F            856 	ljmp	00294$
   015E                     857 00297$:
                            858 ;	main.c:77: printf_tiny("\n\n\r\t\t\t\t\t******** Clock Control Commands ********\n\n\r\t1. Stop Clock \t\t\t\t\t\t2. Restart Clock \t\t\t3. Reset Clock\n\r\t4. Select Count-Down Timer and Value \t\t\t5. Timer Enable \t\t\t6. Timer Disable ");
                            859 ;	genIpush
   015E 74r11               860 	mov	a,#__str_4
   0160 C0 E0               861 	push	acc
   0162 74s00               862 	mov	a,#(__str_4 >> 8)
   0164 C0 E0               863 	push	acc
                            864 ;	genCall
   0166 12s00r00            865 	lcall	_printf_tiny
   0169 15 81               866 	dec	sp
   016B 15 81               867 	dec	sp
                            868 ;	main.c:78: printf_tiny("\n\n\n\r\t\t\t\t\t******** LCD Commands ********\n\n\r\t7. Create Custom Character\t\t\t8. Display Custom Character\t\t\t'c'. CGRAM Dump\t\t\t'd'. DDRAM Dump\n\r\t'l'.EEPROM Content on LCD Display\t\t'q'. Clear LCD Display");
                            869 ;	genIpush
   016D 74rCB               870 	mov	a,#__str_5
   016F C0 E0               871 	push	acc
   0171 74s00               872 	mov	a,#(__str_5 >> 8)
   0173 C0 E0               873 	push	acc
                            874 ;	genCall
   0175 12s00r00            875 	lcall	_printf_tiny
   0178 15 81               876 	dec	sp
   017A 15 81               877 	dec	sp
                            878 ;	main.c:79: printf_tiny("\n\n\n\r\t\t\t\t\t******** IO Expander Control Commands ********\n\n\r\t'x'. Reset Counter\t\t\t\t'i'. Configure IO Pins\t\t\t\t's'. Status of IO_Expander");
                            879 ;	genIpush
   017C 74r8F               880 	mov	a,#__str_6
   017E C0 E0               881 	push	acc
   0180 74s01               882 	mov	a,#(__str_6 >> 8)
   0182 C0 E0               883 	push	acc
                            884 ;	genCall
   0184 12s00r00            885 	lcall	_printf_tiny
   0187 15 81               886 	dec	sp
   0189 15 81               887 	dec	sp
                            888 ;	main.c:80: printf_tiny("\n\n\n\r\t\t\t\t\t******** EEPROM Control Commands ******** \n\n\r\t'w'. EEPROM Write \t\t\t'r'. EEPROM Read \t\t\t\t'h'. HEX Dump\t\n\r\t");
                            889 ;	genIpush
   018B 74r15               890 	mov	a,#__str_7
   018D C0 E0               891 	push	acc
   018F 74s02               892 	mov	a,#(__str_7 >> 8)
   0191 C0 E0               893 	push	acc
                            894 ;	genCall
   0193 12s00r00            895 	lcall	_printf_tiny
   0196 15 81               896 	dec	sp
   0198 15 81               897 	dec	sp
                            898 ;	main.c:81: printf_tiny("\n\n\r\t\t\t\t\t******** Demo Commands ******** \n\n\r\t'y'. Watchdog Demo \t\t\t'9'. LOGO Creation Demo ");
                            899 ;	genIpush
   019A 74r88               900 	mov	a,#__str_8
   019C C0 E0               901 	push	acc
   019E 74s02               902 	mov	a,#(__str_8 >> 8)
   01A0 C0 E0               903 	push	acc
                            904 ;	genCall
   01A2 12s00r00            905 	lcall	_printf_tiny
   01A5 15 81               906 	dec	sp
   01A7 15 81               907 	dec	sp
                            908 ;	main.c:82: while(1)
   01A9                     909 00292$:
                            910 ;	genIfx
                            911 ;	genIfxJump
   01A9 20 98 03            912 	jb	_RI,00414$
   01AC 02s0FrDD            913 	ljmp	00289$
   01AF                     914 00414$:
                            915 ;	main.c:87: store=getchar();
                            916 ;	genCall
   01AF 12s00r00            917 	lcall	_getchar
                            918 ;	main.c:88: putchar(store);
                            919 ;	genCall
   01B2 AA 82               920 	mov  r2,dpl
                            921 ;	Peephole 177.a	removed redundant mov
   01B4 C0 02               922 	push	ar2
   01B6 12s00r00            923 	lcall	_putchar
   01B9 D0 02               924 	pop	ar2
                            925 ;	main.c:89: if(store=='1'){printf_tiny("\n\n\r\t\t ******  Stop Clock  *****"); }
                            926 ;	genCmpEq
                            927 ;	gencjne
                            928 ;	gencjneshort
                            929 ;	Peephole 241.d	optimized compare
   01BB E4                  930 	clr	a
   01BC BA 31 01            931 	cjne	r2,#0x31,00415$
   01BF 04                  932 	inc	a
   01C0                     933 00415$:
                            934 ;	Peephole 300	removed redundant label 00416$
                            935 ;	genIfx
   01C0 FB                  936 	mov	r3,a
                            937 ;	Peephole 105	removed redundant mov
                            938 ;	genIfxJump
                            939 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01C1 60 1A               940 	jz	00163$
                            941 ;	Peephole 300	removed redundant label 00417$
                            942 ;	genIpush
   01C3 C0 02               943 	push	ar2
   01C5 C0 03               944 	push	ar3
   01C7 74rE3               945 	mov	a,#__str_9
   01C9 C0 E0               946 	push	acc
   01CB 74s02               947 	mov	a,#(__str_9 >> 8)
   01CD C0 E0               948 	push	acc
                            949 ;	genCall
   01CF 12s00r00            950 	lcall	_printf_tiny
   01D2 15 81               951 	dec	sp
   01D4 15 81               952 	dec	sp
   01D6 D0 03               953 	pop	ar3
   01D8 D0 02               954 	pop	ar2
   01DA 02s04r95            955 	ljmp	00164$
   01DD                     956 00163$:
                            957 ;	main.c:90: else if(store=='2' && timers<2){printf_tiny("\n\n\r\t\t ******  Restart Clock  ******"); }
                            958 ;	genCmpEq
                            959 ;	gencjneshort
                            960 ;	Peephole 112.b	changed ljmp to sjmp
                            961 ;	Peephole 198.b	optimized misc jump sequence
   01DD BA 32 2B            962 	cjne	r2,#0x32,00159$
                            963 ;	Peephole 200.b	removed redundant sjmp
                            964 ;	Peephole 300	removed redundant label 00418$
                            965 ;	Peephole 300	removed redundant label 00419$
                            966 ;	genAssign
   01E0 90s00r01            967 	mov	dptr,#_timers
   01E3 E0                  968 	movx	a,@dptr
   01E4 FC                  969 	mov	r4,a
   01E5 A3                  970 	inc	dptr
   01E6 E0                  971 	movx	a,@dptr
   01E7 FD                  972 	mov	r5,a
                            973 ;	genCmpLt
                            974 ;	genCmp
   01E8 C3                  975 	clr	c
   01E9 EC                  976 	mov	a,r4
   01EA 94 02               977 	subb	a,#0x02
   01EC ED                  978 	mov	a,r5
   01ED 94 00               979 	subb	a,#0x00
                            980 ;	genIfxJump
                            981 ;	Peephole 108.a	removed ljmp by inverse jump logic
   01EF 50 1A               982 	jnc	00159$
                            983 ;	Peephole 300	removed redundant label 00420$
                            984 ;	genIpush
   01F1 C0 02               985 	push	ar2
   01F3 C0 03               986 	push	ar3
   01F5 74r03               987 	mov	a,#__str_10
   01F7 C0 E0               988 	push	acc
   01F9 74s03               989 	mov	a,#(__str_10 >> 8)
   01FB C0 E0               990 	push	acc
                            991 ;	genCall
   01FD 12s00r00            992 	lcall	_printf_tiny
   0200 15 81               993 	dec	sp
   0202 15 81               994 	dec	sp
   0204 D0 03               995 	pop	ar3
   0206 D0 02               996 	pop	ar2
   0208 02s04r95            997 	ljmp	00164$
   020B                     998 00159$:
                            999 ;	main.c:91: else if(store=='3' && timers<2){printf_tiny("\n\n\r\t\t ******  Reset Clock  ******"); }
                           1000 ;	genCmpEq
                           1001 ;	gencjneshort
                           1002 ;	Peephole 112.b	changed ljmp to sjmp
                           1003 ;	Peephole 198.b	optimized misc jump sequence
   020B BA 33 2B           1004 	cjne	r2,#0x33,00155$
                           1005 ;	Peephole 200.b	removed redundant sjmp
                           1006 ;	Peephole 300	removed redundant label 00421$
                           1007 ;	Peephole 300	removed redundant label 00422$
                           1008 ;	genAssign
   020E 90s00r01           1009 	mov	dptr,#_timers
   0211 E0                 1010 	movx	a,@dptr
   0212 FC                 1011 	mov	r4,a
   0213 A3                 1012 	inc	dptr
   0214 E0                 1013 	movx	a,@dptr
   0215 FD                 1014 	mov	r5,a
                           1015 ;	genCmpLt
                           1016 ;	genCmp
   0216 C3                 1017 	clr	c
   0217 EC                 1018 	mov	a,r4
   0218 94 02              1019 	subb	a,#0x02
   021A ED                 1020 	mov	a,r5
   021B 94 00              1021 	subb	a,#0x00
                           1022 ;	genIfxJump
                           1023 ;	Peephole 108.a	removed ljmp by inverse jump logic
   021D 50 1A              1024 	jnc	00155$
                           1025 ;	Peephole 300	removed redundant label 00423$
                           1026 ;	genIpush
   021F C0 02              1027 	push	ar2
   0221 C0 03              1028 	push	ar3
   0223 74r27              1029 	mov	a,#__str_11
   0225 C0 E0              1030 	push	acc
   0227 74s03              1031 	mov	a,#(__str_11 >> 8)
   0229 C0 E0              1032 	push	acc
                           1033 ;	genCall
   022B 12s00r00           1034 	lcall	_printf_tiny
   022E 15 81              1035 	dec	sp
   0230 15 81              1036 	dec	sp
   0232 D0 03              1037 	pop	ar3
   0234 D0 02              1038 	pop	ar2
   0236 02s04r95           1039 	ljmp	00164$
   0239                    1040 00155$:
                           1041 ;	main.c:92: else if(store=='4'&& timers<2){printf_tiny("\n\n\r\t\t ******  Load Counter Value ******"); }
                           1042 ;	genCmpEq
                           1043 ;	gencjneshort
                           1044 ;	Peephole 112.b	changed ljmp to sjmp
                           1045 ;	Peephole 198.b	optimized misc jump sequence
   0239 BA 34 2B           1046 	cjne	r2,#0x34,00151$
                           1047 ;	Peephole 200.b	removed redundant sjmp
                           1048 ;	Peephole 300	removed redundant label 00424$
                           1049 ;	Peephole 300	removed redundant label 00425$
                           1050 ;	genAssign
   023C 90s00r01           1051 	mov	dptr,#_timers
   023F E0                 1052 	movx	a,@dptr
   0240 FC                 1053 	mov	r4,a
   0241 A3                 1054 	inc	dptr
   0242 E0                 1055 	movx	a,@dptr
   0243 FD                 1056 	mov	r5,a
                           1057 ;	genCmpLt
                           1058 ;	genCmp
   0244 C3                 1059 	clr	c
   0245 EC                 1060 	mov	a,r4
   0246 94 02              1061 	subb	a,#0x02
   0248 ED                 1062 	mov	a,r5
   0249 94 00              1063 	subb	a,#0x00
                           1064 ;	genIfxJump
                           1065 ;	Peephole 108.a	removed ljmp by inverse jump logic
   024B 50 1A              1066 	jnc	00151$
                           1067 ;	Peephole 300	removed redundant label 00426$
                           1068 ;	genIpush
   024D C0 02              1069 	push	ar2
   024F C0 03              1070 	push	ar3
   0251 74r49              1071 	mov	a,#__str_12
   0253 C0 E0              1072 	push	acc
   0255 74s03              1073 	mov	a,#(__str_12 >> 8)
   0257 C0 E0              1074 	push	acc
                           1075 ;	genCall
   0259 12s00r00           1076 	lcall	_printf_tiny
   025C 15 81              1077 	dec	sp
   025E 15 81              1078 	dec	sp
   0260 D0 03              1079 	pop	ar3
   0262 D0 02              1080 	pop	ar2
   0264 02s04r95           1081 	ljmp	00164$
   0267                    1082 00151$:
                           1083 ;	main.c:93: else if(store=='5' && timers<2){printf_tiny("\n\n\r\t\t ******  Timer Enable  ******"); }
                           1084 ;	genCmpEq
                           1085 ;	gencjneshort
                           1086 ;	Peephole 112.b	changed ljmp to sjmp
                           1087 ;	Peephole 198.b	optimized misc jump sequence
   0267 BA 35 2B           1088 	cjne	r2,#0x35,00147$
                           1089 ;	Peephole 200.b	removed redundant sjmp
                           1090 ;	Peephole 300	removed redundant label 00427$
                           1091 ;	Peephole 300	removed redundant label 00428$
                           1092 ;	genAssign
   026A 90s00r01           1093 	mov	dptr,#_timers
   026D E0                 1094 	movx	a,@dptr
   026E FC                 1095 	mov	r4,a
   026F A3                 1096 	inc	dptr
   0270 E0                 1097 	movx	a,@dptr
   0271 FD                 1098 	mov	r5,a
                           1099 ;	genCmpLt
                           1100 ;	genCmp
   0272 C3                 1101 	clr	c
   0273 EC                 1102 	mov	a,r4
   0274 94 02              1103 	subb	a,#0x02
   0276 ED                 1104 	mov	a,r5
   0277 94 00              1105 	subb	a,#0x00
                           1106 ;	genIfxJump
                           1107 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0279 50 1A              1108 	jnc	00147$
                           1109 ;	Peephole 300	removed redundant label 00429$
                           1110 ;	genIpush
   027B C0 02              1111 	push	ar2
   027D C0 03              1112 	push	ar3
   027F 74r71              1113 	mov	a,#__str_13
   0281 C0 E0              1114 	push	acc
   0283 74s03              1115 	mov	a,#(__str_13 >> 8)
   0285 C0 E0              1116 	push	acc
                           1117 ;	genCall
   0287 12s00r00           1118 	lcall	_printf_tiny
   028A 15 81              1119 	dec	sp
   028C 15 81              1120 	dec	sp
   028E D0 03              1121 	pop	ar3
   0290 D0 02              1122 	pop	ar2
   0292 02s04r95           1123 	ljmp	00164$
   0295                    1124 00147$:
                           1125 ;	main.c:94: else if(store=='6' && timers<2){printf_tiny("\n\n\r\t\t ******  Timer Disable  ******"); }
                           1126 ;	genCmpEq
                           1127 ;	gencjneshort
                           1128 ;	Peephole 112.b	changed ljmp to sjmp
                           1129 ;	Peephole 198.b	optimized misc jump sequence
   0295 BA 36 2B           1130 	cjne	r2,#0x36,00143$
                           1131 ;	Peephole 200.b	removed redundant sjmp
                           1132 ;	Peephole 300	removed redundant label 00430$
                           1133 ;	Peephole 300	removed redundant label 00431$
                           1134 ;	genAssign
   0298 90s00r01           1135 	mov	dptr,#_timers
   029B E0                 1136 	movx	a,@dptr
   029C FC                 1137 	mov	r4,a
   029D A3                 1138 	inc	dptr
   029E E0                 1139 	movx	a,@dptr
   029F FD                 1140 	mov	r5,a
                           1141 ;	genCmpLt
                           1142 ;	genCmp
   02A0 C3                 1143 	clr	c
   02A1 EC                 1144 	mov	a,r4
   02A2 94 02              1145 	subb	a,#0x02
   02A4 ED                 1146 	mov	a,r5
   02A5 94 00              1147 	subb	a,#0x00
                           1148 ;	genIfxJump
                           1149 ;	Peephole 108.a	removed ljmp by inverse jump logic
   02A7 50 1A              1150 	jnc	00143$
                           1151 ;	Peephole 300	removed redundant label 00432$
                           1152 ;	genIpush
   02A9 C0 02              1153 	push	ar2
   02AB C0 03              1154 	push	ar3
   02AD 74r94              1155 	mov	a,#__str_14
   02AF C0 E0              1156 	push	acc
   02B1 74s03              1157 	mov	a,#(__str_14 >> 8)
   02B3 C0 E0              1158 	push	acc
                           1159 ;	genCall
   02B5 12s00r00           1160 	lcall	_printf_tiny
   02B8 15 81              1161 	dec	sp
   02BA 15 81              1162 	dec	sp
   02BC D0 03              1163 	pop	ar3
   02BE D0 02              1164 	pop	ar2
   02C0 02s04r95           1165 	ljmp	00164$
   02C3                    1166 00143$:
                           1167 ;	main.c:95: else if(store=='7' && timers<2){printf_tiny("\n\n\r\t\t ******  Custom Character  ******"); }
                           1168 ;	genCmpEq
                           1169 ;	gencjneshort
                           1170 ;	Peephole 112.b	changed ljmp to sjmp
                           1171 ;	Peephole 198.b	optimized misc jump sequence
   02C3 BA 37 2B           1172 	cjne	r2,#0x37,00139$
                           1173 ;	Peephole 200.b	removed redundant sjmp
                           1174 ;	Peephole 300	removed redundant label 00433$
                           1175 ;	Peephole 300	removed redundant label 00434$
                           1176 ;	genAssign
   02C6 90s00r01           1177 	mov	dptr,#_timers
   02C9 E0                 1178 	movx	a,@dptr
   02CA FC                 1179 	mov	r4,a
   02CB A3                 1180 	inc	dptr
   02CC E0                 1181 	movx	a,@dptr
   02CD FD                 1182 	mov	r5,a
                           1183 ;	genCmpLt
                           1184 ;	genCmp
   02CE C3                 1185 	clr	c
   02CF EC                 1186 	mov	a,r4
   02D0 94 02              1187 	subb	a,#0x02
   02D2 ED                 1188 	mov	a,r5
   02D3 94 00              1189 	subb	a,#0x00
                           1190 ;	genIfxJump
                           1191 ;	Peephole 108.a	removed ljmp by inverse jump logic
   02D5 50 1A              1192 	jnc	00139$
                           1193 ;	Peephole 300	removed redundant label 00435$
                           1194 ;	genIpush
   02D7 C0 02              1195 	push	ar2
   02D9 C0 03              1196 	push	ar3
   02DB 74rB8              1197 	mov	a,#__str_15
   02DD C0 E0              1198 	push	acc
   02DF 74s03              1199 	mov	a,#(__str_15 >> 8)
   02E1 C0 E0              1200 	push	acc
                           1201 ;	genCall
   02E3 12s00r00           1202 	lcall	_printf_tiny
   02E6 15 81              1203 	dec	sp
   02E8 15 81              1204 	dec	sp
   02EA D0 03              1205 	pop	ar3
   02EC D0 02              1206 	pop	ar2
   02EE 02s04r95           1207 	ljmp	00164$
   02F1                    1208 00139$:
                           1209 ;	main.c:96: else if(store=='x' && timers<2){printf_tiny("\n\n\r\t\t ******  Reset Counter  ******"); }
                           1210 ;	genCmpEq
                           1211 ;	gencjneshort
                           1212 ;	Peephole 112.b	changed ljmp to sjmp
                           1213 ;	Peephole 198.b	optimized misc jump sequence
   02F1 BA 78 2B           1214 	cjne	r2,#0x78,00135$
                           1215 ;	Peephole 200.b	removed redundant sjmp
                           1216 ;	Peephole 300	removed redundant label 00436$
                           1217 ;	Peephole 300	removed redundant label 00437$
                           1218 ;	genAssign
   02F4 90s00r01           1219 	mov	dptr,#_timers
   02F7 E0                 1220 	movx	a,@dptr
   02F8 FC                 1221 	mov	r4,a
   02F9 A3                 1222 	inc	dptr
   02FA E0                 1223 	movx	a,@dptr
   02FB FD                 1224 	mov	r5,a
                           1225 ;	genCmpLt
                           1226 ;	genCmp
   02FC C3                 1227 	clr	c
   02FD EC                 1228 	mov	a,r4
   02FE 94 02              1229 	subb	a,#0x02
   0300 ED                 1230 	mov	a,r5
   0301 94 00              1231 	subb	a,#0x00
                           1232 ;	genIfxJump
                           1233 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0303 50 1A              1234 	jnc	00135$
                           1235 ;	Peephole 300	removed redundant label 00438$
                           1236 ;	genIpush
   0305 C0 02              1237 	push	ar2
   0307 C0 03              1238 	push	ar3
   0309 74rDF              1239 	mov	a,#__str_16
   030B C0 E0              1240 	push	acc
   030D 74s03              1241 	mov	a,#(__str_16 >> 8)
   030F C0 E0              1242 	push	acc
                           1243 ;	genCall
   0311 12s00r00           1244 	lcall	_printf_tiny
   0314 15 81              1245 	dec	sp
   0316 15 81              1246 	dec	sp
   0318 D0 03              1247 	pop	ar3
   031A D0 02              1248 	pop	ar2
   031C 02s04r95           1249 	ljmp	00164$
   031F                    1250 00135$:
                           1251 ;	main.c:97: else if(store=='i' && timers<2){printf_tiny("\n\n\r\t\t ******  Configure IO Pins  ******"); }
                           1252 ;	genCmpEq
                           1253 ;	gencjneshort
                           1254 ;	Peephole 112.b	changed ljmp to sjmp
                           1255 ;	Peephole 198.b	optimized misc jump sequence
   031F BA 69 2B           1256 	cjne	r2,#0x69,00131$
                           1257 ;	Peephole 200.b	removed redundant sjmp
                           1258 ;	Peephole 300	removed redundant label 00439$
                           1259 ;	Peephole 300	removed redundant label 00440$
                           1260 ;	genAssign
   0322 90s00r01           1261 	mov	dptr,#_timers
   0325 E0                 1262 	movx	a,@dptr
   0326 FC                 1263 	mov	r4,a
   0327 A3                 1264 	inc	dptr
   0328 E0                 1265 	movx	a,@dptr
   0329 FD                 1266 	mov	r5,a
                           1267 ;	genCmpLt
                           1268 ;	genCmp
   032A C3                 1269 	clr	c
   032B EC                 1270 	mov	a,r4
   032C 94 02              1271 	subb	a,#0x02
   032E ED                 1272 	mov	a,r5
   032F 94 00              1273 	subb	a,#0x00
                           1274 ;	genIfxJump
                           1275 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0331 50 1A              1276 	jnc	00131$
                           1277 ;	Peephole 300	removed redundant label 00441$
                           1278 ;	genIpush
   0333 C0 02              1279 	push	ar2
   0335 C0 03              1280 	push	ar3
   0337 74r03              1281 	mov	a,#__str_17
   0339 C0 E0              1282 	push	acc
   033B 74s04              1283 	mov	a,#(__str_17 >> 8)
   033D C0 E0              1284 	push	acc
                           1285 ;	genCall
   033F 12s00r00           1286 	lcall	_printf_tiny
   0342 15 81              1287 	dec	sp
   0344 15 81              1288 	dec	sp
   0346 D0 03              1289 	pop	ar3
   0348 D0 02              1290 	pop	ar2
   034A 02s04r95           1291 	ljmp	00164$
   034D                    1292 00131$:
                           1293 ;	main.c:98: else if(store=='s' && timers<2){printf_tiny("\n\n\r\t\t ******  Status of IO Expander  ******"); }
                           1294 ;	genCmpEq
                           1295 ;	gencjneshort
                           1296 ;	Peephole 112.b	changed ljmp to sjmp
                           1297 ;	Peephole 198.b	optimized misc jump sequence
   034D BA 73 2B           1298 	cjne	r2,#0x73,00127$
                           1299 ;	Peephole 200.b	removed redundant sjmp
                           1300 ;	Peephole 300	removed redundant label 00442$
                           1301 ;	Peephole 300	removed redundant label 00443$
                           1302 ;	genAssign
   0350 90s00r01           1303 	mov	dptr,#_timers
   0353 E0                 1304 	movx	a,@dptr
   0354 FC                 1305 	mov	r4,a
   0355 A3                 1306 	inc	dptr
   0356 E0                 1307 	movx	a,@dptr
   0357 FD                 1308 	mov	r5,a
                           1309 ;	genCmpLt
                           1310 ;	genCmp
   0358 C3                 1311 	clr	c
   0359 EC                 1312 	mov	a,r4
   035A 94 02              1313 	subb	a,#0x02
   035C ED                 1314 	mov	a,r5
   035D 94 00              1315 	subb	a,#0x00
                           1316 ;	genIfxJump
                           1317 ;	Peephole 108.a	removed ljmp by inverse jump logic
   035F 50 1A              1318 	jnc	00127$
                           1319 ;	Peephole 300	removed redundant label 00444$
                           1320 ;	genIpush
   0361 C0 02              1321 	push	ar2
   0363 C0 03              1322 	push	ar3
   0365 74r2B              1323 	mov	a,#__str_18
   0367 C0 E0              1324 	push	acc
   0369 74s04              1325 	mov	a,#(__str_18 >> 8)
   036B C0 E0              1326 	push	acc
                           1327 ;	genCall
   036D 12s00r00           1328 	lcall	_printf_tiny
   0370 15 81              1329 	dec	sp
   0372 15 81              1330 	dec	sp
   0374 D0 03              1331 	pop	ar3
   0376 D0 02              1332 	pop	ar2
   0378 02s04r95           1333 	ljmp	00164$
   037B                    1334 00127$:
                           1335 ;	main.c:99: else if(store=='w' && timers<2){printf_tiny("\n\n\r\t\t ******  EEPROM Write  ******"); }
                           1336 ;	genCmpEq
                           1337 ;	gencjneshort
                           1338 ;	Peephole 112.b	changed ljmp to sjmp
                           1339 ;	Peephole 198.b	optimized misc jump sequence
   037B BA 77 2B           1340 	cjne	r2,#0x77,00123$
                           1341 ;	Peephole 200.b	removed redundant sjmp
                           1342 ;	Peephole 300	removed redundant label 00445$
                           1343 ;	Peephole 300	removed redundant label 00446$
                           1344 ;	genAssign
   037E 90s00r01           1345 	mov	dptr,#_timers
   0381 E0                 1346 	movx	a,@dptr
   0382 FC                 1347 	mov	r4,a
   0383 A3                 1348 	inc	dptr
   0384 E0                 1349 	movx	a,@dptr
   0385 FD                 1350 	mov	r5,a
                           1351 ;	genCmpLt
                           1352 ;	genCmp
   0386 C3                 1353 	clr	c
   0387 EC                 1354 	mov	a,r4
   0388 94 02              1355 	subb	a,#0x02
   038A ED                 1356 	mov	a,r5
   038B 94 00              1357 	subb	a,#0x00
                           1358 ;	genIfxJump
                           1359 ;	Peephole 108.a	removed ljmp by inverse jump logic
   038D 50 1A              1360 	jnc	00123$
                           1361 ;	Peephole 300	removed redundant label 00447$
                           1362 ;	genIpush
   038F C0 02              1363 	push	ar2
   0391 C0 03              1364 	push	ar3
   0393 74r57              1365 	mov	a,#__str_19
   0395 C0 E0              1366 	push	acc
   0397 74s04              1367 	mov	a,#(__str_19 >> 8)
   0399 C0 E0              1368 	push	acc
                           1369 ;	genCall
   039B 12s00r00           1370 	lcall	_printf_tiny
   039E 15 81              1371 	dec	sp
   03A0 15 81              1372 	dec	sp
   03A2 D0 03              1373 	pop	ar3
   03A4 D0 02              1374 	pop	ar2
   03A6 02s04r95           1375 	ljmp	00164$
   03A9                    1376 00123$:
                           1377 ;	main.c:100: else if(store=='r' && timers<2){printf_tiny("\n\n\r\t\t ******  EEPROM Read  ******"); }
                           1378 ;	genCmpEq
                           1379 ;	gencjneshort
                           1380 ;	Peephole 112.b	changed ljmp to sjmp
                           1381 ;	Peephole 198.b	optimized misc jump sequence
   03A9 BA 72 2B           1382 	cjne	r2,#0x72,00119$
                           1383 ;	Peephole 200.b	removed redundant sjmp
                           1384 ;	Peephole 300	removed redundant label 00448$
                           1385 ;	Peephole 300	removed redundant label 00449$
                           1386 ;	genAssign
   03AC 90s00r01           1387 	mov	dptr,#_timers
   03AF E0                 1388 	movx	a,@dptr
   03B0 FC                 1389 	mov	r4,a
   03B1 A3                 1390 	inc	dptr
   03B2 E0                 1391 	movx	a,@dptr
   03B3 FD                 1392 	mov	r5,a
                           1393 ;	genCmpLt
                           1394 ;	genCmp
   03B4 C3                 1395 	clr	c
   03B5 EC                 1396 	mov	a,r4
   03B6 94 02              1397 	subb	a,#0x02
   03B8 ED                 1398 	mov	a,r5
   03B9 94 00              1399 	subb	a,#0x00
                           1400 ;	genIfxJump
                           1401 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03BB 50 1A              1402 	jnc	00119$
                           1403 ;	Peephole 300	removed redundant label 00450$
                           1404 ;	genIpush
   03BD C0 02              1405 	push	ar2
   03BF C0 03              1406 	push	ar3
   03C1 74r7A              1407 	mov	a,#__str_20
   03C3 C0 E0              1408 	push	acc
   03C5 74s04              1409 	mov	a,#(__str_20 >> 8)
   03C7 C0 E0              1410 	push	acc
                           1411 ;	genCall
   03C9 12s00r00           1412 	lcall	_printf_tiny
   03CC 15 81              1413 	dec	sp
   03CE 15 81              1414 	dec	sp
   03D0 D0 03              1415 	pop	ar3
   03D2 D0 02              1416 	pop	ar2
   03D4 02s04r95           1417 	ljmp	00164$
   03D7                    1418 00119$:
                           1419 ;	main.c:101: else if(store=='c' && timers<2){printf_tiny("\n\n\r\t\t ******  CGRAM Dump  ******"); }
                           1420 ;	genCmpEq
                           1421 ;	gencjneshort
                           1422 ;	Peephole 112.b	changed ljmp to sjmp
                           1423 ;	Peephole 198.b	optimized misc jump sequence
   03D7 BA 63 2B           1424 	cjne	r2,#0x63,00115$
                           1425 ;	Peephole 200.b	removed redundant sjmp
                           1426 ;	Peephole 300	removed redundant label 00451$
                           1427 ;	Peephole 300	removed redundant label 00452$
                           1428 ;	genAssign
   03DA 90s00r01           1429 	mov	dptr,#_timers
   03DD E0                 1430 	movx	a,@dptr
   03DE FC                 1431 	mov	r4,a
   03DF A3                 1432 	inc	dptr
   03E0 E0                 1433 	movx	a,@dptr
   03E1 FD                 1434 	mov	r5,a
                           1435 ;	genCmpLt
                           1436 ;	genCmp
   03E2 C3                 1437 	clr	c
   03E3 EC                 1438 	mov	a,r4
   03E4 94 02              1439 	subb	a,#0x02
   03E6 ED                 1440 	mov	a,r5
   03E7 94 00              1441 	subb	a,#0x00
                           1442 ;	genIfxJump
                           1443 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03E9 50 1A              1444 	jnc	00115$
                           1445 ;	Peephole 300	removed redundant label 00453$
                           1446 ;	genIpush
   03EB C0 02              1447 	push	ar2
   03ED C0 03              1448 	push	ar3
   03EF 74r9C              1449 	mov	a,#__str_21
   03F1 C0 E0              1450 	push	acc
   03F3 74s04              1451 	mov	a,#(__str_21 >> 8)
   03F5 C0 E0              1452 	push	acc
                           1453 ;	genCall
   03F7 12s00r00           1454 	lcall	_printf_tiny
   03FA 15 81              1455 	dec	sp
   03FC 15 81              1456 	dec	sp
   03FE D0 03              1457 	pop	ar3
   0400 D0 02              1458 	pop	ar2
   0402 02s04r95           1459 	ljmp	00164$
   0405                    1460 00115$:
                           1461 ;	main.c:102: else if(store=='d' && timers<2){printf_tiny("\n\n\r\t\t ******  DDRAM Dump  ******"); }
                           1462 ;	genCmpEq
                           1463 ;	gencjneshort
                           1464 ;	Peephole 112.b	changed ljmp to sjmp
                           1465 ;	Peephole 198.b	optimized misc jump sequence
   0405 BA 64 2A           1466 	cjne	r2,#0x64,00111$
                           1467 ;	Peephole 200.b	removed redundant sjmp
                           1468 ;	Peephole 300	removed redundant label 00454$
                           1469 ;	Peephole 300	removed redundant label 00455$
                           1470 ;	genAssign
   0408 90s00r01           1471 	mov	dptr,#_timers
   040B E0                 1472 	movx	a,@dptr
   040C FC                 1473 	mov	r4,a
   040D A3                 1474 	inc	dptr
   040E E0                 1475 	movx	a,@dptr
   040F FD                 1476 	mov	r5,a
                           1477 ;	genCmpLt
                           1478 ;	genCmp
   0410 C3                 1479 	clr	c
   0411 EC                 1480 	mov	a,r4
   0412 94 02              1481 	subb	a,#0x02
   0414 ED                 1482 	mov	a,r5
   0415 94 00              1483 	subb	a,#0x00
                           1484 ;	genIfxJump
                           1485 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0417 50 19              1486 	jnc	00111$
                           1487 ;	Peephole 300	removed redundant label 00456$
                           1488 ;	genIpush
   0419 C0 02              1489 	push	ar2
   041B C0 03              1490 	push	ar3
   041D 74rBD              1491 	mov	a,#__str_22
   041F C0 E0              1492 	push	acc
   0421 74s04              1493 	mov	a,#(__str_22 >> 8)
   0423 C0 E0              1494 	push	acc
                           1495 ;	genCall
   0425 12s00r00           1496 	lcall	_printf_tiny
   0428 15 81              1497 	dec	sp
   042A 15 81              1498 	dec	sp
   042C D0 03              1499 	pop	ar3
   042E D0 02              1500 	pop	ar2
                           1501 ;	Peephole 112.b	changed ljmp to sjmp
   0430 80 63              1502 	sjmp	00164$
   0432                    1503 00111$:
                           1504 ;	main.c:103: else if(store=='h' && timers<2){printf_tiny("\n\n\r\t\t ******  Hex Dump  ******"); }
                           1505 ;	genCmpEq
                           1506 ;	gencjneshort
                           1507 ;	Peephole 112.b	changed ljmp to sjmp
                           1508 ;	Peephole 198.b	optimized misc jump sequence
   0432 BA 68 2A           1509 	cjne	r2,#0x68,00107$
                           1510 ;	Peephole 200.b	removed redundant sjmp
                           1511 ;	Peephole 300	removed redundant label 00457$
                           1512 ;	Peephole 300	removed redundant label 00458$
                           1513 ;	genAssign
   0435 90s00r01           1514 	mov	dptr,#_timers
   0438 E0                 1515 	movx	a,@dptr
   0439 FC                 1516 	mov	r4,a
   043A A3                 1517 	inc	dptr
   043B E0                 1518 	movx	a,@dptr
   043C FD                 1519 	mov	r5,a
                           1520 ;	genCmpLt
                           1521 ;	genCmp
   043D C3                 1522 	clr	c
   043E EC                 1523 	mov	a,r4
   043F 94 02              1524 	subb	a,#0x02
   0441 ED                 1525 	mov	a,r5
   0442 94 00              1526 	subb	a,#0x00
                           1527 ;	genIfxJump
                           1528 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0444 50 19              1529 	jnc	00107$
                           1530 ;	Peephole 300	removed redundant label 00459$
                           1531 ;	genIpush
   0446 C0 02              1532 	push	ar2
   0448 C0 03              1533 	push	ar3
   044A 74rDE              1534 	mov	a,#__str_23
   044C C0 E0              1535 	push	acc
   044E 74s04              1536 	mov	a,#(__str_23 >> 8)
   0450 C0 E0              1537 	push	acc
                           1538 ;	genCall
   0452 12s00r00           1539 	lcall	_printf_tiny
   0455 15 81              1540 	dec	sp
   0457 15 81              1541 	dec	sp
   0459 D0 03              1542 	pop	ar3
   045B D0 02              1543 	pop	ar2
                           1544 ;	Peephole 112.b	changed ljmp to sjmp
   045D 80 36              1545 	sjmp	00164$
   045F                    1546 00107$:
                           1547 ;	main.c:104: else if(store=='l'){printf_tiny("\n\n\r\t\t ******  LCD DISPLAY  ******"); }
                           1548 ;	genCmpEq
                           1549 ;	gencjneshort
                           1550 ;	Peephole 112.b	changed ljmp to sjmp
                           1551 ;	Peephole 198.b	optimized misc jump sequence
   045F BA 6C 19           1552 	cjne	r2,#0x6C,00104$
                           1553 ;	Peephole 200.b	removed redundant sjmp
                           1554 ;	Peephole 300	removed redundant label 00460$
                           1555 ;	Peephole 300	removed redundant label 00461$
                           1556 ;	genIpush
   0462 C0 02              1557 	push	ar2
   0464 C0 03              1558 	push	ar3
   0466 74rFD              1559 	mov	a,#__str_24
   0468 C0 E0              1560 	push	acc
   046A 74s04              1561 	mov	a,#(__str_24 >> 8)
   046C C0 E0              1562 	push	acc
                           1563 ;	genCall
   046E 12s00r00           1564 	lcall	_printf_tiny
   0471 15 81              1565 	dec	sp
   0473 15 81              1566 	dec	sp
   0475 D0 03              1567 	pop	ar3
   0477 D0 02              1568 	pop	ar2
                           1569 ;	Peephole 112.b	changed ljmp to sjmp
   0479 80 1A              1570 	sjmp	00164$
   047B                    1571 00104$:
                           1572 ;	main.c:105: else if(store=='q'){printf_tiny("\n\n\r\t\t ******  Clear LCD  ******"); }
                           1573 ;	genCmpEq
                           1574 ;	gencjneshort
                           1575 ;	Peephole 112.b	changed ljmp to sjmp
                           1576 ;	Peephole 198.b	optimized misc jump sequence
   047B BA 71 17           1577 	cjne	r2,#0x71,00164$
                           1578 ;	Peephole 200.b	removed redundant sjmp
                           1579 ;	Peephole 300	removed redundant label 00462$
                           1580 ;	Peephole 300	removed redundant label 00463$
                           1581 ;	genIpush
   047E C0 02              1582 	push	ar2
   0480 C0 03              1583 	push	ar3
   0482 74r1F              1584 	mov	a,#__str_25
   0484 C0 E0              1585 	push	acc
   0486 74s05              1586 	mov	a,#(__str_25 >> 8)
   0488 C0 E0              1587 	push	acc
                           1588 ;	genCall
   048A 12s00r00           1589 	lcall	_printf_tiny
   048D 15 81              1590 	dec	sp
   048F 15 81              1591 	dec	sp
   0491 D0 03              1592 	pop	ar3
   0493 D0 02              1593 	pop	ar2
   0495                    1594 00164$:
                           1595 ;	main.c:111: if(store=='1')
                           1596 ;	genIfx
   0495 EB                 1597 	mov	a,r3
                           1598 ;	genIfxJump
                           1599 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0496 60 05              1600 	jz	00234$
                           1601 ;	Peephole 300	removed redundant label 00464$
                           1602 ;	main.c:113: EA=0;
                           1603 ;	genAssign
   0498 C2 AF              1604 	clr	_EA
   049A 02s0Dr34           1605 	ljmp	00235$
   049D                    1606 00234$:
                           1607 ;	main.c:116: else if(store=='2' && EA==0)
                           1608 ;	genCmpEq
                           1609 ;	gencjneshort
                           1610 ;	Peephole 112.b	changed ljmp to sjmp
                           1611 ;	Peephole 198.b	optimized misc jump sequence
   049D BA 32 08           1612 	cjne	r2,#0x32,00230$
                           1613 ;	Peephole 200.b	removed redundant sjmp
                           1614 ;	Peephole 300	removed redundant label 00465$
                           1615 ;	Peephole 300	removed redundant label 00466$
                           1616 ;	genIfx
                           1617 ;	genIfxJump
                           1618 ;	Peephole 108.e	removed ljmp by inverse jump logic
   04A0 20 AF 05           1619 	jb	_EA,00230$
                           1620 ;	Peephole 300	removed redundant label 00467$
                           1621 ;	main.c:118: EA=1;
                           1622 ;	genAssign
   04A3 D2 AF              1623 	setb	_EA
   04A5 02s0Dr34           1624 	ljmp	00235$
   04A8                    1625 00230$:
                           1626 ;	main.c:121: else if(store=='3')
                           1627 ;	genCmpEq
                           1628 ;	gencjneshort
                           1629 ;	Peephole 112.b	changed ljmp to sjmp
                           1630 ;	Peephole 198.b	optimized misc jump sequence
   04A8 BA 33 13           1631 	cjne	r2,#0x33,00227$
                           1632 ;	Peephole 200.b	removed redundant sjmp
                           1633 ;	Peephole 300	removed redundant label 00468$
                           1634 ;	Peephole 300	removed redundant label 00469$
                           1635 ;	main.c:123: WDTPRG |=0x07;
                           1636 ;	genOr
   04AB 43 A7 07           1637 	orl	_WDTPRG,#0x07
                           1638 ;	main.c:124: WDTRST = 0x01E;
                           1639 ;	genAssign
   04AE 75 A6 1E           1640 	mov	_WDTRST,#0x1E
                           1641 ;	main.c:125: WDTRST = 0x0E1;
                           1642 ;	genAssign
   04B1 75 A6 E1           1643 	mov	_WDTRST,#0xE1
                           1644 ;	main.c:126: clock_reset();
                           1645 ;	genCall
   04B4 C0 02              1646 	push	ar2
   04B6 12s00r00           1647 	lcall	_clock_reset
   04B9 D0 02              1648 	pop	ar2
   04BB 02s0Dr34           1649 	ljmp	00235$
   04BE                    1650 00227$:
                           1651 ;	main.c:128: else if(store=='4')
                           1652 ;	genCmpEq
                           1653 ;	gencjneshort
   04BE BA 34 02           1654 	cjne	r2,#0x34,00470$
   04C1 80 03              1655 	sjmp	00471$
   04C3                    1656 00470$:
   04C3 02s08r1A           1657 	ljmp	00224$
   04C6                    1658 00471$:
                           1659 ;	main.c:130: printf_tiny("\n\n\r\t Select timer number between 0 to 2: \t");
                           1660 ;	genIpush
   04C6 C0 02              1661 	push	ar2
   04C8 74r3F              1662 	mov	a,#__str_26
   04CA C0 E0              1663 	push	acc
   04CC 74s05              1664 	mov	a,#(__str_26 >> 8)
   04CE C0 E0              1665 	push	acc
                           1666 ;	genCall
   04D0 12s00r00           1667 	lcall	_printf_tiny
   04D3 15 81              1668 	dec	sp
   04D5 15 81              1669 	dec	sp
   04D7 D0 02              1670 	pop	ar2
                           1671 ;	main.c:131: do
   04D9                    1672 00167$:
                           1673 ;	main.c:134: gets(c);
                           1674 ;	genCall
                           1675 ;	Peephole 182.a	used 16 bit load of DPTR
   04D9 90s00r1A           1676 	mov	dptr,#_main_c_1_1
   04DC 75 F0 00           1677 	mov	b,#0x00
   04DF C0 02              1678 	push	ar2
   04E1 12s00r00           1679 	lcall	_gets
   04E4 D0 02              1680 	pop	ar2
                           1681 ;	main.c:135: num=atoi(c);
                           1682 ;	genCall
                           1683 ;	Peephole 182.a	used 16 bit load of DPTR
   04E6 90s00r1A           1684 	mov	dptr,#_main_c_1_1
   04E9 75 F0 00           1685 	mov	b,#0x00
   04EC C0 02              1686 	push	ar2
   04EE 12s00r00           1687 	lcall	_atoi
   04F1 AB 82              1688 	mov	r3,dpl
   04F3 AC 83              1689 	mov	r4,dph
   04F5 D0 02              1690 	pop	ar2
                           1691 ;	main.c:136: if(num>2){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 2");}
                           1692 ;	genCmpGt
                           1693 ;	genCmp
   04F7 C3                 1694 	clr	c
   04F8 74 02              1695 	mov	a,#0x02
   04FA 9B                 1696 	subb	a,r3
                           1697 ;	Peephole 159	avoided xrl during execution
   04FB 74 80              1698 	mov	a,#(0x00 ^ 0x80)
   04FD 8C F0              1699 	mov	b,r4
   04FF 63 F0 80           1700 	xrl	b,#0x80
   0502 95 F0              1701 	subb	a,b
   0504 E4                 1702 	clr	a
   0505 33                 1703 	rlc	a
                           1704 ;	genIfx
   0506 FD                 1705 	mov	r5,a
                           1706 ;	Peephole 105	removed redundant mov
                           1707 ;	genIfxJump
                           1708 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0507 60 1F              1709 	jz	00168$
                           1710 ;	Peephole 300	removed redundant label 00472$
                           1711 ;	genIpush
   0509 C0 02              1712 	push	ar2
   050B C0 03              1713 	push	ar3
   050D C0 04              1714 	push	ar4
   050F C0 05              1715 	push	ar5
   0511 74r6A              1716 	mov	a,#__str_27
   0513 C0 E0              1717 	push	acc
   0515 74s05              1718 	mov	a,#(__str_27 >> 8)
   0517 C0 E0              1719 	push	acc
                           1720 ;	genCall
   0519 12s00r00           1721 	lcall	_printf_tiny
   051C 15 81              1722 	dec	sp
   051E 15 81              1723 	dec	sp
   0520 D0 05              1724 	pop	ar5
   0522 D0 04              1725 	pop	ar4
   0524 D0 03              1726 	pop	ar3
   0526 D0 02              1727 	pop	ar2
   0528                    1728 00168$:
                           1729 ;	main.c:137: }while(num>2);
                           1730 ;	genIfx
   0528 ED                 1731 	mov	a,r5
                           1732 ;	genIfxJump
                           1733 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0529 70 AE              1734 	jnz	00167$
                           1735 ;	Peephole 300	removed redundant label 00473$
                           1736 ;	main.c:139: printf_tiny("\n\n\rEnter minutes for timer %d between 0 to 59: \t",num);
                           1737 ;	genIpush
   052B C0 02              1738 	push	ar2
   052D C0 03              1739 	push	ar3
   052F C0 04              1740 	push	ar4
   0531 C0 03              1741 	push	ar3
   0533 C0 04              1742 	push	ar4
                           1743 ;	genIpush
   0535 74r9F              1744 	mov	a,#__str_28
   0537 C0 E0              1745 	push	acc
   0539 74s05              1746 	mov	a,#(__str_28 >> 8)
   053B C0 E0              1747 	push	acc
                           1748 ;	genCall
   053D 12s00r00           1749 	lcall	_printf_tiny
   0540 E5 81              1750 	mov	a,sp
   0542 24 FC              1751 	add	a,#0xfc
   0544 F5 81              1752 	mov	sp,a
   0546 D0 04              1753 	pop	ar4
   0548 D0 03              1754 	pop	ar3
   054A D0 02              1755 	pop	ar2
                           1756 ;	main.c:140: do{
                           1757 ;	genLeftShift
                           1758 ;	genLeftShiftLiteral
                           1759 ;	genlshTwo
   054C 8B 05              1760 	mov	ar5,r3
   054E EC                 1761 	mov	a,r4
   054F CD                 1762 	xch	a,r5
   0550 25 E0              1763 	add	a,acc
   0552 CD                 1764 	xch	a,r5
   0553 33                 1765 	rlc	a
   0554 FE                 1766 	mov	r6,a
                           1767 ;	genPlus
                           1768 ;	Peephole 236.g	used r5 instead of ar5
   0555 ED                 1769 	mov	a,r5
   0556 24r12              1770 	add	a,#_nmi
   0558 F5*00              1771 	mov	_main_sloc0_1_0,a
                           1772 ;	Peephole 236.g	used r6 instead of ar6
   055A EE                 1773 	mov	a,r6
   055B 34s00              1774 	addc	a,#(_nmi >> 8)
   055D F5*01              1775 	mov	(_main_sloc0_1_0 + 1),a
   055F                    1776 00172$:
                           1777 ;	main.c:142: gets(c);
                           1778 ;	genIpush
   055F C0 02              1779 	push	ar2
                           1780 ;	genCall
                           1781 ;	Peephole 182.a	used 16 bit load of DPTR
   0561 90s00r1A           1782 	mov	dptr,#_main_c_1_1
   0564 75 F0 00           1783 	mov	b,#0x00
   0567 C0 02              1784 	push	ar2
   0569 C0 03              1785 	push	ar3
   056B C0 04              1786 	push	ar4
   056D C0 05              1787 	push	ar5
   056F C0 06              1788 	push	ar6
   0571 12s00r00           1789 	lcall	_gets
   0574 D0 06              1790 	pop	ar6
   0576 D0 05              1791 	pop	ar5
   0578 D0 04              1792 	pop	ar4
   057A D0 03              1793 	pop	ar3
   057C D0 02              1794 	pop	ar2
                           1795 ;	main.c:143: nmi[num]=atoi(c);
                           1796 ;	genPlus
                           1797 ;	Peephole 236.g	used r5 instead of ar5
   057E ED                 1798 	mov	a,r5
   057F 24r12              1799 	add	a,#_nmi
   0581 F9                 1800 	mov	r1,a
                           1801 ;	Peephole 236.g	used r6 instead of ar6
   0582 EE                 1802 	mov	a,r6
   0583 34s00              1803 	addc	a,#(_nmi >> 8)
   0585 FA                 1804 	mov	r2,a
                           1805 ;	genCall
                           1806 ;	Peephole 182.a	used 16 bit load of DPTR
   0586 90s00r1A           1807 	mov	dptr,#_main_c_1_1
   0589 75 F0 00           1808 	mov	b,#0x00
   058C C0 02              1809 	push	ar2
   058E C0 03              1810 	push	ar3
   0590 C0 04              1811 	push	ar4
   0592 C0 05              1812 	push	ar5
   0594 C0 06              1813 	push	ar6
   0596 C0 01              1814 	push	ar1
   0598 12s00r00           1815 	lcall	_atoi
   059B AF 82              1816 	mov	r7,dpl
   059D A8 83              1817 	mov	r0,dph
   059F D0 01              1818 	pop	ar1
   05A1 D0 06              1819 	pop	ar6
   05A3 D0 05              1820 	pop	ar5
   05A5 D0 04              1821 	pop	ar4
   05A7 D0 03              1822 	pop	ar3
   05A9 D0 02              1823 	pop	ar2
                           1824 ;	genPointerSet
                           1825 ;     genFarPointerSet
   05AB 89 82              1826 	mov	dpl,r1
   05AD 8A 83              1827 	mov	dph,r2
   05AF EF                 1828 	mov	a,r7
   05B0 F0                 1829 	movx	@dptr,a
   05B1 A3                 1830 	inc	dptr
   05B2 E8                 1831 	mov	a,r0
   05B3 F0                 1832 	movx	@dptr,a
                           1833 ;	main.c:144: if(nmi[num]>59){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 59");}
                           1834 ;	genPointerGet
                           1835 ;	genFarPointerGet
   05B4 85*00 82           1836 	mov	dpl,_main_sloc0_1_0
   05B7 85*01 83           1837 	mov	dph,(_main_sloc0_1_0 + 1)
   05BA E0                 1838 	movx	a,@dptr
   05BB FA                 1839 	mov	r2,a
   05BC A3                 1840 	inc	dptr
   05BD E0                 1841 	movx	a,@dptr
   05BE FF                 1842 	mov	r7,a
                           1843 ;	genCmpGt
                           1844 ;	genCmp
   05BF C3                 1845 	clr	c
   05C0 74 3B              1846 	mov	a,#0x3B
   05C2 9A                 1847 	subb	a,r2
                           1848 ;	Peephole 181	changed mov to clr
   05C3 E4                 1849 	clr	a
   05C4 9F                 1850 	subb	a,r7
   05C5 E4                 1851 	clr	a
   05C6 33                 1852 	rlc	a
                           1853 ;	genIpop
   05C7 D0 02              1854 	pop	ar2
                           1855 ;	genIfx
                           1856 ;	genIfxJump
                           1857 ;	Peephole 108.c	removed ljmp by inverse jump logic
   05C9 60 23              1858 	jz	00173$
                           1859 ;	Peephole 300	removed redundant label 00474$
                           1860 ;	genIpush
   05CB C0 02              1861 	push	ar2
   05CD C0 03              1862 	push	ar3
   05CF C0 04              1863 	push	ar4
   05D1 C0 05              1864 	push	ar5
   05D3 C0 06              1865 	push	ar6
   05D5 74rD0              1866 	mov	a,#__str_29
   05D7 C0 E0              1867 	push	acc
   05D9 74s05              1868 	mov	a,#(__str_29 >> 8)
   05DB C0 E0              1869 	push	acc
                           1870 ;	genCall
   05DD 12s00r00           1871 	lcall	_printf_tiny
   05E0 15 81              1872 	dec	sp
   05E2 15 81              1873 	dec	sp
   05E4 D0 06              1874 	pop	ar6
   05E6 D0 05              1875 	pop	ar5
   05E8 D0 04              1876 	pop	ar4
   05EA D0 03              1877 	pop	ar3
   05EC D0 02              1878 	pop	ar2
   05EE                    1879 00173$:
                           1880 ;	main.c:145: }while(nmi[num]>59);
                           1881 ;	genPlus
                           1882 ;	Peephole 236.g	used r5 instead of ar5
   05EE ED                 1883 	mov	a,r5
   05EF 24r12              1884 	add	a,#_nmi
   05F1 F5 82              1885 	mov	dpl,a
                           1886 ;	Peephole 236.g	used r6 instead of ar6
   05F3 EE                 1887 	mov	a,r6
   05F4 34s00              1888 	addc	a,#(_nmi >> 8)
   05F6 F5 83              1889 	mov	dph,a
                           1890 ;	genPointerGet
                           1891 ;	genFarPointerGet
   05F8 E0                 1892 	movx	a,@dptr
   05F9 FF                 1893 	mov	r7,a
   05FA A3                 1894 	inc	dptr
   05FB E0                 1895 	movx	a,@dptr
   05FC F8                 1896 	mov	r0,a
                           1897 ;	genCmpGt
                           1898 ;	genCmp
   05FD C3                 1899 	clr	c
   05FE 74 3B              1900 	mov	a,#0x3B
   0600 9F                 1901 	subb	a,r7
                           1902 ;	Peephole 181	changed mov to clr
   0601 E4                 1903 	clr	a
   0602 98                 1904 	subb	a,r0
                           1905 ;	genIfxJump
   0603 50 03              1906 	jnc	00475$
   0605 02s05r5F           1907 	ljmp	00172$
   0608                    1908 00475$:
                           1909 ;	main.c:147: printf_tiny("\n\n\rEnter seconds for timer %d between 1 to 59: \t",num);
                           1910 ;	genIpush
   0608 C0 02              1911 	push	ar2
   060A C0 03              1912 	push	ar3
   060C C0 04              1913 	push	ar4
   060E C0 05              1914 	push	ar5
   0610 C0 06              1915 	push	ar6
   0612 C0 03              1916 	push	ar3
   0614 C0 04              1917 	push	ar4
                           1918 ;	genIpush
   0616 74r06              1919 	mov	a,#__str_30
   0618 C0 E0              1920 	push	acc
   061A 74s06              1921 	mov	a,#(__str_30 >> 8)
   061C C0 E0              1922 	push	acc
                           1923 ;	genCall
   061E 12s00r00           1924 	lcall	_printf_tiny
   0621 E5 81              1925 	mov	a,sp
   0623 24 FC              1926 	add	a,#0xfc
   0625 F5 81              1927 	mov	sp,a
   0627 D0 06              1928 	pop	ar6
   0629 D0 05              1929 	pop	ar5
   062B D0 04              1930 	pop	ar4
   062D D0 03              1931 	pop	ar3
   062F D0 02              1932 	pop	ar2
                           1933 ;	main.c:148: do{
                           1934 ;	genPlus
                           1935 ;	Peephole 236.g	used r5 instead of ar5
   0631 ED                 1936 	mov	a,r5
   0632 24r0C              1937 	add	a,#_nsec
   0634 F5*02              1938 	mov	_main_sloc1_1_0,a
                           1939 ;	Peephole 236.g	used r6 instead of ar6
   0636 EE                 1940 	mov	a,r6
   0637 34s00              1941 	addc	a,#(_nsec >> 8)
   0639 F5*03              1942 	mov	(_main_sloc1_1_0 + 1),a
                           1943 ;	genPlus
                           1944 ;	Peephole 236.g	used r5 instead of ar5
   063B ED                 1945 	mov	a,r5
   063C 24r0C              1946 	add	a,#_nsec
   063E F5*00              1947 	mov	_main_sloc0_1_0,a
                           1948 ;	Peephole 236.g	used r6 instead of ar6
   0640 EE                 1949 	mov	a,r6
   0641 34s00              1950 	addc	a,#(_nsec >> 8)
   0643 F5*01              1951 	mov	(_main_sloc0_1_0 + 1),a
   0645                    1952 00177$:
                           1953 ;	main.c:150: gets(c);
                           1954 ;	genIpush
   0645 C0 02              1955 	push	ar2
                           1956 ;	genCall
                           1957 ;	Peephole 182.a	used 16 bit load of DPTR
   0647 90s00r1A           1958 	mov	dptr,#_main_c_1_1
   064A 75 F0 00           1959 	mov	b,#0x00
   064D C0 02              1960 	push	ar2
   064F C0 03              1961 	push	ar3
   0651 C0 04              1962 	push	ar4
   0653 C0 05              1963 	push	ar5
   0655 C0 06              1964 	push	ar6
   0657 12s00r00           1965 	lcall	_gets
   065A D0 06              1966 	pop	ar6
   065C D0 05              1967 	pop	ar5
   065E D0 04              1968 	pop	ar4
   0660 D0 03              1969 	pop	ar3
   0662 D0 02              1970 	pop	ar2
                           1971 ;	main.c:151: nsec[num]=atoi(c);
                           1972 ;	genPlus
                           1973 ;	Peephole 236.g	used r5 instead of ar5
   0664 ED                 1974 	mov	a,r5
   0665 24r0C              1975 	add	a,#_nsec
   0667 F9                 1976 	mov	r1,a
                           1977 ;	Peephole 236.g	used r6 instead of ar6
   0668 EE                 1978 	mov	a,r6
   0669 34s00              1979 	addc	a,#(_nsec >> 8)
   066B FA                 1980 	mov	r2,a
                           1981 ;	genCall
                           1982 ;	Peephole 182.a	used 16 bit load of DPTR
   066C 90s00r1A           1983 	mov	dptr,#_main_c_1_1
   066F 75 F0 00           1984 	mov	b,#0x00
   0672 C0 02              1985 	push	ar2
   0674 C0 03              1986 	push	ar3
   0676 C0 04              1987 	push	ar4
   0678 C0 05              1988 	push	ar5
   067A C0 06              1989 	push	ar6
   067C C0 01              1990 	push	ar1
   067E 12s00r00           1991 	lcall	_atoi
   0681 AF 82              1992 	mov	r7,dpl
   0683 A8 83              1993 	mov	r0,dph
   0685 D0 01              1994 	pop	ar1
   0687 D0 06              1995 	pop	ar6
   0689 D0 05              1996 	pop	ar5
   068B D0 04              1997 	pop	ar4
   068D D0 03              1998 	pop	ar3
   068F D0 02              1999 	pop	ar2
                           2000 ;	genPointerSet
                           2001 ;     genFarPointerSet
   0691 89 82              2002 	mov	dpl,r1
   0693 8A 83              2003 	mov	dph,r2
   0695 EF                 2004 	mov	a,r7
   0696 F0                 2005 	movx	@dptr,a
   0697 A3                 2006 	inc	dptr
   0698 E8                 2007 	mov	a,r0
   0699 F0                 2008 	movx	@dptr,a
                           2009 ;	main.c:152: if(nsec[num]>59){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 59");}
                           2010 ;	genPointerGet
                           2011 ;	genFarPointerGet
   069A 85*00 82           2012 	mov	dpl,_main_sloc0_1_0
   069D 85*01 83           2013 	mov	dph,(_main_sloc0_1_0 + 1)
   06A0 E0                 2014 	movx	a,@dptr
   06A1 FA                 2015 	mov	r2,a
   06A2 A3                 2016 	inc	dptr
   06A3 E0                 2017 	movx	a,@dptr
   06A4 FF                 2018 	mov	r7,a
                           2019 ;	genCmpGt
                           2020 ;	genCmp
   06A5 C3                 2021 	clr	c
   06A6 74 3B              2022 	mov	a,#0x3B
   06A8 9A                 2023 	subb	a,r2
                           2024 ;	Peephole 181	changed mov to clr
   06A9 E4                 2025 	clr	a
   06AA 9F                 2026 	subb	a,r7
   06AB E4                 2027 	clr	a
   06AC 33                 2028 	rlc	a
                           2029 ;	genIpop
   06AD D0 02              2030 	pop	ar2
                           2031 ;	genIfx
                           2032 ;	genIfxJump
                           2033 ;	Peephole 108.c	removed ljmp by inverse jump logic
   06AF 60 23              2034 	jz	00178$
                           2035 ;	Peephole 300	removed redundant label 00476$
                           2036 ;	genIpush
   06B1 C0 02              2037 	push	ar2
   06B3 C0 03              2038 	push	ar3
   06B5 C0 04              2039 	push	ar4
   06B7 C0 05              2040 	push	ar5
   06B9 C0 06              2041 	push	ar6
   06BB 74rD0              2042 	mov	a,#__str_29
   06BD C0 E0              2043 	push	acc
   06BF 74s05              2044 	mov	a,#(__str_29 >> 8)
   06C1 C0 E0              2045 	push	acc
                           2046 ;	genCall
   06C3 12s00r00           2047 	lcall	_printf_tiny
   06C6 15 81              2048 	dec	sp
   06C8 15 81              2049 	dec	sp
   06CA D0 06              2050 	pop	ar6
   06CC D0 05              2051 	pop	ar5
   06CE D0 04              2052 	pop	ar4
   06D0 D0 03              2053 	pop	ar3
   06D2 D0 02              2054 	pop	ar2
   06D4                    2055 00178$:
                           2056 ;	main.c:153: }while(nsec[num]>59);
                           2057 ;	genPointerGet
                           2058 ;	genFarPointerGet
   06D4 85*02 82           2059 	mov	dpl,_main_sloc1_1_0
   06D7 85*03 83           2060 	mov	dph,(_main_sloc1_1_0 + 1)
   06DA E0                 2061 	movx	a,@dptr
   06DB FF                 2062 	mov	r7,a
   06DC A3                 2063 	inc	dptr
   06DD E0                 2064 	movx	a,@dptr
   06DE F8                 2065 	mov	r0,a
                           2066 ;	genCmpGt
                           2067 ;	genCmp
   06DF C3                 2068 	clr	c
   06E0 74 3B              2069 	mov	a,#0x3B
   06E2 9F                 2070 	subb	a,r7
                           2071 ;	Peephole 181	changed mov to clr
   06E3 E4                 2072 	clr	a
   06E4 98                 2073 	subb	a,r0
                           2074 ;	genIfxJump
   06E5 50 03              2075 	jnc	00477$
   06E7 02s06r45           2076 	ljmp	00177$
   06EA                    2077 00477$:
                           2078 ;	main.c:156: printf_tiny("\n\n\rEnter milisec for timer %d between 0 to 9: \t",num);
                           2079 ;	genIpush
   06EA C0 02              2080 	push	ar2
   06EC C0 03              2081 	push	ar3
   06EE C0 04              2082 	push	ar4
   06F0 C0 05              2083 	push	ar5
   06F2 C0 06              2084 	push	ar6
   06F4 C0 03              2085 	push	ar3
   06F6 C0 04              2086 	push	ar4
                           2087 ;	genIpush
   06F8 74r37              2088 	mov	a,#__str_31
   06FA C0 E0              2089 	push	acc
   06FC 74s06              2090 	mov	a,#(__str_31 >> 8)
   06FE C0 E0              2091 	push	acc
                           2092 ;	genCall
   0700 12s00r00           2093 	lcall	_printf_tiny
   0703 E5 81              2094 	mov	a,sp
   0705 24 FC              2095 	add	a,#0xfc
   0707 F5 81              2096 	mov	sp,a
   0709 D0 06              2097 	pop	ar6
   070B D0 05              2098 	pop	ar5
   070D D0 04              2099 	pop	ar4
   070F D0 03              2100 	pop	ar3
   0711 D0 02              2101 	pop	ar2
                           2102 ;	main.c:157: do{
                           2103 ;	genPlus
                           2104 ;	Peephole 236.g	used r5 instead of ar5
   0713 ED                 2105 	mov	a,r5
   0714 24r06              2106 	add	a,#_nms
   0716 F5*00              2107 	mov	_main_sloc0_1_0,a
                           2108 ;	Peephole 236.g	used r6 instead of ar6
   0718 EE                 2109 	mov	a,r6
   0719 34s00              2110 	addc	a,#(_nms >> 8)
   071B F5*01              2111 	mov	(_main_sloc0_1_0 + 1),a
                           2112 ;	genPlus
                           2113 ;	Peephole 236.g	used r5 instead of ar5
   071D ED                 2114 	mov	a,r5
   071E 24r06              2115 	add	a,#_nms
   0720 F5*02              2116 	mov	_main_sloc1_1_0,a
                           2117 ;	Peephole 236.g	used r6 instead of ar6
   0722 EE                 2118 	mov	a,r6
   0723 34s00              2119 	addc	a,#(_nms >> 8)
   0725 F5*03              2120 	mov	(_main_sloc1_1_0 + 1),a
   0727                    2121 00182$:
                           2122 ;	main.c:159: gets(d);
                           2123 ;	genIpush
   0727 C0 02              2124 	push	ar2
                           2125 ;	genCall
                           2126 ;	Peephole 182.a	used 16 bit load of DPTR
   0729 90s00r1E           2127 	mov	dptr,#_main_d_1_1
   072C 75 F0 00           2128 	mov	b,#0x00
   072F C0 02              2129 	push	ar2
   0731 C0 03              2130 	push	ar3
   0733 C0 04              2131 	push	ar4
   0735 C0 05              2132 	push	ar5
   0737 C0 06              2133 	push	ar6
   0739 12s00r00           2134 	lcall	_gets
   073C D0 06              2135 	pop	ar6
   073E D0 05              2136 	pop	ar5
   0740 D0 04              2137 	pop	ar4
   0742 D0 03              2138 	pop	ar3
   0744 D0 02              2139 	pop	ar2
                           2140 ;	main.c:160: nms[num]=atoi(d);
                           2141 ;	genPlus
                           2142 ;	Peephole 236.g	used r5 instead of ar5
   0746 ED                 2143 	mov	a,r5
   0747 24r06              2144 	add	a,#_nms
   0749 F9                 2145 	mov	r1,a
                           2146 ;	Peephole 236.g	used r6 instead of ar6
   074A EE                 2147 	mov	a,r6
   074B 34s00              2148 	addc	a,#(_nms >> 8)
   074D FA                 2149 	mov	r2,a
                           2150 ;	genCall
                           2151 ;	Peephole 182.a	used 16 bit load of DPTR
   074E 90s00r1E           2152 	mov	dptr,#_main_d_1_1
   0751 75 F0 00           2153 	mov	b,#0x00
   0754 C0 02              2154 	push	ar2
   0756 C0 03              2155 	push	ar3
   0758 C0 04              2156 	push	ar4
   075A C0 05              2157 	push	ar5
   075C C0 06              2158 	push	ar6
   075E C0 01              2159 	push	ar1
   0760 12s00r00           2160 	lcall	_atoi
   0763 AF 82              2161 	mov	r7,dpl
   0765 A8 83              2162 	mov	r0,dph
   0767 D0 01              2163 	pop	ar1
   0769 D0 06              2164 	pop	ar6
   076B D0 05              2165 	pop	ar5
   076D D0 04              2166 	pop	ar4
   076F D0 03              2167 	pop	ar3
   0771 D0 02              2168 	pop	ar2
                           2169 ;	genPointerSet
                           2170 ;     genFarPointerSet
   0773 89 82              2171 	mov	dpl,r1
   0775 8A 83              2172 	mov	dph,r2
   0777 EF                 2173 	mov	a,r7
   0778 F0                 2174 	movx	@dptr,a
   0779 A3                 2175 	inc	dptr
   077A E8                 2176 	mov	a,r0
   077B F0                 2177 	movx	@dptr,a
                           2178 ;	main.c:161: if(nms[num]>9 ){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 9");}
                           2179 ;	genPointerGet
                           2180 ;	genFarPointerGet
   077C 85*02 82           2181 	mov	dpl,_main_sloc1_1_0
   077F 85*03 83           2182 	mov	dph,(_main_sloc1_1_0 + 1)
   0782 E0                 2183 	movx	a,@dptr
   0783 FA                 2184 	mov	r2,a
   0784 A3                 2185 	inc	dptr
   0785 E0                 2186 	movx	a,@dptr
   0786 FF                 2187 	mov	r7,a
                           2188 ;	genCmpGt
                           2189 ;	genCmp
   0787 C3                 2190 	clr	c
   0788 74 09              2191 	mov	a,#0x09
   078A 9A                 2192 	subb	a,r2
                           2193 ;	Peephole 181	changed mov to clr
   078B E4                 2194 	clr	a
   078C 9F                 2195 	subb	a,r7
   078D E4                 2196 	clr	a
   078E 33                 2197 	rlc	a
                           2198 ;	genIpop
   078F D0 02              2199 	pop	ar2
                           2200 ;	genIfx
                           2201 ;	genIfxJump
                           2202 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0791 60 23              2203 	jz	00183$
                           2204 ;	Peephole 300	removed redundant label 00478$
                           2205 ;	genIpush
   0793 C0 02              2206 	push	ar2
   0795 C0 03              2207 	push	ar3
   0797 C0 04              2208 	push	ar4
   0799 C0 05              2209 	push	ar5
   079B C0 06              2210 	push	ar6
   079D 74r67              2211 	mov	a,#__str_32
   079F C0 E0              2212 	push	acc
   07A1 74s06              2213 	mov	a,#(__str_32 >> 8)
   07A3 C0 E0              2214 	push	acc
                           2215 ;	genCall
   07A5 12s00r00           2216 	lcall	_printf_tiny
   07A8 15 81              2217 	dec	sp
   07AA 15 81              2218 	dec	sp
   07AC D0 06              2219 	pop	ar6
   07AE D0 05              2220 	pop	ar5
   07B0 D0 04              2221 	pop	ar4
   07B2 D0 03              2222 	pop	ar3
   07B4 D0 02              2223 	pop	ar2
   07B6                    2224 00183$:
                           2225 ;	main.c:162: }while(nms[num]>9);
                           2226 ;	genPointerGet
                           2227 ;	genFarPointerGet
   07B6 85*00 82           2228 	mov	dpl,_main_sloc0_1_0
   07B9 85*01 83           2229 	mov	dph,(_main_sloc0_1_0 + 1)
   07BC E0                 2230 	movx	a,@dptr
   07BD FF                 2231 	mov	r7,a
   07BE A3                 2232 	inc	dptr
   07BF E0                 2233 	movx	a,@dptr
   07C0 F8                 2234 	mov	r0,a
                           2235 ;	genCmpGt
                           2236 ;	genCmp
   07C1 C3                 2237 	clr	c
   07C2 74 09              2238 	mov	a,#0x09
   07C4 9F                 2239 	subb	a,r7
                           2240 ;	Peephole 181	changed mov to clr
   07C5 E4                 2241 	clr	a
   07C6 98                 2242 	subb	a,r0
                           2243 ;	genIfxJump
   07C7 50 03              2244 	jnc	00479$
   07C9 02s07r27           2245 	ljmp	00182$
   07CC                    2246 00479$:
                           2247 ;	main.c:165: countdown_alarm(nms[num],nsec[num],nmi[num],2,num);
                           2248 ;	genIpush
   07CC C0 02              2249 	push	ar2
                           2250 ;	genPlus
                           2251 ;	Peephole 236.g	used r5 instead of ar5
   07CE ED                 2252 	mov	a,r5
   07CF 24r0C              2253 	add	a,#_nsec
   07D1 F5 82              2254 	mov	dpl,a
                           2255 ;	Peephole 236.g	used r6 instead of ar6
   07D3 EE                 2256 	mov	a,r6
   07D4 34s00              2257 	addc	a,#(_nsec >> 8)
   07D6 F5 83              2258 	mov	dph,a
                           2259 ;	genPointerGet
                           2260 ;	genFarPointerGet
   07D8 E0                 2261 	movx	a,@dptr
   07D9 F9                 2262 	mov	r1,a
   07DA A3                 2263 	inc	dptr
   07DB E0                 2264 	movx	a,@dptr
   07DC FA                 2265 	mov	r2,a
                           2266 ;	genPlus
                           2267 ;	Peephole 236.g	used r5 instead of ar5
   07DD ED                 2268 	mov	a,r5
   07DE 24r12              2269 	add	a,#_nmi
   07E0 F5 82              2270 	mov	dpl,a
                           2271 ;	Peephole 236.g	used r6 instead of ar6
   07E2 EE                 2272 	mov	a,r6
   07E3 34s00              2273 	addc	a,#(_nmi >> 8)
   07E5 F5 83              2274 	mov	dph,a
                           2275 ;	genPointerGet
                           2276 ;	genFarPointerGet
   07E7 E0                 2277 	movx	a,@dptr
   07E8 FD                 2278 	mov	r5,a
   07E9 A3                 2279 	inc	dptr
   07EA E0                 2280 	movx	a,@dptr
   07EB FE                 2281 	mov	r6,a
                           2282 ;	genAssign
   07EC 90s00r00           2283 	mov	dptr,#_countdown_alarm_PARM_2
   07EF E9                 2284 	mov	a,r1
   07F0 F0                 2285 	movx	@dptr,a
   07F1 A3                 2286 	inc	dptr
   07F2 EA                 2287 	mov	a,r2
   07F3 F0                 2288 	movx	@dptr,a
                           2289 ;	genAssign
   07F4 90s00r00           2290 	mov	dptr,#_countdown_alarm_PARM_3
   07F7 ED                 2291 	mov	a,r5
   07F8 F0                 2292 	movx	@dptr,a
   07F9 A3                 2293 	inc	dptr
   07FA EE                 2294 	mov	a,r6
   07FB F0                 2295 	movx	@dptr,a
                           2296 ;	genAssign
   07FC 90s00r00           2297 	mov	dptr,#_countdown_alarm_PARM_4
   07FF 74 02              2298 	mov	a,#0x02
   0801 F0                 2299 	movx	@dptr,a
                           2300 ;	genAssign
   0802 90s00r00           2301 	mov	dptr,#_countdown_alarm_PARM_5
   0805 EB                 2302 	mov	a,r3
   0806 F0                 2303 	movx	@dptr,a
   0807 A3                 2304 	inc	dptr
   0808 EC                 2305 	mov	a,r4
   0809 F0                 2306 	movx	@dptr,a
                           2307 ;	genCall
   080A 8F 82              2308 	mov	dpl,r7
   080C 88 83              2309 	mov	dph,r0
   080E C0 02              2310 	push	ar2
   0810 12s00r00           2311 	lcall	_countdown_alarm
   0813 D0 02              2312 	pop	ar2
                           2313 ;	genIpop
   0815 D0 02              2314 	pop	ar2
   0817 02s0Dr34           2315 	ljmp	00235$
   081A                    2316 00224$:
                           2317 ;	main.c:168: else if(store=='5')
                           2318 ;	genCmpEq
                           2319 ;	gencjneshort
   081A BA 35 02           2320 	cjne	r2,#0x35,00480$
   081D 80 03              2321 	sjmp	00481$
   081F                    2322 00480$:
   081F 02s08rC8           2323 	ljmp	00221$
   0822                    2324 00481$:
                           2325 ;	main.c:170: printf_tiny("\n\n\r\tWhich timer to enable between 0 to 2:\t");
                           2326 ;	genIpush
   0822 C0 02              2327 	push	ar2
   0824 74r9C              2328 	mov	a,#__str_33
   0826 C0 E0              2329 	push	acc
   0828 74s06              2330 	mov	a,#(__str_33 >> 8)
   082A C0 E0              2331 	push	acc
                           2332 ;	genCall
   082C 12s00r00           2333 	lcall	_printf_tiny
   082F 15 81              2334 	dec	sp
   0831 15 81              2335 	dec	sp
   0833 D0 02              2336 	pop	ar2
                           2337 ;	main.c:172: gets(c);
                           2338 ;	genCall
                           2339 ;	Peephole 182.a	used 16 bit load of DPTR
   0835 90s00r1A           2340 	mov	dptr,#_main_c_1_1
   0838 75 F0 00           2341 	mov	b,#0x00
   083B C0 02              2342 	push	ar2
   083D 12s00r00           2343 	lcall	_gets
   0840 D0 02              2344 	pop	ar2
                           2345 ;	main.c:173: num=atoi(c);
                           2346 ;	genCall
                           2347 ;	Peephole 182.a	used 16 bit load of DPTR
   0842 90s00r1A           2348 	mov	dptr,#_main_c_1_1
   0845 75 F0 00           2349 	mov	b,#0x00
   0848 C0 02              2350 	push	ar2
   084A 12s00r00           2351 	lcall	_atoi
   084D AB 82              2352 	mov	r3,dpl
   084F AC 83              2353 	mov	r4,dph
   0851 D0 02              2354 	pop	ar2
                           2355 ;	main.c:174: EA=0;
                           2356 ;	genAssign
   0853 C2 AF              2357 	clr	_EA
                           2358 ;	main.c:175: lcdgotoxy(num+1,1);
                           2359 ;	genCast
   0855 8B 05              2360 	mov	ar5,r3
                           2361 ;	genPlus
                           2362 ;     genPlusIncr
   0857 0D                 2363 	inc	r5
                           2364 ;	genAssign
   0858 90s00r00           2365 	mov	dptr,#_lcdgotoxy_PARM_2
   085B 74 01              2366 	mov	a,#0x01
   085D F0                 2367 	movx	@dptr,a
                           2368 ;	genCall
   085E 8D 82              2369 	mov	dpl,r5
   0860 C0 02              2370 	push	ar2
   0862 C0 03              2371 	push	ar3
   0864 C0 04              2372 	push	ar4
   0866 12s00r00           2373 	lcall	_lcdgotoxy
   0869 D0 04              2374 	pop	ar4
   086B D0 03              2375 	pop	ar3
   086D D0 02              2376 	pop	ar2
                           2377 ;	main.c:176: lcdputstr("Timer");
                           2378 ;	genCall
                           2379 ;	Peephole 182.a	used 16 bit load of DPTR
   086F 90s00r08           2380 	mov	dptr,#__str_2
   0872 75 F0 80           2381 	mov	b,#0x80
   0875 C0 02              2382 	push	ar2
   0877 C0 03              2383 	push	ar3
   0879 C0 04              2384 	push	ar4
   087B 12s00r00           2385 	lcall	_lcdputstr
   087E D0 04              2386 	pop	ar4
   0880 D0 03              2387 	pop	ar3
   0882 D0 02              2388 	pop	ar2
                           2389 ;	main.c:177: lcdputch(name[num]);
                           2390 ;	genPlus
                           2391 ;	Peephole 236.g	used r3 instead of ar3
   0884 EB                 2392 	mov	a,r3
   0885 24r23              2393 	add	a,#_main_name_1_1
   0887 F5 82              2394 	mov	dpl,a
                           2395 ;	Peephole 236.g	used r4 instead of ar4
   0889 EC                 2396 	mov	a,r4
   088A 34s00              2397 	addc	a,#(_main_name_1_1 >> 8)
   088C F5 83              2398 	mov	dph,a
                           2399 ;	genPointerGet
                           2400 ;	genFarPointerGet
   088E E0                 2401 	movx	a,@dptr
                           2402 ;	genCall
   088F FD                 2403 	mov	r5,a
                           2404 ;	Peephole 244.c	loading dpl from a instead of r5
   0890 F5 82              2405 	mov	dpl,a
   0892 C0 02              2406 	push	ar2
   0894 C0 03              2407 	push	ar3
   0896 C0 04              2408 	push	ar4
   0898 12s00r00           2409 	lcall	_lcdputch
   089B D0 04              2410 	pop	ar4
   089D D0 03              2411 	pop	ar3
   089F D0 02              2412 	pop	ar2
                           2413 ;	main.c:178: lcdputstr("-E");
                           2414 ;	genCall
                           2415 ;	Peephole 182.a	used 16 bit load of DPTR
   08A1 90s06rC7           2416 	mov	dptr,#__str_34
   08A4 75 F0 80           2417 	mov	b,#0x80
   08A7 C0 02              2418 	push	ar2
   08A9 C0 03              2419 	push	ar3
   08AB C0 04              2420 	push	ar4
   08AD 12s00r00           2421 	lcall	_lcdputstr
   08B0 D0 04              2422 	pop	ar4
   08B2 D0 03              2423 	pop	ar3
   08B4 D0 02              2424 	pop	ar2
                           2425 ;	main.c:179: cnt[num]=1;
                           2426 ;	genPlus
                           2427 ;	Peephole 236.g	used r3 instead of ar3
   08B6 EB                 2428 	mov	a,r3
   08B7 24r03              2429 	add	a,#_cnt
   08B9 F5 82              2430 	mov	dpl,a
                           2431 ;	Peephole 236.g	used r4 instead of ar4
   08BB EC                 2432 	mov	a,r4
   08BC 34s00              2433 	addc	a,#(_cnt >> 8)
   08BE F5 83              2434 	mov	dph,a
                           2435 ;	genPointerSet
                           2436 ;     genFarPointerSet
   08C0 74 01              2437 	mov	a,#0x01
   08C2 F0                 2438 	movx	@dptr,a
                           2439 ;	main.c:180: EA=1;
                           2440 ;	genAssign
   08C3 D2 AF              2441 	setb	_EA
   08C5 02s0Dr34           2442 	ljmp	00235$
   08C8                    2443 00221$:
                           2444 ;	main.c:182: else if(store=='6')
                           2445 ;	genCmpEq
                           2446 ;	gencjneshort
   08C8 BA 36 02           2447 	cjne	r2,#0x36,00482$
   08CB 80 03              2448 	sjmp	00483$
   08CD                    2449 00482$:
   08CD 02s09rCE           2450 	ljmp	00218$
   08D0                    2451 00483$:
                           2452 ;	main.c:184: printf_tiny("\n\n\rWhich timer to Disable between 0 to 2:\t");
                           2453 ;	genIpush
   08D0 C0 02              2454 	push	ar2
   08D2 74rCA              2455 	mov	a,#__str_35
   08D4 C0 E0              2456 	push	acc
   08D6 74s06              2457 	mov	a,#(__str_35 >> 8)
   08D8 C0 E0              2458 	push	acc
                           2459 ;	genCall
   08DA 12s00r00           2460 	lcall	_printf_tiny
   08DD 15 81              2461 	dec	sp
   08DF 15 81              2462 	dec	sp
   08E1 D0 02              2463 	pop	ar2
                           2464 ;	main.c:186: gets(c);
                           2465 ;	genCall
                           2466 ;	Peephole 182.a	used 16 bit load of DPTR
   08E3 90s00r1A           2467 	mov	dptr,#_main_c_1_1
   08E6 75 F0 00           2468 	mov	b,#0x00
   08E9 C0 02              2469 	push	ar2
   08EB 12s00r00           2470 	lcall	_gets
   08EE D0 02              2471 	pop	ar2
                           2472 ;	main.c:187: num=atoi(c);
                           2473 ;	genCall
                           2474 ;	Peephole 182.a	used 16 bit load of DPTR
   08F0 90s00r1A           2475 	mov	dptr,#_main_c_1_1
   08F3 75 F0 00           2476 	mov	b,#0x00
   08F6 C0 02              2477 	push	ar2
   08F8 12s00r00           2478 	lcall	_atoi
   08FB AB 82              2479 	mov	r3,dpl
   08FD AC 83              2480 	mov	r4,dph
   08FF D0 02              2481 	pop	ar2
                           2482 ;	main.c:188: EA=0;
                           2483 ;	genAssign
   0901 C2 AF              2484 	clr	_EA
                           2485 ;	main.c:189: lcdgotoxy(num+1,1);
                           2486 ;	genCast
   0903 8B 05              2487 	mov	ar5,r3
                           2488 ;	genPlus
                           2489 ;     genPlusIncr
   0905 0D                 2490 	inc	r5
                           2491 ;	genAssign
   0906 90s00r00           2492 	mov	dptr,#_lcdgotoxy_PARM_2
   0909 74 01              2493 	mov	a,#0x01
   090B F0                 2494 	movx	@dptr,a
                           2495 ;	genCall
   090C 8D 82              2496 	mov	dpl,r5
   090E C0 02              2497 	push	ar2
   0910 C0 03              2498 	push	ar3
   0912 C0 04              2499 	push	ar4
   0914 C0 05              2500 	push	ar5
   0916 12s00r00           2501 	lcall	_lcdgotoxy
   0919 D0 05              2502 	pop	ar5
   091B D0 04              2503 	pop	ar4
   091D D0 03              2504 	pop	ar3
   091F D0 02              2505 	pop	ar2
                           2506 ;	main.c:190: lcdputstr("Disabled");
                           2507 ;	genCall
                           2508 ;	Peephole 182.a	used 16 bit load of DPTR
   0921 90s06rF5           2509 	mov	dptr,#__str_36
   0924 75 F0 80           2510 	mov	b,#0x80
   0927 C0 02              2511 	push	ar2
   0929 C0 03              2512 	push	ar3
   092B C0 04              2513 	push	ar4
   092D C0 05              2514 	push	ar5
   092F 12s00r00           2515 	lcall	_lcdputstr
   0932 D0 05              2516 	pop	ar5
   0934 D0 04              2517 	pop	ar4
   0936 D0 03              2518 	pop	ar3
   0938 D0 02              2519 	pop	ar2
                           2520 ;	main.c:191: printf_tiny("\n\n\t\t Disabling...\n\r");
                           2521 ;	genIpush
   093A C0 02              2522 	push	ar2
   093C C0 03              2523 	push	ar3
   093E C0 04              2524 	push	ar4
   0940 C0 05              2525 	push	ar5
   0942 74rFE              2526 	mov	a,#__str_37
   0944 C0 E0              2527 	push	acc
   0946 74s06              2528 	mov	a,#(__str_37 >> 8)
   0948 C0 E0              2529 	push	acc
                           2530 ;	genCall
   094A 12s00r00           2531 	lcall	_printf_tiny
   094D 15 81              2532 	dec	sp
   094F 15 81              2533 	dec	sp
   0951 D0 05              2534 	pop	ar5
   0953 D0 04              2535 	pop	ar4
   0955 D0 03              2536 	pop	ar3
   0957 D0 02              2537 	pop	ar2
                           2538 ;	main.c:192: delay_ms(500);
                           2539 ;	genCall
                           2540 ;	Peephole 182.b	used 16 bit load of dptr
   0959 90 01 F4           2541 	mov	dptr,#0x01F4
   095C C0 02              2542 	push	ar2
   095E C0 03              2543 	push	ar3
   0960 C0 04              2544 	push	ar4
   0962 C0 05              2545 	push	ar5
   0964 12s00r00           2546 	lcall	_delay_ms
   0967 D0 05              2547 	pop	ar5
   0969 D0 04              2548 	pop	ar4
   096B D0 03              2549 	pop	ar3
   096D D0 02              2550 	pop	ar2
                           2551 ;	main.c:193: cnt[num]=0;
                           2552 ;	genPlus
                           2553 ;	Peephole 236.g	used r3 instead of ar3
   096F EB                 2554 	mov	a,r3
   0970 24r03              2555 	add	a,#_cnt
   0972 F5 82              2556 	mov	dpl,a
                           2557 ;	Peephole 236.g	used r4 instead of ar4
   0974 EC                 2558 	mov	a,r4
   0975 34s00              2559 	addc	a,#(_cnt >> 8)
   0977 F5 83              2560 	mov	dph,a
                           2561 ;	genPointerSet
                           2562 ;     genFarPointerSet
                           2563 ;	Peephole 181	changed mov to clr
   0979 E4                 2564 	clr	a
   097A F0                 2565 	movx	@dptr,a
                           2566 ;	main.c:195: lcdgotoxy(num+1,1);
                           2567 ;	genAssign
   097B 90s00r00           2568 	mov	dptr,#_lcdgotoxy_PARM_2
   097E 74 01              2569 	mov	a,#0x01
   0980 F0                 2570 	movx	@dptr,a
                           2571 ;	genCall
   0981 8D 82              2572 	mov	dpl,r5
   0983 C0 02              2573 	push	ar2
   0985 C0 03              2574 	push	ar3
   0987 C0 04              2575 	push	ar4
   0989 12s00r00           2576 	lcall	_lcdgotoxy
   098C D0 04              2577 	pop	ar4
   098E D0 03              2578 	pop	ar3
   0990 D0 02              2579 	pop	ar2
                           2580 ;	main.c:196: lcdputstr("Timer");
                           2581 ;	genCall
                           2582 ;	Peephole 182.a	used 16 bit load of DPTR
   0992 90s00r08           2583 	mov	dptr,#__str_2
   0995 75 F0 80           2584 	mov	b,#0x80
   0998 C0 02              2585 	push	ar2
   099A C0 03              2586 	push	ar3
   099C C0 04              2587 	push	ar4
   099E 12s00r00           2588 	lcall	_lcdputstr
   09A1 D0 04              2589 	pop	ar4
   09A3 D0 03              2590 	pop	ar3
   09A5 D0 02              2591 	pop	ar2
                           2592 ;	main.c:197: lcdputch(name[num]);
                           2593 ;	genPlus
                           2594 ;	Peephole 236.g	used r3 instead of ar3
   09A7 EB                 2595 	mov	a,r3
   09A8 24r23              2596 	add	a,#_main_name_1_1
   09AA F5 82              2597 	mov	dpl,a
                           2598 ;	Peephole 236.g	used r4 instead of ar4
   09AC EC                 2599 	mov	a,r4
   09AD 34s00              2600 	addc	a,#(_main_name_1_1 >> 8)
   09AF F5 83              2601 	mov	dph,a
                           2602 ;	genPointerGet
                           2603 ;	genFarPointerGet
   09B1 E0                 2604 	movx	a,@dptr
                           2605 ;	genCall
   09B2 FB                 2606 	mov	r3,a
                           2607 ;	Peephole 244.c	loading dpl from a instead of r3
   09B3 F5 82              2608 	mov	dpl,a
   09B5 C0 02              2609 	push	ar2
   09B7 12s00r00           2610 	lcall	_lcdputch
   09BA D0 02              2611 	pop	ar2
                           2612 ;	main.c:198: lcdputstr("-D");
                           2613 ;	genCall
                           2614 ;	Peephole 182.a	used 16 bit load of DPTR
   09BC 90s00r0E           2615 	mov	dptr,#__str_3
   09BF 75 F0 80           2616 	mov	b,#0x80
   09C2 C0 02              2617 	push	ar2
   09C4 12s00r00           2618 	lcall	_lcdputstr
   09C7 D0 02              2619 	pop	ar2
                           2620 ;	main.c:199: EA=1;
                           2621 ;	genAssign
   09C9 D2 AF              2622 	setb	_EA
   09CB 02s0Dr34           2623 	ljmp	00235$
   09CE                    2624 00218$:
                           2625 ;	main.c:202: else if(store=='7')
                           2626 ;	genCmpEq
                           2627 ;	gencjneshort
   09CE BA 37 02           2628 	cjne	r2,#0x37,00484$
   09D1 80 03              2629 	sjmp	00485$
   09D3                    2630 00484$:
   09D3 02s0Cr8B           2631 	ljmp	00215$
   09D6                    2632 00485$:
                           2633 ;	main.c:204: printf_tiny("\n\n\r\t Select Character code between 0 to 7: \t");
                           2634 ;	genIpush
   09D6 C0 02              2635 	push	ar2
   09D8 74r12              2636 	mov	a,#__str_38
   09DA C0 E0              2637 	push	acc
   09DC 74s07              2638 	mov	a,#(__str_38 >> 8)
   09DE C0 E0              2639 	push	acc
                           2640 ;	genCall
   09E0 12s00r00           2641 	lcall	_printf_tiny
   09E3 15 81              2642 	dec	sp
   09E5 15 81              2643 	dec	sp
   09E7 D0 02              2644 	pop	ar2
                           2645 ;	main.c:205: do
   09E9                    2646 00187$:
                           2647 ;	main.c:207: gets(c);
                           2648 ;	genCall
                           2649 ;	Peephole 182.a	used 16 bit load of DPTR
   09E9 90s00r1A           2650 	mov	dptr,#_main_c_1_1
   09EC 75 F0 00           2651 	mov	b,#0x00
   09EF C0 02              2652 	push	ar2
   09F1 12s00r00           2653 	lcall	_gets
   09F4 D0 02              2654 	pop	ar2
                           2655 ;	main.c:208: num=atoi(c);
                           2656 ;	genCall
                           2657 ;	Peephole 182.a	used 16 bit load of DPTR
   09F6 90s00r1A           2658 	mov	dptr,#_main_c_1_1
   09F9 75 F0 00           2659 	mov	b,#0x00
   09FC C0 02              2660 	push	ar2
   09FE 12s00r00           2661 	lcall	_atoi
   0A01 AB 82              2662 	mov	r3,dpl
   0A03 AC 83              2663 	mov	r4,dph
   0A05 D0 02              2664 	pop	ar2
                           2665 ;	main.c:209: if(num>7){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 7");}
                           2666 ;	genCmpGt
                           2667 ;	genCmp
   0A07 C3                 2668 	clr	c
   0A08 74 07              2669 	mov	a,#0x07
   0A0A 9B                 2670 	subb	a,r3
                           2671 ;	Peephole 159	avoided xrl during execution
   0A0B 74 80              2672 	mov	a,#(0x00 ^ 0x80)
   0A0D 8C F0              2673 	mov	b,r4
   0A0F 63 F0 80           2674 	xrl	b,#0x80
   0A12 95 F0              2675 	subb	a,b
   0A14 E4                 2676 	clr	a
   0A15 33                 2677 	rlc	a
                           2678 ;	genIfx
   0A16 FD                 2679 	mov	r5,a
                           2680 ;	Peephole 105	removed redundant mov
                           2681 ;	genIfxJump
                           2682 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0A17 60 1F              2683 	jz	00188$
                           2684 ;	Peephole 300	removed redundant label 00486$
                           2685 ;	genIpush
   0A19 C0 02              2686 	push	ar2
   0A1B C0 03              2687 	push	ar3
   0A1D C0 04              2688 	push	ar4
   0A1F C0 05              2689 	push	ar5
   0A21 74r3F              2690 	mov	a,#__str_39
   0A23 C0 E0              2691 	push	acc
   0A25 74s07              2692 	mov	a,#(__str_39 >> 8)
   0A27 C0 E0              2693 	push	acc
                           2694 ;	genCall
   0A29 12s00r00           2695 	lcall	_printf_tiny
   0A2C 15 81              2696 	dec	sp
   0A2E 15 81              2697 	dec	sp
   0A30 D0 05              2698 	pop	ar5
   0A32 D0 04              2699 	pop	ar4
   0A34 D0 03              2700 	pop	ar3
   0A36 D0 02              2701 	pop	ar2
   0A38                    2702 00188$:
                           2703 ;	main.c:210: }while(num>7);
                           2704 ;	genIfx
   0A38 ED                 2705 	mov	a,r5
                           2706 ;	genIfxJump
                           2707 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0A39 70 AE              2708 	jnz	00187$
                           2709 ;	Peephole 300	removed redundant label 00487$
                           2710 ;	main.c:211: ccode=num;
                           2711 ;	genCast
                           2712 ;	main.c:213: printf_tiny("\n\n\r\t Enter pixel map in HEX in HH format from 00 to 1F: \t");
                           2713 ;	genIpush
   0A3B C0 02              2714 	push	ar2
   0A3D C0 03              2715 	push	ar3
   0A3F 74r74              2716 	mov	a,#__str_40
   0A41 C0 E0              2717 	push	acc
   0A43 74s07              2718 	mov	a,#(__str_40 >> 8)
   0A45 C0 E0              2719 	push	acc
                           2720 ;	genCall
   0A47 12s00r00           2721 	lcall	_printf_tiny
   0A4A 15 81              2722 	dec	sp
   0A4C 15 81              2723 	dec	sp
   0A4E D0 03              2724 	pop	ar3
   0A50 D0 02              2725 	pop	ar2
                           2726 ;	main.c:214: for(i=0;i<8;i++)
                           2727 ;	genAssign
   0A52 7C 00              2728 	mov	r4,#0x00
   0A54 7D 00              2729 	mov	r5,#0x00
   0A56                    2730 00306$:
                           2731 ;	genCmpLt
                           2732 ;	genCmp
   0A56 C3                 2733 	clr	c
   0A57 EC                 2734 	mov	a,r4
   0A58 94 08              2735 	subb	a,#0x08
   0A5A ED                 2736 	mov	a,r5
   0A5B 64 80              2737 	xrl	a,#0x80
   0A5D 94 80              2738 	subb	a,#0x80
                           2739 ;	genIfxJump
   0A5F 40 03              2740 	jc	00488$
   0A61 02s0Cr71           2741 	ljmp	00309$
   0A64                    2742 00488$:
                           2743 ;	main.c:216: printf_tiny("\n\r\t Data in row number %d: \t",i);
                           2744 ;	genIpush
   0A64 C0 02              2745 	push	ar2
   0A66 C0 03              2746 	push	ar3
   0A68 C0 04              2747 	push	ar4
   0A6A C0 05              2748 	push	ar5
   0A6C C0 04              2749 	push	ar4
   0A6E C0 05              2750 	push	ar5
                           2751 ;	genIpush
   0A70 74rAE              2752 	mov	a,#__str_41
   0A72 C0 E0              2753 	push	acc
   0A74 74s07              2754 	mov	a,#(__str_41 >> 8)
   0A76 C0 E0              2755 	push	acc
                           2756 ;	genCall
   0A78 12s00r00           2757 	lcall	_printf_tiny
   0A7B E5 81              2758 	mov	a,sp
   0A7D 24 FC              2759 	add	a,#0xfc
   0A7F F5 81              2760 	mov	sp,a
   0A81 D0 05              2761 	pop	ar5
   0A83 D0 04              2762 	pop	ar4
   0A85 D0 03              2763 	pop	ar3
   0A87 D0 02              2764 	pop	ar2
                           2765 ;	main.c:217: do
   0A89                    2766 00192$:
                           2767 ;	main.c:219: gets(c);
                           2768 ;	genCall
                           2769 ;	Peephole 182.a	used 16 bit load of DPTR
   0A89 90s00r1A           2770 	mov	dptr,#_main_c_1_1
   0A8C 75 F0 00           2771 	mov	b,#0x00
   0A8F C0 02              2772 	push	ar2
   0A91 C0 03              2773 	push	ar3
   0A93 C0 04              2774 	push	ar4
   0A95 C0 05              2775 	push	ar5
   0A97 12s00r00           2776 	lcall	_gets
   0A9A D0 05              2777 	pop	ar5
   0A9C D0 04              2778 	pop	ar4
   0A9E D0 03              2779 	pop	ar3
   0AA0 D0 02              2780 	pop	ar2
                           2781 ;	main.c:220: num=atoh_data(c);
                           2782 ;	genCall
                           2783 ;	Peephole 182.a	used 16 bit load of DPTR
   0AA2 90s00r1A           2784 	mov	dptr,#_main_c_1_1
   0AA5 75 F0 00           2785 	mov	b,#0x00
   0AA8 C0 02              2786 	push	ar2
   0AAA C0 03              2787 	push	ar3
   0AAC C0 04              2788 	push	ar4
   0AAE C0 05              2789 	push	ar5
   0AB0 12s00r00           2790 	lcall	_atoh_data
   0AB3 AE 82              2791 	mov	r6,dpl
   0AB5 AF 83              2792 	mov	r7,dph
   0AB7 D0 05              2793 	pop	ar5
   0AB9 D0 04              2794 	pop	ar4
   0ABB D0 03              2795 	pop	ar3
   0ABD D0 02              2796 	pop	ar2
                           2797 ;	main.c:222: if(num>31){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid HEX number between 00 to 1F in HH format:\t");}
                           2798 ;	genCmpGt
                           2799 ;	genCmp
   0ABF C3                 2800 	clr	c
   0AC0 74 1F              2801 	mov	a,#0x1F
   0AC2 9E                 2802 	subb	a,r6
                           2803 ;	Peephole 159	avoided xrl during execution
   0AC3 74 80              2804 	mov	a,#(0x00 ^ 0x80)
   0AC5 8F F0              2805 	mov	b,r7
   0AC7 63 F0 80           2806 	xrl	b,#0x80
   0ACA 95 F0              2807 	subb	a,b
   0ACC E4                 2808 	clr	a
   0ACD 33                 2809 	rlc	a
                           2810 ;	genIfx
   0ACE F8                 2811 	mov	r0,a
                           2812 ;	Peephole 105	removed redundant mov
                           2813 ;	genIfxJump
                           2814 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0ACF 60 2B              2815 	jz	00193$
                           2816 ;	Peephole 300	removed redundant label 00489$
                           2817 ;	genIpush
   0AD1 C0 02              2818 	push	ar2
   0AD3 C0 03              2819 	push	ar3
   0AD5 C0 04              2820 	push	ar4
   0AD7 C0 05              2821 	push	ar5
   0AD9 C0 06              2822 	push	ar6
   0ADB C0 07              2823 	push	ar7
   0ADD C0 00              2824 	push	ar0
   0ADF 74rCB              2825 	mov	a,#__str_42
   0AE1 C0 E0              2826 	push	acc
   0AE3 74s07              2827 	mov	a,#(__str_42 >> 8)
   0AE5 C0 E0              2828 	push	acc
                           2829 ;	genCall
   0AE7 12s00r00           2830 	lcall	_printf_tiny
   0AEA 15 81              2831 	dec	sp
   0AEC 15 81              2832 	dec	sp
   0AEE D0 00              2833 	pop	ar0
   0AF0 D0 07              2834 	pop	ar7
   0AF2 D0 06              2835 	pop	ar6
   0AF4 D0 05              2836 	pop	ar5
   0AF6 D0 04              2837 	pop	ar4
   0AF8 D0 03              2838 	pop	ar3
   0AFA D0 02              2839 	pop	ar2
   0AFC                    2840 00193$:
                           2841 ;	main.c:223: }while(num>31);
                           2842 ;	genIfx
   0AFC E8                 2843 	mov	a,r0
                           2844 ;	genIfxJump
   0AFD 60 03              2845 	jz	00490$
   0AFF 02s0Ar89           2846 	ljmp	00192$
   0B02                    2847 00490$:
                           2848 ;	main.c:225: row_val[i]=num;
                           2849 ;	genPlus
                           2850 ;	Peephole 236.g	used r4 instead of ar4
   0B02 EC                 2851 	mov	a,r4
   0B03 24r2D              2852 	add	a,#_main_row_val_1_1
   0B05 F5 82              2853 	mov	dpl,a
                           2854 ;	Peephole 236.g	used r5 instead of ar5
   0B07 ED                 2855 	mov	a,r5
   0B08 34s00              2856 	addc	a,#(_main_row_val_1_1 >> 8)
   0B0A F5 83              2857 	mov	dph,a
                           2858 ;	genCast
                           2859 ;	genPointerSet
                           2860 ;     genFarPointerSet
   0B0C EE                 2861 	mov	a,r6
   0B0D F0                 2862 	movx	@dptr,a
                           2863 ;	main.c:226: disp[i]=atob(num);
                           2864 ;	genPlus
                           2865 ;	Peephole 236.g	used r4 instead of ar4
   0B0E EC                 2866 	mov	a,r4
   0B0F 24r35              2867 	add	a,#_main_disp_1_1
   0B11 FF                 2868 	mov	r7,a
                           2869 ;	Peephole 236.g	used r5 instead of ar5
   0B12 ED                 2870 	mov	a,r5
   0B13 34s00              2871 	addc	a,#(_main_disp_1_1 >> 8)
   0B15 F8                 2872 	mov	r0,a
                           2873 ;	genCall
   0B16 8E 82              2874 	mov	dpl,r6
   0B18 C0 02              2875 	push	ar2
   0B1A C0 03              2876 	push	ar3
   0B1C C0 04              2877 	push	ar4
   0B1E C0 05              2878 	push	ar5
   0B20 C0 07              2879 	push	ar7
   0B22 C0 00              2880 	push	ar0
   0B24 12s00r00           2881 	lcall	_atob
   0B27 AE 82              2882 	mov	r6,dpl
   0B29 D0 00              2883 	pop	ar0
   0B2B D0 07              2884 	pop	ar7
   0B2D D0 05              2885 	pop	ar5
   0B2F D0 04              2886 	pop	ar4
   0B31 D0 03              2887 	pop	ar3
   0B33 D0 02              2888 	pop	ar2
                           2889 ;	genPointerSet
                           2890 ;     genFarPointerSet
   0B35 8F 82              2891 	mov	dpl,r7
   0B37 88 83              2892 	mov	dph,r0
   0B39 EE                 2893 	mov	a,r6
   0B3A F0                 2894 	movx	@dptr,a
                           2895 ;	main.c:227: printf_tiny("\n\r\t\t      \t12345");
                           2896 ;	genIpush
   0B3B C0 02              2897 	push	ar2
   0B3D C0 03              2898 	push	ar3
   0B3F C0 04              2899 	push	ar4
   0B41 C0 05              2900 	push	ar5
   0B43 74r15              2901 	mov	a,#__str_43
   0B45 C0 E0              2902 	push	acc
   0B47 74s08              2903 	mov	a,#(__str_43 >> 8)
   0B49 C0 E0              2904 	push	acc
                           2905 ;	genCall
   0B4B 12s00r00           2906 	lcall	_printf_tiny
   0B4E 15 81              2907 	dec	sp
   0B50 15 81              2908 	dec	sp
   0B52 D0 05              2909 	pop	ar5
   0B54 D0 04              2910 	pop	ar4
   0B56 D0 03              2911 	pop	ar3
   0B58 D0 02              2912 	pop	ar2
                           2913 ;	main.c:228: for(j=0;j<=i;j++)
                           2914 ;	genAssign
   0B5A 8C 06              2915 	mov	ar6,r4
   0B5C 8D 07              2916 	mov	ar7,r5
                           2917 ;	genAssign
   0B5E 78 00              2918 	mov	r0,#0x00
   0B60 79 00              2919 	mov	r1,#0x00
   0B62                    2920 00302$:
                           2921 ;	genCmpGt
                           2922 ;	genCmp
   0B62 C3                 2923 	clr	c
   0B63 EE                 2924 	mov	a,r6
   0B64 98                 2925 	subb	a,r0
   0B65 EF                 2926 	mov	a,r7
   0B66 64 80              2927 	xrl	a,#0x80
   0B68 89 F0              2928 	mov	b,r1
   0B6A 63 F0 80           2929 	xrl	b,#0x80
   0B6D 95 F0              2930 	subb	a,b
                           2931 ;	genIfxJump
   0B6F 50 03              2932 	jnc	00491$
   0B71 02s0Cr67           2933 	ljmp	00308$
   0B74                    2934 00491$:
                           2935 ;	main.c:229: {  printf_tiny("\n\r\t\tROW %d:\t",j);
                           2936 ;	genIpush
   0B74 C0 02              2937 	push	ar2
   0B76 C0 03              2938 	push	ar3
   0B78 C0 06              2939 	push	ar6
   0B7A C0 07              2940 	push	ar7
   0B7C C0 00              2941 	push	ar0
   0B7E C0 01              2942 	push	ar1
   0B80 C0 00              2943 	push	ar0
   0B82 C0 01              2944 	push	ar1
                           2945 ;	genIpush
   0B84 74r26              2946 	mov	a,#__str_44
   0B86 C0 E0              2947 	push	acc
   0B88 74s08              2948 	mov	a,#(__str_44 >> 8)
   0B8A C0 E0              2949 	push	acc
                           2950 ;	genCall
   0B8C 12s00r00           2951 	lcall	_printf_tiny
   0B8F E5 81              2952 	mov	a,sp
   0B91 24 FC              2953 	add	a,#0xfc
   0B93 F5 81              2954 	mov	sp,a
   0B95 D0 01              2955 	pop	ar1
   0B97 D0 00              2956 	pop	ar0
   0B99 D0 07              2957 	pop	ar7
   0B9B D0 06              2958 	pop	ar6
   0B9D D0 03              2959 	pop	ar3
   0B9F D0 02              2960 	pop	ar2
                           2961 ;	main.c:230: for(k=3;k<8;k++)
                           2962 ;	genPlus
                           2963 ;	Peephole 236.g	used r0 instead of ar0
   0BA1 E8                 2964 	mov	a,r0
   0BA2 24r35              2965 	add	a,#_main_disp_1_1
   0BA4 FC                 2966 	mov	r4,a
                           2967 ;	Peephole 236.g	used r1 instead of ar1
   0BA5 E9                 2968 	mov	a,r1
   0BA6 34s00              2969 	addc	a,#(_main_disp_1_1 >> 8)
   0BA8 FD                 2970 	mov	r5,a
                           2971 ;	genAssign
   0BA9 75*00 03           2972 	mov	_main_sloc0_1_0,#0x03
   0BAC E4                 2973 	clr	a
   0BAD F5*01              2974 	mov	(_main_sloc0_1_0 + 1),a
   0BAF                    2975 00298$:
                           2976 ;	genCmpLt
                           2977 ;	genCmp
   0BAF C3                 2978 	clr	c
   0BB0 E5*00              2979 	mov	a,_main_sloc0_1_0
   0BB2 94 08              2980 	subb	a,#0x08
   0BB4 E5*01              2981 	mov	a,(_main_sloc0_1_0 + 1)
   0BB6 64 80              2982 	xrl	a,#0x80
   0BB8 94 80              2983 	subb	a,#0x80
                           2984 ;	genIfxJump
   0BBA 40 03              2985 	jc	00492$
   0BBC 02s0Cr5F           2986 	ljmp	00304$
   0BBF                    2987 00492$:
                           2988 ;	main.c:232: if((disp[j]>>k)&1)
                           2989 ;	genIpush
   0BBF C0 03              2990 	push	ar3
                           2991 ;	genPointerGet
                           2992 ;	genFarPointerGet
   0BC1 8C 82              2993 	mov	dpl,r4
   0BC3 8D 83              2994 	mov	dph,r5
   0BC5 E0                 2995 	movx	a,@dptr
   0BC6 FB                 2996 	mov	r3,a
                           2997 ;	genRightShift
   0BC7 85*00 F0           2998 	mov	b,_main_sloc0_1_0
   0BCA 05 F0              2999 	inc	b
   0BCC EB                 3000 	mov	a,r3
   0BCD 80 02              3001 	sjmp	00494$
   0BCF                    3002 00493$:
   0BCF C3                 3003 	clr	c
   0BD0 13                 3004 	rrc	a
   0BD1                    3005 00494$:
   0BD1 D5 F0 FB           3006 	djnz	b,00493$
                           3007 ;	genAnd
   0BD4 54 01              3008 	anl	a,#0x01
                           3009 ;	genIpop
   0BD6 D0 03              3010 	pop	ar3
                           3011 ;	genIfx
                           3012 ;	genIfxJump
                           3013 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0BD8 60 3E              3014 	jz	00196$
                           3015 ;	Peephole 300	removed redundant label 00495$
                           3016 ;	main.c:233: {printf("%c",0xFF);}
                           3017 ;	genIpush
   0BDA C0 02              3018 	push	ar2
   0BDC C0 03              3019 	push	ar3
   0BDE C0 04              3020 	push	ar4
   0BE0 C0 05              3021 	push	ar5
   0BE2 C0 06              3022 	push	ar6
   0BE4 C0 07              3023 	push	ar7
   0BE6 C0 00              3024 	push	ar0
   0BE8 C0 01              3025 	push	ar1
   0BEA 74 FF              3026 	mov	a,#0xFF
   0BEC C0 E0              3027 	push	acc
                           3028 ;	Peephole 181	changed mov to clr
   0BEE E4                 3029 	clr	a
   0BEF C0 E0              3030 	push	acc
                           3031 ;	genIpush
   0BF1 74r33              3032 	mov	a,#__str_45
   0BF3 C0 E0              3033 	push	acc
   0BF5 74s08              3034 	mov	a,#(__str_45 >> 8)
   0BF7 C0 E0              3035 	push	acc
   0BF9 74 80              3036 	mov	a,#0x80
   0BFB C0 E0              3037 	push	acc
                           3038 ;	genCall
   0BFD 12s00r00           3039 	lcall	_printf
   0C00 E5 81              3040 	mov	a,sp
   0C02 24 FB              3041 	add	a,#0xfb
   0C04 F5 81              3042 	mov	sp,a
   0C06 D0 01              3043 	pop	ar1
   0C08 D0 00              3044 	pop	ar0
   0C0A D0 07              3045 	pop	ar7
   0C0C D0 06              3046 	pop	ar6
   0C0E D0 05              3047 	pop	ar5
   0C10 D0 04              3048 	pop	ar4
   0C12 D0 03              3049 	pop	ar3
   0C14 D0 02              3050 	pop	ar2
                           3051 ;	Peephole 112.b	changed ljmp to sjmp
   0C16 80 3C              3052 	sjmp	00300$
   0C18                    3053 00196$:
                           3054 ;	main.c:235: {printf("%c",'_');}
                           3055 ;	genIpush
   0C18 C0 02              3056 	push	ar2
   0C1A C0 03              3057 	push	ar3
   0C1C C0 04              3058 	push	ar4
   0C1E C0 05              3059 	push	ar5
   0C20 C0 06              3060 	push	ar6
   0C22 C0 07              3061 	push	ar7
   0C24 C0 00              3062 	push	ar0
   0C26 C0 01              3063 	push	ar1
   0C28 74 5F              3064 	mov	a,#0x5F
   0C2A C0 E0              3065 	push	acc
                           3066 ;	Peephole 181	changed mov to clr
   0C2C E4                 3067 	clr	a
   0C2D C0 E0              3068 	push	acc
                           3069 ;	genIpush
   0C2F 74r33              3070 	mov	a,#__str_45
   0C31 C0 E0              3071 	push	acc
   0C33 74s08              3072 	mov	a,#(__str_45 >> 8)
   0C35 C0 E0              3073 	push	acc
   0C37 74 80              3074 	mov	a,#0x80
   0C39 C0 E0              3075 	push	acc
                           3076 ;	genCall
   0C3B 12s00r00           3077 	lcall	_printf
   0C3E E5 81              3078 	mov	a,sp
   0C40 24 FB              3079 	add	a,#0xfb
   0C42 F5 81              3080 	mov	sp,a
   0C44 D0 01              3081 	pop	ar1
   0C46 D0 00              3082 	pop	ar0
   0C48 D0 07              3083 	pop	ar7
   0C4A D0 06              3084 	pop	ar6
   0C4C D0 05              3085 	pop	ar5
   0C4E D0 04              3086 	pop	ar4
   0C50 D0 03              3087 	pop	ar3
   0C52 D0 02              3088 	pop	ar2
   0C54                    3089 00300$:
                           3090 ;	main.c:230: for(k=3;k<8;k++)
                           3091 ;	genPlus
                           3092 ;     genPlusIncr
   0C54 05*00              3093 	inc	_main_sloc0_1_0
   0C56 E4                 3094 	clr	a
   0C57 B5*00 02           3095 	cjne	a,_main_sloc0_1_0,00496$
   0C5A 05*01              3096 	inc	(_main_sloc0_1_0 + 1)
   0C5C                    3097 00496$:
   0C5C 02s0BrAF           3098 	ljmp	00298$
   0C5F                    3099 00304$:
                           3100 ;	main.c:228: for(j=0;j<=i;j++)
                           3101 ;	genPlus
                           3102 ;     genPlusIncr
   0C5F 08                 3103 	inc	r0
   0C60 B8 00 01           3104 	cjne	r0,#0x00,00497$
   0C63 09                 3105 	inc	r1
   0C64                    3106 00497$:
   0C64 02s0Br62           3107 	ljmp	00302$
   0C67                    3108 00308$:
                           3109 ;	main.c:214: for(i=0;i<8;i++)
                           3110 ;	genPlus
                           3111 ;     genPlusIncr
   0C67 74 01              3112 	mov	a,#0x01
                           3113 ;	Peephole 236.a	used r6 instead of ar6
   0C69 2E                 3114 	add	a,r6
   0C6A FC                 3115 	mov	r4,a
                           3116 ;	Peephole 181	changed mov to clr
   0C6B E4                 3117 	clr	a
                           3118 ;	Peephole 236.b	used r7 instead of ar7
   0C6C 3F                 3119 	addc	a,r7
   0C6D FD                 3120 	mov	r5,a
   0C6E 02s0Ar56           3121 	ljmp	00306$
   0C71                    3122 00309$:
                           3123 ;	main.c:239: lcdcreatechar(ccode,row_val);
                           3124 ;	genCast
   0C71 90s00r00           3125 	mov	dptr,#_lcdcreatechar_PARM_2
   0C74 74r2D              3126 	mov	a,#_main_row_val_1_1
   0C76 F0                 3127 	movx	@dptr,a
   0C77 A3                 3128 	inc	dptr
   0C78 74s00              3129 	mov	a,#(_main_row_val_1_1 >> 8)
   0C7A F0                 3130 	movx	@dptr,a
   0C7B A3                 3131 	inc	dptr
   0C7C 74 00              3132 	mov	a,#0x0
   0C7E F0                 3133 	movx	@dptr,a
                           3134 ;	genCall
   0C7F 8B 82              3135 	mov	dpl,r3
   0C81 C0 02              3136 	push	ar2
   0C83 12s00r00           3137 	lcall	_lcdcreatechar
   0C86 D0 02              3138 	pop	ar2
   0C88 02s0Dr34           3139 	ljmp	00235$
   0C8B                    3140 00215$:
                           3141 ;	main.c:243: else if(store=='8')
                           3142 ;	genCmpEq
                           3143 ;	gencjneshort
   0C8B BA 38 02           3144 	cjne	r2,#0x38,00498$
   0C8E 80 03              3145 	sjmp	00499$
   0C90                    3146 00498$:
   0C90 02s0Dr0F           3147 	ljmp	00212$
   0C93                    3148 00499$:
                           3149 ;	main.c:245: printf_tiny("\n\n\r\t Select Character code between 0 to 7 to display: \t");
                           3150 ;	genIpush
   0C93 C0 02              3151 	push	ar2
   0C95 74r36              3152 	mov	a,#__str_46
   0C97 C0 E0              3153 	push	acc
   0C99 74s08              3154 	mov	a,#(__str_46 >> 8)
   0C9B C0 E0              3155 	push	acc
                           3156 ;	genCall
   0C9D 12s00r00           3157 	lcall	_printf_tiny
   0CA0 15 81              3158 	dec	sp
   0CA2 15 81              3159 	dec	sp
   0CA4 D0 02              3160 	pop	ar2
                           3161 ;	main.c:246: do
   0CA6                    3162 00200$:
                           3163 ;	main.c:248: gets(c);
                           3164 ;	genCall
                           3165 ;	Peephole 182.a	used 16 bit load of DPTR
   0CA6 90s00r1A           3166 	mov	dptr,#_main_c_1_1
   0CA9 75 F0 00           3167 	mov	b,#0x00
   0CAC C0 02              3168 	push	ar2
   0CAE 12s00r00           3169 	lcall	_gets
   0CB1 D0 02              3170 	pop	ar2
                           3171 ;	main.c:249: num=atoi(c);
                           3172 ;	genCall
                           3173 ;	Peephole 182.a	used 16 bit load of DPTR
   0CB3 90s00r1A           3174 	mov	dptr,#_main_c_1_1
   0CB6 75 F0 00           3175 	mov	b,#0x00
   0CB9 C0 02              3176 	push	ar2
   0CBB 12s00r00           3177 	lcall	_atoi
   0CBE AB 82              3178 	mov	r3,dpl
   0CC0 AC 83              3179 	mov	r4,dph
   0CC2 D0 02              3180 	pop	ar2
                           3181 ;	main.c:250: if(num>7){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 7");}
                           3182 ;	genCmpGt
                           3183 ;	genCmp
   0CC4 C3                 3184 	clr	c
   0CC5 74 07              3185 	mov	a,#0x07
   0CC7 9B                 3186 	subb	a,r3
                           3187 ;	Peephole 159	avoided xrl during execution
   0CC8 74 80              3188 	mov	a,#(0x00 ^ 0x80)
   0CCA 8C F0              3189 	mov	b,r4
   0CCC 63 F0 80           3190 	xrl	b,#0x80
   0CCF 95 F0              3191 	subb	a,b
   0CD1 E4                 3192 	clr	a
   0CD2 33                 3193 	rlc	a
                           3194 ;	genIfx
   0CD3 FD                 3195 	mov	r5,a
                           3196 ;	Peephole 105	removed redundant mov
                           3197 ;	genIfxJump
                           3198 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0CD4 60 1F              3199 	jz	00201$
                           3200 ;	Peephole 300	removed redundant label 00500$
                           3201 ;	genIpush
   0CD6 C0 02              3202 	push	ar2
   0CD8 C0 03              3203 	push	ar3
   0CDA C0 04              3204 	push	ar4
   0CDC C0 05              3205 	push	ar5
   0CDE 74r3F              3206 	mov	a,#__str_39
   0CE0 C0 E0              3207 	push	acc
   0CE2 74s07              3208 	mov	a,#(__str_39 >> 8)
   0CE4 C0 E0              3209 	push	acc
                           3210 ;	genCall
   0CE6 12s00r00           3211 	lcall	_printf_tiny
   0CE9 15 81              3212 	dec	sp
   0CEB 15 81              3213 	dec	sp
   0CED D0 05              3214 	pop	ar5
   0CEF D0 04              3215 	pop	ar4
   0CF1 D0 03              3216 	pop	ar3
   0CF3 D0 02              3217 	pop	ar2
   0CF5                    3218 00201$:
                           3219 ;	main.c:251: }while(num>7);
                           3220 ;	genIfx
   0CF5 ED                 3221 	mov	a,r5
                           3222 ;	genIfxJump
                           3223 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0CF6 70 AE              3224 	jnz	00200$
                           3225 ;	Peephole 300	removed redundant label 00501$
                           3226 ;	main.c:252: ccode=num;
                           3227 ;	genCast
                           3228 ;	main.c:253: lcd_dis_cus(ccode,2,3);
                           3229 ;	genAssign
   0CF8 90s00r00           3230 	mov	dptr,#_lcd_dis_cus_PARM_2
   0CFB 74 02              3231 	mov	a,#0x02
   0CFD F0                 3232 	movx	@dptr,a
                           3233 ;	genAssign
   0CFE 90s00r00           3234 	mov	dptr,#_lcd_dis_cus_PARM_3
   0D01 74 03              3235 	mov	a,#0x03
   0D03 F0                 3236 	movx	@dptr,a
                           3237 ;	genCall
   0D04 8B 82              3238 	mov	dpl,r3
   0D06 C0 02              3239 	push	ar2
   0D08 12s00r00           3240 	lcall	_lcd_dis_cus
   0D0B D0 02              3241 	pop	ar2
                           3242 ;	Peephole 112.b	changed ljmp to sjmp
   0D0D 80 25              3243 	sjmp	00235$
   0D0F                    3244 00212$:
                           3245 ;	main.c:258: else if(store=='q')
                           3246 ;	genCmpEq
                           3247 ;	gencjneshort
                           3248 ;	Peephole 112.b	changed ljmp to sjmp
                           3249 ;	Peephole 198.b	optimized misc jump sequence
   0D0F BA 71 0C           3250 	cjne	r2,#0x71,00209$
                           3251 ;	Peephole 200.b	removed redundant sjmp
                           3252 ;	Peephole 300	removed redundant label 00502$
                           3253 ;	Peephole 300	removed redundant label 00503$
                           3254 ;	main.c:260: lcdputcmd(1);
                           3255 ;	genCall
   0D12 75 82 01           3256 	mov	dpl,#0x01
   0D15 C0 02              3257 	push	ar2
   0D17 12s00r00           3258 	lcall	_lcdputcmd
   0D1A D0 02              3259 	pop	ar2
                           3260 ;	Peephole 112.b	changed ljmp to sjmp
   0D1C 80 16              3261 	sjmp	00235$
   0D1E                    3262 00209$:
                           3263 ;	main.c:263: else if(store=='c')
                           3264 ;	genCmpEq
                           3265 ;	gencjneshort
                           3266 ;	Peephole 112.b	changed ljmp to sjmp
                           3267 ;	Peephole 198.b	optimized misc jump sequence
   0D1E BA 63 09           3268 	cjne	r2,#0x63,00206$
                           3269 ;	Peephole 200.b	removed redundant sjmp
                           3270 ;	Peephole 300	removed redundant label 00504$
                           3271 ;	Peephole 300	removed redundant label 00505$
                           3272 ;	main.c:265: CGRAM_dump();
                           3273 ;	genCall
   0D21 C0 02              3274 	push	ar2
   0D23 12s00r00           3275 	lcall	_CGRAM_dump
   0D26 D0 02              3276 	pop	ar2
                           3277 ;	Peephole 112.b	changed ljmp to sjmp
   0D28 80 0A              3278 	sjmp	00235$
   0D2A                    3279 00206$:
                           3280 ;	main.c:267: else if(store=='d')
                           3281 ;	genCmpEq
                           3282 ;	gencjneshort
                           3283 ;	Peephole 112.b	changed ljmp to sjmp
                           3284 ;	Peephole 198.b	optimized misc jump sequence
   0D2A BA 64 07           3285 	cjne	r2,#0x64,00235$
                           3286 ;	Peephole 200.b	removed redundant sjmp
                           3287 ;	Peephole 300	removed redundant label 00506$
                           3288 ;	Peephole 300	removed redundant label 00507$
                           3289 ;	main.c:269: DDRAM_dump();
                           3290 ;	genCall
   0D2D C0 02              3291 	push	ar2
   0D2F 12s00r00           3292 	lcall	_DDRAM_dump
   0D32 D0 02              3293 	pop	ar2
   0D34                    3294 00235$:
                           3295 ;	main.c:271: if(store=='w' || store=='r' || store=='l')
                           3296 ;	genCmpEq
                           3297 ;	gencjne
                           3298 ;	gencjneshort
                           3299 ;	Peephole 241.d	optimized compare
   0D34 E4                 3300 	clr	a
   0D35 BA 77 01           3301 	cjne	r2,#0x77,00508$
   0D38 04                 3302 	inc	a
   0D39                    3303 00508$:
                           3304 ;	Peephole 300	removed redundant label 00509$
                           3305 ;	genIfx
   0D39 FB                 3306 	mov	r3,a
                           3307 ;	Peephole 105	removed redundant mov
                           3308 ;	genIfxJump
                           3309 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0D3A 70 0D              3310 	jnz	00279$
                           3311 ;	Peephole 300	removed redundant label 00510$
                           3312 ;	genCmpEq
                           3313 ;	gencjneshort
   0D3C BA 72 02           3314 	cjne	r2,#0x72,00511$
                           3315 ;	Peephole 112.b	changed ljmp to sjmp
   0D3F 80 08              3316 	sjmp	00279$
   0D41                    3317 00511$:
                           3318 ;	genCmpEq
                           3319 ;	gencjneshort
   0D41 BA 6C 02           3320 	cjne	r2,#0x6C,00512$
   0D44 80 03              3321 	sjmp	00513$
   0D46                    3322 00512$:
   0D46 02s0ErFE           3323 	ljmp	00280$
   0D49                    3324 00513$:
   0D49                    3325 00279$:
                           3326 ;	main.c:274: printf_tiny("\n\n\r Enter Address in Hex in HHH format between 000 to 7FF: ");  // Promt user to input address in the specified range
                           3327 ;	genIpush
   0D49 C0 02              3328 	push	ar2
   0D4B C0 03              3329 	push	ar3
   0D4D 74r6E              3330 	mov	a,#__str_47
   0D4F C0 E0              3331 	push	acc
   0D51 74s08              3332 	mov	a,#(__str_47 >> 8)
   0D53 C0 E0              3333 	push	acc
                           3334 ;	genCall
   0D55 12s00r00           3335 	lcall	_printf_tiny
   0D58 15 81              3336 	dec	sp
   0D5A 15 81              3337 	dec	sp
   0D5C D0 03              3338 	pop	ar3
   0D5E D0 02              3339 	pop	ar2
                           3340 ;	main.c:277: do{
   0D60                    3341 00239$:
                           3342 ;	main.c:278: flag=0;
                           3343 ;	genAssign
   0D60 90s00r2B           3344 	mov	dptr,#_main_flag_1_1
   0D63 E4                 3345 	clr	a
   0D64 F0                 3346 	movx	@dptr,a
   0D65 A3                 3347 	inc	dptr
   0D66 F0                 3348 	movx	@dptr,a
                           3349 ;	main.c:279: gets(b);
                           3350 ;	genCall
                           3351 ;	Peephole 182.a	used 16 bit load of DPTR
   0D67 90s00r26           3352 	mov	dptr,#_main_b_1_1
   0D6A 75 F0 00           3353 	mov	b,#0x00
   0D6D C0 02              3354 	push	ar2
   0D6F C0 03              3355 	push	ar3
   0D71 12s00r00           3356 	lcall	_gets
   0D74 D0 03              3357 	pop	ar3
   0D76 D0 02              3358 	pop	ar2
                           3359 ;	main.c:280: addr=atoh(b);            // Get data from the user    //Conver that data into hex
                           3360 ;	genCall
                           3361 ;	Peephole 182.a	used 16 bit load of DPTR
   0D78 90s00r26           3362 	mov	dptr,#_main_b_1_1
   0D7B 75 F0 00           3363 	mov	b,#0x00
   0D7E C0 02              3364 	push	ar2
   0D80 C0 03              3365 	push	ar3
   0D82 12s00r00           3366 	lcall	_atoh
   0D85 AC 82              3367 	mov	r4,dpl
   0D87 AD 83              3368 	mov	r5,dph
   0D89 D0 03              3369 	pop	ar3
   0D8B D0 02              3370 	pop	ar2
                           3371 ;	main.c:281: if(addr<2048)              // Check if address is in valid range
                           3372 ;	genAssign
   0D8D 8C 06              3373 	mov	ar6,r4
   0D8F 8D 07              3374 	mov	ar7,r5
                           3375 ;	genCmpLt
                           3376 ;	genCmp
                           3377 ;	genIfxJump
                           3378 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           3379 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0D91 74 F8              3380 	mov	a,#0x100 - 0x08
   0D93 2F                 3381 	add	a,r7
   0D94 40 0B              3382 	jc	00237$
                           3383 ;	Peephole 300	removed redundant label 00514$
                           3384 ;	main.c:283: flag=1;
                           3385 ;	genAssign
   0D96 90s00r2B           3386 	mov	dptr,#_main_flag_1_1
   0D99 74 01              3387 	mov	a,#0x01
   0D9B F0                 3388 	movx	@dptr,a
   0D9C E4                 3389 	clr	a
   0D9D A3                 3390 	inc	dptr
   0D9E F0                 3391 	movx	@dptr,a
                           3392 ;	Peephole 112.b	changed ljmp to sjmp
   0D9F 80 1F              3393 	sjmp	00240$
   0DA1                    3394 00237$:
                           3395 ;	main.c:288: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address betweem 000 and 7FF: ");
                           3396 ;	genIpush
   0DA1 C0 02              3397 	push	ar2
   0DA3 C0 03              3398 	push	ar3
   0DA5 C0 04              3399 	push	ar4
   0DA7 C0 05              3400 	push	ar5
   0DA9 74rAA              3401 	mov	a,#__str_48
   0DAB C0 E0              3402 	push	acc
   0DAD 74s08              3403 	mov	a,#(__str_48 >> 8)
   0DAF C0 E0              3404 	push	acc
                           3405 ;	genCall
   0DB1 12s00r00           3406 	lcall	_printf_tiny
   0DB4 15 81              3407 	dec	sp
   0DB6 15 81              3408 	dec	sp
   0DB8 D0 05              3409 	pop	ar5
   0DBA D0 04              3410 	pop	ar4
   0DBC D0 03              3411 	pop	ar3
   0DBE D0 02              3412 	pop	ar2
   0DC0                    3413 00240$:
                           3414 ;	main.c:290: }while(flag==0);
                           3415 ;	genAssign
   0DC0 90s00r2B           3416 	mov	dptr,#_main_flag_1_1
   0DC3 E0                 3417 	movx	a,@dptr
   0DC4 FE                 3418 	mov	r6,a
   0DC5 A3                 3419 	inc	dptr
   0DC6 E0                 3420 	movx	a,@dptr
                           3421 ;	genIfx
   0DC7 FF                 3422 	mov	r7,a
                           3423 ;	Peephole 135	removed redundant mov
   0DC8 4E                 3424 	orl	a,r6
                           3425 ;	genIfxJump
                           3426 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0DC9 60 95              3427 	jz	00239$
                           3428 ;	Peephole 300	removed redundant label 00515$
                           3429 ;	main.c:292: page=addr/256;          // Calculate PAage block from the address
                           3430 ;	genAssign
   0DCB 8C 06              3431 	mov	ar6,r4
   0DCD 8D 07              3432 	mov	ar7,r5
                           3433 ;	genRightShift
                           3434 ;	genRightShiftLiteral
                           3435 ;	genrshTwo
   0DCF 8F*02              3436 	mov	_main_sloc1_1_0,r7
   0DD1 75*03 00           3437 	mov	(_main_sloc1_1_0 + 1),#0x00
                           3438 ;	main.c:294: if(store=='w')
                           3439 ;	genIfx
   0DD4 EB                 3440 	mov	a,r3
                           3441 ;	genIfxJump
   0DD5 70 03              3442 	jnz	00516$
   0DD7 02s0Er89           3443 	ljmp	00254$
   0DDA                    3444 00516$:
                           3445 ;	main.c:298: printf_tiny("\n\n\r Enter Data in Hex in HH format between 00 to FF: ");
                           3446 ;	genIpush
   0DDA C0 02              3447 	push	ar2
   0DDC C0 04              3448 	push	ar4
   0DDE C0 05              3449 	push	ar5
   0DE0 74rEA              3450 	mov	a,#__str_49
   0DE2 C0 E0              3451 	push	acc
   0DE4 74s08              3452 	mov	a,#(__str_49 >> 8)
   0DE6 C0 E0              3453 	push	acc
                           3454 ;	genCall
   0DE8 12s00r00           3455 	lcall	_printf_tiny
   0DEB 15 81              3456 	dec	sp
   0DED 15 81              3457 	dec	sp
   0DEF D0 05              3458 	pop	ar5
   0DF1 D0 04              3459 	pop	ar4
   0DF3 D0 02              3460 	pop	ar2
                           3461 ;	main.c:299: do{
   0DF5                    3462 00245$:
                           3463 ;	main.c:300: flag=0;
                           3464 ;	genIpush
                           3465 ;	genAssign
   0DF5 90s00r2B           3466 	mov	dptr,#_main_flag_1_1
   0DF8 E4                 3467 	clr	a
   0DF9 F0                 3468 	movx	@dptr,a
   0DFA A3                 3469 	inc	dptr
   0DFB F0                 3470 	movx	@dptr,a
                           3471 ;	main.c:301: gets(d);            // Get data from the user
                           3472 ;	genCall
                           3473 ;	Peephole 182.a	used 16 bit load of DPTR
   0DFC 90s00r1E           3474 	mov	dptr,#_main_d_1_1
   0DFF 75 F0 00           3475 	mov	b,#0x00
   0E02 C0 02              3476 	push	ar2
   0E04 C0 04              3477 	push	ar4
   0E06 C0 05              3478 	push	ar5
   0E08 12s00r00           3479 	lcall	_gets
   0E0B D0 05              3480 	pop	ar5
   0E0D D0 04              3481 	pop	ar4
   0E0F D0 02              3482 	pop	ar2
                           3483 ;	main.c:302: dat=atoh_data(d);   //Conver that data into hex
                           3484 ;	genCall
                           3485 ;	Peephole 182.a	used 16 bit load of DPTR
   0E11 90s00r1E           3486 	mov	dptr,#_main_d_1_1
   0E14 75 F0 00           3487 	mov	b,#0x00
   0E17 C0 02              3488 	push	ar2
   0E19 C0 04              3489 	push	ar4
   0E1B C0 05              3490 	push	ar5
   0E1D 12s00r00           3491 	lcall	_atoh_data
   0E20 AB 82              3492 	mov	r3,dpl
   0E22 A8 83              3493 	mov	r0,dph
   0E24 D0 05              3494 	pop	ar5
   0E26 D0 04              3495 	pop	ar4
   0E28 D0 02              3496 	pop	ar2
                           3497 ;	main.c:303: if(dat<256)
                           3498 ;	genAssign
   0E2A 8B 01              3499 	mov	ar1,r3
   0E2C 88 06              3500 	mov	ar6,r0
                           3501 ;	genCmpLt
                           3502 ;	genCmp
                           3503 ;	genIpop
                           3504 ;	genIfx
                           3505 ;	genIfxJump
                           3506 ;	Peephole 108.c	removed ljmp by inverse jump logic
                           3507 ;	Peephole 128	jump optimization
                           3508 ;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)
   0E2E 74 FF              3509 	mov	a,#0x100 - 0x01
   0E30 2E                 3510 	add	a,r6
   0E31 40 0B              3511 	jc	00243$
                           3512 ;	Peephole 300	removed redundant label 00517$
                           3513 ;	main.c:305: flag=1;
                           3514 ;	genAssign
   0E33 90s00r2B           3515 	mov	dptr,#_main_flag_1_1
   0E36 74 01              3516 	mov	a,#0x01
   0E38 F0                 3517 	movx	@dptr,a
   0E39 E4                 3518 	clr	a
   0E3A A3                 3519 	inc	dptr
   0E3B F0                 3520 	movx	@dptr,a
                           3521 ;	Peephole 112.b	changed ljmp to sjmp
   0E3C 80 23              3522 	sjmp	00246$
   0E3E                    3523 00243$:
                           3524 ;	main.c:310: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid data in Hex in HH format between 00 to FF: ");
                           3525 ;	genIpush
   0E3E C0 02              3526 	push	ar2
   0E40 C0 03              3527 	push	ar3
   0E42 C0 04              3528 	push	ar4
   0E44 C0 05              3529 	push	ar5
   0E46 C0 00              3530 	push	ar0
   0E48 74r20              3531 	mov	a,#__str_50
   0E4A C0 E0              3532 	push	acc
   0E4C 74s09              3533 	mov	a,#(__str_50 >> 8)
   0E4E C0 E0              3534 	push	acc
                           3535 ;	genCall
   0E50 12s00r00           3536 	lcall	_printf_tiny
   0E53 15 81              3537 	dec	sp
   0E55 15 81              3538 	dec	sp
   0E57 D0 00              3539 	pop	ar0
   0E59 D0 05              3540 	pop	ar5
   0E5B D0 04              3541 	pop	ar4
   0E5D D0 03              3542 	pop	ar3
   0E5F D0 02              3543 	pop	ar2
   0E61                    3544 00246$:
                           3545 ;	main.c:312: }while(flag==0);
                           3546 ;	genAssign
   0E61 90s00r2B           3547 	mov	dptr,#_main_flag_1_1
   0E64 E0                 3548 	movx	a,@dptr
   0E65 F9                 3549 	mov	r1,a
   0E66 A3                 3550 	inc	dptr
   0E67 E0                 3551 	movx	a,@dptr
                           3552 ;	genIfx
   0E68 FE                 3553 	mov	r6,a
                           3554 ;	Peephole 135	removed redundant mov
   0E69 49                 3555 	orl	a,r1
                           3556 ;	genIfxJump
   0E6A 70 03              3557 	jnz	00518$
   0E6C 02s0DrF5           3558 	ljmp	00245$
   0E6F                    3559 00518$:
                           3560 ;	main.c:314: EEPROM_WriteByte((addr-page*256),dat,page);     // Write byte to the specified address
                           3561 ;	genAssign
   0E6F 8C 06              3562 	mov	ar6,r4
                           3563 ;	genCast
                           3564 ;	genCast
                           3565 ;	peephole 177.f	removed redundant move
   0E71 AF*02              3566 	mov	r7,_main_sloc1_1_0
                           3567 ;	genAssign
                           3568 ;	genCast
   0E73 90s00r00           3569 	mov	dptr,#_EEPROM_WriteByte_PARM_2
   0E76 EB                 3570 	mov	a,r3
   0E77 F0                 3571 	movx	@dptr,a
                           3572 ;	genAssign
   0E78 90s00r00           3573 	mov	dptr,#_EEPROM_WriteByte_PARM_3
   0E7B EF                 3574 	mov	a,r7
   0E7C F0                 3575 	movx	@dptr,a
                           3576 ;	genCall
   0E7D 8E 82              3577 	mov	dpl,r6
   0E7F C0 02              3578 	push	ar2
   0E81 12s00r00           3579 	lcall	_EEPROM_WriteByte
   0E84 D0 02              3580 	pop	ar2
   0E86 02s0Fr7D           3581 	ljmp	00281$
   0E89                    3582 00254$:
                           3583 ;	main.c:317: else if(store=='r')
                           3584 ;	genCmpEq
                           3585 ;	gencjneshort
                           3586 ;	Peephole 112.b	changed ljmp to sjmp
                           3587 ;	Peephole 198.b	optimized misc jump sequence
   0E89 BA 72 3F           3588 	cjne	r2,#0x72,00251$
                           3589 ;	Peephole 200.b	removed redundant sjmp
                           3590 ;	Peephole 300	removed redundant label 00519$
                           3591 ;	Peephole 300	removed redundant label 00520$
                           3592 ;	main.c:321: rd=EEPROM_ReadByte((addr-page*256),page);
                           3593 ;	genAssign
   0E8C 8C 03              3594 	mov	ar3,r4
   0E8E 8D 06              3595 	mov	ar6,r5
                           3596 ;	genCast
                           3597 ;	genCast
   0E90 90s00r00           3598 	mov	dptr,#_EEPROM_ReadByte_PARM_2
   0E93 E5*02              3599 	mov	a,_main_sloc1_1_0
   0E95 F0                 3600 	movx	@dptr,a
                           3601 ;	genCall
   0E96 8B 82              3602 	mov	dpl,r3
   0E98 C0 02              3603 	push	ar2
   0E9A C0 04              3604 	push	ar4
   0E9C C0 05              3605 	push	ar5
   0E9E 12s00r00           3606 	lcall	_EEPROM_ReadByte
   0EA1 AB 82              3607 	mov	r3,dpl
   0EA3 D0 05              3608 	pop	ar5
   0EA5 D0 04              3609 	pop	ar4
   0EA7 D0 02              3610 	pop	ar2
                           3611 ;	main.c:322: printf_tiny("\n\n\r\t\t\t%x : %x \n",addr,rd);  //Data is printed in AAA:DD format
                           3612 ;	genCast
   0EA9 7E 00              3613 	mov	r6,#0x00
                           3614 ;	genIpush
   0EAB C0 02              3615 	push	ar2
   0EAD C0 03              3616 	push	ar3
   0EAF C0 06              3617 	push	ar6
                           3618 ;	genIpush
   0EB1 C0 04              3619 	push	ar4
   0EB3 C0 05              3620 	push	ar5
                           3621 ;	genIpush
   0EB5 74r6E              3622 	mov	a,#__str_51
   0EB7 C0 E0              3623 	push	acc
   0EB9 74s09              3624 	mov	a,#(__str_51 >> 8)
   0EBB C0 E0              3625 	push	acc
                           3626 ;	genCall
   0EBD 12s00r00           3627 	lcall	_printf_tiny
   0EC0 E5 81              3628 	mov	a,sp
   0EC2 24 FA              3629 	add	a,#0xfa
   0EC4 F5 81              3630 	mov	sp,a
   0EC6 D0 02              3631 	pop	ar2
   0EC8 02s0Fr7D           3632 	ljmp	00281$
   0ECB                    3633 00251$:
                           3634 ;	main.c:324: else if(store=='l')
                           3635 ;	genCmpEq
                           3636 ;	gencjneshort
   0ECB BA 6C 02           3637 	cjne	r2,#0x6C,00521$
   0ECE 80 03              3638 	sjmp	00522$
   0ED0                    3639 00521$:
   0ED0 02s0Fr7D           3640 	ljmp	00281$
   0ED3                    3641 00522$:
                           3642 ;	main.c:326: rd=EEPROM_ReadByte((addr-page*256),page);
                           3643 ;	genAssign
                           3644 ;	genCast
                           3645 ;	genCast
   0ED3 90s00r00           3646 	mov	dptr,#_EEPROM_ReadByte_PARM_2
   0ED6 E5*02              3647 	mov	a,_main_sloc1_1_0
   0ED8 F0                 3648 	movx	@dptr,a
                           3649 ;	genCall
   0ED9 8C 82              3650 	mov	dpl,r4
   0EDB C0 02              3651 	push	ar2
   0EDD 12s00r00           3652 	lcall	_EEPROM_ReadByte
   0EE0 AB 82              3653 	mov	r3,dpl
   0EE2 D0 02              3654 	pop	ar2
                           3655 ;	main.c:327: lcd_display(rd,b);
                           3656 ;	genCast
   0EE4 90s00r00           3657 	mov	dptr,#_lcd_display_PARM_2
   0EE7 74r26              3658 	mov	a,#_main_b_1_1
   0EE9 F0                 3659 	movx	@dptr,a
   0EEA A3                 3660 	inc	dptr
   0EEB 74s00              3661 	mov	a,#(_main_b_1_1 >> 8)
   0EED F0                 3662 	movx	@dptr,a
   0EEE A3                 3663 	inc	dptr
   0EEF 74 00              3664 	mov	a,#0x0
   0EF1 F0                 3665 	movx	@dptr,a
                           3666 ;	genCall
   0EF2 8B 82              3667 	mov	dpl,r3
   0EF4 C0 02              3668 	push	ar2
   0EF6 12s00r00           3669 	lcall	_lcd_display
   0EF9 D0 02              3670 	pop	ar2
   0EFB 02s0Fr7D           3671 	ljmp	00281$
   0EFE                    3672 00280$:
                           3673 ;	main.c:330: else if(store=='h')
                           3674 ;	genCmpEq
                           3675 ;	gencjneshort
                           3676 ;	Peephole 112.b	changed ljmp to sjmp
                           3677 ;	Peephole 198.b	optimized misc jump sequence
   0EFE BA 68 0A           3678 	cjne	r2,#0x68,00277$
                           3679 ;	Peephole 200.b	removed redundant sjmp
                           3680 ;	Peephole 300	removed redundant label 00523$
                           3681 ;	Peephole 300	removed redundant label 00524$
                           3682 ;	main.c:332: hex_dump();
                           3683 ;	genCall
   0F01 C0 02              3684 	push	ar2
   0F03 12s00r00           3685 	lcall	_hex_dump
   0F06 D0 02              3686 	pop	ar2
   0F08 02s0Fr7D           3687 	ljmp	00281$
   0F0B                    3688 00277$:
                           3689 ;	main.c:335: else if(store=='x')
                           3690 ;	genCmpEq
                           3691 ;	gencjneshort
                           3692 ;	Peephole 112.b	changed ljmp to sjmp
                           3693 ;	Peephole 198.b	optimized misc jump sequence
   0F0B BA 78 13           3694 	cjne	r2,#0x78,00274$
                           3695 ;	Peephole 200.b	removed redundant sjmp
                           3696 ;	Peephole 300	removed redundant label 00525$
                           3697 ;	Peephole 300	removed redundant label 00526$
                           3698 ;	main.c:337: io_counter=0;
                           3699 ;	genAssign
   0F0E 90s00r18           3700 	mov	dptr,#_io_counter
   0F11 E4                 3701 	clr	a
   0F12 F0                 3702 	movx	@dptr,a
   0F13 A3                 3703 	inc	dptr
   0F14 F0                 3704 	movx	@dptr,a
                           3705 ;	main.c:338: io_cnt(io_counter);
                           3706 ;	genCall
                           3707 ;	Peephole 182.b	used 16 bit load of dptr
   0F15 90 00 00           3708 	mov	dptr,#0x0000
   0F18 C0 02              3709 	push	ar2
   0F1A 12s00r00           3710 	lcall	_io_cnt
   0F1D D0 02              3711 	pop	ar2
                           3712 ;	Peephole 112.b	changed ljmp to sjmp
   0F1F 80 5C              3713 	sjmp	00281$
   0F21                    3714 00274$:
                           3715 ;	main.c:341: else if(store=='i')
                           3716 ;	genCmpEq
                           3717 ;	gencjneshort
                           3718 ;	Peephole 112.b	changed ljmp to sjmp
                           3719 ;	Peephole 198.b	optimized misc jump sequence
   0F21 BA 69 09           3720 	cjne	r2,#0x69,00271$
                           3721 ;	Peephole 200.b	removed redundant sjmp
                           3722 ;	Peephole 300	removed redundant label 00527$
                           3723 ;	Peephole 300	removed redundant label 00528$
                           3724 ;	main.c:343: io_exp_dir();
                           3725 ;	genCall
   0F24 C0 02              3726 	push	ar2
   0F26 12s00r00           3727 	lcall	_io_exp_dir
   0F29 D0 02              3728 	pop	ar2
                           3729 ;	Peephole 112.b	changed ljmp to sjmp
   0F2B 80 50              3730 	sjmp	00281$
   0F2D                    3731 00271$:
                           3732 ;	main.c:347: else if(store=='s')
                           3733 ;	genCmpEq
                           3734 ;	gencjneshort
                           3735 ;	Peephole 112.b	changed ljmp to sjmp
                           3736 ;	Peephole 198.b	optimized misc jump sequence
   0F2D BA 73 26           3737 	cjne	r2,#0x73,00268$
                           3738 ;	Peephole 200.b	removed redundant sjmp
                           3739 ;	Peephole 300	removed redundant label 00529$
                           3740 ;	Peephole 300	removed redundant label 00530$
                           3741 ;	main.c:349: printf_tiny("\n\n\r\t Current Status of the IO_Expander pins is: 0x%x\n\n\r",IOEX_ReadByte());
                           3742 ;	genCall
   0F30 C0 02              3743 	push	ar2
   0F32 12s00r00           3744 	lcall	_IOEX_ReadByte
   0F35 AB 82              3745 	mov	r3,dpl
   0F37 D0 02              3746 	pop	ar2
                           3747 ;	genCast
   0F39 7C 00              3748 	mov	r4,#0x00
                           3749 ;	genIpush
   0F3B C0 02              3750 	push	ar2
   0F3D C0 03              3751 	push	ar3
   0F3F C0 04              3752 	push	ar4
                           3753 ;	genIpush
   0F41 74r7E              3754 	mov	a,#__str_52
   0F43 C0 E0              3755 	push	acc
   0F45 74s09              3756 	mov	a,#(__str_52 >> 8)
   0F47 C0 E0              3757 	push	acc
                           3758 ;	genCall
   0F49 12s00r00           3759 	lcall	_printf_tiny
   0F4C E5 81              3760 	mov	a,sp
   0F4E 24 FC              3761 	add	a,#0xfc
   0F50 F5 81              3762 	mov	sp,a
   0F52 D0 02              3763 	pop	ar2
                           3764 ;	Peephole 112.b	changed ljmp to sjmp
   0F54 80 27              3765 	sjmp	00281$
   0F56                    3766 00268$:
                           3767 ;	main.c:353: else if(store=='0')
                           3768 ;	genCmpEq
                           3769 ;	gencjneshort
   0F56 BA 30 02           3770 	cjne	r2,#0x30,00531$
                           3771 ;	Peephole 112.b	changed ljmp to sjmp
   0F59 80 22              3772 	sjmp	00281$
   0F5B                    3773 00531$:
                           3774 ;	main.c:358: else if(store=='9')
                           3775 ;	genCmpEq
                           3776 ;	gencjneshort
                           3777 ;	Peephole 112.b	changed ljmp to sjmp
                           3778 ;	Peephole 198.b	optimized misc jump sequence
   0F5B BA 39 09           3779 	cjne	r2,#0x39,00262$
                           3780 ;	Peephole 200.b	removed redundant sjmp
                           3781 ;	Peephole 300	removed redundant label 00532$
                           3782 ;	Peephole 300	removed redundant label 00533$
                           3783 ;	main.c:360: logo_creator();
                           3784 ;	genCall
   0F5E C0 02              3785 	push	ar2
   0F60 12s00r00           3786 	lcall	_logo_creator
   0F63 D0 02              3787 	pop	ar2
                           3788 ;	Peephole 112.b	changed ljmp to sjmp
   0F65 80 16              3789 	sjmp	00281$
   0F67                    3790 00262$:
                           3791 ;	main.c:362: else if(store=='y')
                           3792 ;	genCmpEq
                           3793 ;	gencjneshort
                           3794 ;	Peephole 112.b	changed ljmp to sjmp
                           3795 ;	Peephole 198.b	optimized misc jump sequence
   0F67 BA 79 13           3796 	cjne	r2,#0x79,00281$
                           3797 ;	Peephole 200.b	removed redundant sjmp
                           3798 ;	Peephole 300	removed redundant label 00534$
                           3799 ;	Peephole 300	removed redundant label 00535$
                           3800 ;	main.c:364: printf_tiny("\n\n\n\rWatchdog RESET Demo");
                           3801 ;	genIpush
   0F6A 74rB6              3802 	mov	a,#__str_53
   0F6C C0 E0              3803 	push	acc
   0F6E 74s09              3804 	mov	a,#(__str_53 >> 8)
   0F70 C0 E0              3805 	push	acc
                           3806 ;	genCall
   0F72 12s00r00           3807 	lcall	_printf_tiny
   0F75 15 81              3808 	dec	sp
   0F77 15 81              3809 	dec	sp
                           3810 ;	main.c:365: EA=0;
                           3811 ;	genAssign
   0F79 C2 AF              3812 	clr	_EA
                           3813 ;	main.c:366: while(1);
   0F7B                    3814 00257$:
                           3815 ;	Peephole 112.b	changed ljmp to sjmp
   0F7B 80 FE              3816 	sjmp	00257$
   0F7D                    3817 00281$:
                           3818 ;	main.c:370: if(store=='m')
                           3819 ;	genCmpEq
                           3820 ;	gencjneshort
                           3821 ;	Peephole 112.b	changed ljmp to sjmp
                           3822 ;	Peephole 198.b	optimized misc jump sequence
   0F7D BA 6D 4B           3823 	cjne	r2,#0x6D,00285$
                           3824 ;	Peephole 200.b	removed redundant sjmp
                           3825 ;	Peephole 300	removed redundant label 00536$
                           3826 ;	Peephole 300	removed redundant label 00537$
                           3827 ;	main.c:372: printf_tiny("\n\n\r\t\t\t\t\t******** Clock Control Commands ********\n\n\r\t1. Stop Clock \t\t\t\t\t\t2. Restart Clock \t\t\t3. Reset Clock\n\r\t4. Select Count-Down Timer and Value \t\t\t5. Timer Enable \t\t\t6. Timer Disable ");
                           3828 ;	genIpush
   0F80 74r11              3829 	mov	a,#__str_4
   0F82 C0 E0              3830 	push	acc
   0F84 74s00              3831 	mov	a,#(__str_4 >> 8)
   0F86 C0 E0              3832 	push	acc
                           3833 ;	genCall
   0F88 12s00r00           3834 	lcall	_printf_tiny
   0F8B 15 81              3835 	dec	sp
   0F8D 15 81              3836 	dec	sp
                           3837 ;	main.c:373: printf_tiny("\n\n\n\r\t\t\t\t\t******** LCD Commands ********\n\n\r\t7. Create Custom Character\t\t\t8. Display Custom Character\t\t\t'c'. CGRAM Dump\t\t\t'd'. DDRAM Dump\n\r\t'l'. LCD Display\t\t\t\t'q'. Clear LCD Display");
                           3838 ;	genIpush
   0F8F 74rCE              3839 	mov	a,#__str_54
   0F91 C0 E0              3840 	push	acc
   0F93 74s09              3841 	mov	a,#(__str_54 >> 8)
   0F95 C0 E0              3842 	push	acc
                           3843 ;	genCall
   0F97 12s00r00           3844 	lcall	_printf_tiny
   0F9A 15 81              3845 	dec	sp
   0F9C 15 81              3846 	dec	sp
                           3847 ;	main.c:374: printf_tiny("\n\n\n\r\t\t\t\t\t******** IO Expander Control Commands ********\n\n\r\t'x'. Reset Counter\t\t\t\t'i'. Configure IO Pins\t\t\t\t's'. Status of IO_Expander");
                           3848 ;	genIpush
   0F9E 74r8F              3849 	mov	a,#__str_6
   0FA0 C0 E0              3850 	push	acc
   0FA2 74s01              3851 	mov	a,#(__str_6 >> 8)
   0FA4 C0 E0              3852 	push	acc
                           3853 ;	genCall
   0FA6 12s00r00           3854 	lcall	_printf_tiny
   0FA9 15 81              3855 	dec	sp
   0FAB 15 81              3856 	dec	sp
                           3857 ;	main.c:375: printf_tiny("\n\n\n\r\t\t\t\t\t******** EEPROM Control Commands ******** \n\n\r\t'w'. EEPROM Write \t\t\t'r'. EEPROM Read \t\t\t\t'h'. HEX Dump\t\n\r\t");
                           3858 ;	genIpush
   0FAD 74r15              3859 	mov	a,#__str_7
   0FAF C0 E0              3860 	push	acc
   0FB1 74s02              3861 	mov	a,#(__str_7 >> 8)
   0FB3 C0 E0              3862 	push	acc
                           3863 ;	genCall
   0FB5 12s00r00           3864 	lcall	_printf_tiny
   0FB8 15 81              3865 	dec	sp
   0FBA 15 81              3866 	dec	sp
                           3867 ;	main.c:376: printf_tiny("\n\n\r\t\t\t\t\t******** Demo Commands ******** \n\n\r\t'y'. Watchdog Demo \t\t\t'9'. LOGO Creation Demo ");
                           3868 ;	genIpush
   0FBC 74r88              3869 	mov	a,#__str_8
   0FBE C0 E0              3870 	push	acc
   0FC0 74s02              3871 	mov	a,#(__str_8 >> 8)
   0FC2 C0 E0              3872 	push	acc
                           3873 ;	genCall
   0FC4 12s00r00           3874 	lcall	_printf_tiny
   0FC7 15 81              3875 	dec	sp
   0FC9 15 81              3876 	dec	sp
   0FCB                    3877 00285$:
                           3878 ;	main.c:379: printf_tiny("\n\n\r\t Press 'm' to see the Menu again or Press Command Key:\t");
                           3879 ;	genIpush
   0FCB 74r83              3880 	mov	a,#__str_55
   0FCD C0 E0              3881 	push	acc
   0FCF 74s0A              3882 	mov	a,#(__str_55 >> 8)
   0FD1 C0 E0              3883 	push	acc
                           3884 ;	genCall
   0FD3 12s00r00           3885 	lcall	_printf_tiny
   0FD6 15 81              3886 	dec	sp
   0FD8 15 81              3887 	dec	sp
   0FDA 02s01rA9           3888 	ljmp	00292$
   0FDD                    3889 00289$:
                           3890 ;	genIfx
                           3891 ;	genIfxJump
   0FDD 30 AF 03           3892 	jnb	_EA,00538$
   0FE0 02s01rA9           3893 	ljmp	00292$
   0FE3                    3894 00538$:
                           3895 ;	main.c:384: WDTPRG |=0x07;
                           3896 ;	genOr
   0FE3 43 A7 07           3897 	orl	_WDTPRG,#0x07
                           3898 ;	main.c:385: WDTRST = 0x01E;
                           3899 ;	genAssign
   0FE6 75 A6 1E           3900 	mov	_WDTRST,#0x1E
                           3901 ;	main.c:386: WDTRST = 0x0E1;
                           3902 ;	genAssign
   0FE9 75 A6 E1           3903 	mov	_WDTRST,#0xE1
   0FEC 02s01rA9           3904 	ljmp	00292$
                           3905 ;	Peephole 259.b	removed redundant label 00310$ and ret
                           3906 ;
                           3907 ;------------------------------------------------------------
                           3908 ;Allocation info for local variables in function 'timer_isr'
                           3909 ;------------------------------------------------------------
                           3910 ;sloc0                     Allocated with name '_timer_isr_sloc0_1_0'
                           3911 ;sloc1                     Allocated with name '_timer_isr_sloc1_1_0'
                           3912 ;i                         Allocated with name '_timer_isr_i_1_1'
                           3913 ;------------------------------------------------------------
                           3914 ;	main.c:399: void timer_isr() interrupt 1
                           3915 ;	-----------------------------------------
                           3916 ;	 function timer_isr
                           3917 ;	-----------------------------------------
   0FEF                    3918 _timer_isr:
   0FEF C0 E0              3919 	push	acc
   0FF1 C0 F0              3920 	push	b
   0FF3 C0 82              3921 	push	dpl
   0FF5 C0 83              3922 	push	dph
   0FF7 C0 02              3923 	push	(0+2)
   0FF9 C0 03              3924 	push	(0+3)
   0FFB C0 04              3925 	push	(0+4)
   0FFD C0 05              3926 	push	(0+5)
   0FFF C0 06              3927 	push	(0+6)
   1001 C0 07              3928 	push	(0+7)
   1003 C0 00              3929 	push	(0+0)
   1005 C0 01              3930 	push	(0+1)
   1007 C0 D0              3931 	push	psw
   1009 75 D0 00           3932 	mov	psw,#0x00
                           3933 ;	main.c:402: flag++;
                           3934 ;	genAssign
   100C 90s00r00           3935 	mov	dptr,#_flag
   100F E0                 3936 	movx	a,@dptr
   1010 FA                 3937 	mov	r2,a
                           3938 ;	genPlus
   1011 90s00r00           3939 	mov	dptr,#_flag
                           3940 ;     genPlusIncr
   1014 74 01              3941 	mov	a,#0x01
                           3942 ;	Peephole 236.a	used r2 instead of ar2
   1016 2A                 3943 	add	a,r2
   1017 F0                 3944 	movx	@dptr,a
                           3945 ;	main.c:403: timers=cnt[0]+cnt[1]+cnt[2];
                           3946 ;	genPointerGet
                           3947 ;	genFarPointerGet
   1018 90s00r03           3948 	mov	dptr,#_cnt
   101B E0                 3949 	movx	a,@dptr
                           3950 ;	genCast
   101C FA                 3951 	mov	r2,a
                           3952 ;	Peephole 105	removed redundant mov
   101D 33                 3953 	rlc	a
   101E 95 E0              3954 	subb	a,acc
   1020 FB                 3955 	mov	r3,a
                           3956 ;	genPointerGet
                           3957 ;	genFarPointerGet
   1021 90s00r04           3958 	mov	dptr,#(_cnt + 0x0001)
   1024 E0                 3959 	movx	a,@dptr
                           3960 ;	genCast
   1025 FC                 3961 	mov	r4,a
                           3962 ;	Peephole 105	removed redundant mov
   1026 33                 3963 	rlc	a
   1027 95 E0              3964 	subb	a,acc
   1029 FD                 3965 	mov	r5,a
                           3966 ;	genPlus
                           3967 ;	Peephole 236.g	used r4 instead of ar4
   102A EC                 3968 	mov	a,r4
                           3969 ;	Peephole 236.a	used r2 instead of ar2
   102B 2A                 3970 	add	a,r2
   102C FA                 3971 	mov	r2,a
                           3972 ;	Peephole 236.g	used r5 instead of ar5
   102D ED                 3973 	mov	a,r5
                           3974 ;	Peephole 236.b	used r3 instead of ar3
   102E 3B                 3975 	addc	a,r3
   102F FB                 3976 	mov	r3,a
                           3977 ;	genPointerGet
                           3978 ;	genFarPointerGet
   1030 90s00r05           3979 	mov	dptr,#(_cnt + 0x0002)
   1033 E0                 3980 	movx	a,@dptr
                           3981 ;	genCast
   1034 FC                 3982 	mov	r4,a
                           3983 ;	Peephole 105	removed redundant mov
   1035 33                 3984 	rlc	a
   1036 95 E0              3985 	subb	a,acc
   1038 FD                 3986 	mov	r5,a
                           3987 ;	genPlus
   1039 90s00r01           3988 	mov	dptr,#_timers
                           3989 ;	Peephole 236.g	used r4 instead of ar4
   103C EC                 3990 	mov	a,r4
                           3991 ;	Peephole 236.a	used r2 instead of ar2
   103D 2A                 3992 	add	a,r2
   103E F0                 3993 	movx	@dptr,a
                           3994 ;	Peephole 236.g	used r5 instead of ar5
   103F ED                 3995 	mov	a,r5
                           3996 ;	Peephole 236.b	used r3 instead of ar3
   1040 3B                 3997 	addc	a,r3
   1041 A3                 3998 	inc	dptr
   1042 F0                 3999 	movx	@dptr,a
                           4000 ;	main.c:405: if(flag==2)
                           4001 ;	genAssign
   1043 90s00r00           4002 	mov	dptr,#_flag
   1046 E0                 4003 	movx	a,@dptr
   1047 FA                 4004 	mov	r2,a
                           4005 ;	genCmpEq
                           4006 ;	gencjneshort
   1048 BA 02 02           4007 	cjne	r2,#0x02,00149$
   104B 80 03              4008 	sjmp	00150$
   104D                    4009 00149$:
   104D 02s12r21           4010 	ljmp	00118$
   1050                    4011 00150$:
                           4012 ;	main.c:408: clock_control();
                           4013 ;	genCall
   1050 12s00r00           4014 	lcall	_clock_control
                           4015 ;	main.c:409: flag=0;
                           4016 ;	genAssign
   1053 90s00r00           4017 	mov	dptr,#_flag
                           4018 ;	Peephole 181	changed mov to clr
   1056 E4                 4019 	clr	a
   1057 F0                 4020 	movx	@dptr,a
                           4021 ;	main.c:411: for(i=0;i<3;i++)
                           4022 ;	genAssign
   1058 7A 00              4023 	mov	r2,#0x00
   105A 7B 00              4024 	mov	r3,#0x00
   105C                    4025 00128$:
                           4026 ;	genCmpLt
                           4027 ;	genCmp
   105C C3                 4028 	clr	c
   105D EA                 4029 	mov	a,r2
   105E 94 03              4030 	subb	a,#0x03
   1060 EB                 4031 	mov	a,r3
   1061 64 80              4032 	xrl	a,#0x80
   1063 94 80              4033 	subb	a,#0x80
                           4034 ;	genIfxJump
   1065 40 03              4035 	jc	00151$
   1067 02s12r21           4036 	ljmp	00118$
   106A                    4037 00151$:
                           4038 ;	main.c:414: if(cnt[i]==1)
                           4039 ;	genPlus
                           4040 ;	Peephole 236.g	used r2 instead of ar2
   106A EA                 4041 	mov	a,r2
   106B 24r03              4042 	add	a,#_cnt
   106D F5 82              4043 	mov	dpl,a
                           4044 ;	Peephole 236.g	used r3 instead of ar3
   106F EB                 4045 	mov	a,r3
   1070 34s00              4046 	addc	a,#(_cnt >> 8)
   1072 F5 83              4047 	mov	dph,a
                           4048 ;	genPointerGet
                           4049 ;	genFarPointerGet
   1074 E0                 4050 	movx	a,@dptr
   1075 FC                 4051 	mov	r4,a
                           4052 ;	genCmpEq
                           4053 ;	gencjneshort
   1076 BC 01 02           4054 	cjne	r4,#0x01,00152$
   1079 80 03              4055 	sjmp	00153$
   107B                    4056 00152$:
   107B 02s12r19           4057 	ljmp	00130$
   107E                    4058 00153$:
                           4059 ;	main.c:417: if(nms[i]==0)
                           4060 ;	genLeftShift
                           4061 ;	genLeftShiftLiteral
                           4062 ;	genlshTwo
   107E 8A 04              4063 	mov	ar4,r2
   1080 EB                 4064 	mov	a,r3
   1081 CC                 4065 	xch	a,r4
   1082 25 E0              4066 	add	a,acc
   1084 CC                 4067 	xch	a,r4
   1085 33                 4068 	rlc	a
   1086 FD                 4069 	mov	r5,a
                           4070 ;	genPlus
                           4071 ;	Peephole 236.g	used r4 instead of ar4
   1087 EC                 4072 	mov	a,r4
   1088 24r06              4073 	add	a,#_nms
   108A FE                 4074 	mov	r6,a
                           4075 ;	Peephole 236.g	used r5 instead of ar5
   108B ED                 4076 	mov	a,r5
   108C 34s00              4077 	addc	a,#(_nms >> 8)
   108E FF                 4078 	mov	r7,a
                           4079 ;	genPointerGet
                           4080 ;	genFarPointerGet
   108F 8E 82              4081 	mov	dpl,r6
   1091 8F 83              4082 	mov	dph,r7
   1093 E0                 4083 	movx	a,@dptr
   1094 F8                 4084 	mov	r0,a
   1095 A3                 4085 	inc	dptr
   1096 E0                 4086 	movx	a,@dptr
                           4087 ;	genIfx
   1097 F9                 4088 	mov	r1,a
                           4089 ;	Peephole 135	removed redundant mov
   1098 48                 4090 	orl	a,r0
                           4091 ;	genIfxJump
                           4092 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1099 70 36              4093 	jnz	00105$
                           4094 ;	Peephole 300	removed redundant label 00154$
                           4095 ;	main.c:419: nms[i]=9;
                           4096 ;	genPointerSet
                           4097 ;     genFarPointerSet
   109B 8E 82              4098 	mov	dpl,r6
   109D 8F 83              4099 	mov	dph,r7
   109F 74 09              4100 	mov	a,#0x09
   10A1 F0                 4101 	movx	@dptr,a
   10A2 A3                 4102 	inc	dptr
                           4103 ;	Peephole 181	changed mov to clr
   10A3 E4                 4104 	clr	a
   10A4 F0                 4105 	movx	@dptr,a
                           4106 ;	main.c:420: if(nsec[i]>0){nsec[i]--;}else{nsec[i]=0;}
                           4107 ;	genPlus
                           4108 ;	Peephole 236.g	used r4 instead of ar4
   10A5 EC                 4109 	mov	a,r4
   10A6 24r0C              4110 	add	a,#_nsec
   10A8 FE                 4111 	mov	r6,a
                           4112 ;	Peephole 236.g	used r5 instead of ar5
   10A9 ED                 4113 	mov	a,r5
   10AA 34s00              4114 	addc	a,#(_nsec >> 8)
   10AC FF                 4115 	mov	r7,a
                           4116 ;	genPointerGet
                           4117 ;	genFarPointerGet
   10AD 8E 82              4118 	mov	dpl,r6
   10AF 8F 83              4119 	mov	dph,r7
   10B1 E0                 4120 	movx	a,@dptr
   10B2 F8                 4121 	mov	r0,a
   10B3 A3                 4122 	inc	dptr
   10B4 E0                 4123 	movx	a,@dptr
                           4124 ;	genIfx
   10B5 F9                 4125 	mov	r1,a
                           4126 ;	Peephole 135	removed redundant mov
   10B6 48                 4127 	orl	a,r0
                           4128 ;	genIfxJump
                           4129 ;	Peephole 108.c	removed ljmp by inverse jump logic
   10B7 60 10              4130 	jz	00102$
                           4131 ;	Peephole 300	removed redundant label 00155$
                           4132 ;	genMinus
                           4133 ;	genMinusDec
   10B9 18                 4134 	dec	r0
   10BA B8 FF 01           4135 	cjne	r0,#0xff,00156$
   10BD 19                 4136 	dec	r1
   10BE                    4137 00156$:
                           4138 ;	genPointerSet
                           4139 ;     genFarPointerSet
   10BE 8E 82              4140 	mov	dpl,r6
   10C0 8F 83              4141 	mov	dph,r7
   10C2 E8                 4142 	mov	a,r0
   10C3 F0                 4143 	movx	@dptr,a
   10C4 A3                 4144 	inc	dptr
   10C5 E9                 4145 	mov	a,r1
   10C6 F0                 4146 	movx	@dptr,a
                           4147 ;	Peephole 112.b	changed ljmp to sjmp
   10C7 80 08              4148 	sjmp	00105$
   10C9                    4149 00102$:
                           4150 ;	genPointerSet
                           4151 ;     genFarPointerSet
   10C9 8E 82              4152 	mov	dpl,r6
   10CB 8F 83              4153 	mov	dph,r7
                           4154 ;	Peephole 181	changed mov to clr
   10CD E4                 4155 	clr	a
   10CE F0                 4156 	movx	@dptr,a
   10CF A3                 4157 	inc	dptr
                           4158 ;	Peephole 101	removed redundant mov
   10D0 F0                 4159 	movx	@dptr,a
   10D1                    4160 00105$:
                           4161 ;	main.c:422: if(nsec[i]==00)
                           4162 ;	genPlus
                           4163 ;	Peephole 236.g	used r4 instead of ar4
   10D1 EC                 4164 	mov	a,r4
   10D2 24r0C              4165 	add	a,#_nsec
   10D4 FE                 4166 	mov	r6,a
                           4167 ;	Peephole 236.g	used r5 instead of ar5
   10D5 ED                 4168 	mov	a,r5
   10D6 34s00              4169 	addc	a,#(_nsec >> 8)
   10D8 FF                 4170 	mov	r7,a
                           4171 ;	genPointerGet
                           4172 ;	genFarPointerGet
   10D9 8E 82              4173 	mov	dpl,r6
   10DB 8F 83              4174 	mov	dph,r7
   10DD E0                 4175 	movx	a,@dptr
   10DE F8                 4176 	mov	r0,a
   10DF A3                 4177 	inc	dptr
   10E0 E0                 4178 	movx	a,@dptr
                           4179 ;	genIfx
   10E1 F9                 4180 	mov	r1,a
                           4181 ;	Peephole 135	removed redundant mov
   10E2 48                 4182 	orl	a,r0
                           4183 ;	genIfxJump
                           4184 ;	Peephole 108.b	removed ljmp by inverse jump logic
   10E3 70 5E              4185 	jnz	00110$
                           4186 ;	Peephole 300	removed redundant label 00157$
                           4187 ;	main.c:424: nsec[i]=59;
                           4188 ;	genPointerSet
                           4189 ;     genFarPointerSet
   10E5 8E 82              4190 	mov	dpl,r6
   10E7 8F 83              4191 	mov	dph,r7
   10E9 74 3B              4192 	mov	a,#0x3B
   10EB F0                 4193 	movx	@dptr,a
   10EC A3                 4194 	inc	dptr
                           4195 ;	Peephole 181	changed mov to clr
   10ED E4                 4196 	clr	a
   10EE F0                 4197 	movx	@dptr,a
                           4198 ;	main.c:425: if(nmi[i]>0){nmi[i]--;}
                           4199 ;	genPlus
                           4200 ;	Peephole 236.g	used r4 instead of ar4
   10EF EC                 4201 	mov	a,r4
   10F0 24r12              4202 	add	a,#_nmi
   10F2 F8                 4203 	mov	r0,a
                           4204 ;	Peephole 236.g	used r5 instead of ar5
   10F3 ED                 4205 	mov	a,r5
   10F4 34s00              4206 	addc	a,#(_nmi >> 8)
   10F6 F9                 4207 	mov	r1,a
                           4208 ;	genPointerGet
                           4209 ;	genFarPointerGet
   10F7 88 82              4210 	mov	dpl,r0
   10F9 89 83              4211 	mov	dph,r1
   10FB E0                 4212 	movx	a,@dptr
   10FC F5*04              4213 	mov	_timer_isr_sloc0_1_0,a
   10FE A3                 4214 	inc	dptr
   10FF E0                 4215 	movx	a,@dptr
   1100 F5*05              4216 	mov	(_timer_isr_sloc0_1_0 + 1),a
                           4217 ;	genIfx
   1102 E5*04              4218 	mov	a,_timer_isr_sloc0_1_0
   1104 45*05              4219 	orl	a,(_timer_isr_sloc0_1_0 + 1)
                           4220 ;	genIfxJump
                           4221 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1106 60 1D              4222 	jz	00107$
                           4223 ;	Peephole 300	removed redundant label 00158$
                           4224 ;	genIpush
   1108 C0 02              4225 	push	ar2
   110A C0 03              4226 	push	ar3
                           4227 ;	genMinus
                           4228 ;	genMinusDec
   110C E5*04              4229 	mov	a,_timer_isr_sloc0_1_0
   110E 24 FF              4230 	add	a,#0xff
   1110 FA                 4231 	mov	r2,a
   1111 E5*05              4232 	mov	a,(_timer_isr_sloc0_1_0 + 1)
   1113 34 FF              4233 	addc	a,#0xff
   1115 FB                 4234 	mov	r3,a
                           4235 ;	genPointerSet
                           4236 ;     genFarPointerSet
   1116 88 82              4237 	mov	dpl,r0
   1118 89 83              4238 	mov	dph,r1
   111A EA                 4239 	mov	a,r2
   111B F0                 4240 	movx	@dptr,a
   111C A3                 4241 	inc	dptr
   111D EB                 4242 	mov	a,r3
   111E F0                 4243 	movx	@dptr,a
                           4244 ;	genIpop
   111F D0 03              4245 	pop	ar3
   1121 D0 02              4246 	pop	ar2
                           4247 ;	Peephole 112.b	changed ljmp to sjmp
   1123 80 1E              4248 	sjmp	00110$
   1125                    4249 00107$:
                           4250 ;	main.c:426: else{nmi[i]=0;nms[i]=0; nsec[i]=0;}
                           4251 ;	genPointerSet
                           4252 ;     genFarPointerSet
   1125 88 82              4253 	mov	dpl,r0
   1127 89 83              4254 	mov	dph,r1
                           4255 ;	Peephole 181	changed mov to clr
   1129 E4                 4256 	clr	a
   112A F0                 4257 	movx	@dptr,a
   112B A3                 4258 	inc	dptr
                           4259 ;	Peephole 101	removed redundant mov
   112C F0                 4260 	movx	@dptr,a
                           4261 ;	genPlus
                           4262 ;	Peephole 236.g	used r4 instead of ar4
   112D EC                 4263 	mov	a,r4
   112E 24r06              4264 	add	a,#_nms
   1130 F5 82              4265 	mov	dpl,a
                           4266 ;	Peephole 236.g	used r5 instead of ar5
   1132 ED                 4267 	mov	a,r5
   1133 34s00              4268 	addc	a,#(_nms >> 8)
   1135 F5 83              4269 	mov	dph,a
                           4270 ;	genPointerSet
                           4271 ;     genFarPointerSet
                           4272 ;	Peephole 181	changed mov to clr
   1137 E4                 4273 	clr	a
   1138 F0                 4274 	movx	@dptr,a
   1139 A3                 4275 	inc	dptr
                           4276 ;	Peephole 101	removed redundant mov
   113A F0                 4277 	movx	@dptr,a
                           4278 ;	genPointerSet
                           4279 ;     genFarPointerSet
   113B 8E 82              4280 	mov	dpl,r6
   113D 8F 83              4281 	mov	dph,r7
                           4282 ;	Peephole 181	changed mov to clr
   113F E4                 4283 	clr	a
   1140 F0                 4284 	movx	@dptr,a
   1141 A3                 4285 	inc	dptr
                           4286 ;	Peephole 101	removed redundant mov
   1142 F0                 4287 	movx	@dptr,a
   1143                    4288 00110$:
                           4289 ;	main.c:428: if(nmi[i]==0 &&nms[i]==0 && nsec[i]==0)
                           4290 ;	genPlus
                           4291 ;	Peephole 236.g	used r4 instead of ar4
   1143 EC                 4292 	mov	a,r4
   1144 24r12              4293 	add	a,#_nmi
   1146 F5 82              4294 	mov	dpl,a
                           4295 ;	Peephole 236.g	used r5 instead of ar5
   1148 ED                 4296 	mov	a,r5
   1149 34s00              4297 	addc	a,#(_nmi >> 8)
   114B F5 83              4298 	mov	dph,a
                           4299 ;	genPointerGet
                           4300 ;	genFarPointerGet
   114D E0                 4301 	movx	a,@dptr
   114E FE                 4302 	mov	r6,a
   114F A3                 4303 	inc	dptr
   1150 E0                 4304 	movx	a,@dptr
                           4305 ;	genIfx
   1151 FF                 4306 	mov	r7,a
                           4307 ;	Peephole 135	removed redundant mov
   1152 4E                 4308 	orl	a,r6
                           4309 ;	genIfxJump
                           4310 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1153 70 30              4311 	jnz	00112$
                           4312 ;	Peephole 300	removed redundant label 00159$
                           4313 ;	genPlus
                           4314 ;	Peephole 236.g	used r4 instead of ar4
   1155 EC                 4315 	mov	a,r4
   1156 24r06              4316 	add	a,#_nms
   1158 F5 82              4317 	mov	dpl,a
                           4318 ;	Peephole 236.g	used r5 instead of ar5
   115A ED                 4319 	mov	a,r5
   115B 34s00              4320 	addc	a,#(_nms >> 8)
   115D F5 83              4321 	mov	dph,a
                           4322 ;	genPointerGet
                           4323 ;	genFarPointerGet
   115F E0                 4324 	movx	a,@dptr
   1160 FE                 4325 	mov	r6,a
   1161 A3                 4326 	inc	dptr
   1162 E0                 4327 	movx	a,@dptr
                           4328 ;	genIfx
   1163 FF                 4329 	mov	r7,a
                           4330 ;	Peephole 135	removed redundant mov
   1164 4E                 4331 	orl	a,r6
                           4332 ;	genIfxJump
                           4333 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1165 70 1E              4334 	jnz	00112$
                           4335 ;	Peephole 300	removed redundant label 00160$
                           4336 ;	genPlus
                           4337 ;	Peephole 236.g	used r4 instead of ar4
   1167 EC                 4338 	mov	a,r4
   1168 24r0C              4339 	add	a,#_nsec
   116A F5 82              4340 	mov	dpl,a
                           4341 ;	Peephole 236.g	used r5 instead of ar5
   116C ED                 4342 	mov	a,r5
   116D 34s00              4343 	addc	a,#(_nsec >> 8)
   116F F5 83              4344 	mov	dph,a
                           4345 ;	genPointerGet
                           4346 ;	genFarPointerGet
   1171 E0                 4347 	movx	a,@dptr
   1172 FE                 4348 	mov	r6,a
   1173 A3                 4349 	inc	dptr
   1174 E0                 4350 	movx	a,@dptr
                           4351 ;	genIfx
   1175 FF                 4352 	mov	r7,a
                           4353 ;	Peephole 135	removed redundant mov
   1176 4E                 4354 	orl	a,r6
                           4355 ;	genIfxJump
                           4356 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1177 70 0C              4357 	jnz	00112$
                           4358 ;	Peephole 300	removed redundant label 00161$
                           4359 ;	main.c:430: cnt[i]=0;
                           4360 ;	genPlus
                           4361 ;	Peephole 236.g	used r2 instead of ar2
   1179 EA                 4362 	mov	a,r2
   117A 24r03              4363 	add	a,#_cnt
   117C F5 82              4364 	mov	dpl,a
                           4365 ;	Peephole 236.g	used r3 instead of ar3
   117E EB                 4366 	mov	a,r3
   117F 34s00              4367 	addc	a,#(_cnt >> 8)
   1181 F5 83              4368 	mov	dph,a
                           4369 ;	genPointerSet
                           4370 ;     genFarPointerSet
                           4371 ;	Peephole 181	changed mov to clr
   1183 E4                 4372 	clr	a
   1184 F0                 4373 	movx	@dptr,a
   1185                    4374 00112$:
                           4375 ;	main.c:432: countdown_alarm(nms[i],nsec[i],nmi[i],cnt[i],i);
                           4376 ;	genPlus
                           4377 ;	Peephole 236.g	used r4 instead of ar4
   1185 EC                 4378 	mov	a,r4
   1186 24r06              4379 	add	a,#_nms
   1188 F5 82              4380 	mov	dpl,a
                           4381 ;	Peephole 236.g	used r5 instead of ar5
   118A ED                 4382 	mov	a,r5
   118B 34s00              4383 	addc	a,#(_nms >> 8)
   118D F5 83              4384 	mov	dph,a
                           4385 ;	genPointerGet
                           4386 ;	genFarPointerGet
   118F E0                 4387 	movx	a,@dptr
   1190 FE                 4388 	mov	r6,a
   1191 A3                 4389 	inc	dptr
   1192 E0                 4390 	movx	a,@dptr
   1193 FF                 4391 	mov	r7,a
                           4392 ;	genPlus
                           4393 ;	Peephole 236.g	used r4 instead of ar4
   1194 EC                 4394 	mov	a,r4
   1195 24r0C              4395 	add	a,#_nsec
   1197 F5 82              4396 	mov	dpl,a
                           4397 ;	Peephole 236.g	used r5 instead of ar5
   1199 ED                 4398 	mov	a,r5
   119A 34s00              4399 	addc	a,#(_nsec >> 8)
   119C F5 83              4400 	mov	dph,a
                           4401 ;	genPointerGet
                           4402 ;	genFarPointerGet
   119E E0                 4403 	movx	a,@dptr
   119F F5*04              4404 	mov	_timer_isr_sloc0_1_0,a
   11A1 A3                 4405 	inc	dptr
   11A2 E0                 4406 	movx	a,@dptr
   11A3 F5*05              4407 	mov	(_timer_isr_sloc0_1_0 + 1),a
                           4408 ;	genPlus
                           4409 ;	Peephole 236.g	used r4 instead of ar4
   11A5 EC                 4410 	mov	a,r4
   11A6 24r12              4411 	add	a,#_nmi
   11A8 F5 82              4412 	mov	dpl,a
                           4413 ;	Peephole 236.g	used r5 instead of ar5
   11AA ED                 4414 	mov	a,r5
   11AB 34s00              4415 	addc	a,#(_nmi >> 8)
   11AD F5 83              4416 	mov	dph,a
                           4417 ;	genPointerGet
                           4418 ;	genFarPointerGet
   11AF E0                 4419 	movx	a,@dptr
   11B0 F5*06              4420 	mov	_timer_isr_sloc1_1_0,a
   11B2 A3                 4421 	inc	dptr
   11B3 E0                 4422 	movx	a,@dptr
   11B4 F5*07              4423 	mov	(_timer_isr_sloc1_1_0 + 1),a
                           4424 ;	genPlus
                           4425 ;	Peephole 236.g	used r2 instead of ar2
   11B6 EA                 4426 	mov	a,r2
   11B7 24r03              4427 	add	a,#_cnt
   11B9 F5 82              4428 	mov	dpl,a
                           4429 ;	Peephole 236.g	used r3 instead of ar3
   11BB EB                 4430 	mov	a,r3
   11BC 34s00              4431 	addc	a,#(_cnt >> 8)
   11BE F5 83              4432 	mov	dph,a
                           4433 ;	genPointerGet
                           4434 ;	genFarPointerGet
   11C0 E0                 4435 	movx	a,@dptr
   11C1 F8                 4436 	mov	r0,a
                           4437 ;	genAssign
   11C2 90s00r00           4438 	mov	dptr,#_countdown_alarm_PARM_2
   11C5 E5*04              4439 	mov	a,_timer_isr_sloc0_1_0
   11C7 F0                 4440 	movx	@dptr,a
   11C8 A3                 4441 	inc	dptr
   11C9 E5*05              4442 	mov	a,(_timer_isr_sloc0_1_0 + 1)
   11CB F0                 4443 	movx	@dptr,a
                           4444 ;	genAssign
   11CC 90s00r00           4445 	mov	dptr,#_countdown_alarm_PARM_3
   11CF E5*06              4446 	mov	a,_timer_isr_sloc1_1_0
   11D1 F0                 4447 	movx	@dptr,a
   11D2 A3                 4448 	inc	dptr
   11D3 E5*07              4449 	mov	a,(_timer_isr_sloc1_1_0 + 1)
   11D5 F0                 4450 	movx	@dptr,a
                           4451 ;	genAssign
   11D6 90s00r00           4452 	mov	dptr,#_countdown_alarm_PARM_4
   11D9 E8                 4453 	mov	a,r0
   11DA F0                 4454 	movx	@dptr,a
                           4455 ;	genAssign
   11DB 90s00r00           4456 	mov	dptr,#_countdown_alarm_PARM_5
   11DE EA                 4457 	mov	a,r2
   11DF F0                 4458 	movx	@dptr,a
   11E0 A3                 4459 	inc	dptr
   11E1 EB                 4460 	mov	a,r3
   11E2 F0                 4461 	movx	@dptr,a
                           4462 ;	genCall
   11E3 8E 82              4463 	mov	dpl,r6
   11E5 8F 83              4464 	mov	dph,r7
   11E7 C0 02              4465 	push	ar2
   11E9 C0 03              4466 	push	ar3
   11EB C0 04              4467 	push	ar4
   11ED C0 05              4468 	push	ar5
   11EF 12s00r00           4469 	lcall	_countdown_alarm
   11F2 D0 05              4470 	pop	ar5
   11F4 D0 04              4471 	pop	ar4
   11F6 D0 03              4472 	pop	ar3
   11F8 D0 02              4473 	pop	ar2
                           4474 ;	main.c:434: nms[i]--;
                           4475 ;	genPlus
                           4476 ;	Peephole 236.g	used r4 instead of ar4
   11FA EC                 4477 	mov	a,r4
   11FB 24r06              4478 	add	a,#_nms
   11FD FC                 4479 	mov	r4,a
                           4480 ;	Peephole 236.g	used r5 instead of ar5
   11FE ED                 4481 	mov	a,r5
   11FF 34s00              4482 	addc	a,#(_nms >> 8)
   1201 FD                 4483 	mov	r5,a
                           4484 ;	genPointerGet
                           4485 ;	genFarPointerGet
   1202 8C 82              4486 	mov	dpl,r4
   1204 8D 83              4487 	mov	dph,r5
   1206 E0                 4488 	movx	a,@dptr
   1207 FE                 4489 	mov	r6,a
   1208 A3                 4490 	inc	dptr
   1209 E0                 4491 	movx	a,@dptr
   120A FF                 4492 	mov	r7,a
                           4493 ;	genMinus
                           4494 ;	genMinusDec
   120B 1E                 4495 	dec	r6
   120C BE FF 01           4496 	cjne	r6,#0xff,00162$
   120F 1F                 4497 	dec	r7
   1210                    4498 00162$:
                           4499 ;	genPointerSet
                           4500 ;     genFarPointerSet
   1210 8C 82              4501 	mov	dpl,r4
   1212 8D 83              4502 	mov	dph,r5
   1214 EE                 4503 	mov	a,r6
   1215 F0                 4504 	movx	@dptr,a
   1216 A3                 4505 	inc	dptr
   1217 EF                 4506 	mov	a,r7
   1218 F0                 4507 	movx	@dptr,a
   1219                    4508 00130$:
                           4509 ;	main.c:411: for(i=0;i<3;i++)
                           4510 ;	genPlus
                           4511 ;     genPlusIncr
   1219 0A                 4512 	inc	r2
   121A BA 00 01           4513 	cjne	r2,#0x00,00163$
   121D 0B                 4514 	inc	r3
   121E                    4515 00163$:
   121E 02s10r5C           4516 	ljmp	00128$
   1221                    4517 00118$:
                           4518 ;	main.c:440: if(timers==3)
                           4519 ;	genAssign
   1221 90s00r01           4520 	mov	dptr,#_timers
   1224 E0                 4521 	movx	a,@dptr
   1225 FA                 4522 	mov	r2,a
   1226 A3                 4523 	inc	dptr
   1227 E0                 4524 	movx	a,@dptr
   1228 FB                 4525 	mov	r3,a
                           4526 ;	genCmpEq
                           4527 ;	gencjneshort
                           4528 ;	Peephole 112.b	changed ljmp to sjmp
                           4529 ;	Peephole 198.a	optimized misc jump sequence
   1229 BA 03 0B           4530 	cjne	r2,#0x03,00126$
   122C BB 00 08           4531 	cjne	r3,#0x00,00126$
                           4532 ;	Peephole 200.b	removed redundant sjmp
                           4533 ;	Peephole 300	removed redundant label 00164$
                           4534 ;	Peephole 300	removed redundant label 00165$
                           4535 ;	main.c:441: {TH0 =   0xBF; TL0 =   0x75;}
                           4536 ;	genAssign
   122F 75 8C BF           4537 	mov	_TH0,#0xBF
                           4538 ;	genAssign
   1232 75 8A 75           4539 	mov	_TL0,#0x75
                           4540 ;	Peephole 112.b	changed ljmp to sjmp
   1235 80 22              4541 	sjmp	00132$
   1237                    4542 00126$:
                           4543 ;	main.c:442: else if(timers==2){TH0 =   0xB5; TL0 =   0x00;}
                           4544 ;	genCmpEq
                           4545 ;	gencjneshort
                           4546 ;	Peephole 112.b	changed ljmp to sjmp
                           4547 ;	Peephole 198.a	optimized misc jump sequence
   1237 BA 02 0B           4548 	cjne	r2,#0x02,00123$
   123A BB 00 08           4549 	cjne	r3,#0x00,00123$
                           4550 ;	Peephole 200.b	removed redundant sjmp
                           4551 ;	Peephole 300	removed redundant label 00166$
                           4552 ;	Peephole 300	removed redundant label 00167$
                           4553 ;	genAssign
   123D 75 8C B5           4554 	mov	_TH0,#0xB5
                           4555 ;	genAssign
   1240 75 8A 00           4556 	mov	_TL0,#0x00
                           4557 ;	Peephole 112.b	changed ljmp to sjmp
   1243 80 14              4558 	sjmp	00132$
   1245                    4559 00123$:
                           4560 ;	main.c:443: else if(timers==1){TH0 =   0x90;  TL0 =   0x00;}
                           4561 ;	genCmpEq
                           4562 ;	gencjneshort
                           4563 ;	Peephole 112.b	changed ljmp to sjmp
                           4564 ;	Peephole 198.a	optimized misc jump sequence
   1245 BA 01 0B           4565 	cjne	r2,#0x01,00120$
   1248 BB 00 08           4566 	cjne	r3,#0x00,00120$
                           4567 ;	Peephole 200.b	removed redundant sjmp
                           4568 ;	Peephole 300	removed redundant label 00168$
                           4569 ;	Peephole 300	removed redundant label 00169$
                           4570 ;	genAssign
   124B 75 8C 90           4571 	mov	_TH0,#0x90
                           4572 ;	genAssign
   124E 75 8A 00           4573 	mov	_TL0,#0x00
                           4574 ;	Peephole 112.b	changed ljmp to sjmp
   1251 80 06              4575 	sjmp	00132$
   1253                    4576 00120$:
                           4577 ;	main.c:446: TH0 =   0x6F;
                           4578 ;	genAssign
   1253 75 8C 6F           4579 	mov	_TH0,#0x6F
                           4580 ;	main.c:447: TL0 =   0x00;
                           4581 ;	genAssign
   1256 75 8A 00           4582 	mov	_TL0,#0x00
   1259                    4583 00132$:
   1259 D0 D0              4584 	pop	psw
   125B D0 01              4585 	pop	(0+1)
   125D D0 00              4586 	pop	(0+0)
   125F D0 07              4587 	pop	(0+7)
   1261 D0 06              4588 	pop	(0+6)
   1263 D0 05              4589 	pop	(0+5)
   1265 D0 04              4590 	pop	(0+4)
   1267 D0 03              4591 	pop	(0+3)
   1269 D0 02              4592 	pop	(0+2)
   126B D0 83              4593 	pop	dph
   126D D0 82              4594 	pop	dpl
   126F D0 F0              4595 	pop	b
   1271 D0 E0              4596 	pop	acc
   1273 32                 4597 	reti
                           4598 ;------------------------------------------------------------
                           4599 ;Allocation info for local variables in function 'ext_zero'
                           4600 ;------------------------------------------------------------
                           4601 ;------------------------------------------------------------
                           4602 ;	main.c:455: void ext_zero() interrupt 0
                           4603 ;	-----------------------------------------
                           4604 ;	 function ext_zero
                           4605 ;	-----------------------------------------
   1274                    4606 _ext_zero:
   1274 C0 E0              4607 	push	acc
   1276 C0 F0              4608 	push	b
   1278 C0 82              4609 	push	dpl
   127A C0 83              4610 	push	dph
   127C C0 02              4611 	push	(0+2)
   127E C0 03              4612 	push	(0+3)
   1280 C0 04              4613 	push	(0+4)
   1282 C0 05              4614 	push	(0+5)
   1284 C0 06              4615 	push	(0+6)
   1286 C0 07              4616 	push	(0+7)
   1288 C0 00              4617 	push	(0+0)
   128A C0 01              4618 	push	(0+1)
   128C C0 D0              4619 	push	psw
   128E 75 D0 00           4620 	mov	psw,#0x00
                           4621 ;	main.c:458: io_counter++;
                           4622 ;	genAssign
   1291 90s00r18           4623 	mov	dptr,#_io_counter
   1294 E0                 4624 	movx	a,@dptr
   1295 FA                 4625 	mov	r2,a
   1296 A3                 4626 	inc	dptr
   1297 E0                 4627 	movx	a,@dptr
   1298 FB                 4628 	mov	r3,a
                           4629 ;	genPlus
   1299 90s00r18           4630 	mov	dptr,#_io_counter
                           4631 ;     genPlusIncr
   129C 74 01              4632 	mov	a,#0x01
                           4633 ;	Peephole 236.a	used r2 instead of ar2
   129E 2A                 4634 	add	a,r2
   129F F0                 4635 	movx	@dptr,a
                           4636 ;	Peephole 181	changed mov to clr
   12A0 E4                 4637 	clr	a
                           4638 ;	Peephole 236.b	used r3 instead of ar3
   12A1 3B                 4639 	addc	a,r3
   12A2 A3                 4640 	inc	dptr
   12A3 F0                 4641 	movx	@dptr,a
                           4642 ;	main.c:459: if(io_counter==32)
                           4643 ;	genAssign
   12A4 90s00r18           4644 	mov	dptr,#_io_counter
   12A7 E0                 4645 	movx	a,@dptr
   12A8 FA                 4646 	mov	r2,a
   12A9 A3                 4647 	inc	dptr
   12AA E0                 4648 	movx	a,@dptr
   12AB FB                 4649 	mov	r3,a
                           4650 ;	genCmpEq
                           4651 ;	gencjneshort
                           4652 ;	Peephole 112.b	changed ljmp to sjmp
                           4653 ;	Peephole 198.a	optimized misc jump sequence
   12AC BA 20 0A           4654 	cjne	r2,#0x20,00102$
   12AF BB 00 07           4655 	cjne	r3,#0x00,00102$
                           4656 ;	Peephole 200.b	removed redundant sjmp
                           4657 ;	Peephole 300	removed redundant label 00109$
                           4658 ;	Peephole 300	removed redundant label 00110$
                           4659 ;	main.c:461: io_counter=0;
                           4660 ;	genAssign
   12B2 90s00r18           4661 	mov	dptr,#_io_counter
   12B5 E4                 4662 	clr	a
   12B6 F0                 4663 	movx	@dptr,a
   12B7 A3                 4664 	inc	dptr
   12B8 F0                 4665 	movx	@dptr,a
   12B9                    4666 00102$:
                           4667 ;	main.c:463: if(io_counter%2==0){io_cnt(io_counter/2);}
                           4668 ;	genAssign
   12B9 90s00r18           4669 	mov	dptr,#_io_counter
   12BC E0                 4670 	movx	a,@dptr
   12BD FA                 4671 	mov	r2,a
   12BE A3                 4672 	inc	dptr
   12BF E0                 4673 	movx	a,@dptr
   12C0 FB                 4674 	mov	r3,a
                           4675 ;	genAnd
   12C1 EA                 4676 	mov	a,r2
                           4677 ;	genIfxJump
                           4678 ;	Peephole 108.e	removed ljmp by inverse jump logic
   12C2 20 E0 0E           4679 	jb	acc.0,00105$
                           4680 ;	Peephole 300	removed redundant label 00111$
                           4681 ;	genRightShift
                           4682 ;	genRightShiftLiteral
                           4683 ;	genrshTwo
   12C5 EB                 4684 	mov	a,r3
   12C6 C3                 4685 	clr	c
   12C7 13                 4686 	rrc	a
   12C8 CA                 4687 	xch	a,r2
   12C9 13                 4688 	rrc	a
   12CA CA                 4689 	xch	a,r2
   12CB FB                 4690 	mov	r3,a
                           4691 ;	genCall
   12CC 8A 82              4692 	mov	dpl,r2
   12CE 8B 83              4693 	mov	dph,r3
   12D0 12s00r00           4694 	lcall	_io_cnt
   12D3                    4695 00105$:
   12D3 D0 D0              4696 	pop	psw
   12D5 D0 01              4697 	pop	(0+1)
   12D7 D0 00              4698 	pop	(0+0)
   12D9 D0 07              4699 	pop	(0+7)
   12DB D0 06              4700 	pop	(0+6)
   12DD D0 05              4701 	pop	(0+5)
   12DF D0 04              4702 	pop	(0+4)
   12E1 D0 03              4703 	pop	(0+3)
   12E3 D0 02              4704 	pop	(0+2)
   12E5 D0 83              4705 	pop	dph
   12E7 D0 82              4706 	pop	dpl
   12E9 D0 F0              4707 	pop	b
   12EB D0 E0              4708 	pop	acc
   12ED 32                 4709 	reti
                           4710 	.area CSEG    (CODE)
                           4711 	.area CONST   (CODE)
   0000                    4712 __str_1:
   0000 43 6F 75 6E 74 2D  4713 	.ascii "Count-0"
        30
   0007 00                 4714 	.db 0x00
   0008                    4715 __str_2:
   0008 54 69 6D 65 72     4716 	.ascii "Timer"
   000D 00                 4717 	.db 0x00
   000E                    4718 __str_3:
   000E 2D 44              4719 	.ascii "-D"
   0010 00                 4720 	.db 0x00
   0011                    4721 __str_4:
   0011 0A                 4722 	.db 0x0A
   0012 0A                 4723 	.db 0x0A
   0013 0D                 4724 	.db 0x0D
   0014 09                 4725 	.db 0x09
   0015 09                 4726 	.db 0x09
   0016 09                 4727 	.db 0x09
   0017 09                 4728 	.db 0x09
   0018 09                 4729 	.db 0x09
   0019 2A 2A 2A 2A 2A 2A  4730 	.ascii "******** Clock Control Commands ********"
        2A 2A 20 43 6C 6F
        63 6B 20 43 6F 6E
        74 72 6F 6C 20 43
        6F 6D 6D 61 6E 64
        73 20 2A 2A 2A 2A
        2A 2A 2A 2A
   0041 0A                 4731 	.db 0x0A
   0042 0A                 4732 	.db 0x0A
   0043 0D                 4733 	.db 0x0D
   0044 09                 4734 	.db 0x09
   0045 31 2E 20 53 74 6F  4735 	.ascii "1. Stop "
        70 20
   004D 43 6C 6F 63 6B 20  4736 	.ascii "Clock "
   0053 09                 4737 	.db 0x09
   0054 09                 4738 	.db 0x09
   0055 09                 4739 	.db 0x09
   0056 09                 4740 	.db 0x09
   0057 09                 4741 	.db 0x09
   0058 09                 4742 	.db 0x09
   0059 32 2E 20 52 65 73  4743 	.ascii "2. Restart Clock "
        74 61 72 74 20 43
        6C 6F 63 6B 20
   006A 09                 4744 	.db 0x09
   006B 09                 4745 	.db 0x09
   006C 09                 4746 	.db 0x09
   006D 33 2E 20 52 65 73  4747 	.ascii "3. Reset Clock"
        65 74 20 43 6C 6F
        63 6B
   007B 0A                 4748 	.db 0x0A
   007C 0D                 4749 	.db 0x0D
   007D 09                 4750 	.db 0x09
   007E 34 2E 20 53 65 6C  4751 	.ascii "4. Select C"
        65 63 74 20 43
   0089 6F 75 6E 74 2D 44  4752 	.ascii "ount-Down Timer and Value "
        6F 77 6E 20 54 69
        6D 65 72 20 61 6E
        64 20 56 61 6C 75
        65 20
   00A3 09                 4753 	.db 0x09
   00A4 09                 4754 	.db 0x09
   00A5 09                 4755 	.db 0x09
   00A6 35 2E 20 54 69 6D  4756 	.ascii "5. Timer Enable "
        65 72 20 45 6E 61
        62 6C 65 20
   00B6 09                 4757 	.db 0x09
   00B7 09                 4758 	.db 0x09
   00B8 09                 4759 	.db 0x09
   00B9 36 2E 20 54 69 6D  4760 	.ascii "6. Timer Dis"
        65 72 20 44 69 73
   00C5 61 62 6C 65 20     4761 	.ascii "able "
   00CA 00                 4762 	.db 0x00
   00CB                    4763 __str_5:
   00CB 0A                 4764 	.db 0x0A
   00CC 0A                 4765 	.db 0x0A
   00CD 0A                 4766 	.db 0x0A
   00CE 0D                 4767 	.db 0x0D
   00CF 09                 4768 	.db 0x09
   00D0 09                 4769 	.db 0x09
   00D1 09                 4770 	.db 0x09
   00D2 09                 4771 	.db 0x09
   00D3 09                 4772 	.db 0x09
   00D4 2A 2A 2A 2A 2A 2A  4773 	.ascii "******** LCD Commands ********"
        2A 2A 20 4C 43 44
        20 43 6F 6D 6D 61
        6E 64 73 20 2A 2A
        2A 2A 2A 2A 2A 2A
   00F2 0A                 4774 	.db 0x0A
   00F3 0A                 4775 	.db 0x0A
   00F4 0D                 4776 	.db 0x0D
   00F5 09                 4777 	.db 0x09
   00F6 37 2E 20 43 72 65  4778 	.ascii "7. Create Custom "
        61 74 65 20 43 75
        73 74 6F 6D 20
   0107 43 68 61 72 61 63  4779 	.ascii "Character"
        74 65 72
   0110 09                 4780 	.db 0x09
   0111 09                 4781 	.db 0x09
   0112 09                 4782 	.db 0x09
   0113 38 2E 20 44 69 73  4783 	.ascii "8. Display Custom Character"
        70 6C 61 79 20 43
        75 73 74 6F 6D 20
        43 68 61 72 61 63
        74 65 72
   012E 09                 4784 	.db 0x09
   012F 09                 4785 	.db 0x09
   0130 09                 4786 	.db 0x09
   0131 27 63 27 2E 20 43  4787 	.ascii "'c'. CGRAM Dump"
        47 52 41 4D 20 44
        75 6D 70
   0140 09                 4788 	.db 0x09
   0141 09                 4789 	.db 0x09
   0142 09                 4790 	.db 0x09
   0143 27 64 27 2E 20 44  4791 	.ascii "'d'. DDRAM Dump"
        44 52 41 4D 20 44
        75 6D 70
   0152 0A                 4792 	.db 0x0A
   0153 0D                 4793 	.db 0x0D
   0154 09                 4794 	.db 0x09
   0155 27 6C 27 2E 45 45  4795 	.ascii "'l'.EEPROM Content on LCD Display"
        50 52 4F 4D 20 43
        6F 6E 74 65 6E 74
        20 6F 6E 20 4C 43
        44 20 44 69 73 70
        6C 61 79
   0176 09                 4796 	.db 0x09
   0177 09                 4797 	.db 0x09
   0178 27 71 27 2E 20 43  4798 	.ascii "'q'. Cl"
        6C
   017F 65 61 72 20 4C 43  4799 	.ascii "ear LCD Display"
        44 20 44 69 73 70
        6C 61 79
   018E 00                 4800 	.db 0x00
   018F                    4801 __str_6:
   018F 0A                 4802 	.db 0x0A
   0190 0A                 4803 	.db 0x0A
   0191 0A                 4804 	.db 0x0A
   0192 0D                 4805 	.db 0x0D
   0193 09                 4806 	.db 0x09
   0194 09                 4807 	.db 0x09
   0195 09                 4808 	.db 0x09
   0196 09                 4809 	.db 0x09
   0197 09                 4810 	.db 0x09
   0198 2A 2A 2A 2A 2A 2A  4811 	.ascii "******** IO Expander Control Commands ********"
        2A 2A 20 49 4F 20
        45 78 70 61 6E 64
        65 72 20 43 6F 6E
        74 72 6F 6C 20 43
        6F 6D 6D 61 6E 64
        73 20 2A 2A 2A 2A
        2A 2A 2A 2A
   01C6 0A                 4812 	.db 0x0A
   01C7 0A                 4813 	.db 0x0A
   01C8 0D                 4814 	.db 0x0D
   01C9 09                 4815 	.db 0x09
   01CA 27                 4816 	.ascii "'"
   01CB 78 27 2E 20 52 65  4817 	.ascii "x'. Reset Counter"
        73 65 74 20 43 6F
        75 6E 74 65 72
   01DC 09                 4818 	.db 0x09
   01DD 09                 4819 	.db 0x09
   01DE 09                 4820 	.db 0x09
   01DF 09                 4821 	.db 0x09
   01E0 27 69 27 2E 20 43  4822 	.ascii "'i'. Configure IO Pins"
        6F 6E 66 69 67 75
        72 65 20 49 4F 20
        50 69 6E 73
   01F6 09                 4823 	.db 0x09
   01F7 09                 4824 	.db 0x09
   01F8 09                 4825 	.db 0x09
   01F9 09                 4826 	.db 0x09
   01FA 27 73 27 2E 20 53  4827 	.ascii "'s'. Status o"
        74 61 74 75 73 20
        6F
   0207 66 20 49 4F 5F 45  4828 	.ascii "f IO_Expander"
        78 70 61 6E 64 65
        72
   0214 00                 4829 	.db 0x00
   0215                    4830 __str_7:
   0215 0A                 4831 	.db 0x0A
   0216 0A                 4832 	.db 0x0A
   0217 0A                 4833 	.db 0x0A
   0218 0D                 4834 	.db 0x0D
   0219 09                 4835 	.db 0x09
   021A 09                 4836 	.db 0x09
   021B 09                 4837 	.db 0x09
   021C 09                 4838 	.db 0x09
   021D 09                 4839 	.db 0x09
   021E 2A 2A 2A 2A 2A 2A  4840 	.ascii "******** EEPROM Control Commands ******** "
        2A 2A 20 45 45 50
        52 4F 4D 20 43 6F
        6E 74 72 6F 6C 20
        43 6F 6D 6D 61 6E
        64 73 20 2A 2A 2A
        2A 2A 2A 2A 2A 20
   0248 0A                 4841 	.db 0x0A
   0249 0A                 4842 	.db 0x0A
   024A 0D                 4843 	.db 0x0D
   024B 09                 4844 	.db 0x09
   024C 27 77 27 2E 20     4845 	.ascii "'w'. "
   0251 45 45 50 52 4F 4D  4846 	.ascii "EEPROM Write "
        20 57 72 69 74 65
        20
   025E 09                 4847 	.db 0x09
   025F 09                 4848 	.db 0x09
   0260 09                 4849 	.db 0x09
   0261 27 72 27 2E 20 45  4850 	.ascii "'r'. EEPROM Read "
        45 50 52 4F 4D 20
        52 65 61 64 20
   0272 09                 4851 	.db 0x09
   0273 09                 4852 	.db 0x09
   0274 09                 4853 	.db 0x09
   0275 09                 4854 	.db 0x09
   0276 27 68 27 2E 20 48  4855 	.ascii "'h'. HEX Dump"
        45 58 20 44 75 6D
        70
   0283 09                 4856 	.db 0x09
   0284 0A                 4857 	.db 0x0A
   0285 0D                 4858 	.db 0x0D
   0286 09                 4859 	.db 0x09
   0287 00                 4860 	.db 0x00
   0288                    4861 __str_8:
   0288 0A                 4862 	.db 0x0A
   0289 0A                 4863 	.db 0x0A
   028A 0D                 4864 	.db 0x0D
   028B 09                 4865 	.db 0x09
   028C 09                 4866 	.db 0x09
   028D 09                 4867 	.db 0x09
   028E 09                 4868 	.db 0x09
   028F 09                 4869 	.db 0x09
   0290 2A 2A 2A 2A 2A 2A  4870 	.ascii "******** Demo Commands ******** "
        2A 2A 20 44 65 6D
        6F 20 43 6F 6D 6D
        61 6E 64 73 20 2A
        2A 2A 2A 2A 2A 2A
        2A 20
   02B0 0A                 4871 	.db 0x0A
   02B1 0A                 4872 	.db 0x0A
   02B2 0D                 4873 	.db 0x0D
   02B3 09                 4874 	.db 0x09
   02B4 27 79 27 2E 20 57  4875 	.ascii "'y'. Watchdog De"
        61 74 63 68 64 6F
        67 20 44 65
   02C4 6D 6F 20           4876 	.ascii "mo "
   02C7 09                 4877 	.db 0x09
   02C8 09                 4878 	.db 0x09
   02C9 09                 4879 	.db 0x09
   02CA 27 39 27 2E 20 4C  4880 	.ascii "'9'. LOGO Creation Demo "
        4F 47 4F 20 43 72
        65 61 74 69 6F 6E
        20 44 65 6D 6F 20
   02E2 00                 4881 	.db 0x00
   02E3                    4882 __str_9:
   02E3 0A                 4883 	.db 0x0A
   02E4 0A                 4884 	.db 0x0A
   02E5 0D                 4885 	.db 0x0D
   02E6 09                 4886 	.db 0x09
   02E7 09                 4887 	.db 0x09
   02E8 20 2A 2A 2A 2A 2A  4888 	.ascii " ******  Stop Clock  *****"
        2A 20 20 53 74 6F
        70 20 43 6C 6F 63
        6B 20 20 2A 2A 2A
        2A 2A
   0302 00                 4889 	.db 0x00
   0303                    4890 __str_10:
   0303 0A                 4891 	.db 0x0A
   0304 0A                 4892 	.db 0x0A
   0305 0D                 4893 	.db 0x0D
   0306 09                 4894 	.db 0x09
   0307 09                 4895 	.db 0x09
   0308 20 2A 2A 2A 2A 2A  4896 	.ascii " ******  Restart Clock  ******"
        2A 20 20 52 65 73
        74 61 72 74 20 43
        6C 6F 63 6B 20 20
        2A 2A 2A 2A 2A 2A
   0326 00                 4897 	.db 0x00
   0327                    4898 __str_11:
   0327 0A                 4899 	.db 0x0A
   0328 0A                 4900 	.db 0x0A
   0329 0D                 4901 	.db 0x0D
   032A 09                 4902 	.db 0x09
   032B 09                 4903 	.db 0x09
   032C 20 2A 2A 2A 2A 2A  4904 	.ascii " ******  Reset Clock  ******"
        2A 20 20 52 65 73
        65 74 20 43 6C 6F
        63 6B 20 20 2A 2A
        2A 2A 2A 2A
   0348 00                 4905 	.db 0x00
   0349                    4906 __str_12:
   0349 0A                 4907 	.db 0x0A
   034A 0A                 4908 	.db 0x0A
   034B 0D                 4909 	.db 0x0D
   034C 09                 4910 	.db 0x09
   034D 09                 4911 	.db 0x09
   034E 20 2A 2A 2A 2A 2A  4912 	.ascii " ******  Load Counter Value ******"
        2A 20 20 4C 6F 61
        64 20 43 6F 75 6E
        74 65 72 20 56 61
        6C 75 65 20 2A 2A
        2A 2A 2A 2A
   0370 00                 4913 	.db 0x00
   0371                    4914 __str_13:
   0371 0A                 4915 	.db 0x0A
   0372 0A                 4916 	.db 0x0A
   0373 0D                 4917 	.db 0x0D
   0374 09                 4918 	.db 0x09
   0375 09                 4919 	.db 0x09
   0376 20 2A 2A 2A 2A 2A  4920 	.ascii " ******  Timer Enable  ******"
        2A 20 20 54 69 6D
        65 72 20 45 6E 61
        62 6C 65 20 20 2A
        2A 2A 2A 2A 2A
   0393 00                 4921 	.db 0x00
   0394                    4922 __str_14:
   0394 0A                 4923 	.db 0x0A
   0395 0A                 4924 	.db 0x0A
   0396 0D                 4925 	.db 0x0D
   0397 09                 4926 	.db 0x09
   0398 09                 4927 	.db 0x09
   0399 20 2A 2A 2A 2A 2A  4928 	.ascii " ******  Timer Disable  ******"
        2A 20 20 54 69 6D
        65 72 20 44 69 73
        61 62 6C 65 20 20
        2A 2A 2A 2A 2A 2A
   03B7 00                 4929 	.db 0x00
   03B8                    4930 __str_15:
   03B8 0A                 4931 	.db 0x0A
   03B9 0A                 4932 	.db 0x0A
   03BA 0D                 4933 	.db 0x0D
   03BB 09                 4934 	.db 0x09
   03BC 09                 4935 	.db 0x09
   03BD 20 2A 2A 2A 2A 2A  4936 	.ascii " ******  Custom Character  ******"
        2A 20 20 43 75 73
        74 6F 6D 20 43 68
        61 72 61 63 74 65
        72 20 20 2A 2A 2A
        2A 2A 2A
   03DE 00                 4937 	.db 0x00
   03DF                    4938 __str_16:
   03DF 0A                 4939 	.db 0x0A
   03E0 0A                 4940 	.db 0x0A
   03E1 0D                 4941 	.db 0x0D
   03E2 09                 4942 	.db 0x09
   03E3 09                 4943 	.db 0x09
   03E4 20 2A 2A 2A 2A 2A  4944 	.ascii " ******  Reset Counter  ******"
        2A 20 20 52 65 73
        65 74 20 43 6F 75
        6E 74 65 72 20 20
        2A 2A 2A 2A 2A 2A
   0402 00                 4945 	.db 0x00
   0403                    4946 __str_17:
   0403 0A                 4947 	.db 0x0A
   0404 0A                 4948 	.db 0x0A
   0405 0D                 4949 	.db 0x0D
   0406 09                 4950 	.db 0x09
   0407 09                 4951 	.db 0x09
   0408 20 2A 2A 2A 2A 2A  4952 	.ascii " ******  Configure IO Pins  ******"
        2A 20 20 43 6F 6E
        66 69 67 75 72 65
        20 49 4F 20 50 69
        6E 73 20 20 2A 2A
        2A 2A 2A 2A
   042A 00                 4953 	.db 0x00
   042B                    4954 __str_18:
   042B 0A                 4955 	.db 0x0A
   042C 0A                 4956 	.db 0x0A
   042D 0D                 4957 	.db 0x0D
   042E 09                 4958 	.db 0x09
   042F 09                 4959 	.db 0x09
   0430 20 2A 2A 2A 2A 2A  4960 	.ascii " ******  Status of IO Expander  ******"
        2A 20 20 53 74 61
        74 75 73 20 6F 66
        20 49 4F 20 45 78
        70 61 6E 64 65 72
        20 20 2A 2A 2A 2A
        2A 2A
   0456 00                 4961 	.db 0x00
   0457                    4962 __str_19:
   0457 0A                 4963 	.db 0x0A
   0458 0A                 4964 	.db 0x0A
   0459 0D                 4965 	.db 0x0D
   045A 09                 4966 	.db 0x09
   045B 09                 4967 	.db 0x09
   045C 20 2A 2A 2A 2A 2A  4968 	.ascii " ******  EEPROM Write  ******"
        2A 20 20 45 45 50
        52 4F 4D 20 57 72
        69 74 65 20 20 2A
        2A 2A 2A 2A 2A
   0479 00                 4969 	.db 0x00
   047A                    4970 __str_20:
   047A 0A                 4971 	.db 0x0A
   047B 0A                 4972 	.db 0x0A
   047C 0D                 4973 	.db 0x0D
   047D 09                 4974 	.db 0x09
   047E 09                 4975 	.db 0x09
   047F 20 2A 2A 2A 2A 2A  4976 	.ascii " ******  EEPROM Read  ******"
        2A 20 20 45 45 50
        52 4F 4D 20 52 65
        61 64 20 20 2A 2A
        2A 2A 2A 2A
   049B 00                 4977 	.db 0x00
   049C                    4978 __str_21:
   049C 0A                 4979 	.db 0x0A
   049D 0A                 4980 	.db 0x0A
   049E 0D                 4981 	.db 0x0D
   049F 09                 4982 	.db 0x09
   04A0 09                 4983 	.db 0x09
   04A1 20 2A 2A 2A 2A 2A  4984 	.ascii " ******  CGRAM Dump  ******"
        2A 20 20 43 47 52
        41 4D 20 44 75 6D
        70 20 20 2A 2A 2A
        2A 2A 2A
   04BC 00                 4985 	.db 0x00
   04BD                    4986 __str_22:
   04BD 0A                 4987 	.db 0x0A
   04BE 0A                 4988 	.db 0x0A
   04BF 0D                 4989 	.db 0x0D
   04C0 09                 4990 	.db 0x09
   04C1 09                 4991 	.db 0x09
   04C2 20 2A 2A 2A 2A 2A  4992 	.ascii " ******  DDRAM Dump  ******"
        2A 20 20 44 44 52
        41 4D 20 44 75 6D
        70 20 20 2A 2A 2A
        2A 2A 2A
   04DD 00                 4993 	.db 0x00
   04DE                    4994 __str_23:
   04DE 0A                 4995 	.db 0x0A
   04DF 0A                 4996 	.db 0x0A
   04E0 0D                 4997 	.db 0x0D
   04E1 09                 4998 	.db 0x09
   04E2 09                 4999 	.db 0x09
   04E3 20 2A 2A 2A 2A 2A  5000 	.ascii " ******  Hex Dump  ******"
        2A 20 20 48 65 78
        20 44 75 6D 70 20
        20 2A 2A 2A 2A 2A
        2A
   04FC 00                 5001 	.db 0x00
   04FD                    5002 __str_24:
   04FD 0A                 5003 	.db 0x0A
   04FE 0A                 5004 	.db 0x0A
   04FF 0D                 5005 	.db 0x0D
   0500 09                 5006 	.db 0x09
   0501 09                 5007 	.db 0x09
   0502 20 2A 2A 2A 2A 2A  5008 	.ascii " ******  LCD DISPLAY  ******"
        2A 20 20 4C 43 44
        20 44 49 53 50 4C
        41 59 20 20 2A 2A
        2A 2A 2A 2A
   051E 00                 5009 	.db 0x00
   051F                    5010 __str_25:
   051F 0A                 5011 	.db 0x0A
   0520 0A                 5012 	.db 0x0A
   0521 0D                 5013 	.db 0x0D
   0522 09                 5014 	.db 0x09
   0523 09                 5015 	.db 0x09
   0524 20 2A 2A 2A 2A 2A  5016 	.ascii " ******  Clear LCD  ******"
        2A 20 20 43 6C 65
        61 72 20 4C 43 44
        20 20 2A 2A 2A 2A
        2A 2A
   053E 00                 5017 	.db 0x00
   053F                    5018 __str_26:
   053F 0A                 5019 	.db 0x0A
   0540 0A                 5020 	.db 0x0A
   0541 0D                 5021 	.db 0x0D
   0542 09                 5022 	.db 0x09
   0543 20 53 65 6C 65 63  5023 	.ascii " Select timer number between 0 to 2: "
        74 20 74 69 6D 65
        72 20 6E 75 6D 62
        65 72 20 62 65 74
        77 65 65 6E 20 30
        20 74 6F 20 32 3A
        20
   0568 09                 5024 	.db 0x09
   0569 00                 5025 	.db 0x00
   056A                    5026 __str_27:
   056A 0A                 5027 	.db 0x0A
   056B 0A                 5028 	.db 0x0A
   056C 0D                 5029 	.db 0x0D
   056D 20 2A 2D 45 52 52  5030 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0577 0A                 5031 	.db 0x0A
   0578 0D                 5032 	.db 0x0D
   0579 09                 5033 	.db 0x09
   057A 20 45 6E 74 65 72  5034 	.ascii " Enter a valid number between 0 to 2"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 32
   059E 00                 5035 	.db 0x00
   059F                    5036 __str_28:
   059F 0A                 5037 	.db 0x0A
   05A0 0A                 5038 	.db 0x0A
   05A1 0D                 5039 	.db 0x0D
   05A2 45 6E 74 65 72 20  5040 	.ascii "Enter minutes for timer %d between 0 to 59: "
        6D 69 6E 75 74 65
        73 20 66 6F 72 20
        74 69 6D 65 72 20
        25 64 20 62 65 74
        77 65 65 6E 20 30
        20 74 6F 20 35 39
        3A 20
   05CE 09                 5041 	.db 0x09
   05CF 00                 5042 	.db 0x00
   05D0                    5043 __str_29:
   05D0 0A                 5044 	.db 0x0A
   05D1 0A                 5045 	.db 0x0A
   05D2 0D                 5046 	.db 0x0D
   05D3 20 2A 2D 45 52 52  5047 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   05DD 0A                 5048 	.db 0x0A
   05DE 0D                 5049 	.db 0x0D
   05DF 09                 5050 	.db 0x09
   05E0 20 45 6E 74 65 72  5051 	.ascii " Enter a valid number between 0 to 59"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 35
        39
   0605 00                 5052 	.db 0x00
   0606                    5053 __str_30:
   0606 0A                 5054 	.db 0x0A
   0607 0A                 5055 	.db 0x0A
   0608 0D                 5056 	.db 0x0D
   0609 45 6E 74 65 72 20  5057 	.ascii "Enter seconds for timer %d between 1 to 59: "
        73 65 63 6F 6E 64
        73 20 66 6F 72 20
        74 69 6D 65 72 20
        25 64 20 62 65 74
        77 65 65 6E 20 31
        20 74 6F 20 35 39
        3A 20
   0635 09                 5058 	.db 0x09
   0636 00                 5059 	.db 0x00
   0637                    5060 __str_31:
   0637 0A                 5061 	.db 0x0A
   0638 0A                 5062 	.db 0x0A
   0639 0D                 5063 	.db 0x0D
   063A 45 6E 74 65 72 20  5064 	.ascii "Enter milisec for timer %d between 0 to 9: "
        6D 69 6C 69 73 65
        63 20 66 6F 72 20
        74 69 6D 65 72 20
        25 64 20 62 65 74
        77 65 65 6E 20 30
        20 74 6F 20 39 3A
        20
   0665 09                 5065 	.db 0x09
   0666 00                 5066 	.db 0x00
   0667                    5067 __str_32:
   0667 0A                 5068 	.db 0x0A
   0668 0A                 5069 	.db 0x0A
   0669 0D                 5070 	.db 0x0D
   066A 20 2A 2D 45 52 52  5071 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0674 0A                 5072 	.db 0x0A
   0675 0D                 5073 	.db 0x0D
   0676 09                 5074 	.db 0x09
   0677 20 45 6E 74 65 72  5075 	.ascii " Enter a valid number between 0 to 9"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 39
   069B 00                 5076 	.db 0x00
   069C                    5077 __str_33:
   069C 0A                 5078 	.db 0x0A
   069D 0A                 5079 	.db 0x0A
   069E 0D                 5080 	.db 0x0D
   069F 09                 5081 	.db 0x09
   06A0 57 68 69 63 68 20  5082 	.ascii "Which timer to enable between 0 to 2:"
        74 69 6D 65 72 20
        74 6F 20 65 6E 61
        62 6C 65 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 32
        3A
   06C5 09                 5083 	.db 0x09
   06C6 00                 5084 	.db 0x00
   06C7                    5085 __str_34:
   06C7 2D 45              5086 	.ascii "-E"
   06C9 00                 5087 	.db 0x00
   06CA                    5088 __str_35:
   06CA 0A                 5089 	.db 0x0A
   06CB 0A                 5090 	.db 0x0A
   06CC 0D                 5091 	.db 0x0D
   06CD 57 68 69 63 68 20  5092 	.ascii "Which timer to Disable between 0 to 2:"
        74 69 6D 65 72 20
        74 6F 20 44 69 73
        61 62 6C 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        32 3A
   06F3 09                 5093 	.db 0x09
   06F4 00                 5094 	.db 0x00
   06F5                    5095 __str_36:
   06F5 44 69 73 61 62 6C  5096 	.ascii "Disabled"
        65 64
   06FD 00                 5097 	.db 0x00
   06FE                    5098 __str_37:
   06FE 0A                 5099 	.db 0x0A
   06FF 0A                 5100 	.db 0x0A
   0700 09                 5101 	.db 0x09
   0701 09                 5102 	.db 0x09
   0702 20 44 69 73 61 62  5103 	.ascii " Disabling..."
        6C 69 6E 67 2E 2E
        2E
   070F 0A                 5104 	.db 0x0A
   0710 0D                 5105 	.db 0x0D
   0711 00                 5106 	.db 0x00
   0712                    5107 __str_38:
   0712 0A                 5108 	.db 0x0A
   0713 0A                 5109 	.db 0x0A
   0714 0D                 5110 	.db 0x0D
   0715 09                 5111 	.db 0x09
   0716 20 53 65 6C 65 63  5112 	.ascii " Select Character code between 0 to 7: "
        74 20 43 68 61 72
        61 63 74 65 72 20
        63 6F 64 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        37 3A 20
   073D 09                 5113 	.db 0x09
   073E 00                 5114 	.db 0x00
   073F                    5115 __str_39:
   073F 0A                 5116 	.db 0x0A
   0740 0A                 5117 	.db 0x0A
   0741 0D                 5118 	.db 0x0D
   0742 20 2A 2D 45 52 52  5119 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   074C 0A                 5120 	.db 0x0A
   074D 0D                 5121 	.db 0x0D
   074E 09                 5122 	.db 0x09
   074F 20 45 6E 74 65 72  5123 	.ascii " Enter a valid number between 0 to 7"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 37
   0773 00                 5124 	.db 0x00
   0774                    5125 __str_40:
   0774 0A                 5126 	.db 0x0A
   0775 0A                 5127 	.db 0x0A
   0776 0D                 5128 	.db 0x0D
   0777 09                 5129 	.db 0x09
   0778 20 45 6E 74 65 72  5130 	.ascii " Enter pixel map in HEX in HH format from 00 to 1F: "
        20 70 69 78 65 6C
        20 6D 61 70 20 69
        6E 20 48 45 58 20
        69 6E 20 48 48 20
        66 6F 72 6D 61 74
        20 66 72 6F 6D 20
        30 30 20 74 6F 20
        31 46 3A 20
   07AC 09                 5131 	.db 0x09
   07AD 00                 5132 	.db 0x00
   07AE                    5133 __str_41:
   07AE 0A                 5134 	.db 0x0A
   07AF 0D                 5135 	.db 0x0D
   07B0 09                 5136 	.db 0x09
   07B1 20 44 61 74 61 20  5137 	.ascii " Data in row number %d: "
        69 6E 20 72 6F 77
        20 6E 75 6D 62 65
        72 20 25 64 3A 20
   07C9 09                 5138 	.db 0x09
   07CA 00                 5139 	.db 0x00
   07CB                    5140 __str_42:
   07CB 0A                 5141 	.db 0x0A
   07CC 0A                 5142 	.db 0x0A
   07CD 0D                 5143 	.db 0x0D
   07CE 20 2A 2D 45 52 52  5144 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   07D8 0A                 5145 	.db 0x0A
   07D9 0D                 5146 	.db 0x0D
   07DA 09                 5147 	.db 0x09
   07DB 20 45 6E 74 65 72  5148 	.ascii " Enter a valid HEX number between 00 to 1F i"
        20 61 20 76 61 6C
        69 64 20 48 45 58
        20 6E 75 6D 62 65
        72 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 31 46
        20 69
   0807 6E 20 48 48 20 66  5149 	.ascii "n HH format:"
        6F 72 6D 61 74 3A
   0813 09                 5150 	.db 0x09
   0814 00                 5151 	.db 0x00
   0815                    5152 __str_43:
   0815 0A                 5153 	.db 0x0A
   0816 0D                 5154 	.db 0x0D
   0817 09                 5155 	.db 0x09
   0818 09                 5156 	.db 0x09
   0819 20 20 20 20 20 20  5157 	.ascii "      "
   081F 09                 5158 	.db 0x09
   0820 31 32 33 34 35     5159 	.ascii "12345"
   0825 00                 5160 	.db 0x00
   0826                    5161 __str_44:
   0826 0A                 5162 	.db 0x0A
   0827 0D                 5163 	.db 0x0D
   0828 09                 5164 	.db 0x09
   0829 09                 5165 	.db 0x09
   082A 52 4F 57 20 25 64  5166 	.ascii "ROW %d:"
        3A
   0831 09                 5167 	.db 0x09
   0832 00                 5168 	.db 0x00
   0833                    5169 __str_45:
   0833 25 63              5170 	.ascii "%c"
   0835 00                 5171 	.db 0x00
   0836                    5172 __str_46:
   0836 0A                 5173 	.db 0x0A
   0837 0A                 5174 	.db 0x0A
   0838 0D                 5175 	.db 0x0D
   0839 09                 5176 	.db 0x09
   083A 20 53 65 6C 65 63  5177 	.ascii " Select Character code between 0 to 7 to display: "
        74 20 43 68 61 72
        61 63 74 65 72 20
        63 6F 64 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        37 20 74 6F 20 64
        69 73 70 6C 61 79
        3A 20
   086C 09                 5178 	.db 0x09
   086D 00                 5179 	.db 0x00
   086E                    5180 __str_47:
   086E 0A                 5181 	.db 0x0A
   086F 0A                 5182 	.db 0x0A
   0870 0D                 5183 	.db 0x0D
   0871 20 45 6E 74 65 72  5184 	.ascii " Enter Address in Hex in HHH format between 000 to 7FF: "
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20 37 46 46
        3A 20
   08A9 00                 5185 	.db 0x00
   08AA                    5186 __str_48:
   08AA 0A                 5187 	.db 0x0A
   08AB 0A                 5188 	.db 0x0A
   08AC 0D                 5189 	.db 0x0D
   08AD 20 2A 2D 45 52 52  5190 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   08B7 09                 5191 	.db 0x09
   08B8 20 50 6C 65 61 73  5192 	.ascii " Please Enter valid Address betweem 000 and 7F"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 41 64 64 72
        65 73 73 20 62 65
        74 77 65 65 6D 20
        30 30 30 20 61 6E
        64 20 37 46
   08E6 46 3A 20           5193 	.ascii "F: "
   08E9 00                 5194 	.db 0x00
   08EA                    5195 __str_49:
   08EA 0A                 5196 	.db 0x0A
   08EB 0A                 5197 	.db 0x0A
   08EC 0D                 5198 	.db 0x0D
   08ED 20 45 6E 74 65 72  5199 	.ascii " Enter Data in Hex in HH format between 00 to FF: "
        20 44 61 74 61 20
        69 6E 20 48 65 78
        20 69 6E 20 48 48
        20 66 6F 72 6D 61
        74 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 46 46
        3A 20
   091F 00                 5200 	.db 0x00
   0920                    5201 __str_50:
   0920 0A                 5202 	.db 0x0A
   0921 0A                 5203 	.db 0x0A
   0922 0D                 5204 	.db 0x0D
   0923 20 2A 2D 45 52 52  5205 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   092D 09                 5206 	.db 0x09
   092E 20 50 6C 65 61 73  5207 	.ascii " Please Enter valid data in Hex in HH format b"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 64 61 74 61
        20 69 6E 20 48 65
        78 20 69 6E 20 48
        48 20 66 6F 72 6D
        61 74 20 62
   095C 65 74 77 65 65 6E  5208 	.ascii "etween 00 to FF: "
        20 30 30 20 74 6F
        20 46 46 3A 20
   096D 00                 5209 	.db 0x00
   096E                    5210 __str_51:
   096E 0A                 5211 	.db 0x0A
   096F 0A                 5212 	.db 0x0A
   0970 0D                 5213 	.db 0x0D
   0971 09                 5214 	.db 0x09
   0972 09                 5215 	.db 0x09
   0973 09                 5216 	.db 0x09
   0974 25 78 20 3A 20 25  5217 	.ascii "%x : %x "
        78 20
   097C 0A                 5218 	.db 0x0A
   097D 00                 5219 	.db 0x00
   097E                    5220 __str_52:
   097E 0A                 5221 	.db 0x0A
   097F 0A                 5222 	.db 0x0A
   0980 0D                 5223 	.db 0x0D
   0981 09                 5224 	.db 0x09
   0982 20 43 75 72 72 65  5225 	.ascii " Current Status of the IO_Expander pins is: 0x%x"
        6E 74 20 53 74 61
        74 75 73 20 6F 66
        20 74 68 65 20 49
        4F 5F 45 78 70 61
        6E 64 65 72 20 70
        69 6E 73 20 69 73
        3A 20 30 78 25 78
   09B2 0A                 5226 	.db 0x0A
   09B3 0A                 5227 	.db 0x0A
   09B4 0D                 5228 	.db 0x0D
   09B5 00                 5229 	.db 0x00
   09B6                    5230 __str_53:
   09B6 0A                 5231 	.db 0x0A
   09B7 0A                 5232 	.db 0x0A
   09B8 0A                 5233 	.db 0x0A
   09B9 0D                 5234 	.db 0x0D
   09BA 57 61 74 63 68 64  5235 	.ascii "Watchdog RESET Demo"
        6F 67 20 52 45 53
        45 54 20 44 65 6D
        6F
   09CD 00                 5236 	.db 0x00
   09CE                    5237 __str_54:
   09CE 0A                 5238 	.db 0x0A
   09CF 0A                 5239 	.db 0x0A
   09D0 0A                 5240 	.db 0x0A
   09D1 0D                 5241 	.db 0x0D
   09D2 09                 5242 	.db 0x09
   09D3 09                 5243 	.db 0x09
   09D4 09                 5244 	.db 0x09
   09D5 09                 5245 	.db 0x09
   09D6 09                 5246 	.db 0x09
   09D7 2A 2A 2A 2A 2A 2A  5247 	.ascii "******** LCD Commands ********"
        2A 2A 20 4C 43 44
        20 43 6F 6D 6D 61
        6E 64 73 20 2A 2A
        2A 2A 2A 2A 2A 2A
   09F5 0A                 5248 	.db 0x0A
   09F6 0A                 5249 	.db 0x0A
   09F7 0D                 5250 	.db 0x0D
   09F8 09                 5251 	.db 0x09
   09F9 37 2E 20 43 72 65  5252 	.ascii "7. Create Custom "
        61 74 65 20 43 75
        73 74 6F 6D 20
   0A0A 43 68 61 72 61 63  5253 	.ascii "Character"
        74 65 72
   0A13 09                 5254 	.db 0x09
   0A14 09                 5255 	.db 0x09
   0A15 09                 5256 	.db 0x09
   0A16 38 2E 20 44 69 73  5257 	.ascii "8. Display Custom Character"
        70 6C 61 79 20 43
        75 73 74 6F 6D 20
        43 68 61 72 61 63
        74 65 72
   0A31 09                 5258 	.db 0x09
   0A32 09                 5259 	.db 0x09
   0A33 09                 5260 	.db 0x09
   0A34 27 63 27 2E 20 43  5261 	.ascii "'c'. CGRAM Dump"
        47 52 41 4D 20 44
        75 6D 70
   0A43 09                 5262 	.db 0x09
   0A44 09                 5263 	.db 0x09
   0A45 09                 5264 	.db 0x09
   0A46 27 64 27 2E 20 44  5265 	.ascii "'d'. DDRAM Dump"
        44 52 41 4D 20 44
        75 6D 70
   0A55 0A                 5266 	.db 0x0A
   0A56 0D                 5267 	.db 0x0D
   0A57 09                 5268 	.db 0x09
   0A58 27 6C 27 2E 20 4C  5269 	.ascii "'l'. LCD Display"
        43 44 20 44 69 73
        70 6C 61 79
   0A68 09                 5270 	.db 0x09
   0A69 09                 5271 	.db 0x09
   0A6A 09                 5272 	.db 0x09
   0A6B 09                 5273 	.db 0x09
   0A6C 27 71 27 2E 20 43  5274 	.ascii "'q'. Clear LCD Display"
        6C 65 61 72 20 4C
        43 44 20 44 69 73
        70 6C 61 79
   0A82 00                 5275 	.db 0x00
   0A83                    5276 __str_55:
   0A83 0A                 5277 	.db 0x0A
   0A84 0A                 5278 	.db 0x0A
   0A85 0D                 5279 	.db 0x0D
   0A86 09                 5280 	.db 0x09
   0A87 20 50 72 65 73 73  5281 	.ascii " Press 'm' to see the Menu again or Press Command Key:"
        20 27 6D 27 20 74
        6F 20 73 65 65 20
        74 68 65 20 4D 65
        6E 75 20 61 67 61
        69 6E 20 6F 72 20
        50 72 65 73 73 20
        43 6F 6D 6D 61 6E
        64 20 4B 65 79 3A
   0ABD 09                 5282 	.db 0x09
   0ABE 00                 5283 	.db 0x00
                           5284 	.area XINIT   (CODE)
   0000                    5285 __xinit__flag:
   0000 00                 5286 	.db #0x00
   0001                    5287 __xinit__timers:
   0001 00 00              5288 	.byte #0x00,#0x00
