                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Fri Nov 11 22:40:53 2016
                              5 ;--------------------------------------------------------
                              6 	.module atoh_f
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _ctoa
                             13 	.globl _atoh_data
                             14 	.globl _atoh
                             15 	.globl _P5_7
                             16 	.globl _P5_6
                             17 	.globl _P5_5
                             18 	.globl _P5_4
                             19 	.globl _P5_3
                             20 	.globl _P5_2
                             21 	.globl _P5_1
                             22 	.globl _P5_0
                             23 	.globl _P4_7
                             24 	.globl _P4_6
                             25 	.globl _P4_5
                             26 	.globl _P4_4
                             27 	.globl _P4_3
                             28 	.globl _P4_2
                             29 	.globl _P4_1
                             30 	.globl _P4_0
                             31 	.globl _PX0L
                             32 	.globl _PT0L
                             33 	.globl _PX1L
                             34 	.globl _PT1L
                             35 	.globl _PLS
                             36 	.globl _PT2L
                             37 	.globl _PPCL
                             38 	.globl _EC
                             39 	.globl _CCF0
                             40 	.globl _CCF1
                             41 	.globl _CCF2
                             42 	.globl _CCF3
                             43 	.globl _CCF4
                             44 	.globl _CR
                             45 	.globl _CF
                             46 	.globl _TF2
                             47 	.globl _EXF2
                             48 	.globl _RCLK
                             49 	.globl _TCLK
                             50 	.globl _EXEN2
                             51 	.globl _TR2
                             52 	.globl _C_T2
                             53 	.globl _CP_RL2
                             54 	.globl _T2CON_7
                             55 	.globl _T2CON_6
                             56 	.globl _T2CON_5
                             57 	.globl _T2CON_4
                             58 	.globl _T2CON_3
                             59 	.globl _T2CON_2
                             60 	.globl _T2CON_1
                             61 	.globl _T2CON_0
                             62 	.globl _PT2
                             63 	.globl _ET2
                             64 	.globl _CY
                             65 	.globl _AC
                             66 	.globl _F0
                             67 	.globl _RS1
                             68 	.globl _RS0
                             69 	.globl _OV
                             70 	.globl _F1
                             71 	.globl _P
                             72 	.globl _PS
                             73 	.globl _PT1
                             74 	.globl _PX1
                             75 	.globl _PT0
                             76 	.globl _PX0
                             77 	.globl _RD
                             78 	.globl _WR
                             79 	.globl _T1
                             80 	.globl _T0
                             81 	.globl _INT1
                             82 	.globl _INT0
                             83 	.globl _TXD
                             84 	.globl _RXD
                             85 	.globl _P3_7
                             86 	.globl _P3_6
                             87 	.globl _P3_5
                             88 	.globl _P3_4
                             89 	.globl _P3_3
                             90 	.globl _P3_2
                             91 	.globl _P3_1
                             92 	.globl _P3_0
                             93 	.globl _EA
                             94 	.globl _ES
                             95 	.globl _ET1
                             96 	.globl _EX1
                             97 	.globl _ET0
                             98 	.globl _EX0
                             99 	.globl _P2_7
                            100 	.globl _P2_6
                            101 	.globl _P2_5
                            102 	.globl _P2_4
                            103 	.globl _P2_3
                            104 	.globl _P2_2
                            105 	.globl _P2_1
                            106 	.globl _P2_0
                            107 	.globl _SM0
                            108 	.globl _SM1
                            109 	.globl _SM2
                            110 	.globl _REN
                            111 	.globl _TB8
                            112 	.globl _RB8
                            113 	.globl _TI
                            114 	.globl _RI
                            115 	.globl _P1_7
                            116 	.globl _P1_6
                            117 	.globl _P1_5
                            118 	.globl _P1_4
                            119 	.globl _P1_3
                            120 	.globl _P1_2
                            121 	.globl _P1_1
                            122 	.globl _P1_0
                            123 	.globl _TF1
                            124 	.globl _TR1
                            125 	.globl _TF0
                            126 	.globl _TR0
                            127 	.globl _IE1
                            128 	.globl _IT1
                            129 	.globl _IE0
                            130 	.globl _IT0
                            131 	.globl _P0_7
                            132 	.globl _P0_6
                            133 	.globl _P0_5
                            134 	.globl _P0_4
                            135 	.globl _P0_3
                            136 	.globl _P0_2
                            137 	.globl _P0_1
                            138 	.globl _P0_0
                            139 	.globl _EECON
                            140 	.globl _KBF
                            141 	.globl _KBE
                            142 	.globl _KBLS
                            143 	.globl _BRL
                            144 	.globl _BDRCON
                            145 	.globl _T2MOD
                            146 	.globl _SPDAT
                            147 	.globl _SPSTA
                            148 	.globl _SPCON
                            149 	.globl _SADEN
                            150 	.globl _SADDR
                            151 	.globl _WDTPRG
                            152 	.globl _WDTRST
                            153 	.globl _P5
                            154 	.globl _P4
                            155 	.globl _IPH1
                            156 	.globl _IPL1
                            157 	.globl _IPH0
                            158 	.globl _IPL0
                            159 	.globl _IEN1
                            160 	.globl _IEN0
                            161 	.globl _CMOD
                            162 	.globl _CL
                            163 	.globl _CH
                            164 	.globl _CCON
                            165 	.globl _CCAPM4
                            166 	.globl _CCAPM3
                            167 	.globl _CCAPM2
                            168 	.globl _CCAPM1
                            169 	.globl _CCAPM0
                            170 	.globl _CCAP4L
                            171 	.globl _CCAP3L
                            172 	.globl _CCAP2L
                            173 	.globl _CCAP1L
                            174 	.globl _CCAP0L
                            175 	.globl _CCAP4H
                            176 	.globl _CCAP3H
                            177 	.globl _CCAP2H
                            178 	.globl _CCAP1H
                            179 	.globl _CCAP0H
                            180 	.globl _CKCKON1
                            181 	.globl _CKCKON0
                            182 	.globl _CKRL
                            183 	.globl _AUXR1
                            184 	.globl _AUXR
                            185 	.globl _TH2
                            186 	.globl _TL2
                            187 	.globl _RCAP2H
                            188 	.globl _RCAP2L
                            189 	.globl _T2CON
                            190 	.globl _B
                            191 	.globl _ACC
                            192 	.globl _PSW
                            193 	.globl _IP
                            194 	.globl _P3
                            195 	.globl _IE
                            196 	.globl _P2
                            197 	.globl _SBUF
                            198 	.globl _SCON
                            199 	.globl _P1
                            200 	.globl _TH1
                            201 	.globl _TH0
                            202 	.globl _TL1
                            203 	.globl _TL0
                            204 	.globl _TMOD
                            205 	.globl _TCON
                            206 	.globl _PCON
                            207 	.globl _DPH
                            208 	.globl _DPL
                            209 	.globl _SP
                            210 	.globl _P0
                            211 	.globl _read
                            212 	.globl _write
                            213 ;--------------------------------------------------------
                            214 ; special function registers
                            215 ;--------------------------------------------------------
                            216 	.area RSEG    (DATA)
                    0080    217 _P0	=	0x0080
                    0081    218 _SP	=	0x0081
                    0082    219 _DPL	=	0x0082
                    0083    220 _DPH	=	0x0083
                    0087    221 _PCON	=	0x0087
                    0088    222 _TCON	=	0x0088
                    0089    223 _TMOD	=	0x0089
                    008A    224 _TL0	=	0x008a
                    008B    225 _TL1	=	0x008b
                    008C    226 _TH0	=	0x008c
                    008D    227 _TH1	=	0x008d
                    0090    228 _P1	=	0x0090
                    0098    229 _SCON	=	0x0098
                    0099    230 _SBUF	=	0x0099
                    00A0    231 _P2	=	0x00a0
                    00A8    232 _IE	=	0x00a8
                    00B0    233 _P3	=	0x00b0
                    00B8    234 _IP	=	0x00b8
                    00D0    235 _PSW	=	0x00d0
                    00E0    236 _ACC	=	0x00e0
                    00F0    237 _B	=	0x00f0
                    00C8    238 _T2CON	=	0x00c8
                    00CA    239 _RCAP2L	=	0x00ca
                    00CB    240 _RCAP2H	=	0x00cb
                    00CC    241 _TL2	=	0x00cc
                    00CD    242 _TH2	=	0x00cd
                    008E    243 _AUXR	=	0x008e
                    00A2    244 _AUXR1	=	0x00a2
                    0097    245 _CKRL	=	0x0097
                    008F    246 _CKCKON0	=	0x008f
                    008F    247 _CKCKON1	=	0x008f
                    00FA    248 _CCAP0H	=	0x00fa
                    00FB    249 _CCAP1H	=	0x00fb
                    00FC    250 _CCAP2H	=	0x00fc
                    00FD    251 _CCAP3H	=	0x00fd
                    00FE    252 _CCAP4H	=	0x00fe
                    00EA    253 _CCAP0L	=	0x00ea
                    00EB    254 _CCAP1L	=	0x00eb
                    00EC    255 _CCAP2L	=	0x00ec
                    00ED    256 _CCAP3L	=	0x00ed
                    00EE    257 _CCAP4L	=	0x00ee
                    00DA    258 _CCAPM0	=	0x00da
                    00DB    259 _CCAPM1	=	0x00db
                    00DC    260 _CCAPM2	=	0x00dc
                    00DD    261 _CCAPM3	=	0x00dd
                    00DE    262 _CCAPM4	=	0x00de
                    00D8    263 _CCON	=	0x00d8
                    00F9    264 _CH	=	0x00f9
                    00E9    265 _CL	=	0x00e9
                    00D9    266 _CMOD	=	0x00d9
                    00A8    267 _IEN0	=	0x00a8
                    00B1    268 _IEN1	=	0x00b1
                    00B8    269 _IPL0	=	0x00b8
                    00B7    270 _IPH0	=	0x00b7
                    00B2    271 _IPL1	=	0x00b2
                    00B3    272 _IPH1	=	0x00b3
                    00C0    273 _P4	=	0x00c0
                    00D8    274 _P5	=	0x00d8
                    00A6    275 _WDTRST	=	0x00a6
                    00A7    276 _WDTPRG	=	0x00a7
                    00A9    277 _SADDR	=	0x00a9
                    00B9    278 _SADEN	=	0x00b9
                    00C3    279 _SPCON	=	0x00c3
                    00C4    280 _SPSTA	=	0x00c4
                    00C5    281 _SPDAT	=	0x00c5
                    00C9    282 _T2MOD	=	0x00c9
                    009B    283 _BDRCON	=	0x009b
                    009A    284 _BRL	=	0x009a
                    009C    285 _KBLS	=	0x009c
                    009D    286 _KBE	=	0x009d
                    009E    287 _KBF	=	0x009e
                    00D2    288 _EECON	=	0x00d2
                            289 ;--------------------------------------------------------
                            290 ; special function bits
                            291 ;--------------------------------------------------------
                            292 	.area RSEG    (DATA)
                    0080    293 _P0_0	=	0x0080
                    0081    294 _P0_1	=	0x0081
                    0082    295 _P0_2	=	0x0082
                    0083    296 _P0_3	=	0x0083
                    0084    297 _P0_4	=	0x0084
                    0085    298 _P0_5	=	0x0085
                    0086    299 _P0_6	=	0x0086
                    0087    300 _P0_7	=	0x0087
                    0088    301 _IT0	=	0x0088
                    0089    302 _IE0	=	0x0089
                    008A    303 _IT1	=	0x008a
                    008B    304 _IE1	=	0x008b
                    008C    305 _TR0	=	0x008c
                    008D    306 _TF0	=	0x008d
                    008E    307 _TR1	=	0x008e
                    008F    308 _TF1	=	0x008f
                    0090    309 _P1_0	=	0x0090
                    0091    310 _P1_1	=	0x0091
                    0092    311 _P1_2	=	0x0092
                    0093    312 _P1_3	=	0x0093
                    0094    313 _P1_4	=	0x0094
                    0095    314 _P1_5	=	0x0095
                    0096    315 _P1_6	=	0x0096
                    0097    316 _P1_7	=	0x0097
                    0098    317 _RI	=	0x0098
                    0099    318 _TI	=	0x0099
                    009A    319 _RB8	=	0x009a
                    009B    320 _TB8	=	0x009b
                    009C    321 _REN	=	0x009c
                    009D    322 _SM2	=	0x009d
                    009E    323 _SM1	=	0x009e
                    009F    324 _SM0	=	0x009f
                    00A0    325 _P2_0	=	0x00a0
                    00A1    326 _P2_1	=	0x00a1
                    00A2    327 _P2_2	=	0x00a2
                    00A3    328 _P2_3	=	0x00a3
                    00A4    329 _P2_4	=	0x00a4
                    00A5    330 _P2_5	=	0x00a5
                    00A6    331 _P2_6	=	0x00a6
                    00A7    332 _P2_7	=	0x00a7
                    00A8    333 _EX0	=	0x00a8
                    00A9    334 _ET0	=	0x00a9
                    00AA    335 _EX1	=	0x00aa
                    00AB    336 _ET1	=	0x00ab
                    00AC    337 _ES	=	0x00ac
                    00AF    338 _EA	=	0x00af
                    00B0    339 _P3_0	=	0x00b0
                    00B1    340 _P3_1	=	0x00b1
                    00B2    341 _P3_2	=	0x00b2
                    00B3    342 _P3_3	=	0x00b3
                    00B4    343 _P3_4	=	0x00b4
                    00B5    344 _P3_5	=	0x00b5
                    00B6    345 _P3_6	=	0x00b6
                    00B7    346 _P3_7	=	0x00b7
                    00B0    347 _RXD	=	0x00b0
                    00B1    348 _TXD	=	0x00b1
                    00B2    349 _INT0	=	0x00b2
                    00B3    350 _INT1	=	0x00b3
                    00B4    351 _T0	=	0x00b4
                    00B5    352 _T1	=	0x00b5
                    00B6    353 _WR	=	0x00b6
                    00B7    354 _RD	=	0x00b7
                    00B8    355 _PX0	=	0x00b8
                    00B9    356 _PT0	=	0x00b9
                    00BA    357 _PX1	=	0x00ba
                    00BB    358 _PT1	=	0x00bb
                    00BC    359 _PS	=	0x00bc
                    00D0    360 _P	=	0x00d0
                    00D1    361 _F1	=	0x00d1
                    00D2    362 _OV	=	0x00d2
                    00D3    363 _RS0	=	0x00d3
                    00D4    364 _RS1	=	0x00d4
                    00D5    365 _F0	=	0x00d5
                    00D6    366 _AC	=	0x00d6
                    00D7    367 _CY	=	0x00d7
                    00AD    368 _ET2	=	0x00ad
                    00BD    369 _PT2	=	0x00bd
                    00C8    370 _T2CON_0	=	0x00c8
                    00C9    371 _T2CON_1	=	0x00c9
                    00CA    372 _T2CON_2	=	0x00ca
                    00CB    373 _T2CON_3	=	0x00cb
                    00CC    374 _T2CON_4	=	0x00cc
                    00CD    375 _T2CON_5	=	0x00cd
                    00CE    376 _T2CON_6	=	0x00ce
                    00CF    377 _T2CON_7	=	0x00cf
                    00C8    378 _CP_RL2	=	0x00c8
                    00C9    379 _C_T2	=	0x00c9
                    00CA    380 _TR2	=	0x00ca
                    00CB    381 _EXEN2	=	0x00cb
                    00CC    382 _TCLK	=	0x00cc
                    00CD    383 _RCLK	=	0x00cd
                    00CE    384 _EXF2	=	0x00ce
                    00CF    385 _TF2	=	0x00cf
                    00DF    386 _CF	=	0x00df
                    00DE    387 _CR	=	0x00de
                    00DC    388 _CCF4	=	0x00dc
                    00DB    389 _CCF3	=	0x00db
                    00DA    390 _CCF2	=	0x00da
                    00D9    391 _CCF1	=	0x00d9
                    00D8    392 _CCF0	=	0x00d8
                    00AE    393 _EC	=	0x00ae
                    00BE    394 _PPCL	=	0x00be
                    00BD    395 _PT2L	=	0x00bd
                    00BC    396 _PLS	=	0x00bc
                    00BB    397 _PT1L	=	0x00bb
                    00BA    398 _PX1L	=	0x00ba
                    00B9    399 _PT0L	=	0x00b9
                    00B8    400 _PX0L	=	0x00b8
                    00C0    401 _P4_0	=	0x00c0
                    00C1    402 _P4_1	=	0x00c1
                    00C2    403 _P4_2	=	0x00c2
                    00C3    404 _P4_3	=	0x00c3
                    00C4    405 _P4_4	=	0x00c4
                    00C5    406 _P4_5	=	0x00c5
                    00C6    407 _P4_6	=	0x00c6
                    00C7    408 _P4_7	=	0x00c7
                    00D8    409 _P5_0	=	0x00d8
                    00D9    410 _P5_1	=	0x00d9
                    00DA    411 _P5_2	=	0x00da
                    00DB    412 _P5_3	=	0x00db
                    00DC    413 _P5_4	=	0x00dc
                    00DD    414 _P5_5	=	0x00dd
                    00DE    415 _P5_6	=	0x00de
                    00DF    416 _P5_7	=	0x00df
                            417 ;--------------------------------------------------------
                            418 ; overlayable register banks
                            419 ;--------------------------------------------------------
                            420 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     421 	.ds 8
                            422 ;--------------------------------------------------------
                            423 ; internal ram data
                            424 ;--------------------------------------------------------
                            425 	.area DSEG    (DATA)
                            426 ;--------------------------------------------------------
                            427 ; overlayable items in internal ram 
                            428 ;--------------------------------------------------------
                            429 	.area OSEG    (OVR,DATA)
                            430 ;--------------------------------------------------------
                            431 ; indirectly addressable internal ram data
                            432 ;--------------------------------------------------------
                            433 	.area ISEG    (DATA)
                            434 ;--------------------------------------------------------
                            435 ; bit data
                            436 ;--------------------------------------------------------
                            437 	.area BSEG    (BIT)
                            438 ;--------------------------------------------------------
                            439 ; paged external ram data
                            440 ;--------------------------------------------------------
                            441 	.area PSEG    (PAG,XDATA)
                            442 ;--------------------------------------------------------
                            443 ; external ram data
                            444 ;--------------------------------------------------------
                            445 	.area XSEG    (XDATA)
   0000                     446 _atoh_c_1_1:
   0000                     447 	.ds 3
   0003                     448 _atoh_result_1_1:
   0003                     449 	.ds 2
   0005                     450 _atoh_data_c_1_1:
   0005                     451 	.ds 3
   0008                     452 _atoh_data_result_1_1:
   0008                     453 	.ds 2
   000A                     454 _ctoa_c_1_1:
   000A                     455 	.ds 2
   000C                     456 _ctoa_d_1_1:
   000C                     457 	.ds 1
                            458 ;--------------------------------------------------------
                            459 ; external initialized ram data
                            460 ;--------------------------------------------------------
                            461 	.area XISEG   (XDATA)
   0000                     462 _write::
   0000                     463 	.ds 2
   0002                     464 _read::
   0002                     465 	.ds 2
                            466 	.area HOME    (CODE)
                            467 	.area GSINIT0 (CODE)
                            468 	.area GSINIT1 (CODE)
                            469 	.area GSINIT2 (CODE)
                            470 	.area GSINIT3 (CODE)
                            471 	.area GSINIT4 (CODE)
                            472 	.area GSINIT5 (CODE)
                            473 	.area GSINIT  (CODE)
                            474 	.area GSFINAL (CODE)
                            475 	.area CSEG    (CODE)
                            476 ;--------------------------------------------------------
                            477 ; global & static initialisations
                            478 ;--------------------------------------------------------
                            479 	.area HOME    (CODE)
                            480 	.area GSINIT  (CODE)
                            481 	.area GSFINAL (CODE)
                            482 	.area GSINIT  (CODE)
                            483 ;--------------------------------------------------------
                            484 ; Home
                            485 ;--------------------------------------------------------
                            486 	.area HOME    (CODE)
                            487 	.area CSEG    (CODE)
                            488 ;--------------------------------------------------------
                            489 ; code
                            490 ;--------------------------------------------------------
                            491 	.area CSEG    (CODE)
                            492 ;------------------------------------------------------------
                            493 ;Allocation info for local variables in function 'atoh'
                            494 ;------------------------------------------------------------
                            495 ;c                         Allocated with name '_atoh_c_1_1'
                            496 ;result                    Allocated with name '_atoh_result_1_1'
                            497 ;i                         Allocated with name '_atoh_i_1_1'
                            498 ;------------------------------------------------------------
                            499 ;	atoh_f.c:18: int atoh(char *c)
                            500 ;	-----------------------------------------
                            501 ;	 function atoh
                            502 ;	-----------------------------------------
   0000                     503 _atoh:
                    0002    504 	ar2 = 0x02
                    0003    505 	ar3 = 0x03
                    0004    506 	ar4 = 0x04
                    0005    507 	ar5 = 0x05
                    0006    508 	ar6 = 0x06
                    0007    509 	ar7 = 0x07
                    0000    510 	ar0 = 0x00
                    0001    511 	ar1 = 0x01
                            512 ;	genReceive
   0000 AA F0               513 	mov	r2,b
   0002 AB 83               514 	mov	r3,dph
   0004 E5 82               515 	mov	a,dpl
   0006 90s00r00            516 	mov	dptr,#_atoh_c_1_1
   0009 F0                  517 	movx	@dptr,a
   000A A3                  518 	inc	dptr
   000B EB                  519 	mov	a,r3
   000C F0                  520 	movx	@dptr,a
   000D A3                  521 	inc	dptr
   000E EA                  522 	mov	a,r2
   000F F0                  523 	movx	@dptr,a
                            524 ;	atoh_f.c:22: if(*(c+3) != '\0')
                            525 ;	genAssign
   0010 90s00r00            526 	mov	dptr,#_atoh_c_1_1
   0013 E0                  527 	movx	a,@dptr
   0014 FA                  528 	mov	r2,a
   0015 A3                  529 	inc	dptr
   0016 E0                  530 	movx	a,@dptr
   0017 FB                  531 	mov	r3,a
   0018 A3                  532 	inc	dptr
   0019 E0                  533 	movx	a,@dptr
   001A FC                  534 	mov	r4,a
                            535 ;	genPlus
                            536 ;     genPlusIncr
   001B 74 03               537 	mov	a,#0x03
                            538 ;	Peephole 236.a	used r2 instead of ar2
   001D 2A                  539 	add	a,r2
   001E FD                  540 	mov	r5,a
                            541 ;	Peephole 181	changed mov to clr
   001F E4                  542 	clr	a
                            543 ;	Peephole 236.b	used r3 instead of ar3
   0020 3B                  544 	addc	a,r3
   0021 FE                  545 	mov	r6,a
   0022 8C 07               546 	mov	ar7,r4
                            547 ;	genPointerGet
                            548 ;	genGenPointerGet
   0024 8D 82               549 	mov	dpl,r5
   0026 8E 83               550 	mov	dph,r6
   0028 8F F0               551 	mov	b,r7
   002A 12s00r00            552 	lcall	__gptrget
                            553 ;	genCmpEq
                            554 ;	gencjneshort
                            555 ;	Peephole 112.b	changed ljmp to sjmp
   002D FD                  556 	mov	r5,a
                            557 ;	Peephole 115.b	jump optimization
   002E 60 04               558 	jz	00102$
                            559 ;	Peephole 300	removed redundant label 00148$
                            560 ;	atoh_f.c:24: return 2100;
                            561 ;	genRet
                            562 ;	Peephole 182.b	used 16 bit load of dptr
   0030 90 08 34            563 	mov	dptr,#0x0834
                            564 ;	Peephole 251.a	replaced ljmp to ret with ret
   0033 22                  565 	ret
   0034                     566 00102$:
                            567 ;	atoh_f.c:27: if(*(c)>=48 && *(c)<=55 )
                            568 ;	genPointerGet
                            569 ;	genGenPointerGet
   0034 8A 82               570 	mov	dpl,r2
   0036 8B 83               571 	mov	dph,r3
   0038 8C F0               572 	mov	b,r4
   003A 12s00r00            573 	lcall	__gptrget
                            574 ;	genCmpLt
                            575 ;	genCmp
   003D FD                  576 	mov	r5,a
   003E C3                  577 	clr	c
                            578 ;	Peephole 106	removed redundant mov
   003F 64 80               579 	xrl	a,#0x80
   0041 94 B0               580 	subb	a,#0xb0
                            581 ;	genIfxJump
                            582 ;	Peephole 112.b	changed ljmp to sjmp
                            583 ;	Peephole 160.a	removed sjmp by inverse jump logic
                            584 ;	genCmpGt
                            585 ;	genCmp
   0043 40 33               586 	jc	00104$
                            587 ;	Peephole 300	removed redundant label 00149$
                            588 ;	Peephole 256.a	removed redundant clr c
                            589 ;	Peephole 159	avoided xrl during execution
   0045 74 B7               590 	mov	a,#(0x37 ^ 0x80)
   0047 8D F0               591 	mov	b,r5
   0049 63 F0 80            592 	xrl	b,#0x80
   004C 95 F0               593 	subb	a,b
                            594 ;	genIfxJump
                            595 ;	Peephole 112.b	changed ljmp to sjmp
                            596 ;	Peephole 160.a	removed sjmp by inverse jump logic
   004E 40 28               597 	jc	00104$
                            598 ;	Peephole 300	removed redundant label 00150$
                            599 ;	atoh_f.c:29: result = (*c-48)*256;
                            600 ;	genCast
   0050 ED                  601 	mov	a,r5
   0051 33                  602 	rlc	a
   0052 95 E0               603 	subb	a,acc
   0054 FE                  604 	mov	r6,a
                            605 ;	genMinus
   0055 ED                  606 	mov	a,r5
   0056 24 D0               607 	add	a,#0xd0
   0058 FD                  608 	mov	r5,a
   0059 EE                  609 	mov	a,r6
   005A 34 FF               610 	addc	a,#0xff
                            611 ;	genLeftShift
                            612 ;	genLeftShiftLiteral
                            613 ;	genlshTwo
                            614 ;	peephole 177.e	removed redundant move
   005C 8D 06               615 	mov	ar6,r5
   005E 7D 00               616 	mov	r5,#0x00
                            617 ;	genAssign
   0060 90s00r03            618 	mov	dptr,#_atoh_result_1_1
   0063 ED                  619 	mov	a,r5
   0064 F0                  620 	movx	@dptr,a
   0065 A3                  621 	inc	dptr
   0066 EE                  622 	mov	a,r6
   0067 F0                  623 	movx	@dptr,a
                            624 ;	atoh_f.c:30: c++;
                            625 ;	genPlus
   0068 90s00r00            626 	mov	dptr,#_atoh_c_1_1
                            627 ;     genPlusIncr
   006B 74 01               628 	mov	a,#0x01
                            629 ;	Peephole 236.a	used r2 instead of ar2
   006D 2A                  630 	add	a,r2
   006E F0                  631 	movx	@dptr,a
                            632 ;	Peephole 181	changed mov to clr
   006F E4                  633 	clr	a
                            634 ;	Peephole 236.b	used r3 instead of ar3
   0070 3B                  635 	addc	a,r3
   0071 A3                  636 	inc	dptr
   0072 F0                  637 	movx	@dptr,a
   0073 A3                  638 	inc	dptr
   0074 EC                  639 	mov	a,r4
   0075 F0                  640 	movx	@dptr,a
                            641 ;	Peephole 112.b	changed ljmp to sjmp
   0076 80 04               642 	sjmp	00105$
   0078                     643 00104$:
                            644 ;	atoh_f.c:32: else{return 2103;}
                            645 ;	genRet
                            646 ;	Peephole 182.b	used 16 bit load of dptr
   0078 90 08 37            647 	mov	dptr,#0x0837
                            648 ;	Peephole 251.a	replaced ljmp to ret with ret
   007B 22                  649 	ret
   007C                     650 00105$:
                            651 ;	atoh_f.c:35: if(*(c)>=48 && *(c)<=57 )
                            652 ;	genAssign
   007C 90s00r00            653 	mov	dptr,#_atoh_c_1_1
   007F E0                  654 	movx	a,@dptr
   0080 FA                  655 	mov	r2,a
   0081 A3                  656 	inc	dptr
   0082 E0                  657 	movx	a,@dptr
   0083 FB                  658 	mov	r3,a
   0084 A3                  659 	inc	dptr
   0085 E0                  660 	movx	a,@dptr
   0086 FC                  661 	mov	r4,a
                            662 ;	genPointerGet
                            663 ;	genGenPointerGet
   0087 8A 82               664 	mov	dpl,r2
   0089 8B 83               665 	mov	dph,r3
   008B 8C F0               666 	mov	b,r4
   008D 12s00r00            667 	lcall	__gptrget
                            668 ;	genCmpLt
                            669 ;	genCmp
   0090 FD                  670 	mov	r5,a
   0091 C3                  671 	clr	c
                            672 ;	Peephole 106	removed redundant mov
   0092 64 80               673 	xrl	a,#0x80
   0094 94 B0               674 	subb	a,#0xb0
                            675 ;	genIfxJump
                            676 ;	Peephole 112.b	changed ljmp to sjmp
                            677 ;	Peephole 160.a	removed sjmp by inverse jump logic
                            678 ;	genCmpGt
                            679 ;	genCmp
   0096 40 48               680 	jc	00116$
                            681 ;	Peephole 300	removed redundant label 00151$
                            682 ;	Peephole 256.a	removed redundant clr c
                            683 ;	Peephole 159	avoided xrl during execution
   0098 74 B9               684 	mov	a,#(0x39 ^ 0x80)
   009A 8D F0               685 	mov	b,r5
   009C 63 F0 80            686 	xrl	b,#0x80
   009F 95 F0               687 	subb	a,b
                            688 ;	genIfxJump
                            689 ;	Peephole 112.b	changed ljmp to sjmp
                            690 ;	Peephole 160.a	removed sjmp by inverse jump logic
   00A1 40 3D               691 	jc	00116$
                            692 ;	Peephole 300	removed redundant label 00152$
                            693 ;	atoh_f.c:37: result += (*c-48)*16;
                            694 ;	genCast
   00A3 ED                  695 	mov	a,r5
   00A4 33                  696 	rlc	a
   00A5 95 E0               697 	subb	a,acc
   00A7 FE                  698 	mov	r6,a
                            699 ;	genMinus
   00A8 ED                  700 	mov	a,r5
   00A9 24 D0               701 	add	a,#0xd0
   00AB FD                  702 	mov	r5,a
   00AC EE                  703 	mov	a,r6
   00AD 34 FF               704 	addc	a,#0xff
                            705 ;	genLeftShift
                            706 ;	genLeftShiftLiteral
                            707 ;	genlshTwo
   00AF FE                  708 	mov	r6,a
                            709 ;	Peephole 105	removed redundant mov
   00B0 C4                  710 	swap	a
   00B1 54 F0               711 	anl	a,#0xf0
   00B3 CD                  712 	xch	a,r5
   00B4 C4                  713 	swap	a
   00B5 CD                  714 	xch	a,r5
   00B6 6D                  715 	xrl	a,r5
   00B7 CD                  716 	xch	a,r5
   00B8 54 F0               717 	anl	a,#0xf0
   00BA CD                  718 	xch	a,r5
   00BB 6D                  719 	xrl	a,r5
   00BC FE                  720 	mov	r6,a
                            721 ;	genAssign
   00BD 90s00r03            722 	mov	dptr,#_atoh_result_1_1
   00C0 E0                  723 	movx	a,@dptr
   00C1 FF                  724 	mov	r7,a
   00C2 A3                  725 	inc	dptr
   00C3 E0                  726 	movx	a,@dptr
   00C4 F8                  727 	mov	r0,a
                            728 ;	genPlus
   00C5 90s00r03            729 	mov	dptr,#_atoh_result_1_1
                            730 ;	Peephole 236.g	used r5 instead of ar5
   00C8 ED                  731 	mov	a,r5
                            732 ;	Peephole 236.a	used r7 instead of ar7
   00C9 2F                  733 	add	a,r7
   00CA F0                  734 	movx	@dptr,a
                            735 ;	Peephole 236.g	used r6 instead of ar6
   00CB EE                  736 	mov	a,r6
                            737 ;	Peephole 236.b	used r0 instead of ar0
   00CC 38                  738 	addc	a,r0
   00CD A3                  739 	inc	dptr
   00CE F0                  740 	movx	@dptr,a
                            741 ;	atoh_f.c:38: c++;
                            742 ;	genPlus
   00CF 90s00r00            743 	mov	dptr,#_atoh_c_1_1
                            744 ;     genPlusIncr
   00D2 74 01               745 	mov	a,#0x01
                            746 ;	Peephole 236.a	used r2 instead of ar2
   00D4 2A                  747 	add	a,r2
   00D5 F0                  748 	movx	@dptr,a
                            749 ;	Peephole 181	changed mov to clr
   00D6 E4                  750 	clr	a
                            751 ;	Peephole 236.b	used r3 instead of ar3
   00D7 3B                  752 	addc	a,r3
   00D8 A3                  753 	inc	dptr
   00D9 F0                  754 	movx	@dptr,a
   00DA A3                  755 	inc	dptr
   00DB EC                  756 	mov	a,r4
   00DC F0                  757 	movx	@dptr,a
   00DD 02s01rAB            758 	ljmp	00117$
   00E0                     759 00116$:
                            760 ;	atoh_f.c:40: else if(*(c)>=97 && *(c)<=102)
                            761 ;	genAssign
   00E0 90s00r00            762 	mov	dptr,#_atoh_c_1_1
   00E3 E0                  763 	movx	a,@dptr
   00E4 FA                  764 	mov	r2,a
   00E5 A3                  765 	inc	dptr
   00E6 E0                  766 	movx	a,@dptr
   00E7 FB                  767 	mov	r3,a
   00E8 A3                  768 	inc	dptr
   00E9 E0                  769 	movx	a,@dptr
   00EA FC                  770 	mov	r4,a
                            771 ;	genPointerGet
                            772 ;	genGenPointerGet
   00EB 8A 82               773 	mov	dpl,r2
   00ED 8B 83               774 	mov	dph,r3
   00EF 8C F0               775 	mov	b,r4
   00F1 12s00r00            776 	lcall	__gptrget
                            777 ;	genCmpLt
                            778 ;	genCmp
   00F4 FD                  779 	mov	r5,a
   00F5 C3                  780 	clr	c
                            781 ;	Peephole 106	removed redundant mov
   00F6 64 80               782 	xrl	a,#0x80
   00F8 94 E1               783 	subb	a,#0xe1
                            784 ;	genIfxJump
                            785 ;	Peephole 112.b	changed ljmp to sjmp
                            786 ;	Peephole 160.a	removed sjmp by inverse jump logic
                            787 ;	genCmpGt
                            788 ;	genCmp
   00FA 40 48               789 	jc	00112$
                            790 ;	Peephole 300	removed redundant label 00153$
                            791 ;	Peephole 256.a	removed redundant clr c
                            792 ;	Peephole 159	avoided xrl during execution
   00FC 74 E6               793 	mov	a,#(0x66 ^ 0x80)
   00FE 8D F0               794 	mov	b,r5
   0100 63 F0 80            795 	xrl	b,#0x80
   0103 95 F0               796 	subb	a,b
                            797 ;	genIfxJump
                            798 ;	Peephole 112.b	changed ljmp to sjmp
                            799 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0105 40 3D               800 	jc	00112$
                            801 ;	Peephole 300	removed redundant label 00154$
                            802 ;	atoh_f.c:42: result += (*c - 87)*16;
                            803 ;	genCast
   0107 ED                  804 	mov	a,r5
   0108 33                  805 	rlc	a
   0109 95 E0               806 	subb	a,acc
   010B FE                  807 	mov	r6,a
                            808 ;	genMinus
   010C ED                  809 	mov	a,r5
   010D 24 A9               810 	add	a,#0xa9
   010F FD                  811 	mov	r5,a
   0110 EE                  812 	mov	a,r6
   0111 34 FF               813 	addc	a,#0xff
                            814 ;	genLeftShift
                            815 ;	genLeftShiftLiteral
                            816 ;	genlshTwo
   0113 FE                  817 	mov	r6,a
                            818 ;	Peephole 105	removed redundant mov
   0114 C4                  819 	swap	a
   0115 54 F0               820 	anl	a,#0xf0
   0117 CD                  821 	xch	a,r5
   0118 C4                  822 	swap	a
   0119 CD                  823 	xch	a,r5
   011A 6D                  824 	xrl	a,r5
   011B CD                  825 	xch	a,r5
   011C 54 F0               826 	anl	a,#0xf0
   011E CD                  827 	xch	a,r5
   011F 6D                  828 	xrl	a,r5
   0120 FE                  829 	mov	r6,a
                            830 ;	genAssign
   0121 90s00r03            831 	mov	dptr,#_atoh_result_1_1
   0124 E0                  832 	movx	a,@dptr
   0125 FF                  833 	mov	r7,a
   0126 A3                  834 	inc	dptr
   0127 E0                  835 	movx	a,@dptr
   0128 F8                  836 	mov	r0,a
                            837 ;	genPlus
   0129 90s00r03            838 	mov	dptr,#_atoh_result_1_1
                            839 ;	Peephole 236.g	used r5 instead of ar5
   012C ED                  840 	mov	a,r5
                            841 ;	Peephole 236.a	used r7 instead of ar7
   012D 2F                  842 	add	a,r7
   012E F0                  843 	movx	@dptr,a
                            844 ;	Peephole 236.g	used r6 instead of ar6
   012F EE                  845 	mov	a,r6
                            846 ;	Peephole 236.b	used r0 instead of ar0
   0130 38                  847 	addc	a,r0
   0131 A3                  848 	inc	dptr
   0132 F0                  849 	movx	@dptr,a
                            850 ;	atoh_f.c:43: c++;
                            851 ;	genPlus
   0133 90s00r00            852 	mov	dptr,#_atoh_c_1_1
                            853 ;     genPlusIncr
   0136 74 01               854 	mov	a,#0x01
                            855 ;	Peephole 236.a	used r2 instead of ar2
   0138 2A                  856 	add	a,r2
   0139 F0                  857 	movx	@dptr,a
                            858 ;	Peephole 181	changed mov to clr
   013A E4                  859 	clr	a
                            860 ;	Peephole 236.b	used r3 instead of ar3
   013B 3B                  861 	addc	a,r3
   013C A3                  862 	inc	dptr
   013D F0                  863 	movx	@dptr,a
   013E A3                  864 	inc	dptr
   013F EC                  865 	mov	a,r4
   0140 F0                  866 	movx	@dptr,a
   0141 02s01rAB            867 	ljmp	00117$
   0144                     868 00112$:
                            869 ;	atoh_f.c:45: else if(*(c)>=65 && *(c)<=70)
                            870 ;	genAssign
   0144 90s00r00            871 	mov	dptr,#_atoh_c_1_1
   0147 E0                  872 	movx	a,@dptr
   0148 FA                  873 	mov	r2,a
   0149 A3                  874 	inc	dptr
   014A E0                  875 	movx	a,@dptr
   014B FB                  876 	mov	r3,a
   014C A3                  877 	inc	dptr
   014D E0                  878 	movx	a,@dptr
   014E FC                  879 	mov	r4,a
                            880 ;	genPointerGet
                            881 ;	genGenPointerGet
   014F 8A 82               882 	mov	dpl,r2
   0151 8B 83               883 	mov	dph,r3
   0153 8C F0               884 	mov	b,r4
   0155 12s00r00            885 	lcall	__gptrget
                            886 ;	genCmpLt
                            887 ;	genCmp
   0158 FD                  888 	mov	r5,a
   0159 C3                  889 	clr	c
                            890 ;	Peephole 106	removed redundant mov
   015A 64 80               891 	xrl	a,#0x80
   015C 94 C1               892 	subb	a,#0xc1
                            893 ;	genIfxJump
                            894 ;	Peephole 112.b	changed ljmp to sjmp
                            895 ;	Peephole 160.a	removed sjmp by inverse jump logic
                            896 ;	genCmpGt
                            897 ;	genCmp
   015E 40 47               898 	jc	00108$
                            899 ;	Peephole 300	removed redundant label 00155$
                            900 ;	Peephole 256.a	removed redundant clr c
                            901 ;	Peephole 159	avoided xrl during execution
   0160 74 C6               902 	mov	a,#(0x46 ^ 0x80)
   0162 8D F0               903 	mov	b,r5
   0164 63 F0 80            904 	xrl	b,#0x80
   0167 95 F0               905 	subb	a,b
                            906 ;	genIfxJump
                            907 ;	Peephole 112.b	changed ljmp to sjmp
                            908 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0169 40 3C               909 	jc	00108$
                            910 ;	Peephole 300	removed redundant label 00156$
                            911 ;	atoh_f.c:47: result += (*c - 55)*16;
                            912 ;	genCast
   016B ED                  913 	mov	a,r5
   016C 33                  914 	rlc	a
   016D 95 E0               915 	subb	a,acc
   016F FE                  916 	mov	r6,a
                            917 ;	genMinus
   0170 ED                  918 	mov	a,r5
   0171 24 C9               919 	add	a,#0xc9
   0173 FD                  920 	mov	r5,a
   0174 EE                  921 	mov	a,r6
   0175 34 FF               922 	addc	a,#0xff
                            923 ;	genLeftShift
                            924 ;	genLeftShiftLiteral
                            925 ;	genlshTwo
   0177 FE                  926 	mov	r6,a
                            927 ;	Peephole 105	removed redundant mov
   0178 C4                  928 	swap	a
   0179 54 F0               929 	anl	a,#0xf0
   017B CD                  930 	xch	a,r5
   017C C4                  931 	swap	a
   017D CD                  932 	xch	a,r5
   017E 6D                  933 	xrl	a,r5
   017F CD                  934 	xch	a,r5
   0180 54 F0               935 	anl	a,#0xf0
   0182 CD                  936 	xch	a,r5
   0183 6D                  937 	xrl	a,r5
   0184 FE                  938 	mov	r6,a
                            939 ;	genAssign
   0185 90s00r03            940 	mov	dptr,#_atoh_result_1_1
   0188 E0                  941 	movx	a,@dptr
   0189 FF                  942 	mov	r7,a
   018A A3                  943 	inc	dptr
   018B E0                  944 	movx	a,@dptr
   018C F8                  945 	mov	r0,a
                            946 ;	genPlus
   018D 90s00r03            947 	mov	dptr,#_atoh_result_1_1
                            948 ;	Peephole 236.g	used r5 instead of ar5
   0190 ED                  949 	mov	a,r5
                            950 ;	Peephole 236.a	used r7 instead of ar7
   0191 2F                  951 	add	a,r7
   0192 F0                  952 	movx	@dptr,a
                            953 ;	Peephole 236.g	used r6 instead of ar6
   0193 EE                  954 	mov	a,r6
                            955 ;	Peephole 236.b	used r0 instead of ar0
   0194 38                  956 	addc	a,r0
   0195 A3                  957 	inc	dptr
   0196 F0                  958 	movx	@dptr,a
                            959 ;	atoh_f.c:48: c++;
                            960 ;	genPlus
   0197 90s00r00            961 	mov	dptr,#_atoh_c_1_1
                            962 ;     genPlusIncr
   019A 74 01               963 	mov	a,#0x01
                            964 ;	Peephole 236.a	used r2 instead of ar2
   019C 2A                  965 	add	a,r2
   019D F0                  966 	movx	@dptr,a
                            967 ;	Peephole 181	changed mov to clr
   019E E4                  968 	clr	a
                            969 ;	Peephole 236.b	used r3 instead of ar3
   019F 3B                  970 	addc	a,r3
   01A0 A3                  971 	inc	dptr
   01A1 F0                  972 	movx	@dptr,a
   01A2 A3                  973 	inc	dptr
   01A3 EC                  974 	mov	a,r4
   01A4 F0                  975 	movx	@dptr,a
                            976 ;	Peephole 112.b	changed ljmp to sjmp
   01A5 80 04               977 	sjmp	00117$
   01A7                     978 00108$:
                            979 ;	atoh_f.c:52: return 2101;
                            980 ;	genRet
                            981 ;	Peephole 182.b	used 16 bit load of dptr
   01A7 90 08 35            982 	mov	dptr,#0x0835
                            983 ;	Peephole 251.a	replaced ljmp to ret with ret
   01AA 22                  984 	ret
   01AB                     985 00117$:
                            986 ;	atoh_f.c:57: if(*(c)>=48 && *(c)<=57)
                            987 ;	genAssign
   01AB 90s00r00            988 	mov	dptr,#_atoh_c_1_1
   01AE E0                  989 	movx	a,@dptr
   01AF FA                  990 	mov	r2,a
   01B0 A3                  991 	inc	dptr
   01B1 E0                  992 	movx	a,@dptr
   01B2 FB                  993 	mov	r3,a
   01B3 A3                  994 	inc	dptr
   01B4 E0                  995 	movx	a,@dptr
   01B5 FC                  996 	mov	r4,a
                            997 ;	genPointerGet
                            998 ;	genGenPointerGet
   01B6 8A 82               999 	mov	dpl,r2
   01B8 8B 83              1000 	mov	dph,r3
   01BA 8C F0              1001 	mov	b,r4
   01BC 12s00r00           1002 	lcall	__gptrget
                           1003 ;	genCmpLt
                           1004 ;	genCmp
   01BF FA                 1005 	mov	r2,a
   01C0 C3                 1006 	clr	c
                           1007 ;	Peephole 106	removed redundant mov
   01C1 64 80              1008 	xrl	a,#0x80
   01C3 94 B0              1009 	subb	a,#0xb0
                           1010 ;	genIfxJump
                           1011 ;	Peephole 112.b	changed ljmp to sjmp
                           1012 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1013 ;	genCmpGt
                           1014 ;	genCmp
   01C5 40 2D              1015 	jc	00128$
                           1016 ;	Peephole 300	removed redundant label 00157$
                           1017 ;	Peephole 256.a	removed redundant clr c
                           1018 ;	Peephole 159	avoided xrl during execution
   01C7 74 B9              1019 	mov	a,#(0x39 ^ 0x80)
   01C9 8A F0              1020 	mov	b,r2
   01CB 63 F0 80           1021 	xrl	b,#0x80
   01CE 95 F0              1022 	subb	a,b
                           1023 ;	genIfxJump
                           1024 ;	Peephole 112.b	changed ljmp to sjmp
                           1025 ;	Peephole 160.a	removed sjmp by inverse jump logic
   01D0 40 22              1026 	jc	00128$
                           1027 ;	Peephole 300	removed redundant label 00158$
                           1028 ;	atoh_f.c:59: result += (*c - 48);
                           1029 ;	genCast
   01D2 EA                 1030 	mov	a,r2
   01D3 33                 1031 	rlc	a
   01D4 95 E0              1032 	subb	a,acc
   01D6 FB                 1033 	mov	r3,a
                           1034 ;	genMinus
   01D7 EA                 1035 	mov	a,r2
   01D8 24 D0              1036 	add	a,#0xd0
   01DA FA                 1037 	mov	r2,a
   01DB EB                 1038 	mov	a,r3
   01DC 34 FF              1039 	addc	a,#0xff
   01DE FB                 1040 	mov	r3,a
                           1041 ;	genAssign
   01DF 90s00r03           1042 	mov	dptr,#_atoh_result_1_1
   01E2 E0                 1043 	movx	a,@dptr
   01E3 FC                 1044 	mov	r4,a
   01E4 A3                 1045 	inc	dptr
   01E5 E0                 1046 	movx	a,@dptr
   01E6 FD                 1047 	mov	r5,a
                           1048 ;	genPlus
   01E7 90s00r03           1049 	mov	dptr,#_atoh_result_1_1
                           1050 ;	Peephole 236.g	used r2 instead of ar2
   01EA EA                 1051 	mov	a,r2
                           1052 ;	Peephole 236.a	used r4 instead of ar4
   01EB 2C                 1053 	add	a,r4
   01EC F0                 1054 	movx	@dptr,a
                           1055 ;	Peephole 236.g	used r3 instead of ar3
   01ED EB                 1056 	mov	a,r3
                           1057 ;	Peephole 236.b	used r5 instead of ar5
   01EE 3D                 1058 	addc	a,r5
   01EF A3                 1059 	inc	dptr
   01F0 F0                 1060 	movx	@dptr,a
   01F1 02s02r88           1061 	ljmp	00129$
   01F4                    1062 00128$:
                           1063 ;	atoh_f.c:61: else if(*(c)>=97 && *(c)<=102)
                           1064 ;	genAssign
   01F4 90s00r00           1065 	mov	dptr,#_atoh_c_1_1
   01F7 E0                 1066 	movx	a,@dptr
   01F8 FA                 1067 	mov	r2,a
   01F9 A3                 1068 	inc	dptr
   01FA E0                 1069 	movx	a,@dptr
   01FB FB                 1070 	mov	r3,a
   01FC A3                 1071 	inc	dptr
   01FD E0                 1072 	movx	a,@dptr
   01FE FC                 1073 	mov	r4,a
                           1074 ;	genPointerGet
                           1075 ;	genGenPointerGet
   01FF 8A 82              1076 	mov	dpl,r2
   0201 8B 83              1077 	mov	dph,r3
   0203 8C F0              1078 	mov	b,r4
   0205 12s00r00           1079 	lcall	__gptrget
                           1080 ;	genCmpLt
                           1081 ;	genCmp
   0208 FA                 1082 	mov	r2,a
   0209 C3                 1083 	clr	c
                           1084 ;	Peephole 106	removed redundant mov
   020A 64 80              1085 	xrl	a,#0x80
   020C 94 E1              1086 	subb	a,#0xe1
                           1087 ;	genIfxJump
                           1088 ;	Peephole 112.b	changed ljmp to sjmp
                           1089 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1090 ;	genCmpGt
                           1091 ;	genCmp
   020E 40 2C              1092 	jc	00124$
                           1093 ;	Peephole 300	removed redundant label 00159$
                           1094 ;	Peephole 256.a	removed redundant clr c
                           1095 ;	Peephole 159	avoided xrl during execution
   0210 74 E6              1096 	mov	a,#(0x66 ^ 0x80)
   0212 8A F0              1097 	mov	b,r2
   0214 63 F0 80           1098 	xrl	b,#0x80
   0217 95 F0              1099 	subb	a,b
                           1100 ;	genIfxJump
                           1101 ;	Peephole 112.b	changed ljmp to sjmp
                           1102 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0219 40 21              1103 	jc	00124$
                           1104 ;	Peephole 300	removed redundant label 00160$
                           1105 ;	atoh_f.c:63: result += (*c - 87);
                           1106 ;	genCast
   021B EA                 1107 	mov	a,r2
   021C 33                 1108 	rlc	a
   021D 95 E0              1109 	subb	a,acc
   021F FB                 1110 	mov	r3,a
                           1111 ;	genMinus
   0220 EA                 1112 	mov	a,r2
   0221 24 A9              1113 	add	a,#0xa9
   0223 FA                 1114 	mov	r2,a
   0224 EB                 1115 	mov	a,r3
   0225 34 FF              1116 	addc	a,#0xff
   0227 FB                 1117 	mov	r3,a
                           1118 ;	genAssign
   0228 90s00r03           1119 	mov	dptr,#_atoh_result_1_1
   022B E0                 1120 	movx	a,@dptr
   022C FC                 1121 	mov	r4,a
   022D A3                 1122 	inc	dptr
   022E E0                 1123 	movx	a,@dptr
   022F FD                 1124 	mov	r5,a
                           1125 ;	genPlus
   0230 90s00r03           1126 	mov	dptr,#_atoh_result_1_1
                           1127 ;	Peephole 236.g	used r2 instead of ar2
   0233 EA                 1128 	mov	a,r2
                           1129 ;	Peephole 236.a	used r4 instead of ar4
   0234 2C                 1130 	add	a,r4
   0235 F0                 1131 	movx	@dptr,a
                           1132 ;	Peephole 236.g	used r3 instead of ar3
   0236 EB                 1133 	mov	a,r3
                           1134 ;	Peephole 236.b	used r5 instead of ar5
   0237 3D                 1135 	addc	a,r5
   0238 A3                 1136 	inc	dptr
   0239 F0                 1137 	movx	@dptr,a
                           1138 ;	Peephole 112.b	changed ljmp to sjmp
   023A 80 4C              1139 	sjmp	00129$
   023C                    1140 00124$:
                           1141 ;	atoh_f.c:65: else if(*(c)>=65 && *(c)<=70)
                           1142 ;	genAssign
   023C 90s00r00           1143 	mov	dptr,#_atoh_c_1_1
   023F E0                 1144 	movx	a,@dptr
   0240 FA                 1145 	mov	r2,a
   0241 A3                 1146 	inc	dptr
   0242 E0                 1147 	movx	a,@dptr
   0243 FB                 1148 	mov	r3,a
   0244 A3                 1149 	inc	dptr
   0245 E0                 1150 	movx	a,@dptr
   0246 FC                 1151 	mov	r4,a
                           1152 ;	genPointerGet
                           1153 ;	genGenPointerGet
   0247 8A 82              1154 	mov	dpl,r2
   0249 8B 83              1155 	mov	dph,r3
   024B 8C F0              1156 	mov	b,r4
   024D 12s00r00           1157 	lcall	__gptrget
                           1158 ;	genCmpLt
                           1159 ;	genCmp
   0250 FA                 1160 	mov	r2,a
   0251 C3                 1161 	clr	c
                           1162 ;	Peephole 106	removed redundant mov
   0252 64 80              1163 	xrl	a,#0x80
   0254 94 C1              1164 	subb	a,#0xc1
                           1165 ;	genIfxJump
                           1166 ;	Peephole 112.b	changed ljmp to sjmp
                           1167 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1168 ;	genCmpGt
                           1169 ;	genCmp
   0256 40 2C              1170 	jc	00120$
                           1171 ;	Peephole 300	removed redundant label 00161$
                           1172 ;	Peephole 256.a	removed redundant clr c
                           1173 ;	Peephole 159	avoided xrl during execution
   0258 74 C6              1174 	mov	a,#(0x46 ^ 0x80)
   025A 8A F0              1175 	mov	b,r2
   025C 63 F0 80           1176 	xrl	b,#0x80
   025F 95 F0              1177 	subb	a,b
                           1178 ;	genIfxJump
                           1179 ;	Peephole 112.b	changed ljmp to sjmp
                           1180 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0261 40 21              1181 	jc	00120$
                           1182 ;	Peephole 300	removed redundant label 00162$
                           1183 ;	atoh_f.c:67: result += (*c - 55);
                           1184 ;	genCast
   0263 EA                 1185 	mov	a,r2
   0264 33                 1186 	rlc	a
   0265 95 E0              1187 	subb	a,acc
   0267 FB                 1188 	mov	r3,a
                           1189 ;	genMinus
   0268 EA                 1190 	mov	a,r2
   0269 24 C9              1191 	add	a,#0xc9
   026B FA                 1192 	mov	r2,a
   026C EB                 1193 	mov	a,r3
   026D 34 FF              1194 	addc	a,#0xff
   026F FB                 1195 	mov	r3,a
                           1196 ;	genAssign
   0270 90s00r03           1197 	mov	dptr,#_atoh_result_1_1
   0273 E0                 1198 	movx	a,@dptr
   0274 FC                 1199 	mov	r4,a
   0275 A3                 1200 	inc	dptr
   0276 E0                 1201 	movx	a,@dptr
   0277 FD                 1202 	mov	r5,a
                           1203 ;	genPlus
   0278 90s00r03           1204 	mov	dptr,#_atoh_result_1_1
                           1205 ;	Peephole 236.g	used r2 instead of ar2
   027B EA                 1206 	mov	a,r2
                           1207 ;	Peephole 236.a	used r4 instead of ar4
   027C 2C                 1208 	add	a,r4
   027D F0                 1209 	movx	@dptr,a
                           1210 ;	Peephole 236.g	used r3 instead of ar3
   027E EB                 1211 	mov	a,r3
                           1212 ;	Peephole 236.b	used r5 instead of ar5
   027F 3D                 1213 	addc	a,r5
   0280 A3                 1214 	inc	dptr
   0281 F0                 1215 	movx	@dptr,a
                           1216 ;	Peephole 112.b	changed ljmp to sjmp
   0282 80 04              1217 	sjmp	00129$
   0284                    1218 00120$:
                           1219 ;	atoh_f.c:71: return 2102;
                           1220 ;	genRet
                           1221 ;	Peephole 182.b	used 16 bit load of dptr
   0284 90 08 36           1222 	mov	dptr,#0x0836
                           1223 ;	Peephole 112.b	changed ljmp to sjmp
                           1224 ;	Peephole 251.b	replaced sjmp to ret with ret
   0287 22                 1225 	ret
   0288                    1226 00129$:
                           1227 ;	atoh_f.c:74: return result;
                           1228 ;	genAssign
   0288 90s00r03           1229 	mov	dptr,#_atoh_result_1_1
   028B E0                 1230 	movx	a,@dptr
   028C FA                 1231 	mov	r2,a
   028D A3                 1232 	inc	dptr
   028E E0                 1233 	movx	a,@dptr
                           1234 ;	genRet
                           1235 ;	Peephole 234.b	loading dph directly from a(ccumulator), r3 not set
   028F 8A 82              1236 	mov	dpl,r2
   0291 F5 83              1237 	mov	dph,a
                           1238 ;	Peephole 300	removed redundant label 00131$
   0293 22                 1239 	ret
                           1240 ;------------------------------------------------------------
                           1241 ;Allocation info for local variables in function 'atoh_data'
                           1242 ;------------------------------------------------------------
                           1243 ;c                         Allocated with name '_atoh_data_c_1_1'
                           1244 ;result                    Allocated with name '_atoh_data_result_1_1'
                           1245 ;i                         Allocated with name '_atoh_data_i_1_1'
                           1246 ;------------------------------------------------------------
                           1247 ;	atoh_f.c:78: int atoh_data(char *c)
                           1248 ;	-----------------------------------------
                           1249 ;	 function atoh_data
                           1250 ;	-----------------------------------------
   0294                    1251 _atoh_data:
                           1252 ;	genReceive
   0294 AA F0              1253 	mov	r2,b
   0296 AB 83              1254 	mov	r3,dph
   0298 E5 82              1255 	mov	a,dpl
   029A 90s00r05           1256 	mov	dptr,#_atoh_data_c_1_1
   029D F0                 1257 	movx	@dptr,a
   029E A3                 1258 	inc	dptr
   029F EB                 1259 	mov	a,r3
   02A0 F0                 1260 	movx	@dptr,a
   02A1 A3                 1261 	inc	dptr
   02A2 EA                 1262 	mov	a,r2
   02A3 F0                 1263 	movx	@dptr,a
                           1264 ;	atoh_f.c:82: if(*(c+2) != '\0')
                           1265 ;	genAssign
   02A4 90s00r05           1266 	mov	dptr,#_atoh_data_c_1_1
   02A7 E0                 1267 	movx	a,@dptr
   02A8 FA                 1268 	mov	r2,a
   02A9 A3                 1269 	inc	dptr
   02AA E0                 1270 	movx	a,@dptr
   02AB FB                 1271 	mov	r3,a
   02AC A3                 1272 	inc	dptr
   02AD E0                 1273 	movx	a,@dptr
   02AE FC                 1274 	mov	r4,a
                           1275 ;	genPlus
                           1276 ;     genPlusIncr
   02AF 74 02              1277 	mov	a,#0x02
                           1278 ;	Peephole 236.a	used r2 instead of ar2
   02B1 2A                 1279 	add	a,r2
   02B2 FD                 1280 	mov	r5,a
                           1281 ;	Peephole 181	changed mov to clr
   02B3 E4                 1282 	clr	a
                           1283 ;	Peephole 236.b	used r3 instead of ar3
   02B4 3B                 1284 	addc	a,r3
   02B5 FE                 1285 	mov	r6,a
   02B6 8C 07              1286 	mov	ar7,r4
                           1287 ;	genPointerGet
                           1288 ;	genGenPointerGet
   02B8 8D 82              1289 	mov	dpl,r5
   02BA 8E 83              1290 	mov	dph,r6
   02BC 8F F0              1291 	mov	b,r7
   02BE 12s00r00           1292 	lcall	__gptrget
                           1293 ;	genCmpEq
                           1294 ;	gencjneshort
                           1295 ;	Peephole 112.b	changed ljmp to sjmp
   02C1 FD                 1296 	mov	r5,a
                           1297 ;	Peephole 115.b	jump optimization
   02C2 60 04              1298 	jz	00102$
                           1299 ;	Peephole 300	removed redundant label 00142$
                           1300 ;	atoh_f.c:84: return 258;
                           1301 ;	genRet
                           1302 ;	Peephole 182.b	used 16 bit load of dptr
   02C4 90 01 02           1303 	mov	dptr,#0x0102
                           1304 ;	Peephole 251.a	replaced ljmp to ret with ret
   02C7 22                 1305 	ret
   02C8                    1306 00102$:
                           1307 ;	atoh_f.c:87: if(*(c)>=48 && *(c)<=57 )
                           1308 ;	genPointerGet
                           1309 ;	genGenPointerGet
   02C8 8A 82              1310 	mov	dpl,r2
   02CA 8B 83              1311 	mov	dph,r3
   02CC 8C F0              1312 	mov	b,r4
   02CE 12s00r00           1313 	lcall	__gptrget
                           1314 ;	genCmpLt
                           1315 ;	genCmp
   02D1 FD                 1316 	mov	r5,a
   02D2 C3                 1317 	clr	c
                           1318 ;	Peephole 106	removed redundant mov
   02D3 64 80              1319 	xrl	a,#0x80
   02D5 94 B0              1320 	subb	a,#0xb0
                           1321 ;	genIfxJump
                           1322 ;	Peephole 112.b	changed ljmp to sjmp
                           1323 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1324 ;	genCmpGt
                           1325 ;	genCmp
   02D7 40 3E              1326 	jc	00112$
                           1327 ;	Peephole 300	removed redundant label 00143$
                           1328 ;	Peephole 256.a	removed redundant clr c
                           1329 ;	Peephole 159	avoided xrl during execution
   02D9 74 B9              1330 	mov	a,#(0x39 ^ 0x80)
   02DB 8D F0              1331 	mov	b,r5
   02DD 63 F0 80           1332 	xrl	b,#0x80
   02E0 95 F0              1333 	subb	a,b
                           1334 ;	genIfxJump
                           1335 ;	Peephole 112.b	changed ljmp to sjmp
                           1336 ;	Peephole 160.a	removed sjmp by inverse jump logic
   02E2 40 33              1337 	jc	00112$
                           1338 ;	Peephole 300	removed redundant label 00144$
                           1339 ;	atoh_f.c:89: result = (*c-48)*16;
                           1340 ;	genCast
   02E4 ED                 1341 	mov	a,r5
   02E5 33                 1342 	rlc	a
   02E6 95 E0              1343 	subb	a,acc
   02E8 FE                 1344 	mov	r6,a
                           1345 ;	genMinus
   02E9 ED                 1346 	mov	a,r5
   02EA 24 D0              1347 	add	a,#0xd0
   02EC FD                 1348 	mov	r5,a
   02ED EE                 1349 	mov	a,r6
   02EE 34 FF              1350 	addc	a,#0xff
                           1351 ;	genLeftShift
                           1352 ;	genLeftShiftLiteral
                           1353 ;	genlshTwo
   02F0 FE                 1354 	mov	r6,a
                           1355 ;	Peephole 105	removed redundant mov
   02F1 C4                 1356 	swap	a
   02F2 54 F0              1357 	anl	a,#0xf0
   02F4 CD                 1358 	xch	a,r5
   02F5 C4                 1359 	swap	a
   02F6 CD                 1360 	xch	a,r5
   02F7 6D                 1361 	xrl	a,r5
   02F8 CD                 1362 	xch	a,r5
   02F9 54 F0              1363 	anl	a,#0xf0
   02FB CD                 1364 	xch	a,r5
   02FC 6D                 1365 	xrl	a,r5
   02FD FE                 1366 	mov	r6,a
                           1367 ;	genAssign
   02FE 90s00r08           1368 	mov	dptr,#_atoh_data_result_1_1
   0301 ED                 1369 	mov	a,r5
   0302 F0                 1370 	movx	@dptr,a
   0303 A3                 1371 	inc	dptr
   0304 EE                 1372 	mov	a,r6
   0305 F0                 1373 	movx	@dptr,a
                           1374 ;	atoh_f.c:90: c++;
                           1375 ;	genPlus
   0306 90s00r05           1376 	mov	dptr,#_atoh_data_c_1_1
                           1377 ;     genPlusIncr
   0309 74 01              1378 	mov	a,#0x01
                           1379 ;	Peephole 236.a	used r2 instead of ar2
   030B 2A                 1380 	add	a,r2
   030C F0                 1381 	movx	@dptr,a
                           1382 ;	Peephole 181	changed mov to clr
   030D E4                 1383 	clr	a
                           1384 ;	Peephole 236.b	used r3 instead of ar3
   030E 3B                 1385 	addc	a,r3
   030F A3                 1386 	inc	dptr
   0310 F0                 1387 	movx	@dptr,a
   0311 A3                 1388 	inc	dptr
   0312 EC                 1389 	mov	a,r4
   0313 F0                 1390 	movx	@dptr,a
   0314 02s03rCD           1391 	ljmp	00113$
   0317                    1392 00112$:
                           1393 ;	atoh_f.c:92: else if(*(c)>=97 && *(c)<=102)
                           1394 ;	genAssign
   0317 90s00r05           1395 	mov	dptr,#_atoh_data_c_1_1
   031A E0                 1396 	movx	a,@dptr
   031B FA                 1397 	mov	r2,a
   031C A3                 1398 	inc	dptr
   031D E0                 1399 	movx	a,@dptr
   031E FB                 1400 	mov	r3,a
   031F A3                 1401 	inc	dptr
   0320 E0                 1402 	movx	a,@dptr
   0321 FC                 1403 	mov	r4,a
                           1404 ;	genPointerGet
                           1405 ;	genGenPointerGet
   0322 8A 82              1406 	mov	dpl,r2
   0324 8B 83              1407 	mov	dph,r3
   0326 8C F0              1408 	mov	b,r4
   0328 12s00r00           1409 	lcall	__gptrget
                           1410 ;	genCmpLt
                           1411 ;	genCmp
   032B FD                 1412 	mov	r5,a
   032C C3                 1413 	clr	c
                           1414 ;	Peephole 106	removed redundant mov
   032D 64 80              1415 	xrl	a,#0x80
   032F 94 E1              1416 	subb	a,#0xe1
                           1417 ;	genIfxJump
                           1418 ;	Peephole 112.b	changed ljmp to sjmp
                           1419 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1420 ;	genCmpGt
                           1421 ;	genCmp
   0331 40 3D              1422 	jc	00108$
                           1423 ;	Peephole 300	removed redundant label 00145$
                           1424 ;	Peephole 256.a	removed redundant clr c
                           1425 ;	Peephole 159	avoided xrl during execution
   0333 74 E6              1426 	mov	a,#(0x66 ^ 0x80)
   0335 8D F0              1427 	mov	b,r5
   0337 63 F0 80           1428 	xrl	b,#0x80
   033A 95 F0              1429 	subb	a,b
                           1430 ;	genIfxJump
                           1431 ;	Peephole 112.b	changed ljmp to sjmp
                           1432 ;	Peephole 160.a	removed sjmp by inverse jump logic
   033C 40 32              1433 	jc	00108$
                           1434 ;	Peephole 300	removed redundant label 00146$
                           1435 ;	atoh_f.c:94: result = (*c - 87)*16;
                           1436 ;	genCast
   033E ED                 1437 	mov	a,r5
   033F 33                 1438 	rlc	a
   0340 95 E0              1439 	subb	a,acc
   0342 FE                 1440 	mov	r6,a
                           1441 ;	genMinus
   0343 ED                 1442 	mov	a,r5
   0344 24 A9              1443 	add	a,#0xa9
   0346 FD                 1444 	mov	r5,a
   0347 EE                 1445 	mov	a,r6
   0348 34 FF              1446 	addc	a,#0xff
                           1447 ;	genLeftShift
                           1448 ;	genLeftShiftLiteral
                           1449 ;	genlshTwo
   034A FE                 1450 	mov	r6,a
                           1451 ;	Peephole 105	removed redundant mov
   034B C4                 1452 	swap	a
   034C 54 F0              1453 	anl	a,#0xf0
   034E CD                 1454 	xch	a,r5
   034F C4                 1455 	swap	a
   0350 CD                 1456 	xch	a,r5
   0351 6D                 1457 	xrl	a,r5
   0352 CD                 1458 	xch	a,r5
   0353 54 F0              1459 	anl	a,#0xf0
   0355 CD                 1460 	xch	a,r5
   0356 6D                 1461 	xrl	a,r5
   0357 FE                 1462 	mov	r6,a
                           1463 ;	genAssign
   0358 90s00r08           1464 	mov	dptr,#_atoh_data_result_1_1
   035B ED                 1465 	mov	a,r5
   035C F0                 1466 	movx	@dptr,a
   035D A3                 1467 	inc	dptr
   035E EE                 1468 	mov	a,r6
   035F F0                 1469 	movx	@dptr,a
                           1470 ;	atoh_f.c:95: c++;
                           1471 ;	genPlus
   0360 90s00r05           1472 	mov	dptr,#_atoh_data_c_1_1
                           1473 ;     genPlusIncr
   0363 74 01              1474 	mov	a,#0x01
                           1475 ;	Peephole 236.a	used r2 instead of ar2
   0365 2A                 1476 	add	a,r2
   0366 F0                 1477 	movx	@dptr,a
                           1478 ;	Peephole 181	changed mov to clr
   0367 E4                 1479 	clr	a
                           1480 ;	Peephole 236.b	used r3 instead of ar3
   0368 3B                 1481 	addc	a,r3
   0369 A3                 1482 	inc	dptr
   036A F0                 1483 	movx	@dptr,a
   036B A3                 1484 	inc	dptr
   036C EC                 1485 	mov	a,r4
   036D F0                 1486 	movx	@dptr,a
                           1487 ;	Peephole 112.b	changed ljmp to sjmp
   036E 80 5D              1488 	sjmp	00113$
   0370                    1489 00108$:
                           1490 ;	atoh_f.c:97: else if(*(c)>=65 && *(c)<=70)
                           1491 ;	genAssign
   0370 90s00r05           1492 	mov	dptr,#_atoh_data_c_1_1
   0373 E0                 1493 	movx	a,@dptr
   0374 FA                 1494 	mov	r2,a
   0375 A3                 1495 	inc	dptr
   0376 E0                 1496 	movx	a,@dptr
   0377 FB                 1497 	mov	r3,a
   0378 A3                 1498 	inc	dptr
   0379 E0                 1499 	movx	a,@dptr
   037A FC                 1500 	mov	r4,a
                           1501 ;	genPointerGet
                           1502 ;	genGenPointerGet
   037B 8A 82              1503 	mov	dpl,r2
   037D 8B 83              1504 	mov	dph,r3
   037F 8C F0              1505 	mov	b,r4
   0381 12s00r00           1506 	lcall	__gptrget
                           1507 ;	genCmpLt
                           1508 ;	genCmp
   0384 FD                 1509 	mov	r5,a
   0385 C3                 1510 	clr	c
                           1511 ;	Peephole 106	removed redundant mov
   0386 64 80              1512 	xrl	a,#0x80
   0388 94 C1              1513 	subb	a,#0xc1
                           1514 ;	genIfxJump
                           1515 ;	Peephole 112.b	changed ljmp to sjmp
                           1516 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1517 ;	genCmpGt
                           1518 ;	genCmp
   038A 40 3D              1519 	jc	00104$
                           1520 ;	Peephole 300	removed redundant label 00147$
                           1521 ;	Peephole 256.a	removed redundant clr c
                           1522 ;	Peephole 159	avoided xrl during execution
   038C 74 C6              1523 	mov	a,#(0x46 ^ 0x80)
   038E 8D F0              1524 	mov	b,r5
   0390 63 F0 80           1525 	xrl	b,#0x80
   0393 95 F0              1526 	subb	a,b
                           1527 ;	genIfxJump
                           1528 ;	Peephole 112.b	changed ljmp to sjmp
                           1529 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0395 40 32              1530 	jc	00104$
                           1531 ;	Peephole 300	removed redundant label 00148$
                           1532 ;	atoh_f.c:99: result = (*c - 55)*16;
                           1533 ;	genCast
   0397 ED                 1534 	mov	a,r5
   0398 33                 1535 	rlc	a
   0399 95 E0              1536 	subb	a,acc
   039B FE                 1537 	mov	r6,a
                           1538 ;	genMinus
   039C ED                 1539 	mov	a,r5
   039D 24 C9              1540 	add	a,#0xc9
   039F FD                 1541 	mov	r5,a
   03A0 EE                 1542 	mov	a,r6
   03A1 34 FF              1543 	addc	a,#0xff
                           1544 ;	genLeftShift
                           1545 ;	genLeftShiftLiteral
                           1546 ;	genlshTwo
   03A3 FE                 1547 	mov	r6,a
                           1548 ;	Peephole 105	removed redundant mov
   03A4 C4                 1549 	swap	a
   03A5 54 F0              1550 	anl	a,#0xf0
   03A7 CD                 1551 	xch	a,r5
   03A8 C4                 1552 	swap	a
   03A9 CD                 1553 	xch	a,r5
   03AA 6D                 1554 	xrl	a,r5
   03AB CD                 1555 	xch	a,r5
   03AC 54 F0              1556 	anl	a,#0xf0
   03AE CD                 1557 	xch	a,r5
   03AF 6D                 1558 	xrl	a,r5
   03B0 FE                 1559 	mov	r6,a
                           1560 ;	genAssign
   03B1 90s00r08           1561 	mov	dptr,#_atoh_data_result_1_1
   03B4 ED                 1562 	mov	a,r5
   03B5 F0                 1563 	movx	@dptr,a
   03B6 A3                 1564 	inc	dptr
   03B7 EE                 1565 	mov	a,r6
   03B8 F0                 1566 	movx	@dptr,a
                           1567 ;	atoh_f.c:100: c++;
                           1568 ;	genPlus
   03B9 90s00r05           1569 	mov	dptr,#_atoh_data_c_1_1
                           1570 ;     genPlusIncr
   03BC 74 01              1571 	mov	a,#0x01
                           1572 ;	Peephole 236.a	used r2 instead of ar2
   03BE 2A                 1573 	add	a,r2
   03BF F0                 1574 	movx	@dptr,a
                           1575 ;	Peephole 181	changed mov to clr
   03C0 E4                 1576 	clr	a
                           1577 ;	Peephole 236.b	used r3 instead of ar3
   03C1 3B                 1578 	addc	a,r3
   03C2 A3                 1579 	inc	dptr
   03C3 F0                 1580 	movx	@dptr,a
   03C4 A3                 1581 	inc	dptr
   03C5 EC                 1582 	mov	a,r4
   03C6 F0                 1583 	movx	@dptr,a
                           1584 ;	Peephole 112.b	changed ljmp to sjmp
   03C7 80 04              1585 	sjmp	00113$
   03C9                    1586 00104$:
                           1587 ;	atoh_f.c:104: return 257;
                           1588 ;	genRet
                           1589 ;	Peephole 182.b	used 16 bit load of dptr
   03C9 90 01 01           1590 	mov	dptr,#0x0101
                           1591 ;	Peephole 251.a	replaced ljmp to ret with ret
   03CC 22                 1592 	ret
   03CD                    1593 00113$:
                           1594 ;	atoh_f.c:109: if(*(c)>=48 && *(c)<=57)
                           1595 ;	genAssign
   03CD 90s00r05           1596 	mov	dptr,#_atoh_data_c_1_1
   03D0 E0                 1597 	movx	a,@dptr
   03D1 FA                 1598 	mov	r2,a
   03D2 A3                 1599 	inc	dptr
   03D3 E0                 1600 	movx	a,@dptr
   03D4 FB                 1601 	mov	r3,a
   03D5 A3                 1602 	inc	dptr
   03D6 E0                 1603 	movx	a,@dptr
   03D7 FC                 1604 	mov	r4,a
                           1605 ;	genPointerGet
                           1606 ;	genGenPointerGet
   03D8 8A 82              1607 	mov	dpl,r2
   03DA 8B 83              1608 	mov	dph,r3
   03DC 8C F0              1609 	mov	b,r4
   03DE 12s00r00           1610 	lcall	__gptrget
                           1611 ;	genCmpLt
                           1612 ;	genCmp
   03E1 FA                 1613 	mov	r2,a
   03E2 C3                 1614 	clr	c
                           1615 ;	Peephole 106	removed redundant mov
   03E3 64 80              1616 	xrl	a,#0x80
   03E5 94 B0              1617 	subb	a,#0xb0
                           1618 ;	genIfxJump
                           1619 ;	Peephole 112.b	changed ljmp to sjmp
                           1620 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1621 ;	genCmpGt
                           1622 ;	genCmp
   03E7 40 2D              1623 	jc	00124$
                           1624 ;	Peephole 300	removed redundant label 00149$
                           1625 ;	Peephole 256.a	removed redundant clr c
                           1626 ;	Peephole 159	avoided xrl during execution
   03E9 74 B9              1627 	mov	a,#(0x39 ^ 0x80)
   03EB 8A F0              1628 	mov	b,r2
   03ED 63 F0 80           1629 	xrl	b,#0x80
   03F0 95 F0              1630 	subb	a,b
                           1631 ;	genIfxJump
                           1632 ;	Peephole 112.b	changed ljmp to sjmp
                           1633 ;	Peephole 160.a	removed sjmp by inverse jump logic
   03F2 40 22              1634 	jc	00124$
                           1635 ;	Peephole 300	removed redundant label 00150$
                           1636 ;	atoh_f.c:111: result += (*c - 48);
                           1637 ;	genCast
   03F4 EA                 1638 	mov	a,r2
   03F5 33                 1639 	rlc	a
   03F6 95 E0              1640 	subb	a,acc
   03F8 FB                 1641 	mov	r3,a
                           1642 ;	genMinus
   03F9 EA                 1643 	mov	a,r2
   03FA 24 D0              1644 	add	a,#0xd0
   03FC FA                 1645 	mov	r2,a
   03FD EB                 1646 	mov	a,r3
   03FE 34 FF              1647 	addc	a,#0xff
   0400 FB                 1648 	mov	r3,a
                           1649 ;	genAssign
   0401 90s00r08           1650 	mov	dptr,#_atoh_data_result_1_1
   0404 E0                 1651 	movx	a,@dptr
   0405 FC                 1652 	mov	r4,a
   0406 A3                 1653 	inc	dptr
   0407 E0                 1654 	movx	a,@dptr
   0408 FD                 1655 	mov	r5,a
                           1656 ;	genPlus
   0409 90s00r08           1657 	mov	dptr,#_atoh_data_result_1_1
                           1658 ;	Peephole 236.g	used r2 instead of ar2
   040C EA                 1659 	mov	a,r2
                           1660 ;	Peephole 236.a	used r4 instead of ar4
   040D 2C                 1661 	add	a,r4
   040E F0                 1662 	movx	@dptr,a
                           1663 ;	Peephole 236.g	used r3 instead of ar3
   040F EB                 1664 	mov	a,r3
                           1665 ;	Peephole 236.b	used r5 instead of ar5
   0410 3D                 1666 	addc	a,r5
   0411 A3                 1667 	inc	dptr
   0412 F0                 1668 	movx	@dptr,a
   0413 02s04rAA           1669 	ljmp	00125$
   0416                    1670 00124$:
                           1671 ;	atoh_f.c:113: else if(*(c)>=97 && *(c)<=102)
                           1672 ;	genAssign
   0416 90s00r05           1673 	mov	dptr,#_atoh_data_c_1_1
   0419 E0                 1674 	movx	a,@dptr
   041A FA                 1675 	mov	r2,a
   041B A3                 1676 	inc	dptr
   041C E0                 1677 	movx	a,@dptr
   041D FB                 1678 	mov	r3,a
   041E A3                 1679 	inc	dptr
   041F E0                 1680 	movx	a,@dptr
   0420 FC                 1681 	mov	r4,a
                           1682 ;	genPointerGet
                           1683 ;	genGenPointerGet
   0421 8A 82              1684 	mov	dpl,r2
   0423 8B 83              1685 	mov	dph,r3
   0425 8C F0              1686 	mov	b,r4
   0427 12s00r00           1687 	lcall	__gptrget
                           1688 ;	genCmpLt
                           1689 ;	genCmp
   042A FA                 1690 	mov	r2,a
   042B C3                 1691 	clr	c
                           1692 ;	Peephole 106	removed redundant mov
   042C 64 80              1693 	xrl	a,#0x80
   042E 94 E1              1694 	subb	a,#0xe1
                           1695 ;	genIfxJump
                           1696 ;	Peephole 112.b	changed ljmp to sjmp
                           1697 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1698 ;	genCmpGt
                           1699 ;	genCmp
   0430 40 2C              1700 	jc	00120$
                           1701 ;	Peephole 300	removed redundant label 00151$
                           1702 ;	Peephole 256.a	removed redundant clr c
                           1703 ;	Peephole 159	avoided xrl during execution
   0432 74 E6              1704 	mov	a,#(0x66 ^ 0x80)
   0434 8A F0              1705 	mov	b,r2
   0436 63 F0 80           1706 	xrl	b,#0x80
   0439 95 F0              1707 	subb	a,b
                           1708 ;	genIfxJump
                           1709 ;	Peephole 112.b	changed ljmp to sjmp
                           1710 ;	Peephole 160.a	removed sjmp by inverse jump logic
   043B 40 21              1711 	jc	00120$
                           1712 ;	Peephole 300	removed redundant label 00152$
                           1713 ;	atoh_f.c:115: result += (*c - 87);
                           1714 ;	genCast
   043D EA                 1715 	mov	a,r2
   043E 33                 1716 	rlc	a
   043F 95 E0              1717 	subb	a,acc
   0441 FB                 1718 	mov	r3,a
                           1719 ;	genMinus
   0442 EA                 1720 	mov	a,r2
   0443 24 A9              1721 	add	a,#0xa9
   0445 FA                 1722 	mov	r2,a
   0446 EB                 1723 	mov	a,r3
   0447 34 FF              1724 	addc	a,#0xff
   0449 FB                 1725 	mov	r3,a
                           1726 ;	genAssign
   044A 90s00r08           1727 	mov	dptr,#_atoh_data_result_1_1
   044D E0                 1728 	movx	a,@dptr
   044E FC                 1729 	mov	r4,a
   044F A3                 1730 	inc	dptr
   0450 E0                 1731 	movx	a,@dptr
   0451 FD                 1732 	mov	r5,a
                           1733 ;	genPlus
   0452 90s00r08           1734 	mov	dptr,#_atoh_data_result_1_1
                           1735 ;	Peephole 236.g	used r2 instead of ar2
   0455 EA                 1736 	mov	a,r2
                           1737 ;	Peephole 236.a	used r4 instead of ar4
   0456 2C                 1738 	add	a,r4
   0457 F0                 1739 	movx	@dptr,a
                           1740 ;	Peephole 236.g	used r3 instead of ar3
   0458 EB                 1741 	mov	a,r3
                           1742 ;	Peephole 236.b	used r5 instead of ar5
   0459 3D                 1743 	addc	a,r5
   045A A3                 1744 	inc	dptr
   045B F0                 1745 	movx	@dptr,a
                           1746 ;	Peephole 112.b	changed ljmp to sjmp
   045C 80 4C              1747 	sjmp	00125$
   045E                    1748 00120$:
                           1749 ;	atoh_f.c:117: else if(*(c)>=65 && *(c)<=70)
                           1750 ;	genAssign
   045E 90s00r05           1751 	mov	dptr,#_atoh_data_c_1_1
   0461 E0                 1752 	movx	a,@dptr
   0462 FA                 1753 	mov	r2,a
   0463 A3                 1754 	inc	dptr
   0464 E0                 1755 	movx	a,@dptr
   0465 FB                 1756 	mov	r3,a
   0466 A3                 1757 	inc	dptr
   0467 E0                 1758 	movx	a,@dptr
   0468 FC                 1759 	mov	r4,a
                           1760 ;	genPointerGet
                           1761 ;	genGenPointerGet
   0469 8A 82              1762 	mov	dpl,r2
   046B 8B 83              1763 	mov	dph,r3
   046D 8C F0              1764 	mov	b,r4
   046F 12s00r00           1765 	lcall	__gptrget
                           1766 ;	genCmpLt
                           1767 ;	genCmp
   0472 FA                 1768 	mov	r2,a
   0473 C3                 1769 	clr	c
                           1770 ;	Peephole 106	removed redundant mov
   0474 64 80              1771 	xrl	a,#0x80
   0476 94 C1              1772 	subb	a,#0xc1
                           1773 ;	genIfxJump
                           1774 ;	Peephole 112.b	changed ljmp to sjmp
                           1775 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1776 ;	genCmpGt
                           1777 ;	genCmp
   0478 40 2C              1778 	jc	00116$
                           1779 ;	Peephole 300	removed redundant label 00153$
                           1780 ;	Peephole 256.a	removed redundant clr c
                           1781 ;	Peephole 159	avoided xrl during execution
   047A 74 C6              1782 	mov	a,#(0x46 ^ 0x80)
   047C 8A F0              1783 	mov	b,r2
   047E 63 F0 80           1784 	xrl	b,#0x80
   0481 95 F0              1785 	subb	a,b
                           1786 ;	genIfxJump
                           1787 ;	Peephole 112.b	changed ljmp to sjmp
                           1788 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0483 40 21              1789 	jc	00116$
                           1790 ;	Peephole 300	removed redundant label 00154$
                           1791 ;	atoh_f.c:119: result += (*c - 55);
                           1792 ;	genCast
   0485 EA                 1793 	mov	a,r2
   0486 33                 1794 	rlc	a
   0487 95 E0              1795 	subb	a,acc
   0489 FB                 1796 	mov	r3,a
                           1797 ;	genMinus
   048A EA                 1798 	mov	a,r2
   048B 24 C9              1799 	add	a,#0xc9
   048D FA                 1800 	mov	r2,a
   048E EB                 1801 	mov	a,r3
   048F 34 FF              1802 	addc	a,#0xff
   0491 FB                 1803 	mov	r3,a
                           1804 ;	genAssign
   0492 90s00r08           1805 	mov	dptr,#_atoh_data_result_1_1
   0495 E0                 1806 	movx	a,@dptr
   0496 FC                 1807 	mov	r4,a
   0497 A3                 1808 	inc	dptr
   0498 E0                 1809 	movx	a,@dptr
   0499 FD                 1810 	mov	r5,a
                           1811 ;	genPlus
   049A 90s00r08           1812 	mov	dptr,#_atoh_data_result_1_1
                           1813 ;	Peephole 236.g	used r2 instead of ar2
   049D EA                 1814 	mov	a,r2
                           1815 ;	Peephole 236.a	used r4 instead of ar4
   049E 2C                 1816 	add	a,r4
   049F F0                 1817 	movx	@dptr,a
                           1818 ;	Peephole 236.g	used r3 instead of ar3
   04A0 EB                 1819 	mov	a,r3
                           1820 ;	Peephole 236.b	used r5 instead of ar5
   04A1 3D                 1821 	addc	a,r5
   04A2 A3                 1822 	inc	dptr
   04A3 F0                 1823 	movx	@dptr,a
                           1824 ;	Peephole 112.b	changed ljmp to sjmp
   04A4 80 04              1825 	sjmp	00125$
   04A6                    1826 00116$:
                           1827 ;	atoh_f.c:123: return 257;
                           1828 ;	genRet
                           1829 ;	Peephole 182.b	used 16 bit load of dptr
   04A6 90 01 01           1830 	mov	dptr,#0x0101
                           1831 ;	Peephole 112.b	changed ljmp to sjmp
                           1832 ;	Peephole 251.b	replaced sjmp to ret with ret
   04A9 22                 1833 	ret
   04AA                    1834 00125$:
                           1835 ;	atoh_f.c:125: return result;
                           1836 ;	genAssign
   04AA 90s00r08           1837 	mov	dptr,#_atoh_data_result_1_1
   04AD E0                 1838 	movx	a,@dptr
   04AE FA                 1839 	mov	r2,a
   04AF A3                 1840 	inc	dptr
   04B0 E0                 1841 	movx	a,@dptr
                           1842 ;	genRet
                           1843 ;	Peephole 234.b	loading dph directly from a(ccumulator), r3 not set
   04B1 8A 82              1844 	mov	dpl,r2
   04B3 F5 83              1845 	mov	dph,a
                           1846 ;	Peephole 300	removed redundant label 00127$
   04B5 22                 1847 	ret
                           1848 ;------------------------------------------------------------
                           1849 ;Allocation info for local variables in function 'ctoa'
                           1850 ;------------------------------------------------------------
                           1851 ;c                         Allocated with name '_ctoa_c_1_1'
                           1852 ;i                         Allocated with name '_ctoa_i_1_1'
                           1853 ;d                         Allocated with name '_ctoa_d_1_1'
                           1854 ;------------------------------------------------------------
                           1855 ;	atoh_f.c:128: char ctoa(int c)
                           1856 ;	-----------------------------------------
                           1857 ;	 function ctoa
                           1858 ;	-----------------------------------------
   04B6                    1859 _ctoa:
                           1860 ;	genReceive
   04B6 AA 83              1861 	mov	r2,dph
   04B8 E5 82              1862 	mov	a,dpl
   04BA 90s00r0A           1863 	mov	dptr,#_ctoa_c_1_1
   04BD F0                 1864 	movx	@dptr,a
   04BE A3                 1865 	inc	dptr
   04BF EA                 1866 	mov	a,r2
   04C0 F0                 1867 	movx	@dptr,a
                           1868 ;	atoh_f.c:130: char d=0x30;
                           1869 ;	genAssign
   04C1 90s00r0C           1870 	mov	dptr,#_ctoa_d_1_1
   04C4 74 30              1871 	mov	a,#0x30
   04C6 F0                 1872 	movx	@dptr,a
                           1873 ;	atoh_f.c:131: for(i=0;i<16;i++)
                           1874 ;	genAssign
   04C7 90s00r0A           1875 	mov	dptr,#_ctoa_c_1_1
   04CA E0                 1876 	movx	a,@dptr
   04CB FA                 1877 	mov	r2,a
   04CC A3                 1878 	inc	dptr
   04CD E0                 1879 	movx	a,@dptr
   04CE FB                 1880 	mov	r3,a
                           1881 ;	genAssign
   04CF 7C 30              1882 	mov	r4,#0x30
                           1883 ;	genAssign
   04D1 7D 00              1884 	mov	r5,#0x00
   04D3 7E 00              1885 	mov	r6,#0x00
   04D5                    1886 00104$:
                           1887 ;	genCmpLt
                           1888 ;	genCmp
   04D5 C3                 1889 	clr	c
   04D6 ED                 1890 	mov	a,r5
   04D7 94 10              1891 	subb	a,#0x10
   04D9 EE                 1892 	mov	a,r6
   04DA 64 80              1893 	xrl	a,#0x80
   04DC 94 80              1894 	subb	a,#0x80
                           1895 ;	genIfxJump
                           1896 ;	Peephole 108.a	removed ljmp by inverse jump logic
   04DE 50 1D              1897 	jnc	00108$
                           1898 ;	Peephole 300	removed redundant label 00113$
                           1899 ;	atoh_f.c:133: if(c==i)
                           1900 ;	genCmpEq
                           1901 ;	gencjneshort
   04E0 EA                 1902 	mov	a,r2
                           1903 ;	Peephole 112.b	changed ljmp to sjmp
                           1904 ;	Peephole 197.b	optimized misc jump sequence
   04E1 B5 05 0C           1905 	cjne	a,ar5,00102$
   04E4 EB                 1906 	mov	a,r3
   04E5 B5 06 08           1907 	cjne	a,ar6,00102$
                           1908 ;	Peephole 200.b	removed redundant sjmp
                           1909 ;	Peephole 300	removed redundant label 00114$
                           1910 ;	Peephole 300	removed redundant label 00115$
                           1911 ;	atoh_f.c:135: return d;
                           1912 ;	genAssign
   04E8 90s00r0C           1913 	mov	dptr,#_ctoa_d_1_1
   04EB E0                 1914 	movx	a,@dptr
                           1915 ;	genRet
   04EC FF                 1916 	mov	r7,a
                           1917 ;	Peephole 244.c	loading dpl from a instead of r7
   04ED F5 82              1918 	mov	dpl,a
                           1919 ;	atoh_f.c:136: break;
                           1920 ;	Peephole 112.b	changed ljmp to sjmp
                           1921 ;	Peephole 251.b	replaced sjmp to ret with ret
   04EF 22                 1922 	ret
   04F0                    1923 00102$:
                           1924 ;	atoh_f.c:138: else{d++;}
                           1925 ;	genPlus
                           1926 ;     genPlusIncr
   04F0 0C                 1927 	inc	r4
                           1928 ;	genAssign
   04F1 90s00r0C           1929 	mov	dptr,#_ctoa_d_1_1
   04F4 EC                 1930 	mov	a,r4
   04F5 F0                 1931 	movx	@dptr,a
                           1932 ;	atoh_f.c:131: for(i=0;i<16;i++)
                           1933 ;	genPlus
                           1934 ;     genPlusIncr
                           1935 ;	tail increment optimized (range 10)
   04F6 0D                 1936 	inc	r5
   04F7 BD 00 DB           1937 	cjne	r5,#0x00,00104$
   04FA 0E                 1938 	inc	r6
                           1939 ;	Peephole 112.b	changed ljmp to sjmp
   04FB 80 D8              1940 	sjmp	00104$
   04FD                    1941 00108$:
   04FD 22                 1942 	ret
                           1943 	.area CSEG    (CODE)
                           1944 	.area CONST   (CODE)
                           1945 	.area XINIT   (CODE)
   0000                    1946 __xinit__write:
   0000 00 A0              1947 	.byte #0x00,#0xA0
   0002                    1948 __xinit__read:
   0002 00 C0              1949 	.byte #0x00,#0xC0
